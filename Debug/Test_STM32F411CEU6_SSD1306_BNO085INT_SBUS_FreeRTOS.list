
Test_STM32F411CEU6_SSD1306_BNO085INT_SBUS_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012754  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  080128f8  080128f8  000138f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137fc  080137fc  00015244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080137fc  080137fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013804  08013804  00015244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013804  08013804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013808  08013808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  0801380c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d60  20000244  08013a50  00015244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005fa4  08013a50  00015fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026e94  00000000  00000000  00015274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005250  00000000  00000000  0003c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f0  00000000  00000000  00041358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000793f  00000000  00000000  00043448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024f9e  00000000  00000000  0004ad87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a4302  00000000  00000000  0006fd25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00114027  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000198e  00000000  00000000  0011406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009db0  00000000  00000000  001159f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0011f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080128dc 	.word	0x080128dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	080128dc 	.word	0x080128dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <__NVIC_SystemReset+0x24>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ef6:	4904      	ldr	r1, [pc, #16]	@ (8000f08 <__NVIC_SystemReset+0x24>)
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <__NVIC_SystemReset+0x28>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000efe:	f3bf 8f4f 	dsb	sy
}
 8000f02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <__NVIC_SystemReset+0x20>
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	05fa0004 	.word	0x05fa0004

08000f10 <i2c_bus_scan>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Modified I2C bus scanner: stores found addresses in a string buffer
void i2c_bus_scan(char *found_devices, size_t bufsize) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	char addr_str[8];
	uint8_t first = 1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	75fb      	strb	r3, [r7, #23]
	found_devices[0] = '\0';
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]

	for (uint8_t addr = 1; addr < 127; addr++) {
 8000f24:	2301      	movs	r3, #1
 8000f26:	75bb      	strb	r3, [r7, #22]
 8000f28:	e033      	b.n	8000f92 <i2c_bus_scan+0x82>
		if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 8000f2a:	7dbb      	ldrb	r3, [r7, #22]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	b299      	uxth	r1, r3
 8000f32:	230a      	movs	r3, #10
 8000f34:	2201      	movs	r2, #1
 8000f36:	481b      	ldr	r0, [pc, #108]	@ (8000fa4 <i2c_bus_scan+0x94>)
 8000f38:	f007 fe84 	bl	8008c44 <HAL_I2C_IsDeviceReady>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d124      	bne.n	8000f8c <i2c_bus_scan+0x7c>
			if (!first) {
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10b      	bne.n	8000f60 <i2c_bus_scan+0x50>
				strncat(found_devices, ",",
						bufsize - strlen(found_devices) - 1);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff f999 	bl	8000280 <strlen>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	1a9b      	subs	r3, r3, r2
				strncat(found_devices, ",",
 8000f54:	3b01      	subs	r3, #1
 8000f56:	461a      	mov	r2, r3
 8000f58:	4913      	ldr	r1, [pc, #76]	@ (8000fa8 <i2c_bus_scan+0x98>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f00f f9b3 	bl	80102c6 <strncat>
			}
			snprintf(addr_str, sizeof(addr_str), "0x%02X", addr);
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	f107 000c 	add.w	r0, r7, #12
 8000f66:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <i2c_bus_scan+0x9c>)
 8000f68:	2108      	movs	r1, #8
 8000f6a:	f00f f92b 	bl	80101c4 <sniprintf>
			strncat(found_devices, addr_str,
					bufsize - strlen(found_devices) - 1);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff f986 	bl	8000280 <strlen>
 8000f74:	4602      	mov	r2, r0
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	1a9b      	subs	r3, r3, r2
			strncat(found_devices, addr_str,
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f00f f99f 	bl	80102c6 <strncat>
			first = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
	for (uint8_t addr = 1; addr < 127; addr++) {
 8000f8c:	7dbb      	ldrb	r3, [r7, #22]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	75bb      	strb	r3, [r7, #22]
 8000f92:	7dbb      	ldrb	r3, [r7, #22]
 8000f94:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f96:	d9c8      	bls.n	8000f2a <i2c_bus_scan+0x1a>
		}
	}
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000260 	.word	0x20000260
 8000fa8:	08012978 	.word	0x08012978
 8000fac:	0801297c 	.word	0x0801297c

08000fb0 <bno085_read_chip_id>:

// Read BNO085 Chip ID register (Register 0x00)
uint8_t bno085_read_chip_id() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af02      	add	r7, sp, #8
	uint8_t reg = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t id = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Master_Transmit(&hi2c1, BNO085_ADDR, &reg, 1, HAL_MAX_DELAY)
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2194      	movs	r1, #148	@ 0x94
 8000fca:	480d      	ldr	r0, [pc, #52]	@ (8001000 <bno085_read_chip_id+0x50>)
 8000fcc:	f007 fa10 	bl	80083f0 <HAL_I2C_Master_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <bno085_read_chip_id+0x2a>
			!= HAL_OK)
		return 0xFF; // Indicate error
 8000fd6:	23ff      	movs	r3, #255	@ 0xff
 8000fd8:	e00e      	b.n	8000ff8 <bno085_read_chip_id+0x48>
	if (HAL_I2C_Master_Receive(&hi2c1, BNO085_ADDR, &id, 1, HAL_MAX_DELAY)
 8000fda:	1dba      	adds	r2, r7, #6
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2194      	movs	r1, #148	@ 0x94
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <bno085_read_chip_id+0x50>)
 8000fe8:	f007 fb00 	bl	80085ec <HAL_I2C_Master_Receive>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <bno085_read_chip_id+0x46>
			!= HAL_OK)
		return 0xFF; // Indicate error
 8000ff2:	23ff      	movs	r3, #255	@ 0xff
 8000ff4:	e000      	b.n	8000ff8 <bno085_read_chip_id+0x48>
	return id;
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000260 	.word	0x20000260

08001004 <sh2_event_callback>:

void sh2_event_callback(void *cookie, sh2_AsyncEvent_t *pEvent) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	// Optional: handle async events (reset, etc.)
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <sh2_sensor_handler>:

static void sh2_sensor_handler(void *cookie, sh2_SensorEvent_t *event) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b09e      	sub	sp, #120	@ 0x78
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	// Handle sensor events from BNO085
	sh2_SensorValue_t value;
	if (sh2_decodeSensorEvent(&value, event) == 0) {
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	6839      	ldr	r1, [r7, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fff9 	bl	8005024 <sh2_decodeSensorEvent>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d15c      	bne.n	80010f2 <sh2_sensor_handler+0xd6>
		if (value.sensorId == SH2_ROTATION_VECTOR) {
 8001038:	7a3b      	ldrb	r3, [r7, #8]
 800103a:	2b05      	cmp	r3, #5
 800103c:	d159      	bne.n	80010f2 <sh2_sensor_handler+0xd6>
			float q0 = value.un.rotationVector.real;
 800103e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001040:	673b      	str	r3, [r7, #112]	@ 0x70
			float q1 = value.un.rotationVector.i;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	66fb      	str	r3, [r7, #108]	@ 0x6c
			float q2 = value.un.rotationVector.j;
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	66bb      	str	r3, [r7, #104]	@ 0x68
			float q3 = value.un.rotationVector.k;
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	667b      	str	r3, [r7, #100]	@ 0x64
			float t3 = 2.0f * (q0 * q3 + q1 * q2);
 800104e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001052:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800105e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800106e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			float t4 = 1.0f - 2.0f * (q2 * q2 + q3 * q3);
 8001072:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001076:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800107a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800107e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001086:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800108a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001092:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
			float yaw = atan2f(t3, t4);
 8001096:	edd7 0a17 	vldr	s1, [r7, #92]	@ 0x5c
 800109a:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800109e:	f011 fa49 	bl	8012534 <atan2f>
 80010a2:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
			float yaw_deg = yaw * (180.0f / (float) M_PI);
 80010a6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80010aa:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80010fc <sh2_sensor_handler+0xe0>
 80010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
			if (yaw_deg < 0)
 80010b6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80010ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	d507      	bpl.n	80010d4 <sh2_sensor_handler+0xb8>
				yaw_deg += 360.0f;
 80010c4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80010c8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001100 <sh2_sensor_handler+0xe4>
 80010cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010d0:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
			osMutexAcquire(CompassMutexHandle, osWaitForever);
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <sh2_sensor_handler+0xe8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	4618      	mov	r0, r3
 80010de:	f00b f9f8 	bl	800c4d2 <osMutexAcquire>
			compass_heading_deg = yaw_deg;
 80010e2:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <sh2_sensor_handler+0xec>)
 80010e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010e6:	6013      	str	r3, [r2, #0]
			osMutexRelease(CompassMutexHandle);
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <sh2_sensor_handler+0xe8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00b fa3b 	bl	800c568 <osMutexRelease>
		}
	}
}
 80010f2:	bf00      	nop
 80010f4:	3778      	adds	r7, #120	@ 0x78
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	42652ee0 	.word	0x42652ee0
 8001100:	43b40000 	.word	0x43b40000
 8001104:	20000408 	.word	0x20000408
 8001108:	2000046c 	.word	0x2000046c

0800110c <bno085_setup>:

void bno085_setup(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	sh2_hal.open = sh2_hal_open;
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <bno085_setup+0x78>)
 8001112:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <bno085_setup+0x7c>)
 8001114:	601a      	str	r2, [r3, #0]
	sh2_hal.close = sh2_hal_close;
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <bno085_setup+0x78>)
 8001118:	4a1c      	ldr	r2, [pc, #112]	@ (800118c <bno085_setup+0x80>)
 800111a:	605a      	str	r2, [r3, #4]
	sh2_hal.read = sh2_hal_read;
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <bno085_setup+0x78>)
 800111e:	4a1c      	ldr	r2, [pc, #112]	@ (8001190 <bno085_setup+0x84>)
 8001120:	609a      	str	r2, [r3, #8]
	sh2_hal.write = sh2_hal_write;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <bno085_setup+0x78>)
 8001124:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <bno085_setup+0x88>)
 8001126:	60da      	str	r2, [r3, #12]
	sh2_hal.getTimeUs = sh2_hal_getTimeUs;
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <bno085_setup+0x78>)
 800112a:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <bno085_setup+0x8c>)
 800112c:	611a      	str	r2, [r3, #16]

	sh2_open(&sh2_hal, sh2_event_callback, NULL);
 800112e:	2200      	movs	r2, #0
 8001130:	491a      	ldr	r1, [pc, #104]	@ (800119c <bno085_setup+0x90>)
 8001132:	4814      	ldr	r0, [pc, #80]	@ (8001184 <bno085_setup+0x78>)
 8001134:	f003 fe60 	bl	8004df8 <sh2_open>
	sh2_setSensorCallback(sh2_sensor_handler, NULL);
 8001138:	2100      	movs	r1, #0
 800113a:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <bno085_setup+0x94>)
 800113c:	f003 ff0a 	bl	8004f54 <sh2_setSensorCallback>

	sh2_config.changeSensitivityEnabled = false;
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <bno085_setup+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
	sh2_config.changeSensitivityRelative = false;
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <bno085_setup+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	705a      	strb	r2, [r3, #1]
	sh2_config.wakeupEnabled = false;
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <bno085_setup+0x98>)
 800114e:	2200      	movs	r2, #0
 8001150:	709a      	strb	r2, [r3, #2]
	sh2_config.alwaysOnEnabled = false;
 8001152:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <bno085_setup+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	70da      	strb	r2, [r3, #3]
	sh2_config.sniffEnabled = false;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <bno085_setup+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	711a      	strb	r2, [r3, #4]
	sh2_config.changeSensitivity = 0;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <bno085_setup+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	80da      	strh	r2, [r3, #6]
	sh2_config.reportInterval_us = 10000; // 100Hz
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <bno085_setup+0x98>)
 8001166:	f242 7210 	movw	r2, #10000	@ 0x2710
 800116a:	609a      	str	r2, [r3, #8]
	//sh2_config.reportInterval_us = 20000; // 50Hz
	sh2_config.batchInterval_us = 0;
 800116c:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <bno085_setup+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
	sh2_config.sensorSpecific = 0;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <bno085_setup+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]

	sh2_setSensorConfig(SH2_ROTATION_VECTOR, &sh2_config);
 8001178:	490a      	ldr	r1, [pc, #40]	@ (80011a4 <bno085_setup+0x98>)
 800117a:	2005      	movs	r0, #5
 800117c:	f003 ff00 	bl	8004f80 <sh2_setSensorConfig>
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200004c8 	.word	0x200004c8
 8001188:	0800647d 	.word	0x0800647d
 800118c:	08006493 	.word	0x08006493
 8001190:	080064a9 	.word	0x080064a9
 8001194:	08006521 	.word	0x08006521
 8001198:	0800657d 	.word	0x0800657d
 800119c:	08001005 	.word	0x08001005
 80011a0:	0800101d 	.word	0x0800101d
 80011a4:	200004dc 	.word	0x200004dc

080011a8 <sbus_to_percentage>:

// Convert SBUS channel value (172-1811) to percentage (-100 to +100)
int16_t sbus_to_percentage(uint16_t sbus_value) {
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
	if (sbus_value < 172)
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	2bab      	cmp	r3, #171	@ 0xab
 80011b6:	d801      	bhi.n	80011bc <sbus_to_percentage+0x14>
		sbus_value = 172;
 80011b8:	23ac      	movs	r3, #172	@ 0xac
 80011ba:	80fb      	strh	r3, [r7, #6]
	if (sbus_value > 1811)
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	f240 7213 	movw	r2, #1811	@ 0x713
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d902      	bls.n	80011cc <sbus_to_percentage+0x24>
		sbus_value = 1811;
 80011c6:	f240 7313 	movw	r3, #1811	@ 0x713
 80011ca:	80fb      	strh	r3, [r7, #6]

	int16_t result = (int16_t) (((int32_t) sbus_value - 992) * 100 / 820);
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 80011d2:	2264      	movs	r2, #100	@ 0x64
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	4a0c      	ldr	r2, [pc, #48]	@ (800120c <sbus_to_percentage+0x64>)
 80011da:	fb82 1203 	smull	r1, r2, r2, r3
 80011de:	1212      	asrs	r2, r2, #8
 80011e0:	17db      	asrs	r3, r3, #31
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	81fb      	strh	r3, [r7, #14]

	// Optional: Dead zone of ±5%
	if (result >= -5 && result <= 5) {
 80011e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ea:	f113 0f05 	cmn.w	r3, #5
 80011ee:	db05      	blt.n	80011fc <sbus_to_percentage+0x54>
 80011f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	dc01      	bgt.n	80011fc <sbus_to_percentage+0x54>
		result = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	81fb      	strh	r3, [r7, #14]
	}

	return result;
 80011fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	4fec04ff 	.word	0x4fec04ff

08001210 <calculate_omni_motor_speeds>:
// Calculate individual motor speeds for 3-wheel omnidirectional robot
// x: Left/Right movement (-100 to +100) - Positive = Right, Negative = Left
// y: Forward/Backward movement (-100 to +100) - Positive = Forward, Negative = Backward
// rotation: Rotational movement (-100 to +100) - Positive = Clockwise, Negative = Counter-clockwise
void calculate_omni_motor_speeds(int16_t x, int16_t y, int16_t rotation,
		int16_t *left_front, int16_t *right_front, int16_t *back) {
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	@ 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4603      	mov	r3, r0
 800121a:	81fb      	strh	r3, [r7, #14]
 800121c:	460b      	mov	r3, r1
 800121e:	81bb      	strh	r3, [r7, #12]
 8001220:	4613      	mov	r3, r2
 8001222:	817b      	strh	r3, [r7, #10]
	// Left Front (Motor 1B):   +0.5*x + 0.866*y - rotation  (FIXED: was +rotation)
	// Right Front (Motor 1A):  +0.5*x - 0.866*y - rotation  (FIXED: was +rotation)
	// Back (Motor 2A):         -1.0*x + 0*y - rotation      (FIXED: was +rotation)

	// Use integer math (multiply by 100 to maintain precision, then divide)
	int32_t lf = (+50 * x + 87 * y - 100 * rotation) / 100; // Left Front (FIXED)
 8001224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001228:	2232      	movs	r2, #50	@ 0x32
 800122a:	fb03 f202 	mul.w	r2, r3, r2
 800122e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001232:	2157      	movs	r1, #87	@ 0x57
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	441a      	add	r2, r3
 800123a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800123e:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	4413      	add	r3, r2
 8001248:	4a2e      	ldr	r2, [pc, #184]	@ (8001304 <calculate_omni_motor_speeds+0xf4>)
 800124a:	fb82 1203 	smull	r1, r2, r2, r3
 800124e:	1152      	asrs	r2, r2, #5
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	61fb      	str	r3, [r7, #28]
	int32_t rf = (+50 * x - 87 * y - 100 * rotation) / 100; // Right Front (FIXED)
 8001256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800125a:	2232      	movs	r2, #50	@ 0x32
 800125c:	fb03 f202 	mul.w	r2, r3, r2
 8001260:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001264:	f06f 0156 	mvn.w	r1, #86	@ 0x56
 8001268:	fb01 f303 	mul.w	r3, r1, r3
 800126c:	441a      	add	r2, r3
 800126e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001272:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	4413      	add	r3, r2
 800127c:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <calculate_omni_motor_speeds+0xf4>)
 800127e:	fb82 1203 	smull	r1, r2, r2, r3
 8001282:	1152      	asrs	r2, r2, #5
 8001284:	17db      	asrs	r3, r3, #31
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	61bb      	str	r3, [r7, #24]
	int32_t bk = (-100 * x + 0 * y - 100 * rotation) / 100;  // Back (FIXED)
 800128a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800128e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001292:	4413      	add	r3, r2
 8001294:	425b      	negs	r3, r3
 8001296:	617b      	str	r3, [r7, #20]

	// Clamp to -100 to +100
	if (lf > 100)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b64      	cmp	r3, #100	@ 0x64
 800129c:	dd01      	ble.n	80012a2 <calculate_omni_motor_speeds+0x92>
		lf = 100;
 800129e:	2364      	movs	r3, #100	@ 0x64
 80012a0:	61fb      	str	r3, [r7, #28]
	if (lf < -100)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80012a8:	da02      	bge.n	80012b0 <calculate_omni_motor_speeds+0xa0>
		lf = -100;
 80012aa:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80012ae:	61fb      	str	r3, [r7, #28]
	if (rf > 100)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b64      	cmp	r3, #100	@ 0x64
 80012b4:	dd01      	ble.n	80012ba <calculate_omni_motor_speeds+0xaa>
		rf = 100;
 80012b6:	2364      	movs	r3, #100	@ 0x64
 80012b8:	61bb      	str	r3, [r7, #24]
	if (rf < -100)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80012c0:	da02      	bge.n	80012c8 <calculate_omni_motor_speeds+0xb8>
		rf = -100;
 80012c2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80012c6:	61bb      	str	r3, [r7, #24]
	if (bk > 100)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b64      	cmp	r3, #100	@ 0x64
 80012cc:	dd01      	ble.n	80012d2 <calculate_omni_motor_speeds+0xc2>
		bk = 100;
 80012ce:	2364      	movs	r3, #100	@ 0x64
 80012d0:	617b      	str	r3, [r7, #20]
	if (bk < -100)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80012d8:	da02      	bge.n	80012e0 <calculate_omni_motor_speeds+0xd0>
		bk = -100;
 80012da:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80012de:	617b      	str	r3, [r7, #20]

	*left_front = (int16_t) lf;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	801a      	strh	r2, [r3, #0]
	*right_front = (int16_t) rf;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ee:	801a      	strh	r2, [r3, #0]
	*back = (int16_t) bk;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f6:	801a      	strh	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3724      	adds	r7, #36	@ 0x24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	51eb851f 	.word	0x51eb851f

08001308 <calculate_omni_motor_speeds_with_heading>:
// y: Forward/Backward movement (-100 to +100) - Positive = Forward, Negative = Backward
// rotation: Rotational movement (-100 to +100)
// heading_correction: PID output for heading lock (-100 to +100)
void calculate_omni_motor_speeds_with_heading(int16_t x, int16_t y,
		int16_t rotation, float heading_correction, int16_t *left_front,
		int16_t *right_front, int16_t *back) {
 8001308:	b480      	push	{r7}
 800130a:	b08b      	sub	sp, #44	@ 0x2c
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	4603      	mov	r3, r0
 8001316:	81fb      	strh	r3, [r7, #14]
 8001318:	460b      	mov	r3, r1
 800131a:	81bb      	strh	r3, [r7, #12]
 800131c:	4613      	mov	r3, r2
 800131e:	817b      	strh	r3, [r7, #10]

	// Blend manual rotation with heading correction
	// Give priority to manual input when operator is actively rotating
	float manual_rotation_f = (float) rotation;
 8001320:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	edc7 7a05 	vstr	s15, [r7, #20]
	float total_rotation;

	if (fabs(manual_rotation_f) > 10.0f) {
 8001330:	edd7 7a05 	vldr	s15, [r7, #20]
 8001334:	eef0 7ae7 	vabs.f32	s15, s15
 8001338:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800133c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	dd0c      	ble.n	8001360 <calculate_omni_motor_speeds_with_heading+0x58>
		// Manual rotation is active - blend with less heading correction
		total_rotation = manual_rotation_f + (heading_correction * 0.3f);
 8001346:	edd7 7a01 	vldr	s15, [r7, #4]
 800134a:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001494 <calculate_omni_motor_speeds_with_heading+0x18c>
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001352:	ed97 7a05 	vldr	s14, [r7, #20]
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800135e:	e007      	b.n	8001370 <calculate_omni_motor_speeds_with_heading+0x68>
	} else {
		// No manual rotation - use full heading correction
		total_rotation = manual_rotation_f + heading_correction;
 8001360:	ed97 7a05 	vldr	s14, [r7, #20]
 8001364:	edd7 7a01 	vldr	s15, [r7, #4]
 8001368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	// Clamp total rotation to prevent overflow
	if (total_rotation > 100.0f)
 8001370:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001374:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001498 <calculate_omni_motor_speeds_with_heading+0x190>
 8001378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	dd01      	ble.n	8001386 <calculate_omni_motor_speeds_with_heading+0x7e>
		total_rotation = 100.0f;
 8001382:	4b46      	ldr	r3, [pc, #280]	@ (800149c <calculate_omni_motor_speeds_with_heading+0x194>)
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
	if (total_rotation < -100.0f)
 8001386:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800138a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80014a0 <calculate_omni_motor_speeds_with_heading+0x198>
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d501      	bpl.n	800139c <calculate_omni_motor_speeds_with_heading+0x94>
		total_rotation = -100.0f;
 8001398:	4b42      	ldr	r3, [pc, #264]	@ (80014a4 <calculate_omni_motor_speeds_with_heading+0x19c>)
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24

	// 3-wheel omnidirectional kinematics with heading correction - FIXED ROTATION
	int32_t lf = (+50 * x + 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 800139c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a0:	2232      	movs	r2, #50	@ 0x32
 80013a2:	fb03 f202 	mul.w	r2, r3, r2
 80013a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013aa:	2157      	movs	r1, #87	@ 0x57
 80013ac:	fb01 f303 	mul.w	r3, r1, r3
 80013b0:	441a      	add	r2, r3
 80013b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ba:	ee17 1a90 	vmov	r1, s15
 80013be:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80013c2:	fb01 f303 	mul.w	r3, r1, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	4a37      	ldr	r2, [pc, #220]	@ (80014a8 <calculate_omni_motor_speeds_with_heading+0x1a0>)
 80013ca:	fb82 1203 	smull	r1, r2, r2, r3
 80013ce:	1152      	asrs	r2, r2, #5
 80013d0:	17db      	asrs	r3, r3, #31
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	623b      	str	r3, [r7, #32]
	int32_t rf = (+50 * x - 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 80013d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013da:	2232      	movs	r2, #50	@ 0x32
 80013dc:	fb03 f202 	mul.w	r2, r3, r2
 80013e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013e4:	f06f 0156 	mvn.w	r1, #86	@ 0x56
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	441a      	add	r2, r3
 80013ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f6:	ee17 1a90 	vmov	r1, s15
 80013fa:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4413      	add	r3, r2
 8001404:	4a28      	ldr	r2, [pc, #160]	@ (80014a8 <calculate_omni_motor_speeds_with_heading+0x1a0>)
 8001406:	fb82 1203 	smull	r1, r2, r2, r3
 800140a:	1152      	asrs	r2, r2, #5
 800140c:	17db      	asrs	r3, r3, #31
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	61fb      	str	r3, [r7, #28]
	int32_t bk = (-100 * x + 0 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 8001412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001416:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800141a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141e:	ee17 2a90 	vmov	r2, s15
 8001422:	4413      	add	r3, r2
 8001424:	425b      	negs	r3, r3
 8001426:	61bb      	str	r3, [r7, #24]

	// Clamp to -100 to +100
	if (lf > 100)
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	2b64      	cmp	r3, #100	@ 0x64
 800142c:	dd01      	ble.n	8001432 <calculate_omni_motor_speeds_with_heading+0x12a>
		lf = 100;
 800142e:	2364      	movs	r3, #100	@ 0x64
 8001430:	623b      	str	r3, [r7, #32]
	if (lf < -100)
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001438:	da02      	bge.n	8001440 <calculate_omni_motor_speeds_with_heading+0x138>
		lf = -100;
 800143a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800143e:	623b      	str	r3, [r7, #32]
	if (rf > 100)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b64      	cmp	r3, #100	@ 0x64
 8001444:	dd01      	ble.n	800144a <calculate_omni_motor_speeds_with_heading+0x142>
		rf = 100;
 8001446:	2364      	movs	r3, #100	@ 0x64
 8001448:	61fb      	str	r3, [r7, #28]
	if (rf < -100)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001450:	da02      	bge.n	8001458 <calculate_omni_motor_speeds_with_heading+0x150>
		rf = -100;
 8001452:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001456:	61fb      	str	r3, [r7, #28]
	if (bk > 100)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b64      	cmp	r3, #100	@ 0x64
 800145c:	dd01      	ble.n	8001462 <calculate_omni_motor_speeds_with_heading+0x15a>
		bk = 100;
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	61bb      	str	r3, [r7, #24]
	if (bk < -100)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001468:	da02      	bge.n	8001470 <calculate_omni_motor_speeds_with_heading+0x168>
		bk = -100;
 800146a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800146e:	61bb      	str	r3, [r7, #24]

	*left_front = (int16_t) lf;
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	b21a      	sxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	801a      	strh	r2, [r3, #0]
	*right_front = (int16_t) rf;
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	b21a      	sxth	r2, r3
 800147c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147e:	801a      	strh	r2, [r3, #0]
	*back = (int16_t) bk;
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	b21a      	sxth	r2, r3
 8001484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001486:	801a      	strh	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	372c      	adds	r7, #44	@ 0x2c
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	3e99999a 	.word	0x3e99999a
 8001498:	42c80000 	.word	0x42c80000
 800149c:	42c80000 	.word	0x42c80000
 80014a0:	c2c80000 	.word	0xc2c80000
 80014a4:	c2c80000 	.word	0xc2c80000
 80014a8:	51eb851f 	.word	0x51eb851f

080014ac <apply_motor_speeds_3wheel>:

// Apply motor speeds to actual motors (3-wheel configuration)
void apply_motor_speeds_3wheel(int16_t left_front, int16_t right_front,
		int16_t back) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	460b      	mov	r3, r1
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	807b      	strh	r3, [r7, #2]
	const uint16_t pwm_val1 = 49; // For TIM1 (100% duty if Period = 49)
 80014be:	2331      	movs	r3, #49	@ 0x31
 80014c0:	81fb      	strh	r3, [r7, #14]

	// Motor 1B - Left Front
	if (left_front == 0) {
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d103      	bne.n	80014d2 <apply_motor_speeds_3wheel+0x26>
		tb6612fng_brake(MOTOR_1B);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f003 f838 	bl	8004540 <tb6612fng_brake>
 80014d0:	e027      	b.n	8001522 <apply_motor_speeds_3wheel+0x76>
	} else if (left_front > 0) {
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dd11      	ble.n	80014fe <apply_motor_speeds_3wheel+0x52>
		tb6612fng_drive(MOTOR_1B, TB6612FNG_FORWARD,
				(pwm_val1 * left_front) / 100);
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	4a41      	ldr	r2, [pc, #260]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 80014e6:	fb82 1203 	smull	r1, r2, r2, r3
 80014ea:	1152      	asrs	r2, r2, #5
 80014ec:	17db      	asrs	r3, r3, #31
 80014ee:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_1B, TB6612FNG_FORWARD,
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	2101      	movs	r1, #1
 80014f6:	2001      	movs	r0, #1
 80014f8:	f002 ffea 	bl	80044d0 <tb6612fng_drive>
 80014fc:	e011      	b.n	8001522 <apply_motor_speeds_3wheel+0x76>
	} else {
		tb6612fng_drive(MOTOR_1B, TB6612FNG_BACKWARD,
				(pwm_val1 * (-left_front)) / 100);
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001504:	4252      	negs	r2, r2
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	4a38      	ldr	r2, [pc, #224]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 800150c:	fb82 1203 	smull	r1, r2, r2, r3
 8001510:	1152      	asrs	r2, r2, #5
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_1B, TB6612FNG_BACKWARD,
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	2102      	movs	r1, #2
 800151c:	2001      	movs	r0, #1
 800151e:	f002 ffd7 	bl	80044d0 <tb6612fng_drive>
	}

	// Motor 1A - Right Front
	if (right_front == 0) {
 8001522:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <apply_motor_speeds_3wheel+0x86>
		tb6612fng_brake(MOTOR_1A);
 800152a:	2000      	movs	r0, #0
 800152c:	f003 f808 	bl	8004540 <tb6612fng_brake>
 8001530:	e027      	b.n	8001582 <apply_motor_speeds_3wheel+0xd6>
	} else if (right_front > 0) {
 8001532:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	dd11      	ble.n	800155e <apply_motor_speeds_3wheel+0xb2>
		tb6612fng_drive(MOTOR_1A, TB6612FNG_FORWARD,
				(pwm_val1 * right_front) / 100);
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a29      	ldr	r2, [pc, #164]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 8001546:	fb82 1203 	smull	r1, r2, r2, r3
 800154a:	1152      	asrs	r2, r2, #5
 800154c:	17db      	asrs	r3, r3, #31
 800154e:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_1A, TB6612FNG_FORWARD,
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	2101      	movs	r1, #1
 8001556:	2000      	movs	r0, #0
 8001558:	f002 ffba 	bl	80044d0 <tb6612fng_drive>
 800155c:	e011      	b.n	8001582 <apply_motor_speeds_3wheel+0xd6>
	} else {
		tb6612fng_drive(MOTOR_1A, TB6612FNG_BACKWARD,
				(pwm_val1 * (-right_front)) / 100);
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001564:	4252      	negs	r2, r2
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a20      	ldr	r2, [pc, #128]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 800156c:	fb82 1203 	smull	r1, r2, r2, r3
 8001570:	1152      	asrs	r2, r2, #5
 8001572:	17db      	asrs	r3, r3, #31
 8001574:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_1A, TB6612FNG_BACKWARD,
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	2102      	movs	r1, #2
 800157c:	2000      	movs	r0, #0
 800157e:	f002 ffa7 	bl	80044d0 <tb6612fng_drive>
	}

	// Motor 2A - Back
	if (back == 0) {
 8001582:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <apply_motor_speeds_3wheel+0xe6>
		tb6612fng_brake(MOTOR_2A);
 800158a:	2002      	movs	r0, #2
 800158c:	f002 ffd8 	bl	8004540 <tb6612fng_brake>
		tb6612fng_drive(MOTOR_2A, TB6612FNG_FORWARD, (pwm_val1 * back) / 100);
	} else {
		tb6612fng_drive(MOTOR_2A, TB6612FNG_BACKWARD,
				(pwm_val1 * (-back)) / 100);
	}
}
 8001590:	e027      	b.n	80015e2 <apply_motor_speeds_3wheel+0x136>
	} else if (back > 0) {
 8001592:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001596:	2b00      	cmp	r3, #0
 8001598:	dd11      	ble.n	80015be <apply_motor_speeds_3wheel+0x112>
		tb6612fng_drive(MOTOR_2A, TB6612FNG_FORWARD, (pwm_val1 * back) / 100);
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	4a11      	ldr	r2, [pc, #68]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 80015a6:	fb82 1203 	smull	r1, r2, r2, r3
 80015aa:	1152      	asrs	r2, r2, #5
 80015ac:	17db      	asrs	r3, r3, #31
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	2101      	movs	r1, #1
 80015b6:	2002      	movs	r0, #2
 80015b8:	f002 ff8a 	bl	80044d0 <tb6612fng_drive>
}
 80015bc:	e011      	b.n	80015e2 <apply_motor_speeds_3wheel+0x136>
				(pwm_val1 * (-back)) / 100);
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015c4:	4252      	negs	r2, r2
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	4a08      	ldr	r2, [pc, #32]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 80015cc:	fb82 1203 	smull	r1, r2, r2, r3
 80015d0:	1152      	asrs	r2, r2, #5
 80015d2:	17db      	asrs	r3, r3, #31
 80015d4:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_2A, TB6612FNG_BACKWARD,
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	2102      	movs	r1, #2
 80015dc:	2002      	movs	r0, #2
 80015de:	f002 ff77 	bl	80044d0 <tb6612fng_drive>
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	51eb851f 	.word	0x51eb851f

080015f0 <stop_all_motors_3wheel>:

// Stop all motors (3-wheel configuration)
void stop_all_motors_3wheel(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	tb6612fng_stop(MOTOR_1A); // Right Front
 80015f4:	2000      	movs	r0, #0
 80015f6:	f002 ff89 	bl	800450c <tb6612fng_stop>
	tb6612fng_stop(MOTOR_1B); // Left Front
 80015fa:	2001      	movs	r0, #1
 80015fc:	f002 ff86 	bl	800450c <tb6612fng_stop>
	tb6612fng_stop(MOTOR_2A); // Back
 8001600:	2002      	movs	r0, #2
 8001602:	f002 ff83 	bl	800450c <tb6612fng_stop>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <is_sbus_signal_valid>:

// Check if SBUS signal is valid and recent
// Enhanced SBUS signal check with recovery
uint8_t is_sbus_signal_valid(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 8001612:	f005 fbbd 	bl	8006d90 <HAL_GetTick>
 8001616:	6078      	str	r0, [r7, #4]

	// Check if we have received a valid frame recently
	if (sbus_signal_valid && (now - sbus_last_valid_time) <= SBUS_TIMEOUT_MS) {
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <is_sbus_signal_valid+0x70>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <is_sbus_signal_valid+0x26>
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <is_sbus_signal_valid+0x74>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	@ 0x64
 800162c:	d801      	bhi.n	8001632 <is_sbus_signal_valid+0x26>
		return 1;
 800162e:	2301      	movs	r3, #1
 8001630:	e01f      	b.n	8001672 <is_sbus_signal_valid+0x66>
	} else {
		sbus_signal_valid = 0; // Mark as invalid if timeout
 8001632:	4b12      	ldr	r3, [pc, #72]	@ (800167c <is_sbus_signal_valid+0x70>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]

		// If signal has been lost for a long time, try recovery
		if ((now - sbus_last_valid_time) > (SBUS_TIMEOUT_MS * 10)) {
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <is_sbus_signal_valid+0x74>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001644:	d914      	bls.n	8001670 <is_sbus_signal_valid+0x64>
			// Signal lost for 1 second - attempt recovery
			static uint32_t last_recovery_attempt = 0;
			if ((now - last_recovery_attempt) > 5000) {  // Try every 5 seconds
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <is_sbus_signal_valid+0x78>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d90c      	bls.n	8001670 <is_sbus_signal_valid+0x64>
				last_recovery_attempt = now;
 8001656:	4a0b      	ldr	r2, [pc, #44]	@ (8001684 <is_sbus_signal_valid+0x78>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6013      	str	r3, [r2, #0]

				// Reinitialize UART from main context (safer than interrupt)
				HAL_UART_AbortReceive(&huart2);
 800165c:	480a      	ldr	r0, [pc, #40]	@ (8001688 <is_sbus_signal_valid+0x7c>)
 800165e:	f009 fc30 	bl	800aec2 <HAL_UART_AbortReceive>
				MX_USART2_UART_Init();
 8001662:	f000 fee9 	bl	8002438 <MX_USART2_UART_Init>
				HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8001666:	2219      	movs	r2, #25
 8001668:	4908      	ldr	r1, [pc, #32]	@ (800168c <is_sbus_signal_valid+0x80>)
 800166a:	4807      	ldr	r0, [pc, #28]	@ (8001688 <is_sbus_signal_valid+0x7c>)
 800166c:	f009 fc04 	bl	800ae78 <HAL_UART_Receive_DMA>
			}
		}

		return 0;
 8001670:	2300      	movs	r3, #0
	}
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000468 	.word	0x20000468
 8001680:	20000464 	.word	0x20000464
 8001684:	200004f0 	.word	0x200004f0
 8001688:	20000350 	.word	0x20000350
 800168c:	20000420 	.word	0x20000420

08001690 <calculate_heading_pid_simplified>:

	return diff;
}

// Simplified PID controller with reduced computational overhead
float calculate_heading_pid_simplified(float target_heading, float current_heading) {
 8001690:	b580      	push	{r7, lr}
 8001692:	ed2d 8b02 	vpush	{d8}
 8001696:	b096      	sub	sp, #88	@ 0x58
 8001698:	af00      	add	r7, sp, #0
 800169a:	ed87 0a01 	vstr	s0, [r7, #4]
 800169e:	edc7 0a00 	vstr	s1, [r7]
    static float error_history[3] = {0}; // Reduced from 5 to 3
    static uint8_t history_idx = 0;
    static uint32_t last_oscillation_time = 0;
    static uint32_t overshoot_cooldown = 0;

    uint32_t now = HAL_GetTick();
 80016a2:	f005 fb75 	bl	8006d90 <HAL_GetTick>
 80016a6:	6278      	str	r0, [r7, #36]	@ 0x24
    if (last_time == 0) last_time = now;
 80016a8:	4b9f      	ldr	r3, [pc, #636]	@ (8001928 <calculate_heading_pid_simplified+0x298>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <calculate_heading_pid_simplified+0x26>
 80016b0:	4a9d      	ldr	r2, [pc, #628]	@ (8001928 <calculate_heading_pid_simplified+0x298>)
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	6013      	str	r3, [r2, #0]

    float dt = (now - last_time) / 1000.0f;
 80016b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001928 <calculate_heading_pid_simplified+0x298>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c6:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800192c <calculate_heading_pid_simplified+0x29c>
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	edc7 7a08 	vstr	s15, [r7, #32]
    if (dt <= 0) return output_filtered;
 80016d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80016d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	d802      	bhi.n	80016e6 <calculate_heading_pid_simplified+0x56>
 80016e0:	4b93      	ldr	r3, [pc, #588]	@ (8001930 <calculate_heading_pid_simplified+0x2a0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	e29f      	b.n	8001c26 <calculate_heading_pid_simplified+0x596>

    // Calculate error with angle wrapping
    float error = target_heading - current_heading;
 80016e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ea:	edd7 7a00 	vldr	s15, [r7]
 80016ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    while (error > 180.0f) error -= 360.0f;
 80016f6:	e007      	b.n	8001708 <calculate_heading_pid_simplified+0x78>
 80016f8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80016fc:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001934 <calculate_heading_pid_simplified+0x2a4>
 8001700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001704:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8001708:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800170c:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001938 <calculate_heading_pid_simplified+0x2a8>
 8001710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	dcee      	bgt.n	80016f8 <calculate_heading_pid_simplified+0x68>
    while (error < -180.0f) error += 360.0f;
 800171a:	e007      	b.n	800172c <calculate_heading_pid_simplified+0x9c>
 800171c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001720:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8001934 <calculate_heading_pid_simplified+0x2a4>
 8001724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001728:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 800172c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001730:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800193c <calculate_heading_pid_simplified+0x2ac>
 8001734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	d4ee      	bmi.n	800171c <calculate_heading_pid_simplified+0x8c>

    // Store error in simplified history
    error_history[history_idx] = error;
 800173e:	4b80      	ldr	r3, [pc, #512]	@ (8001940 <calculate_heading_pid_simplified+0x2b0>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4a80      	ldr	r2, [pc, #512]	@ (8001944 <calculate_heading_pid_simplified+0x2b4>)
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800174a:	601a      	str	r2, [r3, #0]
    history_idx = (history_idx + 1) % 3;
 800174c:	4b7c      	ldr	r3, [pc, #496]	@ (8001940 <calculate_heading_pid_simplified+0x2b0>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	4b7d      	ldr	r3, [pc, #500]	@ (8001948 <calculate_heading_pid_simplified+0x2b8>)
 8001754:	fb83 3102 	smull	r3, r1, r3, r2
 8001758:	17d3      	asrs	r3, r2, #31
 800175a:	1ac9      	subs	r1, r1, r3
 800175c:	460b      	mov	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	440b      	add	r3, r1
 8001762:	1ad1      	subs	r1, r2, r3
 8001764:	b2ca      	uxtb	r2, r1
 8001766:	4b76      	ldr	r3, [pc, #472]	@ (8001940 <calculate_heading_pid_simplified+0x2b0>)
 8001768:	701a      	strb	r2, [r3, #0]

    // Simplified oscillation detection (check only last 3 samples)
    uint8_t oscillation = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (fabs(error) < 20.0f) { // Only check when close to target
 8001770:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001774:	eef0 7ae7 	vabs.f32	s15, s15
 8001778:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800177c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	d53b      	bpl.n	80017fe <calculate_heading_pid_simplified+0x16e>
        int sign_changes = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for (int i = 0; i < 2; i++) {
 800178a:	2300      	movs	r3, #0
 800178c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800178e:	e019      	b.n	80017c4 <calculate_heading_pid_simplified+0x134>
            if ((error_history[i] * error_history[i+1]) < 0) {
 8001790:	4a6c      	ldr	r2, [pc, #432]	@ (8001944 <calculate_heading_pid_simplified+0x2b4>)
 8001792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800179e:	3301      	adds	r3, #1
 80017a0:	4a68      	ldr	r2, [pc, #416]	@ (8001944 <calculate_heading_pid_simplified+0x2b4>)
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d502      	bpl.n	80017be <calculate_heading_pid_simplified+0x12e>
                sign_changes++;
 80017b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017ba:	3301      	adds	r3, #1
 80017bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for (int i = 0; i < 2; i++) {
 80017be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c0:	3301      	adds	r3, #1
 80017c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	dde2      	ble.n	8001790 <calculate_heading_pid_simplified+0x100>
            }
        }
        if (sign_changes >= 1 && (now - last_oscillation_time) > 1000) {
 80017ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dd16      	ble.n	80017fe <calculate_heading_pid_simplified+0x16e>
 80017d0:	4b5e      	ldr	r3, [pc, #376]	@ (800194c <calculate_heading_pid_simplified+0x2bc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017dc:	d90f      	bls.n	80017fe <calculate_heading_pid_simplified+0x16e>
            oscillation = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            last_oscillation_time = now;
 80017e4:	4a59      	ldr	r2, [pc, #356]	@ (800194c <calculate_heading_pid_simplified+0x2bc>)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	6013      	str	r3, [r2, #0]
            integral *= 0.5f; // Reduce integral windup
 80017ea:	4b59      	ldr	r3, [pc, #356]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80017f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f8:	4b55      	ldr	r3, [pc, #340]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 80017fa:	edc3 7a00 	vstr	s15, [r3]
        }
    }

    // Simplified overshoot detection
    uint8_t overshoot = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <calculate_heading_pid_simplified+0x2c4>)
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d521      	bpl.n	8001860 <calculate_heading_pid_simplified+0x1d0>
 800181c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001820:	eef0 7ae7 	vabs.f32	s15, s15
 8001824:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	dd16      	ble.n	8001860 <calculate_heading_pid_simplified+0x1d0>
        if ((now - overshoot_cooldown) > 1000) {
 8001832:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <calculate_heading_pid_simplified+0x2c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800183e:	d90f      	bls.n	8001860 <calculate_heading_pid_simplified+0x1d0>
            overshoot = 1;
 8001840:	2301      	movs	r3, #1
 8001842:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            overshoot_cooldown = now;
 8001846:	4a44      	ldr	r2, [pc, #272]	@ (8001958 <calculate_heading_pid_simplified+0x2c8>)
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	6013      	str	r3, [r2, #0]
            integral *= 0.7f;
 800184c:	4b40      	ldr	r3, [pc, #256]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800195c <calculate_heading_pid_simplified+0x2cc>
 8001856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185a:	4b3d      	ldr	r3, [pc, #244]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 800185c:	edc3 7a00 	vstr	s15, [r3]
        }
    }

    // Simplified dead zone
    float dead_zone = oscillation ? 4.0f : (overshoot ? 2.0f : 1.0f);
 8001860:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <calculate_heading_pid_simplified+0x1ec>
 8001868:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <calculate_heading_pid_simplified+0x1e6>
 8001870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001874:	e004      	b.n	8001880 <calculate_heading_pid_simplified+0x1f0>
 8001876:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800187a:	e001      	b.n	8001880 <calculate_heading_pid_simplified+0x1f0>
 800187c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001880:	61fb      	str	r3, [r7, #28]

    if (fabs(error) < dead_zone) {
 8001882:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001886:	eef0 7ae7 	vabs.f32	s15, s15
 800188a:	ed97 7a07 	vldr	s14, [r7, #28]
 800188e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	dd1c      	ble.n	80018d2 <calculate_heading_pid_simplified+0x242>
        // Gentle decay near target
        integral *= 0.95f;
 8001898:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001960 <calculate_heading_pid_simplified+0x2d0>
 80018a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 80018a8:	edc3 7a00 	vstr	s15, [r3]
        output_filtered *= 0.9f;
 80018ac:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <calculate_heading_pid_simplified+0x2a0>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001964 <calculate_heading_pid_simplified+0x2d4>
 80018b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <calculate_heading_pid_simplified+0x2a0>)
 80018bc:	edc3 7a00 	vstr	s15, [r3]
        previous_error = error;
 80018c0:	4a24      	ldr	r2, [pc, #144]	@ (8001954 <calculate_heading_pid_simplified+0x2c4>)
 80018c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c4:	6013      	str	r3, [r2, #0]
        last_time = now;
 80018c6:	4a18      	ldr	r2, [pc, #96]	@ (8001928 <calculate_heading_pid_simplified+0x298>)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	6013      	str	r3, [r2, #0]
        return output_filtered;
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <calculate_heading_pid_simplified+0x2a0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e1a9      	b.n	8001c26 <calculate_heading_pid_simplified+0x596>
    }

    // Simplified adaptive gains based on error magnitude only
    float kp, ki, kd, max_output;
    if (fabs(error) > 60.0f) {
 80018d2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018d6:	eef0 7ae7 	vabs.f32	s15, s15
 80018da:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001968 <calculate_heading_pid_simplified+0x2d8>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	dd09      	ble.n	80018fc <calculate_heading_pid_simplified+0x26c>
        kp = 1.0f; ki = 0.02f; kd = 0.1f; max_output = 25.0f;
 80018e8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <calculate_heading_pid_simplified+0x2dc>)
 80018f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <calculate_heading_pid_simplified+0x2e0>)
 80018f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <calculate_heading_pid_simplified+0x2e4>)
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018fa:	e04c      	b.n	8001996 <calculate_heading_pid_simplified+0x306>
    } else if (fabs(error) > 20.0f) {
 80018fc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001900:	eef0 7ae7 	vabs.f32	s15, s15
 8001904:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	dd38      	ble.n	8001984 <calculate_heading_pid_simplified+0x2f4>
        kp = 1.5f; ki = 0.03f; kd = 0.15f; max_output = 20.0f;
 8001912:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001916:	643b      	str	r3, [r7, #64]	@ 0x40
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <calculate_heading_pid_simplified+0x2e8>)
 800191a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <calculate_heading_pid_simplified+0x2ec>)
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <calculate_heading_pid_simplified+0x2f0>)
 8001922:	637b      	str	r3, [r7, #52]	@ 0x34
 8001924:	e037      	b.n	8001996 <calculate_heading_pid_simplified+0x306>
 8001926:	bf00      	nop
 8001928:	200004f4 	.word	0x200004f4
 800192c:	447a0000 	.word	0x447a0000
 8001930:	200004f8 	.word	0x200004f8
 8001934:	43b40000 	.word	0x43b40000
 8001938:	43340000 	.word	0x43340000
 800193c:	c3340000 	.word	0xc3340000
 8001940:	200004fc 	.word	0x200004fc
 8001944:	20000500 	.word	0x20000500
 8001948:	55555556 	.word	0x55555556
 800194c:	2000050c 	.word	0x2000050c
 8001950:	20000510 	.word	0x20000510
 8001954:	20000514 	.word	0x20000514
 8001958:	20000518 	.word	0x20000518
 800195c:	3f333333 	.word	0x3f333333
 8001960:	3f733333 	.word	0x3f733333
 8001964:	3f666666 	.word	0x3f666666
 8001968:	42700000 	.word	0x42700000
 800196c:	3ca3d70a 	.word	0x3ca3d70a
 8001970:	3dcccccd 	.word	0x3dcccccd
 8001974:	41c80000 	.word	0x41c80000
 8001978:	3cf5c28f 	.word	0x3cf5c28f
 800197c:	3e19999a 	.word	0x3e19999a
 8001980:	41a00000 	.word	0x41a00000
    } else {
        kp = 2.0f; ki = 0.04f; kd = 0.2f; max_output = 15.0f;
 8001984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001988:	643b      	str	r3, [r7, #64]	@ 0x40
 800198a:	4bab      	ldr	r3, [pc, #684]	@ (8001c38 <calculate_heading_pid_simplified+0x5a8>)
 800198c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800198e:	4bab      	ldr	r3, [pc, #684]	@ (8001c3c <calculate_heading_pid_simplified+0x5ac>)
 8001990:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001992:	4bab      	ldr	r3, [pc, #684]	@ (8001c40 <calculate_heading_pid_simplified+0x5b0>)
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    // Reduce gains if problems detected
    if (overshoot) {
 8001996:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01f      	beq.n	80019de <calculate_heading_pid_simplified+0x34e>
        kp *= 0.7f; ki *= 0.5f; kd *= 0.8f; max_output *= 0.8f;
 800199e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019a2:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8001c44 <calculate_heading_pid_simplified+0x5b4>
 80019a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019aa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 80019ae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ba:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80019be:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80019c2:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8001c48 <calculate_heading_pid_simplified+0x5b8>
 80019c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ca:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 80019ce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019d2:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8001c48 <calculate_heading_pid_simplified+0x5b8>
 80019d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019da:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }
    if (oscillation) {
 80019de:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d01f      	beq.n	8001a26 <calculate_heading_pid_simplified+0x396>
        kp *= 0.5f; ki *= 0.3f; kd *= 0.6f; max_output *= 0.7f;
 80019e6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 80019f6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019fa:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001c4c <calculate_heading_pid_simplified+0x5bc>
 80019fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a02:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001a06:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a0a:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8001c50 <calculate_heading_pid_simplified+0x5c0>
 8001a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a12:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8001a16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a1a:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001c44 <calculate_heading_pid_simplified+0x5b4>
 8001a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a22:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }

    // Calculate PID terms
    float proportional = kp * error;
 8001a26:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001a2a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a32:	edc7 7a06 	vstr	s15, [r7, #24]

    integral += error * dt;
 8001a36:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001a3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a42:	4b84      	ldr	r3, [pc, #528]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4c:	4b81      	ldr	r3, [pc, #516]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
    integral = fmaxf(-50.0f, fminf(50.0f, integral)); // Simple clamping
 8001a52:	4b80      	ldr	r3, [pc, #512]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 8001c58 <calculate_heading_pid_simplified+0x5c8>
 8001a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a60:	f010 fd87 	bl	8012572 <fminf>
 8001a64:	eef0 7a40 	vmov.f32	s15, s0
 8001a68:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 8001c5c <calculate_heading_pid_simplified+0x5cc>
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	f010 fd62 	bl	8012538 <fmaxf>
 8001a74:	eef0 7a40 	vmov.f32	s15, s0
 8001a78:	4b76      	ldr	r3, [pc, #472]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a7a:	edc3 7a00 	vstr	s15, [r3]
    float integral_term = ki * integral;
 8001a7e:	4b75      	ldr	r3, [pc, #468]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	edc7 7a05 	vstr	s15, [r7, #20]

    float derivative = kd * (error - previous_error) / dt;
 8001a90:	4b73      	ldr	r3, [pc, #460]	@ (8001c60 <calculate_heading_pid_simplified+0x5d0>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001aa2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001aa6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aae:	edc7 7a04 	vstr	s15, [r7, #16]

    float raw_output = proportional + integral_term + derivative;
 8001ab2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	edc7 7a03 	vstr	s15, [r7, #12]

    // Simple output limiting
    raw_output = fmaxf(-max_output, fminf(max_output, raw_output));
 8001aca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ace:	eeb1 8a67 	vneg.f32	s16, s15
 8001ad2:	edd7 0a03 	vldr	s1, [r7, #12]
 8001ad6:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001ada:	f010 fd4a 	bl	8012572 <fminf>
 8001ade:	eef0 7a40 	vmov.f32	s15, s0
 8001ae2:	eef0 0a67 	vmov.f32	s1, s15
 8001ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8001aea:	f010 fd25 	bl	8012538 <fmaxf>
 8001aee:	ed87 0a03 	vstr	s0, [r7, #12]

    // Simple rate limiting
    float rate_limit = fabs(error) > 30.0f ? 2.0f : 3.0f;
 8001af2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001af6:	eef0 7ae7 	vabs.f32	s15, s15
 8001afa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	dd02      	ble.n	8001b0e <calculate_heading_pid_simplified+0x47e>
 8001b08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b0c:	e000      	b.n	8001b10 <calculate_heading_pid_simplified+0x480>
 8001b0e:	4b55      	ldr	r3, [pc, #340]	@ (8001c64 <calculate_heading_pid_simplified+0x5d4>)
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
    if (overshoot) rate_limit *= 0.7f;
 8001b12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <calculate_heading_pid_simplified+0x49a>
 8001b1a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b1e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001c44 <calculate_heading_pid_simplified+0x5b4>
 8001b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b26:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    if (oscillation) rate_limit *= 0.5f;
 8001b2a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <calculate_heading_pid_simplified+0x4b2>
 8001b32:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    float output_diff = raw_output - output_filtered;
 8001b42:	4b49      	ldr	r3, [pc, #292]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b50:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (fabs(output_diff) > rate_limit) {
 8001b54:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b58:	eef0 7ae7 	vabs.f32	s15, s15
 8001b5c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d50f      	bpl.n	8001b8a <calculate_heading_pid_simplified+0x4fa>
        output_diff = (output_diff > 0) ? rate_limit : -rate_limit;
 8001b6a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	dd02      	ble.n	8001b7e <calculate_heading_pid_simplified+0x4ee>
 8001b78:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b7c:	e003      	b.n	8001b86 <calculate_heading_pid_simplified+0x4f6>
 8001b7e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b82:	eef1 7a67 	vneg.f32	s15, s15
 8001b86:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    }
    output_filtered += output_diff;
 8001b8a:	4b37      	ldr	r3, [pc, #220]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001b8c:	ed93 7a00 	vldr	s14, [r3]
 8001b90:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	4b33      	ldr	r3, [pc, #204]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001b9a:	edc3 7a00 	vstr	s15, [r3]

    // Simple approach damping for small errors
    if (fabs(error) < 20.0f && fabs(error) > 3.0f) {
 8001b9e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ba2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ba6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d529      	bpl.n	8001c08 <calculate_heading_pid_simplified+0x578>
 8001bb4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001bb8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bbc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	dd1e      	ble.n	8001c08 <calculate_heading_pid_simplified+0x578>
        float approach_factor = fabs(error) / 20.0f;
 8001bca:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001bce:	eeb0 7ae7 	vabs.f32	s14, s15
 8001bd2:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bda:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        if (approach_factor < 0.6f) approach_factor = 0.6f;
 8001bde:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001be2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001c50 <calculate_heading_pid_simplified+0x5c0>
 8001be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	d501      	bpl.n	8001bf4 <calculate_heading_pid_simplified+0x564>
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <calculate_heading_pid_simplified+0x5dc>)
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
        output_filtered *= approach_factor;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001bf6:	ed93 7a00 	vldr	s14, [r3]
 8001bfa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c02:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001c04:	edc3 7a00 	vstr	s15, [r3]
    }

    // Update for next iteration
    previous_error = error;
 8001c08:	4a15      	ldr	r2, [pc, #84]	@ (8001c60 <calculate_heading_pid_simplified+0x5d0>)
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0c:	6013      	str	r3, [r2, #0]
    last_time = now;
 8001c0e:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <calculate_heading_pid_simplified+0x5e0>)
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	6013      	str	r3, [r2, #0]

    // Store for debugging
    heading_error = error;
 8001c14:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <calculate_heading_pid_simplified+0x5e4>)
 8001c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c18:	6013      	str	r3, [r2, #0]
    heading_pid_output = output_filtered;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <calculate_heading_pid_simplified+0x5e8>)
 8001c20:	6013      	str	r3, [r2, #0]

    return output_filtered;
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
}
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	3758      	adds	r7, #88	@ 0x58
 8001c30:	46bd      	mov	sp, r7
 8001c32:	ecbd 8b02 	vpop	{d8}
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	3d23d70a 	.word	0x3d23d70a
 8001c3c:	3e4ccccd 	.word	0x3e4ccccd
 8001c40:	41700000 	.word	0x41700000
 8001c44:	3f333333 	.word	0x3f333333
 8001c48:	3f4ccccd 	.word	0x3f4ccccd
 8001c4c:	3e99999a 	.word	0x3e99999a
 8001c50:	3f19999a 	.word	0x3f19999a
 8001c54:	20000510 	.word	0x20000510
 8001c58:	42480000 	.word	0x42480000
 8001c5c:	c2480000 	.word	0xc2480000
 8001c60:	20000514 	.word	0x20000514
 8001c64:	40400000 	.word	0x40400000
 8001c68:	200004f8 	.word	0x200004f8
 8001c6c:	3f19999a 	.word	0x3f19999a
 8001c70:	200004f4 	.word	0x200004f4
 8001c74:	2000049c 	.word	0x2000049c
 8001c78:	200004a0 	.word	0x200004a0

08001c7c <reset_heading_pid>:

// Reset PID controller
void reset_heading_pid(void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	pid_integral = 0.0f;
 8001c80:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <reset_heading_pid+0x3c>)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
	pid_previous_error = 0.0f;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <reset_heading_pid+0x40>)
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
	pid_output_filtered = 0.0f;  // Reset filtered output
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <reset_heading_pid+0x44>)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
	pid_last_time = HAL_GetTick();
 8001c98:	f005 f87a 	bl	8006d90 <HAL_GetTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4a09      	ldr	r2, [pc, #36]	@ (8001cc4 <reset_heading_pid+0x48>)
 8001ca0:	6013      	str	r3, [r2, #0]
	heading_error = 0.0f;
 8001ca2:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <reset_heading_pid+0x4c>)
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
	heading_pid_output = 0.0f;
 8001caa:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <reset_heading_pid+0x50>)
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200004a4 	.word	0x200004a4
 8001cbc:	200004a8 	.word	0x200004a8
 8001cc0:	200004b4 	.word	0x200004b4
 8001cc4:	200004ac 	.word	0x200004ac
 8001cc8:	2000049c 	.word	0x2000049c
 8001ccc:	200004a0 	.word	0x200004a0

08001cd0 <set_heading_lock>:
// Updated set heading lock function
void set_heading_lock(float compass_heading) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	ed87 0a01 	vstr	s0, [r7, #4]
	locked_heading = compass_to_robot_front(compass_heading);
 8001cda:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cde:	f000 f821 	bl	8001d24 <compass_to_robot_front>
 8001ce2:	eef0 7a40 	vmov.f32	s15, s0
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <set_heading_lock+0x34>)
 8001ce8:	edc3 7a00 	vstr	s15, [r3]
	heading_lock_enabled = 1;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <set_heading_lock+0x38>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
	reset_heading_pid();
 8001cf2:	f7ff ffc3 	bl	8001c7c <reset_heading_pid>
	save_heading_lock_to_eeprom(); // Add this line
 8001cf6:	f000 f853 	bl	8001da0 <save_heading_lock_to_eeprom>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000498 	.word	0x20000498
 8001d08:	20000496 	.word	0x20000496

08001d0c <disable_heading_lock>:

// Disable heading lock
void disable_heading_lock(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	heading_lock_enabled = 0;
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <disable_heading_lock+0x14>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
	reset_heading_pid();
 8001d16:	f7ff ffb1 	bl	8001c7c <reset_heading_pid>
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000496 	.word	0x20000496

08001d24 <compass_to_robot_front>:

// Convert compass heading to robot front direction
float compass_to_robot_front(float compass_heading) {
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	ed87 0a01 	vstr	s0, [r7, #4]
	float robot_front = compass_heading + ROBOT_FRONT_OFFSET;
 8001d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d32:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001d98 <compass_to_robot_front+0x74>
 8001d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d3a:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalize to 0-360 range
	while (robot_front >= 360.0f) {
 8001d3e:	e007      	b.n	8001d50 <compass_to_robot_front+0x2c>
		robot_front -= 360.0f;
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d9c <compass_to_robot_front+0x78>
 8001d48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d4c:	edc7 7a03 	vstr	s15, [r7, #12]
	while (robot_front >= 360.0f) {
 8001d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d54:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001d9c <compass_to_robot_front+0x78>
 8001d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	daee      	bge.n	8001d40 <compass_to_robot_front+0x1c>
	}
	while (robot_front < 0.0f) {
 8001d62:	e007      	b.n	8001d74 <compass_to_robot_front+0x50>
		robot_front += 360.0f;
 8001d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d68:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001d9c <compass_to_robot_front+0x78>
 8001d6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d70:	edc7 7a03 	vstr	s15, [r7, #12]
	while (robot_front < 0.0f) {
 8001d74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	d4f0      	bmi.n	8001d64 <compass_to_robot_front+0x40>
	}

	return robot_front;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	ee07 3a90 	vmov	s15, r3
}
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	438d0000 	.word	0x438d0000
 8001d9c:	43b40000 	.word	0x43b40000

08001da0 <save_heading_lock_to_eeprom>:

	return compass_to_robot_front(compass_heading);
}

// EEPROM storage functions for heading lock
void save_heading_lock_to_eeprom(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	if (heading_lock_enabled) {
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <save_heading_lock_to_eeprom+0x44>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d017      	beq.n	8001dde <save_heading_lock_to_eeprom+0x3e>
		osMutexAcquire(EEPROMMutexHandle, osWaitForever);
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <save_heading_lock_to_eeprom+0x48>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f04f 31ff 	mov.w	r1, #4294967295
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00a fb8b 	bl	800c4d2 <osMutexAcquire>
		eeStorage.magic_number = EE_MAGIC_NUMBER;
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <save_heading_lock_to_eeprom+0x4c>)
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <save_heading_lock_to_eeprom+0x50>)
 8001dc0:	601a      	str	r2, [r3, #0]
		eeStorage.saved_locked_heading = locked_heading;
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <save_heading_lock_to_eeprom+0x54>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a09      	ldr	r2, [pc, #36]	@ (8001dec <save_heading_lock_to_eeprom+0x4c>)
 8001dc8:	6053      	str	r3, [r2, #4]
		eeStorage.heading_lock_was_active = 1;
 8001dca:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <save_heading_lock_to_eeprom+0x4c>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	721a      	strb	r2, [r3, #8]
		EE_Write();
 8001dd0:	f00d fc7c 	bl	800f6cc <EE_Write>
		osMutexRelease(EEPROMMutexHandle);
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <save_heading_lock_to_eeprom+0x48>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00a fbc5 	bl	800c568 <osMutexRelease>
	}
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000496 	.word	0x20000496
 8001de8:	2000041c 	.word	0x2000041c
 8001dec:	200004bc 	.word	0x200004bc
 8001df0:	48454144 	.word	0x48454144
 8001df4:	20000498 	.word	0x20000498

08001df8 <restore_heading_lock_from_eeprom>:

bool restore_heading_lock_from_eeprom(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
	bool result = false;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(EEPROMMutexHandle, osWaitForever);
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <restore_heading_lock_from_eeprom+0x50>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f00a fb61 	bl	800c4d2 <osMutexAcquire>
	EE_Read();
 8001e10:	f00d fc34 	bl	800f67c <EE_Read>
	if (eeStorage.magic_number == EE_MAGIC_NUMBER &&
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <restore_heading_lock_from_eeprom+0x54>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <restore_heading_lock_from_eeprom+0x58>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d109      	bne.n	8001e32 <restore_heading_lock_from_eeprom+0x3a>
			eeStorage.heading_lock_was_active) {
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <restore_heading_lock_from_eeprom+0x54>)
 8001e20:	7a1b      	ldrb	r3, [r3, #8]
	if (eeStorage.magic_number == EE_MAGIC_NUMBER &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <restore_heading_lock_from_eeprom+0x3a>
		locked_heading = eeStorage.saved_locked_heading;
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <restore_heading_lock_from_eeprom+0x54>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <restore_heading_lock_from_eeprom+0x5c>)
 8001e2c:	6013      	str	r3, [r2, #0]
		result = true;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	71fb      	strb	r3, [r7, #7]
	}
	osMutexRelease(EEPROMMutexHandle);
 8001e32:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <restore_heading_lock_from_eeprom+0x50>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f00a fb96 	bl	800c568 <osMutexRelease>
	return result;
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2000041c 	.word	0x2000041c
 8001e4c:	200004bc 	.word	0x200004bc
 8001e50:	48454144 	.word	0x48454144
 8001e54:	20000498 	.word	0x20000498

08001e58 <get_channel7_position>:

// Get the current position of channel 7 (assumed to be used for mode selection)
ch7_position_t get_channel7_position(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
	if (!is_sbus_signal_valid()) {
 8001e5e:	f7ff fbd5 	bl	800160c <is_sbus_signal_valid>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <get_channel7_position+0x14>
		return CH7_POSITION_UNKNOWN;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e023      	b.n	8001eb4 <get_channel7_position+0x5c>
	}

	uint16_t ch7_value = sbus_channels[6]; // Channel 7 (index 6)
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <get_channel7_position+0x64>)
 8001e6e:	899b      	ldrh	r3, [r3, #12]
 8001e70:	80fb      	strh	r3, [r7, #6]

	// Define positions with dead zones (assuming SBUS range 172-1811)
	// Min: 172-500, Mid: 700-1283, Max: 1511-1811
	if (ch7_value >= 172 && ch7_value <= 500) {
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	2bab      	cmp	r3, #171	@ 0xab
 8001e76:	d905      	bls.n	8001e84 <get_channel7_position+0x2c>
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e7e:	d801      	bhi.n	8001e84 <get_channel7_position+0x2c>
		return CH7_POSITION_MIN;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e017      	b.n	8001eb4 <get_channel7_position+0x5c>
	} else if (ch7_value >= 700 && ch7_value <= 1283) {
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001e8a:	d306      	bcc.n	8001e9a <get_channel7_position+0x42>
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	f240 5203 	movw	r2, #1283	@ 0x503
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d801      	bhi.n	8001e9a <get_channel7_position+0x42>
		return CH7_POSITION_MID;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00c      	b.n	8001eb4 <get_channel7_position+0x5c>
	} else if (ch7_value >= 1511 && ch7_value <= 1811) {
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	f240 52e6 	movw	r2, #1510	@ 0x5e6
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d906      	bls.n	8001eb2 <get_channel7_position+0x5a>
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	f240 7213 	movw	r2, #1811	@ 0x713
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d801      	bhi.n	8001eb2 <get_channel7_position+0x5a>
		return CH7_POSITION_MAX;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e000      	b.n	8001eb4 <get_channel7_position+0x5c>
	}

	return CH7_POSITION_UNKNOWN; // In dead zone or invalid
 8001eb2:	2303      	movs	r3, #3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000043c 	.word	0x2000043c

08001ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0a2      	sub	sp, #136	@ 0x88
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec6:	f004 ff2d 	bl	8006d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eca:	f000 f90f 	bl	80020ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ece:	f000 fb01 	bl	80024d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ed2:	f000 fadf 	bl	8002494 <MX_DMA_Init>
  MX_I2C1_Init();
 8001ed6:	f000 f975 	bl	80021c4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001eda:	f000 faad 	bl	8002438 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001ede:	f000 f9b9 	bl	8002254 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ee2:	f000 fa51 	bl	8002388 <MX_TIM3_Init>
  MX_IWDG_Init();
 8001ee6:	f000 f99b 	bl	8002220 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8001eea:	2219      	movs	r2, #25
 8001eec:	495d      	ldr	r1, [pc, #372]	@ (8002064 <main+0x1a4>)
 8001eee:	485e      	ldr	r0, [pc, #376]	@ (8002068 <main+0x1a8>)
 8001ef0:	f008 ffc2 	bl	800ae78 <HAL_UART_Receive_DMA>

	TB6612FNG_Init(); // Initialize TB6612 drivers and PWM
 8001ef4:	f002 fa00 	bl	80042f8 <TB6612FNG_Init>

	EE_Init(&eeStorage, sizeof(eeStorage_t)); // Initialize EEPROM emulation with storage structure
 8001ef8:	210c      	movs	r1, #12
 8001efa:	485c      	ldr	r0, [pc, #368]	@ (800206c <main+0x1ac>)
 8001efc:	f00d fb54 	bl	800f5a8 <EE_Init>
	//  char display_str[48];

	// Set PC13 high to turn the onboard LED on
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	HAL_Delay(BNO085_BOOT_DELAY_MS);
 8001f00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f04:	f004 ff50 	bl	8006da8 <HAL_Delay>

	// Set PC13 high to turn the onboard LED off
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f0e:	4858      	ldr	r0, [pc, #352]	@ (8002070 <main+0x1b0>)
 8001f10:	f006 f8de 	bl	80080d0 <HAL_GPIO_WritePin>

	i2c_bus_scan(i2c_devices, sizeof(i2c_devices)); // Scan and store result
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2180      	movs	r1, #128	@ 0x80
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fff9 	bl	8000f10 <i2c_bus_scan>

	uint8_t chip_id = bno085_read_chip_id();
 8001f1e:	f7ff f847 	bl	8000fb0 <bno085_read_chip_id>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	if (chip_id == 0xFF) {
 8001f28:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f2c:	2bff      	cmp	r3, #255	@ 0xff
 8001f2e:	d101      	bne.n	8001f34 <main+0x74>
		// Optionally display error on OLED
		Error_Handler();
 8001f30:	f001 fba4 	bl	800367c <Error_Handler>
	}

	bno085_setup();
 8001f34:	f7ff f8ea 	bl	800110c <bno085_setup>
	//HAL_Delay(100); // Give BNO085 time to boot
	sh2_clearTare(); // Now device uses absolute/magnetic north as reference
 8001f38:	f003 f84c 	bl	8004fd4 <sh2_clearTare>

	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c1) != 0) {
 8001f3c:	484d      	ldr	r0, [pc, #308]	@ (8002074 <main+0x1b4>)
 8001f3e:	f001 fbed 	bl	800371c <ssd1306_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <main+0x8c>
		Error_Handler();
 8001f48:	f001 fb98 	bl	800367c <Error_Handler>
	}

	ssd1306_Fill(Black);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f001 fd05 	bl	800395c <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1);
 8001f52:	4848      	ldr	r0, [pc, #288]	@ (8002074 <main+0x1b4>)
 8001f54:	f001 fd26 	bl	80039a4 <ssd1306_UpdateScreen>

    HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog
 8001f58:	4847      	ldr	r0, [pc, #284]	@ (8002078 <main+0x1b8>)
 8001f5a:	f007 fc01 	bl	8009760 <HAL_IWDG_Refresh>
	HAL_Delay(1000);
 8001f5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f62:	f004 ff21 	bl	8006da8 <HAL_Delay>

	// Write data to local screenbuffer
	ssd1306_SetCursor(1, 0);
 8001f66:	2100      	movs	r1, #0
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f001 fe6f 	bl	8003c4c <ssd1306_SetCursor>
	ssd1306_WriteString(APP_VERSION, Font_7x10, White);
 8001f6e:	4a43      	ldr	r2, [pc, #268]	@ (800207c <main+0x1bc>)
 8001f70:	2301      	movs	r3, #1
 8001f72:	ca06      	ldmia	r2, {r1, r2}
 8001f74:	4842      	ldr	r0, [pc, #264]	@ (8002080 <main+0x1c0>)
 8001f76:	f001 fe43 	bl	8003c00 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 12);
 8001f7a:	210c      	movs	r1, #12
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f001 fe65 	bl	8003c4c <ssd1306_SetCursor>
	if (i2c_devices[0] == '\0') {
 8001f82:	793b      	ldrb	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d106      	bne.n	8001f96 <main+0xd6>
		ssd1306_WriteString("No I2C found", Font_7x10, White);
 8001f88:	4a3c      	ldr	r2, [pc, #240]	@ (800207c <main+0x1bc>)
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	ca06      	ldmia	r2, {r1, r2}
 8001f8e:	483d      	ldr	r0, [pc, #244]	@ (8002084 <main+0x1c4>)
 8001f90:	f001 fe36 	bl	8003c00 <ssd1306_WriteString>
 8001f94:	e00f      	b.n	8001fb6 <main+0xf6>
	} else {
		ssd1306_WriteString("I2C:", Font_7x10, White);
 8001f96:	4a39      	ldr	r2, [pc, #228]	@ (800207c <main+0x1bc>)
 8001f98:	2301      	movs	r3, #1
 8001f9a:	ca06      	ldmia	r2, {r1, r2}
 8001f9c:	483a      	ldr	r0, [pc, #232]	@ (8002088 <main+0x1c8>)
 8001f9e:	f001 fe2f 	bl	8003c00 <ssd1306_WriteString>
		ssd1306_SetCursor(1, 24);
 8001fa2:	2118      	movs	r1, #24
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f001 fe51 	bl	8003c4c <ssd1306_SetCursor>
		ssd1306_WriteString(i2c_devices, Font_7x10, White);
 8001faa:	4a34      	ldr	r2, [pc, #208]	@ (800207c <main+0x1bc>)
 8001fac:	1d38      	adds	r0, r7, #4
 8001fae:	2301      	movs	r3, #1
 8001fb0:	ca06      	ldmia	r2, {r1, r2}
 8001fb2:	f001 fe25 	bl	8003c00 <ssd1306_WriteString>
	}

	// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 8001fb6:	482f      	ldr	r0, [pc, #188]	@ (8002074 <main+0x1b4>)
 8001fb8:	f001 fcf4 	bl	80039a4 <ssd1306_UpdateScreen>

    HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog
 8001fbc:	482e      	ldr	r0, [pc, #184]	@ (8002078 <main+0x1b8>)
 8001fbe:	f007 fbcf 	bl	8009760 <HAL_IWDG_Refresh>
	// Delay to see I2C info
	HAL_Delay(1000);
 8001fc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fc6:	f004 feef 	bl	8006da8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fca:	f00a f905 	bl	800c1d8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CompassMutex */
  CompassMutexHandle = osMutexNew(&CompassMutex_attributes);
 8001fce:	482f      	ldr	r0, [pc, #188]	@ (800208c <main+0x1cc>)
 8001fd0:	f00a f9f9 	bl	800c3c6 <osMutexNew>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8002090 <main+0x1d0>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* creation of I2C1Mutex */
  I2C1MutexHandle = osMutexNew(&I2C1Mutex_attributes);
 8001fda:	482e      	ldr	r0, [pc, #184]	@ (8002094 <main+0x1d4>)
 8001fdc:	f00a f9f3 	bl	800c3c6 <osMutexNew>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <main+0x1d8>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* creation of EncoderMutex */
  EncoderMutexHandle = osMutexNew(&EncoderMutex_attributes);
 8001fe6:	482d      	ldr	r0, [pc, #180]	@ (800209c <main+0x1dc>)
 8001fe8:	f00a f9ed 	bl	800c3c6 <osMutexNew>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a2c      	ldr	r2, [pc, #176]	@ (80020a0 <main+0x1e0>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8001ff2:	482c      	ldr	r0, [pc, #176]	@ (80020a4 <main+0x1e4>)
 8001ff4:	f00a f9e7 	bl	800c3c6 <osMutexNew>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80020a8 <main+0x1e8>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* creation of ModeMutex */
  ModeMutexHandle = osMutexNew(&ModeMutex_attributes);
 8001ffe:	482b      	ldr	r0, [pc, #172]	@ (80020ac <main+0x1ec>)
 8002000:	f00a f9e1 	bl	800c3c6 <osMutexNew>
 8002004:	4603      	mov	r3, r0
 8002006:	4a2a      	ldr	r2, [pc, #168]	@ (80020b0 <main+0x1f0>)
 8002008:	6013      	str	r3, [r2, #0]

  /* creation of EEPROMMutex */
  EEPROMMutexHandle = osMutexNew(&EEPROMMutex_attributes);
 800200a:	482a      	ldr	r0, [pc, #168]	@ (80020b4 <main+0x1f4>)
 800200c:	f00a f9db 	bl	800c3c6 <osMutexNew>
 8002010:	4603      	mov	r3, r0
 8002012:	4a29      	ldr	r2, [pc, #164]	@ (80020b8 <main+0x1f8>)
 8002014:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002016:	4a29      	ldr	r2, [pc, #164]	@ (80020bc <main+0x1fc>)
 8002018:	2100      	movs	r1, #0
 800201a:	4829      	ldr	r0, [pc, #164]	@ (80020c0 <main+0x200>)
 800201c:	f00a f926 	bl	800c26c <osThreadNew>
 8002020:	4603      	mov	r3, r0
 8002022:	4a28      	ldr	r2, [pc, #160]	@ (80020c4 <main+0x204>)
 8002024:	6013      	str	r3, [r2, #0]

  /* creation of CompassTask */
  CompassTaskHandle = osThreadNew(StartCompassTask, NULL, &CompassTask_attributes);
 8002026:	4a28      	ldr	r2, [pc, #160]	@ (80020c8 <main+0x208>)
 8002028:	2100      	movs	r1, #0
 800202a:	4828      	ldr	r0, [pc, #160]	@ (80020cc <main+0x20c>)
 800202c:	f00a f91e 	bl	800c26c <osThreadNew>
 8002030:	4603      	mov	r3, r0
 8002032:	4a27      	ldr	r2, [pc, #156]	@ (80020d0 <main+0x210>)
 8002034:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 8002036:	4a27      	ldr	r2, [pc, #156]	@ (80020d4 <main+0x214>)
 8002038:	2100      	movs	r1, #0
 800203a:	4827      	ldr	r0, [pc, #156]	@ (80020d8 <main+0x218>)
 800203c:	f00a f916 	bl	800c26c <osThreadNew>
 8002040:	4603      	mov	r3, r0
 8002042:	4a26      	ldr	r2, [pc, #152]	@ (80020dc <main+0x21c>)
 8002044:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8002046:	4a26      	ldr	r2, [pc, #152]	@ (80020e0 <main+0x220>)
 8002048:	2100      	movs	r1, #0
 800204a:	4826      	ldr	r0, [pc, #152]	@ (80020e4 <main+0x224>)
 800204c:	f00a f90e 	bl	800c26c <osThreadNew>
 8002050:	4603      	mov	r3, r0
 8002052:	4a25      	ldr	r2, [pc, #148]	@ (80020e8 <main+0x228>)
 8002054:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002056:	f00a f8e3 	bl	800c220 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		osDelay(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f00a f998 	bl	800c390 <osDelay>
 8002060:	e7fb      	b.n	800205a <main+0x19a>
 8002062:	bf00      	nop
 8002064:	20000420 	.word	0x20000420
 8002068:	20000350 	.word	0x20000350
 800206c:	200004bc 	.word	0x200004bc
 8002070:	40020800 	.word	0x40020800
 8002074:	20000260 	.word	0x20000260
 8002078:	200002b4 	.word	0x200002b4
 800207c:	20000000 	.word	0x20000000
 8002080:	08012984 	.word	0x08012984
 8002084:	08012990 	.word	0x08012990
 8002088:	080129a0 	.word	0x080129a0
 800208c:	0801334c 	.word	0x0801334c
 8002090:	20000408 	.word	0x20000408
 8002094:	0801335c 	.word	0x0801335c
 8002098:	2000040c 	.word	0x2000040c
 800209c:	0801336c 	.word	0x0801336c
 80020a0:	20000410 	.word	0x20000410
 80020a4:	0801337c 	.word	0x0801337c
 80020a8:	20000414 	.word	0x20000414
 80020ac:	0801338c 	.word	0x0801338c
 80020b0:	20000418 	.word	0x20000418
 80020b4:	0801339c 	.word	0x0801339c
 80020b8:	2000041c 	.word	0x2000041c
 80020bc:	080132bc 	.word	0x080132bc
 80020c0:	080028f5 	.word	0x080028f5
 80020c4:	200003f8 	.word	0x200003f8
 80020c8:	080132e0 	.word	0x080132e0
 80020cc:	08002d95 	.word	0x08002d95
 80020d0:	200003fc 	.word	0x200003fc
 80020d4:	08013304 	.word	0x08013304
 80020d8:	08002dbd 	.word	0x08002dbd
 80020dc:	20000400 	.word	0x20000400
 80020e0:	08013328 	.word	0x08013328
 80020e4:	080034e9 	.word	0x080034e9
 80020e8:	20000404 	.word	0x20000404

080020ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b094      	sub	sp, #80	@ 0x50
 80020f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f2:	f107 0320 	add.w	r3, r7, #32
 80020f6:	2230      	movs	r2, #48	@ 0x30
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f00e f8db 	bl	80102b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <SystemClock_Config+0xd0>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	4a28      	ldr	r2, [pc, #160]	@ (80021bc <SystemClock_Config+0xd0>)
 800211a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002120:	4b26      	ldr	r3, [pc, #152]	@ (80021bc <SystemClock_Config+0xd0>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800212c:	2300      	movs	r3, #0
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <SystemClock_Config+0xd4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a22      	ldr	r2, [pc, #136]	@ (80021c0 <SystemClock_Config+0xd4>)
 8002136:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <SystemClock_Config+0xd4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002148:	2309      	movs	r3, #9
 800214a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800214c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002152:	2301      	movs	r3, #1
 8002154:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002156:	2302      	movs	r3, #2
 8002158:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800215a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800215e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002160:	2319      	movs	r3, #25
 8002162:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002164:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002168:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800216a:	2304      	movs	r3, #4
 800216c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800216e:	2304      	movs	r3, #4
 8002170:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002172:	f107 0320 	add.w	r3, r7, #32
 8002176:	4618      	mov	r0, r3
 8002178:	f007 fb02 	bl	8009780 <HAL_RCC_OscConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002182:	f001 fa7b 	bl	800367c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002186:	230f      	movs	r3, #15
 8002188:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800218a:	2302      	movs	r3, #2
 800218c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002196:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2101      	movs	r1, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f007 fd64 	bl	8009c70 <HAL_RCC_ClockConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80021ae:	f001 fa65 	bl	800367c <Error_Handler>
  }
}
 80021b2:	bf00      	nop
 80021b4:	3750      	adds	r7, #80	@ 0x50
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000

080021c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <MX_I2C1_Init+0x50>)
 80021ca:	4a13      	ldr	r2, [pc, #76]	@ (8002218 <MX_I2C1_Init+0x54>)
 80021cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <MX_I2C1_Init+0x50>)
 80021d0:	4a12      	ldr	r2, [pc, #72]	@ (800221c <MX_I2C1_Init+0x58>)
 80021d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <MX_I2C1_Init+0x50>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <MX_I2C1_Init+0x50>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <MX_I2C1_Init+0x50>)
 80021e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <MX_I2C1_Init+0x50>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <MX_I2C1_Init+0x50>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f4:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <MX_I2C1_Init+0x50>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <MX_I2C1_Init+0x50>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	@ (8002214 <MX_I2C1_Init+0x50>)
 8002202:	f005 ffb1 	bl	8008168 <HAL_I2C_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800220c:	f001 fa36 	bl	800367c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000260 	.word	0x20000260
 8002218:	40005400 	.word	0x40005400
 800221c:	00061a80 	.word	0x00061a80

08002220 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <MX_IWDG_Init+0x2c>)
 8002226:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <MX_IWDG_Init+0x30>)
 8002228:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <MX_IWDG_Init+0x2c>)
 800222c:	2204      	movs	r2, #4
 800222e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3125;
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <MX_IWDG_Init+0x2c>)
 8002232:	f640 4235 	movw	r2, #3125	@ 0xc35
 8002236:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <MX_IWDG_Init+0x2c>)
 800223a:	f007 fa4d 	bl	80096d8 <HAL_IWDG_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002244:	f001 fa1a 	bl	800367c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200002b4 	.word	0x200002b4
 8002250:	40003000 	.word	0x40003000

08002254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b092      	sub	sp, #72	@ 0x48
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
 8002274:	615a      	str	r2, [r3, #20]
 8002276:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	2220      	movs	r2, #32
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f00e f819 	bl	80102b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002284:	4b3e      	ldr	r3, [pc, #248]	@ (8002380 <MX_TIM1_Init+0x12c>)
 8002286:	4a3f      	ldr	r2, [pc, #252]	@ (8002384 <MX_TIM1_Init+0x130>)
 8002288:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800228a:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <MX_TIM1_Init+0x12c>)
 800228c:	223f      	movs	r2, #63	@ 0x3f
 800228e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002290:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <MX_TIM1_Init+0x12c>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8002296:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <MX_TIM1_Init+0x12c>)
 8002298:	2231      	movs	r2, #49	@ 0x31
 800229a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229c:	4b38      	ldr	r3, [pc, #224]	@ (8002380 <MX_TIM1_Init+0x12c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022a2:	4b37      	ldr	r3, [pc, #220]	@ (8002380 <MX_TIM1_Init+0x12c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a8:	4b35      	ldr	r3, [pc, #212]	@ (8002380 <MX_TIM1_Init+0x12c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022ae:	4834      	ldr	r0, [pc, #208]	@ (8002380 <MX_TIM1_Init+0x12c>)
 80022b0:	f007 ffac 	bl	800a20c <HAL_TIM_PWM_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80022ba:	f001 f9df 	bl	800367c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022ca:	4619      	mov	r1, r3
 80022cc:	482c      	ldr	r0, [pc, #176]	@ (8002380 <MX_TIM1_Init+0x12c>)
 80022ce:	f008 fcaf 	bl	800ac30 <HAL_TIMEx_MasterConfigSynchronization>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80022d8:	f001 f9d0 	bl	800367c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022dc:	2360      	movs	r3, #96	@ 0x60
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022fc:	2200      	movs	r2, #0
 80022fe:	4619      	mov	r1, r3
 8002300:	481f      	ldr	r0, [pc, #124]	@ (8002380 <MX_TIM1_Init+0x12c>)
 8002302:	f008 f973 	bl	800a5ec <HAL_TIM_PWM_ConfigChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800230c:	f001 f9b6 	bl	800367c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002314:	2204      	movs	r2, #4
 8002316:	4619      	mov	r1, r3
 8002318:	4819      	ldr	r0, [pc, #100]	@ (8002380 <MX_TIM1_Init+0x12c>)
 800231a:	f008 f967 	bl	800a5ec <HAL_TIM_PWM_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002324:	f001 f9aa 	bl	800367c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800232c:	220c      	movs	r2, #12
 800232e:	4619      	mov	r1, r3
 8002330:	4813      	ldr	r0, [pc, #76]	@ (8002380 <MX_TIM1_Init+0x12c>)
 8002332:	f008 f95b 	bl	800a5ec <HAL_TIM_PWM_ConfigChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800233c:	f001 f99e 	bl	800367c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002354:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002358:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4807      	ldr	r0, [pc, #28]	@ (8002380 <MX_TIM1_Init+0x12c>)
 8002364:	f008 fcd2 	bl	800ad0c <HAL_TIMEx_ConfigBreakDeadTime>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800236e:	f001 f985 	bl	800367c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002372:	4803      	ldr	r0, [pc, #12]	@ (8002380 <MX_TIM1_Init+0x12c>)
 8002374:	f001 fd2e 	bl	8003dd4 <HAL_TIM_MspPostInit>

}
 8002378:	bf00      	nop
 800237a:	3748      	adds	r7, #72	@ 0x48
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200002c0 	.word	0x200002c0
 8002384:	40010000 	.word	0x40010000

08002388 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	@ 0x28
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238e:	f107 0320 	add.w	r3, r7, #32
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	615a      	str	r2, [r3, #20]
 80023a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023aa:	4b21      	ldr	r3, [pc, #132]	@ (8002430 <MX_TIM3_Init+0xa8>)
 80023ac:	4a21      	ldr	r2, [pc, #132]	@ (8002434 <MX_TIM3_Init+0xac>)
 80023ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80023b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002430 <MX_TIM3_Init+0xa8>)
 80023b2:	223f      	movs	r2, #63	@ 0x3f
 80023b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002430 <MX_TIM3_Init+0xa8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24;
 80023bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <MX_TIM3_Init+0xa8>)
 80023be:	2218      	movs	r2, #24
 80023c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <MX_TIM3_Init+0xa8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <MX_TIM3_Init+0xa8>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023ce:	4818      	ldr	r0, [pc, #96]	@ (8002430 <MX_TIM3_Init+0xa8>)
 80023d0:	f007 ff1c 	bl	800a20c <HAL_TIM_PWM_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80023da:	f001 f94f 	bl	800367c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023e6:	f107 0320 	add.w	r3, r7, #32
 80023ea:	4619      	mov	r1, r3
 80023ec:	4810      	ldr	r0, [pc, #64]	@ (8002430 <MX_TIM3_Init+0xa8>)
 80023ee:	f008 fc1f 	bl	800ac30 <HAL_TIMEx_MasterConfigSynchronization>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80023f8:	f001 f940 	bl	800367c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023fc:	2360      	movs	r3, #96	@ 0x60
 80023fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	2204      	movs	r2, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4807      	ldr	r0, [pc, #28]	@ (8002430 <MX_TIM3_Init+0xa8>)
 8002414:	f008 f8ea 	bl	800a5ec <HAL_TIM_PWM_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800241e:	f001 f92d 	bl	800367c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002422:	4803      	ldr	r0, [pc, #12]	@ (8002430 <MX_TIM3_Init+0xa8>)
 8002424:	f001 fcd6 	bl	8003dd4 <HAL_TIM_MspPostInit>

}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	@ 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000308 	.word	0x20000308
 8002434:	40000400 	.word	0x40000400

08002438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 800243e:	4a13      	ldr	r2, [pc, #76]	@ (800248c <MX_USART2_UART_Init+0x54>)
 8002440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8002442:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 8002444:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <MX_USART2_UART_Init+0x58>)
 8002446:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002448:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 800244a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800244e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8002450:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 8002452:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002456:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 800245a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800245e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8002460:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 8002462:	2204      	movs	r2, #4
 8002464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 8002474:	f008 fcb0 	bl	800add8 <HAL_UART_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800247e:	f001 f8fd 	bl	800367c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000350 	.word	0x20000350
 800248c:	40004400 	.word	0x40004400
 8002490:	000186a0 	.word	0x000186a0

08002494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <MX_DMA_Init+0x3c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a0b      	ldr	r2, [pc, #44]	@ (80024d0 <MX_DMA_Init+0x3c>)
 80024a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <MX_DMA_Init+0x3c>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2105      	movs	r1, #5
 80024ba:	2010      	movs	r0, #16
 80024bc:	f004 fd50 	bl	8006f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024c0:	2010      	movs	r0, #16
 80024c2:	f004 fd69 	bl	8006f98 <HAL_NVIC_EnableIRQ>

}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	@ 0x28
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002668 <MX_GPIO_Init+0x194>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002668 <MX_GPIO_Init+0x194>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002668 <MX_GPIO_Init+0x194>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b57      	ldr	r3, [pc, #348]	@ (8002668 <MX_GPIO_Init+0x194>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <MX_GPIO_Init+0x194>)
 8002510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002514:	6313      	str	r3, [r2, #48]	@ 0x30
 8002516:	4b54      	ldr	r3, [pc, #336]	@ (8002668 <MX_GPIO_Init+0x194>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <MX_GPIO_Init+0x194>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a4f      	ldr	r2, [pc, #316]	@ (8002668 <MX_GPIO_Init+0x194>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b4d      	ldr	r3, [pc, #308]	@ (8002668 <MX_GPIO_Init+0x194>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	4b49      	ldr	r3, [pc, #292]	@ (8002668 <MX_GPIO_Init+0x194>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a48      	ldr	r2, [pc, #288]	@ (8002668 <MX_GPIO_Init+0x194>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b46      	ldr	r3, [pc, #280]	@ (8002668 <MX_GPIO_Init+0x194>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002560:	4842      	ldr	r0, [pc, #264]	@ (800266c <MX_GPIO_Init+0x198>)
 8002562:	f005 fdb5 	bl	80080d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_1A_IN1_Pin|Motor_1A_IN2_Pin|Motor_1B_IN2_Pin, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	f248 0103 	movw	r1, #32771	@ 0x8003
 800256c:	4840      	ldr	r0, [pc, #256]	@ (8002670 <MX_GPIO_Init+0x19c>)
 800256e:	f005 fdaf 	bl	80080d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_2A_IN1_Pin|Motor_2A_IN2_Pin|TB6612__1_STBY_Pin|TB6612__2_STBY_Pin
 8002572:	2200      	movs	r2, #0
 8002574:	f24f 0123 	movw	r1, #61475	@ 0xf023
 8002578:	483e      	ldr	r0, [pc, #248]	@ (8002674 <MX_GPIO_Init+0x1a0>)
 800257a:	f005 fda9 	bl	80080d0 <HAL_GPIO_WritePin>
                          |Motor_2B_IN1_Pin|Motor_2B_IN2_Pin|Motor_1B_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800257e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002584:	2301      	movs	r3, #1
 8002586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	4835      	ldr	r0, [pc, #212]	@ (800266c <MX_GPIO_Init+0x198>)
 8002598:	f005 fbfe 	bl	8007d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_1A_IN1_Pin Motor_1A_IN2_Pin Motor_1B_IN2_Pin */
  GPIO_InitStruct.Pin = Motor_1A_IN1_Pin|Motor_1A_IN2_Pin|Motor_1B_IN2_Pin;
 800259c:	f248 0303 	movw	r3, #32771	@ 0x8003
 80025a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	482e      	ldr	r0, [pc, #184]	@ (8002670 <MX_GPIO_Init+0x19c>)
 80025b6:	f005 fbef 	bl	8007d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_for_CLK___SNP00128_Pin */
  GPIO_InitStruct.Pin = INT_for_CLK___SNP00128_Pin;
 80025ba:	2310      	movs	r3, #16
 80025bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025be:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80025c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_for_CLK___SNP00128_GPIO_Port, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	4828      	ldr	r0, [pc, #160]	@ (8002670 <MX_GPIO_Init+0x19c>)
 80025d0:	f005 fbe2 	bl	8007d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : for_DT___SNP00128_Pin */
  GPIO_InitStruct.Pin = for_DT___SNP00128_Pin;
 80025d4:	2320      	movs	r3, #32
 80025d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d8:	2300      	movs	r3, #0
 80025da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025dc:	2301      	movs	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(for_DT___SNP00128_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	4822      	ldr	r0, [pc, #136]	@ (8002670 <MX_GPIO_Init+0x19c>)
 80025e8:	f005 fbd6 	bl	8007d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_for_SW___SNP00128_Pin */
  GPIO_InitStruct.Pin = INT_for_SW___SNP00128_Pin;
 80025ec:	2340      	movs	r3, #64	@ 0x40
 80025ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80025f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_for_SW___SNP00128_GPIO_Port, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	481b      	ldr	r0, [pc, #108]	@ (8002670 <MX_GPIO_Init+0x19c>)
 8002602:	f005 fbc9 	bl	8007d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_2A_IN1_Pin Motor_2A_IN2_Pin TB6612__1_STBY_Pin TB6612__2_STBY_Pin
                           Motor_2B_IN1_Pin Motor_2B_IN2_Pin Motor_1B_IN1_Pin */
  GPIO_InitStruct.Pin = Motor_2A_IN1_Pin|Motor_2A_IN2_Pin|TB6612__1_STBY_Pin|TB6612__2_STBY_Pin
 8002606:	f24f 0323 	movw	r3, #61475	@ 0xf023
 800260a:	617b      	str	r3, [r7, #20]
                          |Motor_2B_IN1_Pin|Motor_2B_IN2_Pin|Motor_1B_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	4815      	ldr	r0, [pc, #84]	@ (8002674 <MX_GPIO_Init+0x1a0>)
 8002620:	f005 fbba 	bl	8007d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_for_BNO085_Pin */
  GPIO_InitStruct.Pin = INT_for_BNO085_Pin;
 8002624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800262a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800262e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_for_BNO085_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	480e      	ldr	r0, [pc, #56]	@ (8002674 <MX_GPIO_Init+0x1a0>)
 800263c:	f005 fbac 	bl	8007d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2105      	movs	r1, #5
 8002644:	200a      	movs	r0, #10
 8002646:	f004 fc8b 	bl	8006f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800264a:	200a      	movs	r0, #10
 800264c:	f004 fca4 	bl	8006f98 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2105      	movs	r1, #5
 8002654:	2017      	movs	r0, #23
 8002656:	f004 fc83 	bl	8006f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800265a:	2017      	movs	r0, #23
 800265c:	f004 fc9c 	bl	8006f98 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002660:	bf00      	nop
 8002662:	3728      	adds	r7, #40	@ 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	40020800 	.word	0x40020800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400

08002678 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// EXTI Callback for INT pin (e.g., PA0 for EXTI0)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
	uint32_t now = HAL_GetTick();
 8002682:	f004 fb85 	bl	8006d90 <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

	// BNO085 INT (PA8)
	if (GPIO_Pin == GPIO_PIN_8) {
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800268e:	d102      	bne.n	8002696 <HAL_GPIO_EXTI_Callback+0x1e>
		bno085_int_flag = 1;
 8002690:	4b3b      	ldr	r3, [pc, #236]	@ (8002780 <HAL_GPIO_EXTI_Callback+0x108>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == ENC_CLK_Pin) {
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	2b10      	cmp	r3, #16
 800269a:	d12c      	bne.n	80026f6 <HAL_GPIO_EXTI_Callback+0x7e>
		if (HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port, ENC_CLK_Pin)
 800269c:	2110      	movs	r1, #16
 800269e:	4839      	ldr	r0, [pc, #228]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x10c>)
 80026a0:	f005 fcfe 	bl	80080a0 <HAL_GPIO_ReadPin>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d125      	bne.n	80026f6 <HAL_GPIO_EXTI_Callback+0x7e>
				== GPIO_PIN_RESET) {
			if (now - last_clk_tick > ENCODER_DEBOUNCE_MS) {
 80026aa:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <HAL_GPIO_EXTI_Callback+0x110>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b96      	cmp	r3, #150	@ 0x96
 80026b4:	d91f      	bls.n	80026f6 <HAL_GPIO_EXTI_Callback+0x7e>
				last_clk_tick = now;
 80026b6:	4a34      	ldr	r2, [pc, #208]	@ (8002788 <HAL_GPIO_EXTI_Callback+0x110>)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6013      	str	r3, [r2, #0]
				osMutexAcquire(EncoderMutexHandle, 0);
 80026bc:	4b33      	ldr	r3, [pc, #204]	@ (800278c <HAL_GPIO_EXTI_Callback+0x114>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f009 ff05 	bl	800c4d2 <osMutexAcquire>
				if (HAL_GPIO_ReadPin(ENC_DT_GPIO_Port, ENC_DT_Pin)
 80026c8:	2120      	movs	r1, #32
 80026ca:	482e      	ldr	r0, [pc, #184]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x10c>)
 80026cc:	f005 fce8 	bl	80080a0 <HAL_GPIO_ReadPin>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_GPIO_EXTI_Callback+0x6a>
						== GPIO_PIN_SET)
					encoder_count++;
 80026d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002790 <HAL_GPIO_EXTI_Callback+0x118>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002790 <HAL_GPIO_EXTI_Callback+0x118>)
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e004      	b.n	80026ec <HAL_GPIO_EXTI_Callback+0x74>
				else
					encoder_count--;
 80026e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002790 <HAL_GPIO_EXTI_Callback+0x118>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	4a29      	ldr	r2, [pc, #164]	@ (8002790 <HAL_GPIO_EXTI_Callback+0x118>)
 80026ea:	6013      	str	r3, [r2, #0]
				osMutexRelease(EncoderMutexHandle);
 80026ec:	4b27      	ldr	r3, [pc, #156]	@ (800278c <HAL_GPIO_EXTI_Callback+0x114>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f009 ff39 	bl	800c568 <osMutexRelease>
			}
		}
	}

	if (GPIO_Pin == ENC_SW_Pin) {
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b40      	cmp	r3, #64	@ 0x40
 80026fa:	d13d      	bne.n	8002778 <HAL_GPIO_EXTI_Callback+0x100>
		GPIO_PinState clk_state = HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port,
 80026fc:	2110      	movs	r1, #16
 80026fe:	4821      	ldr	r0, [pc, #132]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002700:	f005 fcce 	bl	80080a0 <HAL_GPIO_ReadPin>
 8002704:	4603      	mov	r3, r0
 8002706:	72fb      	strb	r3, [r7, #11]
				ENC_CLK_Pin);
		GPIO_PinState dt_state = HAL_GPIO_ReadPin(ENC_DT_GPIO_Port,
 8002708:	2120      	movs	r1, #32
 800270a:	481e      	ldr	r0, [pc, #120]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x10c>)
 800270c:	f005 fcc8 	bl	80080a0 <HAL_GPIO_ReadPin>
 8002710:	4603      	mov	r3, r0
 8002712:	72bb      	strb	r3, [r7, #10]
				ENC_DT_Pin);
		GPIO_PinState sw_state = HAL_GPIO_ReadPin(ENC_SW_GPIO_Port,
 8002714:	2140      	movs	r1, #64	@ 0x40
 8002716:	481b      	ldr	r0, [pc, #108]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002718:	f005 fcc2 	bl	80080a0 <HAL_GPIO_ReadPin>
 800271c:	4603      	mov	r3, r0
 800271e:	727b      	strb	r3, [r7, #9]
				ENC_SW_Pin);
		// Only count if button is actually pressed (logic low) and both CLK and DT are high
		// Note: When turn rotary knob left/right, SW pin is always pulled low together with CLK and DT pins.
		if (sw_state == GPIO_PIN_RESET) {
 8002720:	7a7b      	ldrb	r3, [r7, #9]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d128      	bne.n	8002778 <HAL_GPIO_EXTI_Callback+0x100>
			if (dt_state == GPIO_PIN_SET) {
 8002726:	7abb      	ldrb	r3, [r7, #10]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d125      	bne.n	8002778 <HAL_GPIO_EXTI_Callback+0x100>
				if (clk_state == GPIO_PIN_SET) {
 800272c:	7afb      	ldrb	r3, [r7, #11]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d122      	bne.n	8002778 <HAL_GPIO_EXTI_Callback+0x100>
					// Ignore SW if just rotated (within 10 ms of last CLK)
					if ((now - last_clk_tick) > CLK_SW_DEBOUNCE_MS) {
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <HAL_GPIO_EXTI_Callback+0x110>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b1e      	cmp	r3, #30
 800273c:	d91c      	bls.n	8002778 <HAL_GPIO_EXTI_Callback+0x100>
						if (now - last_sw_tick > BUTTON_DEBOUNCE_MS) {
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800274a:	d915      	bls.n	8002778 <HAL_GPIO_EXTI_Callback+0x100>
							last_sw_tick = now;
 800274c:	4a11      	ldr	r2, [pc, #68]	@ (8002794 <HAL_GPIO_EXTI_Callback+0x11c>)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6013      	str	r3, [r2, #0]
							osMutexAcquire(EncoderMutexHandle, 0);
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <HAL_GPIO_EXTI_Callback+0x114>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f009 feba 	bl	800c4d2 <osMutexAcquire>
							encoder_button_pressed = 1;
 800275e:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <HAL_GPIO_EXTI_Callback+0x120>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
							encoder_sw_count++; // Increment counter on each debounced press
 8002764:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <HAL_GPIO_EXTI_Callback+0x124>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	4a0c      	ldr	r2, [pc, #48]	@ (800279c <HAL_GPIO_EXTI_Callback+0x124>)
 800276c:	6013      	str	r3, [r2, #0]
							osMutexRelease(EncoderMutexHandle);
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <HAL_GPIO_EXTI_Callback+0x114>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f009 fef8 	bl	800c568 <osMutexRelease>
					}
				}
			}
		}
	}
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	2000046b 	.word	0x2000046b
 8002784:	40020000 	.word	0x40020000
 8002788:	2000047c 	.word	0x2000047c
 800278c:	20000410 	.word	0x20000410
 8002790:	20000470 	.word	0x20000470
 8002794:	20000480 	.word	0x20000480
 8002798:	20000474 	.word	0x20000474
 800279c:	20000478 	.word	0x20000478

080027a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002868 <HAL_UART_RxCpltCallback+0xc8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d156      	bne.n	8002860 <HAL_UART_RxCpltCallback+0xc0>
		// Validate SBUS frame start and end bytes
		if (sbus_rx_buffer[0] == 0x0F && sbus_rx_buffer[24] == 0x00) {
 80027b2:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <HAL_UART_RxCpltCallback+0xcc>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	d152      	bne.n	8002860 <HAL_UART_RxCpltCallback+0xc0>
 80027ba:	4b2c      	ldr	r3, [pc, #176]	@ (800286c <HAL_UART_RxCpltCallback+0xcc>)
 80027bc:	7e1b      	ldrb	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d14e      	bne.n	8002860 <HAL_UART_RxCpltCallback+0xc0>
			// Valid SBUS frame received
			sbus_last_valid_time = HAL_GetTick();
 80027c2:	f004 fae5 	bl	8006d90 <HAL_GetTick>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a29      	ldr	r2, [pc, #164]	@ (8002870 <HAL_UART_RxCpltCallback+0xd0>)
 80027ca:	6013      	str	r3, [r2, #0]
			sbus_signal_valid = 1;
 80027cc:	4b29      	ldr	r3, [pc, #164]	@ (8002874 <HAL_UART_RxCpltCallback+0xd4>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]

			// Unpack all 16 channels
			for (int ch = 0; ch < 16; ch++) {
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e040      	b.n	800285a <HAL_UART_RxCpltCallback+0xba>
				int byte_idx = 1 + (ch * 11) / 8;
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	da00      	bge.n	80027ea <HAL_UART_RxCpltCallback+0x4a>
 80027e8:	3307      	adds	r3, #7
 80027ea:	10db      	asrs	r3, r3, #3
 80027ec:	3301      	adds	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
				int bit_idx = (ch * 11) % 8;
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	425a      	negs	r2, r3
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	f002 0207 	and.w	r2, r2, #7
 8002806:	bf58      	it	pl
 8002808:	4253      	negpl	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
				uint16_t value = (sbus_rx_buffer[byte_idx]
 800280c:	4a17      	ldr	r2, [pc, #92]	@ (800286c <HAL_UART_RxCpltCallback+0xcc>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	b21a      	sxth	r2, r3
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	3301      	adds	r3, #1
 800281a:	4914      	ldr	r1, [pc, #80]	@ (800286c <HAL_UART_RxCpltCallback+0xcc>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	b21b      	sxth	r3, r3
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	b21b      	sxth	r3, r3
 8002824:	4313      	orrs	r3, r2
 8002826:	b21b      	sxth	r3, r3
				uint16_t value = (sbus_rx_buffer[byte_idx]
 8002828:	817b      	strh	r3, [r7, #10]
												 | (sbus_rx_buffer[byte_idx + 2] << 16));
				value = (value >> bit_idx) & 0x07FF;
 800282a:	897a      	ldrh	r2, [r7, #10]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	fa42 f303 	asr.w	r3, r2, r3
 8002832:	b29b      	uxth	r3, r3
 8002834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002838:	817b      	strh	r3, [r7, #10]

				// Additional range validation
				if (value >= 172 && value <= 1811) {
 800283a:	897b      	ldrh	r3, [r7, #10]
 800283c:	2bab      	cmp	r3, #171	@ 0xab
 800283e:	d909      	bls.n	8002854 <HAL_UART_RxCpltCallback+0xb4>
 8002840:	897b      	ldrh	r3, [r7, #10]
 8002842:	f240 7213 	movw	r2, #1811	@ 0x713
 8002846:	4293      	cmp	r3, r2
 8002848:	d804      	bhi.n	8002854 <HAL_UART_RxCpltCallback+0xb4>
					sbus_channels[ch] = value;
 800284a:	490b      	ldr	r1, [pc, #44]	@ (8002878 <HAL_UART_RxCpltCallback+0xd8>)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	897a      	ldrh	r2, [r7, #10]
 8002850:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int ch = 0; ch < 16; ch++) {
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3301      	adds	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b0f      	cmp	r3, #15
 800285e:	ddbb      	ble.n	80027d8 <HAL_UART_RxCpltCallback+0x38>
		} else {
			// Invalid frame - don't update sbus_signal_valid or channels
		}
		// DO NOT restart DMA - Circular mode handles this automatically
	}
}
 8002860:	bf00      	nop
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40004400 	.word	0x40004400
 800286c:	20000420 	.word	0x20000420
 8002870:	20000464 	.word	0x20000464
 8002874:	20000468 	.word	0x20000468
 8002878:	2000043c 	.word	0x2000043c

0800287c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <HAL_UART_ErrorCallback+0x5c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d11f      	bne.n	80028ce <HAL_UART_ErrorCallback+0x52>
        // Indicate error visually
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800288e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002892:	4812      	ldr	r0, [pc, #72]	@ (80028dc <HAL_UART_ErrorCallback+0x60>)
 8002894:	f005 fc35 	bl	8008102 <HAL_GPIO_TogglePin>

        // Mark SBUS as invalid on UART error
        sbus_signal_valid = 0;
 8002898:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <HAL_UART_ErrorCallback+0x64>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]

        // Stop all motors immediately for safety
        stop_all_motors_3wheel();
 800289e:	f7fe fea7 	bl	80015f0 <stop_all_motors_3wheel>

        // Store error information
        osMutexAcquire(UARTMutexHandle, osWaitForever);
 80028a2:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <HAL_UART_ErrorCallback+0x68>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f04f 31ff 	mov.w	r1, #4294967295
 80028aa:	4618      	mov	r0, r3
 80028ac:	f009 fe11 	bl	800c4d2 <osMutexAcquire>
        uart2_error_code = huart->ErrorCode;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	4a0c      	ldr	r2, [pc, #48]	@ (80028e8 <HAL_UART_ErrorCallback+0x6c>)
 80028b6:	6013      	str	r3, [r2, #0]
        uart2_error_flag = 1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_UART_ErrorCallback+0x70>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
        osMutexRelease(UARTMutexHandle);
 80028be:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_UART_ErrorCallback+0x68>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f009 fe50 	bl	800c568 <osMutexRelease>

        // Set flag for recovery in main task context
        sbus_recovery_requested = 1;
 80028c8:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_UART_ErrorCallback+0x74>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
    }
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40004400 	.word	0x40004400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	20000468 	.word	0x20000468
 80028e4:	20000414 	.word	0x20000414
 80028e8:	2000045c 	.word	0x2000045c
 80028ec:	20000460 	.word	0x20000460
 80028f0:	2000046a 	.word	0x2000046a

080028f4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b093      	sub	sp, #76	@ 0x4c
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    static ch7_position_t last_ch7_position = CH7_POSITION_UNKNOWN;
    static uint32_t ch7_stable_time = 0;
    const uint32_t CH7_DEBOUNCE_MS = 100; // Debounce time for channel 7
 80028fc:	2364      	movs	r3, #100	@ 0x64
 80028fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Infinite loop */
    for (;;) {
        robot_mode_t mode;
        robot_state_t state;
        uint8_t mode_changed = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint8_t state_changed = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        uint8_t sbus_valid = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        float current_compass_heading = 0.0f;
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
        float current_robot_front = 0.0f;
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	623b      	str	r3, [r7, #32]

        // --- SBUS Recovery Logic ---
        if (sbus_recovery_requested) {
 800291e:	4ba6      	ldr	r3, [pc, #664]	@ (8002bb8 <StartDefaultTask+0x2c4>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <StartDefaultTask+0x6c>
            sbus_recovery_requested = 0;
 8002928:	4ba3      	ldr	r3, [pc, #652]	@ (8002bb8 <StartDefaultTask+0x2c4>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
            // Perform recovery attempts (non-blocking, watchdog-friendly)
            for (int attempt = 0; attempt < SBUS_MAX_RECOVERY_ATTEMPTS; attempt++) {
 800292e:	2300      	movs	r3, #0
 8002930:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002932:	e012      	b.n	800295a <StartDefaultTask+0x66>
                HAL_UART_AbortReceive(&huart2);
 8002934:	48a1      	ldr	r0, [pc, #644]	@ (8002bbc <StartDefaultTask+0x2c8>)
 8002936:	f008 fac4 	bl	800aec2 <HAL_UART_AbortReceive>
                MX_USART2_UART_Init();
 800293a:	f7ff fd7d 	bl	8002438 <MX_USART2_UART_Init>
                HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 800293e:	2219      	movs	r2, #25
 8002940:	499f      	ldr	r1, [pc, #636]	@ (8002bc0 <StartDefaultTask+0x2cc>)
 8002942:	489e      	ldr	r0, [pc, #632]	@ (8002bbc <StartDefaultTask+0x2c8>)
 8002944:	f008 fa98 	bl	800ae78 <HAL_UART_Receive_DMA>
                HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog during recovery
 8002948:	489e      	ldr	r0, [pc, #632]	@ (8002bc4 <StartDefaultTask+0x2d0>)
 800294a:	f006 ff09 	bl	8009760 <HAL_IWDG_Refresh>
                osDelay(10); // Give hardware time to settle
 800294e:	200a      	movs	r0, #10
 8002950:	f009 fd1e 	bl	800c390 <osDelay>
            for (int attempt = 0; attempt < SBUS_MAX_RECOVERY_ATTEMPTS; attempt++) {
 8002954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002956:	3301      	adds	r3, #1
 8002958:	63bb      	str	r3, [r7, #56]	@ 0x38
 800295a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295c:	2b04      	cmp	r3, #4
 800295e:	dde9      	ble.n	8002934 <StartDefaultTask+0x40>
                // Optionally check if recovery succeeded and break if so
            }
        }

        // Check SBUS signal validity
        sbus_valid = is_sbus_signal_valid();
 8002960:	f7fe fe54 	bl	800160c <is_sbus_signal_valid>
 8002964:	4603      	mov	r3, r0
 8002966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        // Get current compass heading
        osMutexAcquire(CompassMutexHandle, osWaitForever);
 800296a:	4b97      	ldr	r3, [pc, #604]	@ (8002bc8 <StartDefaultTask+0x2d4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f04f 31ff 	mov.w	r1, #4294967295
 8002972:	4618      	mov	r0, r3
 8002974:	f009 fdad 	bl	800c4d2 <osMutexAcquire>
        current_compass_heading = compass_heading_deg;
 8002978:	4b94      	ldr	r3, [pc, #592]	@ (8002bcc <StartDefaultTask+0x2d8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
        osMutexRelease(CompassMutexHandle);
 800297e:	4b92      	ldr	r3, [pc, #584]	@ (8002bc8 <StartDefaultTask+0x2d4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f009 fdf0 	bl	800c568 <osMutexRelease>

        // Convert to robot front direction
        current_robot_front = compass_to_robot_front(current_compass_heading);
 8002988:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800298c:	f7ff f9ca 	bl	8001d24 <compass_to_robot_front>
 8002990:	ed87 0a08 	vstr	s0, [r7, #32]

        // Check for mode/state changes
        osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002994:	4b8e      	ldr	r3, [pc, #568]	@ (8002bd0 <StartDefaultTask+0x2dc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	4618      	mov	r0, r3
 800299e:	f009 fd98 	bl	800c4d2 <osMutexAcquire>
        mode = current_mode;
 80029a2:	4b8c      	ldr	r3, [pc, #560]	@ (8002bd4 <StartDefaultTask+0x2e0>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	77fb      	strb	r3, [r7, #31]
        state = robot_state;
 80029a8:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd8 <StartDefaultTask+0x2e4>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	77bb      	strb	r3, [r7, #30]
        if (mode_change_request) {
 80029ae:	4b8b      	ldr	r3, [pc, #556]	@ (8002bdc <StartDefaultTask+0x2e8>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <StartDefaultTask+0xd0>
            mode_change_request = 0;
 80029b8:	4b88      	ldr	r3, [pc, #544]	@ (8002bdc <StartDefaultTask+0x2e8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
            mode_changed = 1;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        }
        if (state_toggle_request) {
 80029c4:	4b86      	ldr	r3, [pc, #536]	@ (8002be0 <StartDefaultTask+0x2ec>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <StartDefaultTask+0xe6>
            state_toggle_request = 0;
 80029ce:	4b84      	ldr	r3, [pc, #528]	@ (8002be0 <StartDefaultTask+0x2ec>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
            state_changed = 1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        }
        osMutexRelease(ModeMutexHandle);
 80029da:	4b7d      	ldr	r3, [pc, #500]	@ (8002bd0 <StartDefaultTask+0x2dc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f009 fdc2 	bl	800c568 <osMutexRelease>

        // ENHANCED: Check Channel 7 for automatic mode control
        if (sbus_valid) {
 80029e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8086 	beq.w	8002afa <StartDefaultTask+0x206>
            ch7_position_t current_ch7 = get_channel7_position();
 80029ee:	f7ff fa33 	bl	8001e58 <get_channel7_position>
 80029f2:	4603      	mov	r3, r0
 80029f4:	777b      	strb	r3, [r7, #29]
            uint32_t now = HAL_GetTick();
 80029f6:	f004 f9cb 	bl	8006d90 <HAL_GetTick>
 80029fa:	61b8      	str	r0, [r7, #24]

            // Debounce Channel 7 changes
            if (current_ch7 != last_ch7_position && current_ch7 != CH7_POSITION_UNKNOWN) {
 80029fc:	4b79      	ldr	r3, [pc, #484]	@ (8002be4 <StartDefaultTask+0x2f0>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	7f7a      	ldrb	r2, [r7, #29]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d070      	beq.n	8002ae8 <StartDefaultTask+0x1f4>
 8002a06:	7f7b      	ldrb	r3, [r7, #29]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d06d      	beq.n	8002ae8 <StartDefaultTask+0x1f4>
                if (ch7_stable_time == 0) {
 8002a0c:	4b76      	ldr	r3, [pc, #472]	@ (8002be8 <StartDefaultTask+0x2f4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d103      	bne.n	8002a1c <StartDefaultTask+0x128>
                    ch7_stable_time = now; // Start debounce timer
 8002a14:	4a74      	ldr	r2, [pc, #464]	@ (8002be8 <StartDefaultTask+0x2f4>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	6013      	str	r3, [r2, #0]
                if (ch7_stable_time == 0) {
 8002a1a:	e075      	b.n	8002b08 <StartDefaultTask+0x214>
                } else if ((now - ch7_stable_time) >= CH7_DEBOUNCE_MS) {
 8002a1c:	4b72      	ldr	r3, [pc, #456]	@ (8002be8 <StartDefaultTask+0x2f4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d86e      	bhi.n	8002b08 <StartDefaultTask+0x214>
                    // Channel 7 position has been stable for debounce time
                    robot_mode_t target_mode;
                    robot_state_t target_state;

                    switch (current_ch7) {
 8002a2a:	7f7b      	ldrb	r3, [r7, #29]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d014      	beq.n	8002a5a <StartDefaultTask+0x166>
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	dc19      	bgt.n	8002a68 <StartDefaultTask+0x174>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <StartDefaultTask+0x14a>
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d007      	beq.n	8002a4c <StartDefaultTask+0x158>
 8002a3c:	e014      	b.n	8002a68 <StartDefaultTask+0x174>
                    case CH7_POSITION_MIN:
                        target_mode = MODE_DISPLAY_SENSORS;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                        target_state = STATE_IDLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                        break;
 8002a4a:	e014      	b.n	8002a76 <StartDefaultTask+0x182>
                    case CH7_POSITION_MID:
                        target_mode = MODE_MOVEMENT;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                        target_state = STATE_RUNNING;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                        break;
 8002a58:	e00d      	b.n	8002a76 <StartDefaultTask+0x182>
                    case CH7_POSITION_MAX:
                        target_mode = MODE_MOVEMENT_HL;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                        target_state = STATE_RUNNING;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                        break;
 8002a66:	e006      	b.n	8002a76 <StartDefaultTask+0x182>
                    default:
                        target_mode = mode; // No change
 8002a68:	7ffb      	ldrb	r3, [r7, #31]
 8002a6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                        target_state = state;
 8002a6e:	7fbb      	ldrb	r3, [r7, #30]
 8002a70:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                        break;
 8002a74:	bf00      	nop
                    }

                    // Apply changes if different from current
                    osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002a76:	4b56      	ldr	r3, [pc, #344]	@ (8002bd0 <StartDefaultTask+0x2dc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f009 fd27 	bl	800c4d2 <osMutexAcquire>
                    if (target_mode != current_mode || target_state != robot_state) {
 8002a84:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <StartDefaultTask+0x2e0>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d106      	bne.n	8002aa0 <StartDefaultTask+0x1ac>
 8002a92:	4b51      	ldr	r3, [pc, #324]	@ (8002bd8 <StartDefaultTask+0x2e4>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d017      	beq.n	8002ad0 <StartDefaultTask+0x1dc>
                        current_mode = target_mode;
 8002aa0:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd4 <StartDefaultTask+0x2e0>)
 8002aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002aa6:	7013      	strb	r3, [r2, #0]
                        selected_mode = target_mode; // Keep encoder selection in sync
 8002aa8:	4a50      	ldr	r2, [pc, #320]	@ (8002bec <StartDefaultTask+0x2f8>)
 8002aaa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002aae:	7013      	strb	r3, [r2, #0]
                        robot_state = target_state;
 8002ab0:	4a49      	ldr	r2, [pc, #292]	@ (8002bd8 <StartDefaultTask+0x2e4>)
 8002ab2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ab6:	7013      	strb	r3, [r2, #0]
                        mode_change_request = 1;
 8002ab8:	4b48      	ldr	r3, [pc, #288]	@ (8002bdc <StartDefaultTask+0x2e8>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
                        state_toggle_request = 1;
 8002abe:	4b48      	ldr	r3, [pc, #288]	@ (8002be0 <StartDefaultTask+0x2ec>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
                        mode_changed = 1;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        state_changed = 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                    }
                    osMutexRelease(ModeMutexHandle);
 8002ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd0 <StartDefaultTask+0x2dc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f009 fd47 	bl	800c568 <osMutexRelease>

                    last_ch7_position = current_ch7;
 8002ada:	4a42      	ldr	r2, [pc, #264]	@ (8002be4 <StartDefaultTask+0x2f0>)
 8002adc:	7f7b      	ldrb	r3, [r7, #29]
 8002ade:	7013      	strb	r3, [r2, #0]
                    ch7_stable_time = 0; // Reset debounce timer
 8002ae0:	4b41      	ldr	r3, [pc, #260]	@ (8002be8 <StartDefaultTask+0x2f4>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
                if (ch7_stable_time == 0) {
 8002ae6:	e00f      	b.n	8002b08 <StartDefaultTask+0x214>
                }
            } else if (current_ch7 == last_ch7_position) {
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8002be4 <StartDefaultTask+0x2f0>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	7f7a      	ldrb	r2, [r7, #29]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d10b      	bne.n	8002b0a <StartDefaultTask+0x216>
                ch7_stable_time = 0; // Reset debounce if position unchanged
 8002af2:	4b3d      	ldr	r3, [pc, #244]	@ (8002be8 <StartDefaultTask+0x2f4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e007      	b.n	8002b0a <StartDefaultTask+0x216>
            }
        } else {
            // SBUS invalid - reset Channel 7 tracking
            last_ch7_position = CH7_POSITION_UNKNOWN;
 8002afa:	4b3a      	ldr	r3, [pc, #232]	@ (8002be4 <StartDefaultTask+0x2f0>)
 8002afc:	2203      	movs	r2, #3
 8002afe:	701a      	strb	r2, [r3, #0]
            ch7_stable_time = 0;
 8002b00:	4b39      	ldr	r3, [pc, #228]	@ (8002be8 <StartDefaultTask+0x2f4>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e000      	b.n	8002b0a <StartDefaultTask+0x216>
                if (ch7_stable_time == 0) {
 8002b08:	bf00      	nop
        }

        // Handle mode changes
        if (mode_changed) {
 8002b0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <StartDefaultTask+0x232>
            // Stop all motors when changing modes
            stop_all_motors_3wheel();
 8002b12:	f7fe fd6d 	bl	80015f0 <stop_all_motors_3wheel>
            // Disable heading lock when changing modes
            disable_heading_lock();
 8002b16:	f7ff f8f9 	bl	8001d0c <disable_heading_lock>
            // Reset recovery state
            sbus_was_lost = 0;
 8002b1a:	4b35      	ldr	r3, [pc, #212]	@ (8002bf0 <StartDefaultTask+0x2fc>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
            heading_lock_was_enabled = 0;
 8002b20:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <StartDefaultTask+0x300>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
        }

        // Handle state changes
        if (state_changed) {
 8002b26:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01d      	beq.n	8002b6a <StartDefaultTask+0x276>
            if (state == STATE_IDLE) {
 8002b2e:	7fbb      	ldrb	r3, [r7, #30]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <StartDefaultTask+0x256>
                // Stop all motors when going to idle
                stop_all_motors_3wheel();
 8002b34:	f7fe fd5c 	bl	80015f0 <stop_all_motors_3wheel>
                // Disable heading lock when going to idle
                disable_heading_lock();
 8002b38:	f7ff f8e8 	bl	8001d0c <disable_heading_lock>
                // Reset recovery state
                sbus_was_lost = 0;
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <StartDefaultTask+0x2fc>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
                heading_lock_was_enabled = 0;
 8002b42:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf4 <StartDefaultTask+0x300>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e00f      	b.n	8002b6a <StartDefaultTask+0x276>
            } else if (state == STATE_RUNNING && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002b4a:	7fbb      	ldrb	r3, [r7, #30]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d10c      	bne.n	8002b6a <StartDefaultTask+0x276>
 8002b50:	7ffb      	ldrb	r3, [r7, #31]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d109      	bne.n	8002b6a <StartDefaultTask+0x276>
                // Enable heading lock when starting movement mode with heading lock
                // Use current compass heading (function will convert to robot front)
                set_heading_lock(current_compass_heading);
 8002b56:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002b5a:	f7ff f8b9 	bl	8001cd0 <set_heading_lock>
                // Reset recovery state for new session
                sbus_was_lost = 0;
 8002b5e:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <StartDefaultTask+0x2fc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
                heading_lock_was_enabled = 1;
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <StartDefaultTask+0x300>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
            }
        }

        // ENHANCED SBUS RECOVERY LOGIC
        if (mode == MODE_MOVEMENT || mode == MODE_MOVEMENT_HL) { // UPDATED
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d003      	beq.n	8002b78 <StartDefaultTask+0x284>
 8002b70:	7ffb      	ldrb	r3, [r7, #31]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	f040 80ef 	bne.w	8002d56 <StartDefaultTask+0x462>
            if (sbus_valid) {
 8002b78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80c7 	beq.w	8002d10 <StartDefaultTask+0x41c>
                // SBUS signal is valid

                // Check if we just recovered from SBUS loss
                if (sbus_was_lost && mode == MODE_MOVEMENT_HL && state == STATE_RUNNING) {
 8002b82:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <StartDefaultTask+0x2fc>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d03e      	beq.n	8002c0a <StartDefaultTask+0x316>
 8002b8c:	7ffb      	ldrb	r3, [r7, #31]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d13b      	bne.n	8002c0a <StartDefaultTask+0x316>
 8002b92:	7fbb      	ldrb	r3, [r7, #30]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d138      	bne.n	8002c0a <StartDefaultTask+0x316>
                    if (heading_lock_was_enabled) {
 8002b98:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <StartDefaultTask+0x300>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d030      	beq.n	8002c04 <StartDefaultTask+0x310>
                        // Try to restore from EEPROM first
                        if (restore_heading_lock_from_eeprom()) {
 8002ba2:	f7ff f929 	bl	8001df8 <restore_heading_lock_from_eeprom>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d027      	beq.n	8002bfc <StartDefaultTask+0x308>
                            heading_lock_enabled = 1;
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <StartDefaultTask+0x304>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
                            reset_heading_pid();
 8002bb2:	f7ff f863 	bl	8001c7c <reset_heading_pid>
 8002bb6:	e025      	b.n	8002c04 <StartDefaultTask+0x310>
 8002bb8:	2000046a 	.word	0x2000046a
 8002bbc:	20000350 	.word	0x20000350
 8002bc0:	20000420 	.word	0x20000420
 8002bc4:	200002b4 	.word	0x200002b4
 8002bc8:	20000408 	.word	0x20000408
 8002bcc:	2000046c 	.word	0x2000046c
 8002bd0:	20000418 	.word	0x20000418
 8002bd4:	20000484 	.word	0x20000484
 8002bd8:	20000486 	.word	0x20000486
 8002bdc:	20000487 	.word	0x20000487
 8002be0:	20000488 	.word	0x20000488
 8002be4:	20000008 	.word	0x20000008
 8002be8:	2000051c 	.word	0x2000051c
 8002bec:	20000485 	.word	0x20000485
 8002bf0:	200004b8 	.word	0x200004b8
 8002bf4:	200004b9 	.word	0x200004b9
 8002bf8:	20000496 	.word	0x20000496
                        } else {
                            // Fallback to current heading
                            set_heading_lock(current_compass_heading);
 8002bfc:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002c00:	f7ff f866 	bl	8001cd0 <set_heading_lock>
                        }
                    }
                    sbus_was_lost = 0;
 8002c04:	4b57      	ldr	r3, [pc, #348]	@ (8002d64 <StartDefaultTask+0x470>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]

                // Updated SBUS channel mapping:
                // Channel 2 (index 1): Left/Right (X-axis)
                // Channel 5 (index 4): Forward/Backward (Y-axis)
                // Channel 4 (index 3): Rotation (Z-axis)
                int16_t x = sbus_to_percentage(sbus_channels[1]); // Channel 2: Left/Right
 8002c0a:	4b57      	ldr	r3, [pc, #348]	@ (8002d68 <StartDefaultTask+0x474>)
 8002c0c:	885b      	ldrh	r3, [r3, #2]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fac9 	bl	80011a8 <sbus_to_percentage>
 8002c16:	4603      	mov	r3, r0
 8002c18:	82fb      	strh	r3, [r7, #22]
                int16_t y = sbus_to_percentage(sbus_channels[4]); // Channel 5: Forward/Backward
 8002c1a:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <StartDefaultTask+0x474>)
 8002c1c:	891b      	ldrh	r3, [r3, #8]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe fac1 	bl	80011a8 <sbus_to_percentage>
 8002c26:	4603      	mov	r3, r0
 8002c28:	82bb      	strh	r3, [r7, #20]
                int16_t rot = sbus_to_percentage(sbus_channels[3]); // Channel 4: Rotation
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d68 <StartDefaultTask+0x474>)
 8002c2c:	88db      	ldrh	r3, [r3, #6]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fab9 	bl	80011a8 <sbus_to_percentage>
 8002c36:	4603      	mov	r3, r0
 8002c38:	827b      	strh	r3, [r7, #18]

                // Calculate heading correction if heading lock is enabled
                float heading_correction = 0.0f;
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	633b      	str	r3, [r7, #48]	@ 0x30
                if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002c40:	4b4a      	ldr	r3, [pc, #296]	@ (8002d6c <StartDefaultTask+0x478>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <StartDefaultTask+0x372>
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d10a      	bne.n	8002c66 <StartDefaultTask+0x372>
                    heading_correction = calculate_heading_pid_simplified(locked_heading, current_robot_front);
 8002c50:	4b47      	ldr	r3, [pc, #284]	@ (8002d70 <StartDefaultTask+0x47c>)
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	edd7 0a08 	vldr	s1, [r7, #32]
 8002c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5e:	f7fe fd17 	bl	8001690 <calculate_heading_pid_simplified>
 8002c62:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
                }

                // Calculate individual motor speeds for 3-wheel omnidirectional
                int16_t lf, rf, bk;
                if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002c66:	4b41      	ldr	r3, [pc, #260]	@ (8002d6c <StartDefaultTask+0x478>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d016      	beq.n	8002c9e <StartDefaultTask+0x3aa>
 8002c70:	7ffb      	ldrb	r3, [r7, #31]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d113      	bne.n	8002c9e <StartDefaultTask+0x3aa>
                    calculate_omni_motor_speeds_with_heading(x, y, rot,
 8002c76:	f107 0410 	add.w	r4, r7, #16
 8002c7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c7e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002c82:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	f107 030e 	add.w	r3, r7, #14
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	4623      	mov	r3, r4
 8002c94:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8002c98:	f7fe fb36 	bl	8001308 <calculate_omni_motor_speeds_with_heading>
 8002c9c:	e010      	b.n	8002cc0 <StartDefaultTask+0x3cc>
                            heading_correction, &lf, &rf, &bk);
                } else {
                    calculate_omni_motor_speeds(x, y, rot, &lf, &rf, &bk);
 8002c9e:	f107 0410 	add.w	r4, r7, #16
 8002ca2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ca6:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002caa:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	f107 030e 	add.w	r3, r7, #14
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	4623      	mov	r3, r4
 8002cbc:	f7fe faa8 	bl	8001210 <calculate_omni_motor_speeds>
                }

                // Update shared variables
                joystick_x = x;
 8002cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d74 <StartDefaultTask+0x480>)
 8002cc2:	8afb      	ldrh	r3, [r7, #22]
 8002cc4:	8013      	strh	r3, [r2, #0]
                joystick_y = y;
 8002cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8002d78 <StartDefaultTask+0x484>)
 8002cc8:	8abb      	ldrh	r3, [r7, #20]
 8002cca:	8013      	strh	r3, [r2, #0]
                joystick_rotation = rot;
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d7c <StartDefaultTask+0x488>)
 8002cce:	8a7b      	ldrh	r3, [r7, #18]
 8002cd0:	8013      	strh	r3, [r2, #0]
                motor_left_front = lf;   // Motor 1B
 8002cd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <StartDefaultTask+0x48c>)
 8002cd8:	801a      	strh	r2, [r3, #0]
                motor_right_front = rf;  // Motor 1A
 8002cda:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002cde:	4b29      	ldr	r3, [pc, #164]	@ (8002d84 <StartDefaultTask+0x490>)
 8002ce0:	801a      	strh	r2, [r3, #0]
                motor_back = bk;         // Motor 2A
 8002ce2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ce6:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <StartDefaultTask+0x494>)
 8002ce8:	801a      	strh	r2, [r3, #0]

                // Apply to actual motors for both movement modes when running
                if ((mode == MODE_MOVEMENT || mode == MODE_MOVEMENT_HL)
 8002cea:	7ffb      	ldrb	r3, [r7, #31]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <StartDefaultTask+0x402>
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d12f      	bne.n	8002d56 <StartDefaultTask+0x462>
                        && state == STATE_RUNNING) { // UPDATED
 8002cf6:	7fbb      	ldrb	r3, [r7, #30]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d12c      	bne.n	8002d56 <StartDefaultTask+0x462>
                    apply_motor_speeds_3wheel(lf, rf, bk);
 8002cfc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d00:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002d04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fbcf 	bl	80014ac <apply_motor_speeds_3wheel>
 8002d0e:	e022      	b.n	8002d56 <StartDefaultTask+0x462>
                }
            } else {
                // SBUS signal lost

                // Remember heading lock state before disabling it
                if (!sbus_was_lost) {
 8002d10:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <StartDefaultTask+0x470>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <StartDefaultTask+0x436>
                    // First time detecting SBUS loss
                    heading_lock_was_enabled = heading_lock_enabled;
 8002d1a:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <StartDefaultTask+0x478>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <StartDefaultTask+0x498>)
 8002d22:	701a      	strb	r2, [r3, #0]
                    sbus_was_lost = 1;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <StartDefaultTask+0x470>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
                }

                // Stop all motors immediately for safety
                stop_all_motors_3wheel();
 8002d2a:	f7fe fc61 	bl	80015f0 <stop_all_motors_3wheel>
                // Temporarily disable heading lock (but remember its state)
                disable_heading_lock();
 8002d2e:	f7fe ffed 	bl	8001d0c <disable_heading_lock>

                // Reset joystick values to indicate no signal
                joystick_x = 0;
 8002d32:	4b10      	ldr	r3, [pc, #64]	@ (8002d74 <StartDefaultTask+0x480>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	801a      	strh	r2, [r3, #0]
                joystick_y = 0;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <StartDefaultTask+0x484>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	801a      	strh	r2, [r3, #0]
                joystick_rotation = 0;
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <StartDefaultTask+0x488>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	801a      	strh	r2, [r3, #0]
                motor_left_front = 0;
 8002d44:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <StartDefaultTask+0x48c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	801a      	strh	r2, [r3, #0]
                motor_right_front = 0;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <StartDefaultTask+0x490>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	801a      	strh	r2, [r3, #0]
                motor_back = 0;
 8002d50:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <StartDefaultTask+0x494>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	801a      	strh	r2, [r3, #0]
            }
        }

        HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog
 8002d56:	480e      	ldr	r0, [pc, #56]	@ (8002d90 <StartDefaultTask+0x49c>)
 8002d58:	f006 fd02 	bl	8009760 <HAL_IWDG_Refresh>

        osDelay(50); // Update at 20Hz
 8002d5c:	2032      	movs	r0, #50	@ 0x32
 8002d5e:	f009 fb17 	bl	800c390 <osDelay>
    for (;;) {
 8002d62:	e5cd      	b.n	8002900 <StartDefaultTask+0xc>
 8002d64:	200004b8 	.word	0x200004b8
 8002d68:	2000043c 	.word	0x2000043c
 8002d6c:	20000496 	.word	0x20000496
 8002d70:	20000498 	.word	0x20000498
 8002d74:	2000048a 	.word	0x2000048a
 8002d78:	2000048c 	.word	0x2000048c
 8002d7c:	2000048e 	.word	0x2000048e
 8002d80:	20000490 	.word	0x20000490
 8002d84:	20000492 	.word	0x20000492
 8002d88:	20000494 	.word	0x20000494
 8002d8c:	200004b9 	.word	0x200004b9
 8002d90:	200002b4 	.word	0x200002b4

08002d94 <StartCompassTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCompassTask */
void StartCompassTask(void *argument)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCompassTask */
	/* Infinite loop */
	for (;;) {
		if (bno085_int_flag) {
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <StartCompassTask+0x24>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <StartCompassTask+0x1c>
			bno085_int_flag = 0;
 8002da6:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <StartCompassTask+0x24>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
			sh2_service();
 8002dac:	f002 f8be 	bl	8004f2c <sh2_service>
		}
		osDelay(10);
 8002db0:	200a      	movs	r0, #10
 8002db2:	f009 faed 	bl	800c390 <osDelay>
		if (bno085_int_flag) {
 8002db6:	e7f1      	b.n	8002d9c <StartCompassTask+0x8>
 8002db8:	2000046b 	.word	0x2000046b

08002dbc <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8002dbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dc0:	b0b4      	sub	sp, #208	@ 0xd0
 8002dc2:	af08      	add	r7, sp, #32
 8002dc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	char display_str[48];
	const char *mode_names[] = { "SENSOR", "MOVE", "MOVE_HL" }; // UPDATED NAMES
 8002dc6:	4aaa      	ldr	r2, [pc, #680]	@ (8003070 <StartDisplayTask+0x2b4>)
 8002dc8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002dcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char *state_names[] = { "IDLE", "RUN" };
 8002dd2:	4aa8      	ldr	r2, [pc, #672]	@ (8003074 <StartDisplayTask+0x2b8>)
 8002dd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002dd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ddc:	e883 0003 	stmia.w	r3, {r0, r1}
		robot_mode_t mode;
		robot_mode_t sel_mode;
		robot_state_t state;
		float heading;
		int32_t sw_count, enc_count;
		uint8_t show_uart_error = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		uint8_t sbus_valid = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
		uint32_t error_code = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		// Check SBUS signal validity
		sbus_valid = is_sbus_signal_valid();
 8002df2:	f7fe fc0b 	bl	800160c <is_sbus_signal_valid>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

		// Check for UART error under mutex
		osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002dfc:	4b9e      	ldr	r3, [pc, #632]	@ (8003078 <StartDisplayTask+0x2bc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	4618      	mov	r0, r3
 8002e06:	f009 fb64 	bl	800c4d2 <osMutexAcquire>
		if (uart2_error_flag) {
 8002e0a:	4b9c      	ldr	r3, [pc, #624]	@ (800307c <StartDisplayTask+0x2c0>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <StartDisplayTask+0x6c>
			show_uart_error = 1;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
			error_code = uart2_error_code;
 8002e1a:	4b99      	ldr	r3, [pc, #612]	@ (8003080 <StartDisplayTask+0x2c4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			uart2_error_flag = 0; // Clear after displaying
 8002e22:	4b96      	ldr	r3, [pc, #600]	@ (800307c <StartDisplayTask+0x2c0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
		}
		osMutexRelease(UARTMutexHandle);
 8002e28:	4b93      	ldr	r3, [pc, #588]	@ (8003078 <StartDisplayTask+0x2bc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f009 fb9b 	bl	800c568 <osMutexRelease>

		if (show_uart_error) {
 8002e32:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03a      	beq.n	8002eb0 <StartDisplayTask+0xf4>
			char err_str[32];
			// Show more detailed error information
			snprintf(err_str, sizeof(err_str), "UART Err: 0x%lX A:%d",
 8002e3a:	4b92      	ldr	r3, [pc, #584]	@ (8003084 <StartDisplayTask+0x2c8>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f107 0008 	add.w	r0, r7, #8
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e4a:	4a8f      	ldr	r2, [pc, #572]	@ (8003088 <StartDisplayTask+0x2cc>)
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	f00d f9b9 	bl	80101c4 <sniprintf>
					error_code, sbus_recovery_attempts);
			ssd1306_Fill(Black);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f000 fd82 	bl	800395c <ssd1306_Fill>
			ssd1306_SetCursor(1, 0);
 8002e58:	2100      	movs	r1, #0
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f000 fef6 	bl	8003c4c <ssd1306_SetCursor>
			ssd1306_WriteString(err_str, Font_7x10, White);
 8002e60:	4a8a      	ldr	r2, [pc, #552]	@ (800308c <StartDisplayTask+0x2d0>)
 8002e62:	f107 0008 	add.w	r0, r7, #8
 8002e66:	2301      	movs	r3, #1
 8002e68:	ca06      	ldmia	r2, {r1, r2}
 8002e6a:	f000 fec9 	bl	8003c00 <ssd1306_WriteString>

			// Show recovery status
			snprintf(err_str, sizeof(err_str), "Recovery: %s",
					(sbus_recovery_attempts < SBUS_MAX_RECOVERY_ATTEMPTS) ?
 8002e6e:	4b85      	ldr	r3, [pc, #532]	@ (8003084 <StartDisplayTask+0x2c8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b2db      	uxtb	r3, r3
			snprintf(err_str, sizeof(err_str), "Recovery: %s",
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d801      	bhi.n	8002e7c <StartDisplayTask+0xc0>
 8002e78:	4b85      	ldr	r3, [pc, #532]	@ (8003090 <StartDisplayTask+0x2d4>)
 8002e7a:	e000      	b.n	8002e7e <StartDisplayTask+0xc2>
 8002e7c:	4b85      	ldr	r3, [pc, #532]	@ (8003094 <StartDisplayTask+0x2d8>)
 8002e7e:	f107 0008 	add.w	r0, r7, #8
 8002e82:	4a85      	ldr	r2, [pc, #532]	@ (8003098 <StartDisplayTask+0x2dc>)
 8002e84:	2120      	movs	r1, #32
 8002e86:	f00d f99d 	bl	80101c4 <sniprintf>
							"TRYING" : "FAILED");
			ssd1306_SetCursor(1, 12);
 8002e8a:	210c      	movs	r1, #12
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f000 fedd 	bl	8003c4c <ssd1306_SetCursor>
			ssd1306_WriteString(err_str, Font_7x10, White);
 8002e92:	4a7e      	ldr	r2, [pc, #504]	@ (800308c <StartDisplayTask+0x2d0>)
 8002e94:	f107 0008 	add.w	r0, r7, #8
 8002e98:	2301      	movs	r3, #1
 8002e9a:	ca06      	ldmia	r2, {r1, r2}
 8002e9c:	f000 feb0 	bl	8003c00 <ssd1306_WriteString>

			ssd1306_UpdateScreen(&hi2c1);
 8002ea0:	487e      	ldr	r0, [pc, #504]	@ (800309c <StartDisplayTask+0x2e0>)
 8002ea2:	f000 fd7f 	bl	80039a4 <ssd1306_UpdateScreen>
			osDelay(2000); // Show error for 2s
 8002ea6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002eaa:	f009 fa71 	bl	800c390 <osDelay>
			continue;
 8002eae:	e30d      	b.n	80034cc <StartDisplayTask+0x710>
		}

		// Get current mode, selected mode, and state
		osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002eb0:	4b7b      	ldr	r3, [pc, #492]	@ (80030a0 <StartDisplayTask+0x2e4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f009 fb0a 	bl	800c4d2 <osMutexAcquire>
		mode = current_mode;
 8002ebe:	4b79      	ldr	r3, [pc, #484]	@ (80030a4 <StartDisplayTask+0x2e8>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
		sel_mode = selected_mode;
 8002ec6:	4b78      	ldr	r3, [pc, #480]	@ (80030a8 <StartDisplayTask+0x2ec>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
		state = robot_state;
 8002ece:	4b77      	ldr	r3, [pc, #476]	@ (80030ac <StartDisplayTask+0x2f0>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
		osMutexRelease(ModeMutexHandle);
 8002ed6:	4b72      	ldr	r3, [pc, #456]	@ (80030a0 <StartDisplayTask+0x2e4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f009 fb44 	bl	800c568 <osMutexRelease>

		// Get compass heading
		osMutexAcquire(CompassMutexHandle, osWaitForever);
 8002ee0:	4b73      	ldr	r3, [pc, #460]	@ (80030b0 <StartDisplayTask+0x2f4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f009 faf2 	bl	800c4d2 <osMutexAcquire>
		heading = compass_heading_deg;
 8002eee:	4b71      	ldr	r3, [pc, #452]	@ (80030b4 <StartDisplayTask+0x2f8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		osMutexRelease(CompassMutexHandle);
 8002ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80030b0 <StartDisplayTask+0x2f4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f009 fb34 	bl	800c568 <osMutexRelease>

		// Get encoder data
		osMutexAcquire(EncoderMutexHandle, osWaitForever);
 8002f00:	4b6d      	ldr	r3, [pc, #436]	@ (80030b8 <StartDisplayTask+0x2fc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f009 fae2 	bl	800c4d2 <osMutexAcquire>
		sw_count = encoder_sw_count;
 8002f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80030bc <StartDisplayTask+0x300>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		enc_count = encoder_count;
 8002f16:	4b6a      	ldr	r3, [pc, #424]	@ (80030c0 <StartDisplayTask+0x304>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		osMutexRelease(EncoderMutexHandle);
 8002f1e:	4b66      	ldr	r3, [pc, #408]	@ (80030b8 <StartDisplayTask+0x2fc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f009 fb20 	bl	800c568 <osMutexRelease>

		ssd1306_Fill(Black);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f000 fd17 	bl	800395c <ssd1306_Fill>

		// Line 1: Show selected mode with indicator if different from current
		// Add SBUS status, recovery status, and heading lock indicator
		if (sel_mode == mode) {
 8002f2e:	f897 20a4 	ldrb.w	r2, [r7, #164]	@ 0xa4
 8002f32:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d141      	bne.n	8002fbe <StartDisplayTask+0x202>
			// Current mode - show with state, SBUS status, recovery status, and heading lock
			char sbus_status = sbus_valid ? 'S' : '!';
 8002f3a:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <StartDisplayTask+0x18a>
 8002f42:	2353      	movs	r3, #83	@ 0x53
 8002f44:	e000      	b.n	8002f48 <StartDisplayTask+0x18c>
 8002f46:	2321      	movs	r3, #33	@ 0x21
 8002f48:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
			char recovery_status = sbus_was_lost ? 'R' : ' '; // R = recovering
 8002f4c:	4b5d      	ldr	r3, [pc, #372]	@ (80030c4 <StartDisplayTask+0x308>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <StartDisplayTask+0x19e>
 8002f56:	2352      	movs	r3, #82	@ 0x52
 8002f58:	e000      	b.n	8002f5c <StartDisplayTask+0x1a0>
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			char heading_status =
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 8002f60:	4b59      	ldr	r3, [pc, #356]	@ (80030c8 <StartDisplayTask+0x30c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
			char heading_status =
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <StartDisplayTask+0x1ba>
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 8002f6a:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d101      	bne.n	8002f76 <StartDisplayTask+0x1ba>
			char heading_status =
 8002f72:	2348      	movs	r3, #72	@ 0x48
 8002f74:	e000      	b.n	8002f78 <StartDisplayTask+0x1bc>
 8002f76:	2320      	movs	r3, #32
 8002f78:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
							'H' : ' '; // UPDATED

			snprintf(display_str, sizeof(display_str), "%s %s %c%c%c",
 8002f7c:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	33b0      	adds	r3, #176	@ 0xb0
 8002f84:	443b      	add	r3, r7
 8002f86:	f853 5c70 	ldr.w	r5, [r3, #-112]
 8002f8a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	33b0      	adds	r3, #176	@ 0xb0
 8002f92:	443b      	add	r3, r7
 8002f94:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8002f98:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8002f9c:	f897 108f 	ldrb.w	r1, [r7, #143]	@ 0x8f
 8002fa0:	f897 008e 	ldrb.w	r0, [r7, #142]	@ 0x8e
 8002fa4:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002fa8:	9003      	str	r0, [sp, #12]
 8002faa:	9102      	str	r1, [sp, #8]
 8002fac:	9201      	str	r2, [sp, #4]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	4a46      	ldr	r2, [pc, #280]	@ (80030cc <StartDisplayTask+0x310>)
 8002fb4:	2130      	movs	r1, #48	@ 0x30
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f00d f904 	bl	80101c4 <sniprintf>
 8002fbc:	e040      	b.n	8003040 <StartDisplayTask+0x284>
					mode_names[mode], state_names[state], sbus_status,
					recovery_status, heading_status);
		} else {
			// Selected mode (different from current) - show with arrow indicator
			char sbus_status = sbus_valid ? 'S' : '!';
 8002fbe:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <StartDisplayTask+0x20e>
 8002fc6:	2353      	movs	r3, #83	@ 0x53
 8002fc8:	e000      	b.n	8002fcc <StartDisplayTask+0x210>
 8002fca:	2321      	movs	r3, #33	@ 0x21
 8002fcc:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
			char recovery_status = sbus_was_lost ? 'R' : ' ';
 8002fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80030c4 <StartDisplayTask+0x308>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <StartDisplayTask+0x222>
 8002fda:	2352      	movs	r3, #82	@ 0x52
 8002fdc:	e000      	b.n	8002fe0 <StartDisplayTask+0x224>
 8002fde:	2320      	movs	r3, #32
 8002fe0:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
			char heading_status =
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 8002fe4:	4b38      	ldr	r3, [pc, #224]	@ (80030c8 <StartDisplayTask+0x30c>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
			char heading_status =
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <StartDisplayTask+0x23e>
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 8002fee:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d101      	bne.n	8002ffa <StartDisplayTask+0x23e>
			char heading_status =
 8002ff6:	2348      	movs	r3, #72	@ 0x48
 8002ff8:	e000      	b.n	8002ffc <StartDisplayTask+0x240>
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
							'H' : ' '; // UPDATED

			snprintf(display_str, sizeof(display_str), ">%s< %s %c%c%c",
 8003000:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	33b0      	adds	r3, #176	@ 0xb0
 8003008:	443b      	add	r3, r7
 800300a:	f853 5c70 	ldr.w	r5, [r3, #-112]
 800300e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	33b0      	adds	r3, #176	@ 0xb0
 8003016:	443b      	add	r3, r7
 8003018:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800301c:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8003020:	f897 1092 	ldrb.w	r1, [r7, #146]	@ 0x92
 8003024:	f897 0091 	ldrb.w	r0, [r7, #145]	@ 0x91
 8003028:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800302c:	9003      	str	r0, [sp, #12]
 800302e:	9102      	str	r1, [sp, #8]
 8003030:	9201      	str	r2, [sp, #4]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	462b      	mov	r3, r5
 8003036:	4a26      	ldr	r2, [pc, #152]	@ (80030d0 <StartDisplayTask+0x314>)
 8003038:	2130      	movs	r1, #48	@ 0x30
 800303a:	4620      	mov	r0, r4
 800303c:	f00d f8c2 	bl	80101c4 <sniprintf>
					mode_names[sel_mode], state_names[state], sbus_status,
					recovery_status, heading_status);
		}
		ssd1306_SetCursor(1, 0);
 8003040:	2100      	movs	r1, #0
 8003042:	2001      	movs	r0, #1
 8003044:	f000 fe02 	bl	8003c4c <ssd1306_SetCursor>
		ssd1306_WriteString(display_str, Font_7x10, White);
 8003048:	4a10      	ldr	r2, [pc, #64]	@ (800308c <StartDisplayTask+0x2d0>)
 800304a:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800304e:	2301      	movs	r3, #1
 8003050:	ca06      	ldmia	r2, {r1, r2}
 8003052:	f000 fdd5 	bl	8003c00 <ssd1306_WriteString>

		// Display content based on current active mode (not selected mode)
		switch (mode) {
 8003056:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800305a:	2b00      	cmp	r3, #0
 800305c:	d03a      	beq.n	80030d4 <StartDisplayTask+0x318>
 800305e:	2b00      	cmp	r3, #0
 8003060:	f2c0 821b 	blt.w	800349a <StartDisplayTask+0x6de>
 8003064:	3b01      	subs	r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	f200 8217 	bhi.w	800349a <StartDisplayTask+0x6de>
 800306c:	e0ca      	b.n	8003204 <StartDisplayTask+0x448>
 800306e:	bf00      	nop
 8003070:	08012af8 	.word	0x08012af8
 8003074:	08012b10 	.word	0x08012b10
 8003078:	20000414 	.word	0x20000414
 800307c:	20000460 	.word	0x20000460
 8003080:	2000045c 	.word	0x2000045c
 8003084:	20000469 	.word	0x20000469
 8003088:	080129a8 	.word	0x080129a8
 800308c:	20000000 	.word	0x20000000
 8003090:	080129c0 	.word	0x080129c0
 8003094:	080129c8 	.word	0x080129c8
 8003098:	080129d0 	.word	0x080129d0
 800309c:	20000260 	.word	0x20000260
 80030a0:	20000418 	.word	0x20000418
 80030a4:	20000484 	.word	0x20000484
 80030a8:	20000485 	.word	0x20000485
 80030ac:	20000486 	.word	0x20000486
 80030b0:	20000408 	.word	0x20000408
 80030b4:	2000046c 	.word	0x2000046c
 80030b8:	20000410 	.word	0x20000410
 80030bc:	20000478 	.word	0x20000478
 80030c0:	20000470 	.word	0x20000470
 80030c4:	200004b8 	.word	0x200004b8
 80030c8:	20000496 	.word	0x20000496
 80030cc:	080129e0 	.word	0x080129e0
 80030d0:	080129f0 	.word	0x080129f0
		case MODE_DISPLAY_SENSORS:
		    // Line 2: Show both compass and robot front headings
		    float robot_front = compass_to_robot_front(heading);
 80030d4:	ed97 0a27 	vldr	s0, [r7, #156]	@ 0x9c
 80030d8:	f7fe fe24 	bl	8001d24 <compass_to_robot_front>
 80030dc:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
		    snprintf(display_str, sizeof(display_str), "C:%.0f R:%.0f deg",
 80030e0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80030e4:	f7fd fa38 	bl	8000558 <__aeabi_f2d>
 80030e8:	4604      	mov	r4, r0
 80030ea:	460d      	mov	r5, r1
 80030ec:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80030f0:	f7fd fa32 	bl	8000558 <__aeabi_f2d>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80030fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003100:	e9cd 4500 	strd	r4, r5, [sp]
 8003104:	4aaf      	ldr	r2, [pc, #700]	@ (80033c4 <StartDisplayTask+0x608>)
 8003106:	2130      	movs	r1, #48	@ 0x30
 8003108:	f00d f85c 	bl	80101c4 <sniprintf>
		            heading, robot_front);
		    ssd1306_SetCursor(1, 12);
 800310c:	210c      	movs	r1, #12
 800310e:	2001      	movs	r0, #1
 8003110:	f000 fd9c 	bl	8003c4c <ssd1306_SetCursor>
		    ssd1306_WriteString(display_str, Font_7x10, White);
 8003114:	4aac      	ldr	r2, [pc, #688]	@ (80033c8 <StartDisplayTask+0x60c>)
 8003116:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800311a:	2301      	movs	r3, #1
 800311c:	ca06      	ldmia	r2, {r1, r2}
 800311e:	f000 fd6f 	bl	8003c00 <ssd1306_WriteString>

		    // Line 3: Encoder data and Channel 7 position
		    const char* ch7_names[] = {"MIN", "MID", "MAX", "???"};
 8003122:	4baa      	ldr	r3, [pc, #680]	@ (80033cc <StartDisplayTask+0x610>)
 8003124:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800312a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    ch7_position_t ch7_pos = sbus_valid ? get_channel7_position() : CH7_POSITION_UNKNOWN;
 800312e:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <StartDisplayTask+0x382>
 8003136:	f7fe fe8f 	bl	8001e58 <get_channel7_position>
 800313a:	4603      	mov	r3, r0
 800313c:	e000      	b.n	8003140 <StartDisplayTask+0x384>
 800313e:	2303      	movs	r3, #3
 8003140:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		    snprintf(display_str, sizeof(display_str), "SW:%ld ENC:%ld CH7:%s",
 8003144:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	33b0      	adds	r3, #176	@ 0xb0
 800314c:	443b      	add	r3, r7
 800314e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003152:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003162:	4a9b      	ldr	r2, [pc, #620]	@ (80033d0 <StartDisplayTask+0x614>)
 8003164:	2130      	movs	r1, #48	@ 0x30
 8003166:	f00d f82d 	bl	80101c4 <sniprintf>
		            (long)sw_count, (long)enc_count, ch7_names[ch7_pos]);
		    ssd1306_SetCursor(1, 24);
 800316a:	2118      	movs	r1, #24
 800316c:	2001      	movs	r0, #1
 800316e:	f000 fd6d 	bl	8003c4c <ssd1306_SetCursor>
		    ssd1306_WriteString(display_str, Font_7x10, White);
 8003172:	4a95      	ldr	r2, [pc, #596]	@ (80033c8 <StartDisplayTask+0x60c>)
 8003174:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003178:	2301      	movs	r3, #1
 800317a:	ca06      	ldmia	r2, {r1, r2}
 800317c:	f000 fd40 	bl	8003c00 <ssd1306_WriteString>

		    // Line 4: SBUS channels including Channel 7 raw value
		    if (sbus_valid) {
 8003180:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02a      	beq.n	80031de <StartDisplayTask+0x422>
		        int16_t ch2_pct = sbus_to_percentage(sbus_channels[1]);
 8003188:	4b92      	ldr	r3, [pc, #584]	@ (80033d4 <StartDisplayTask+0x618>)
 800318a:	885b      	ldrh	r3, [r3, #2]
 800318c:	b29b      	uxth	r3, r3
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe f80a 	bl	80011a8 <sbus_to_percentage>
 8003194:	4603      	mov	r3, r0
 8003196:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
		        int16_t ch5_pct = sbus_to_percentage(sbus_channels[4]);
 800319a:	4b8e      	ldr	r3, [pc, #568]	@ (80033d4 <StartDisplayTask+0x618>)
 800319c:	891b      	ldrh	r3, [r3, #8]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe f801 	bl	80011a8 <sbus_to_percentage>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		        int16_t ch4_pct = sbus_to_percentage(sbus_channels[3]);
 80031ac:	4b89      	ldr	r3, [pc, #548]	@ (80033d4 <StartDisplayTask+0x618>)
 80031ae:	88db      	ldrh	r3, [r3, #6]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fff8 	bl	80011a8 <sbus_to_percentage>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		        snprintf(display_str, sizeof(display_str), "2:%3d 5:%3d 4:%3d",
 80031be:	f9b7 1080 	ldrsh.w	r1, [r7, #128]	@ 0x80
 80031c2:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80031c6:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	@ 0x7c
 80031ca:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80031ce:	9201      	str	r2, [sp, #4]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	460b      	mov	r3, r1
 80031d4:	4a80      	ldr	r2, [pc, #512]	@ (80033d8 <StartDisplayTask+0x61c>)
 80031d6:	2130      	movs	r1, #48	@ 0x30
 80031d8:	f00c fff4 	bl	80101c4 <sniprintf>
 80031dc:	e006      	b.n	80031ec <StartDisplayTask+0x430>
		                ch2_pct, ch5_pct, ch4_pct);
		    } else {
		        snprintf(display_str, sizeof(display_str), "SBUS SIGNAL LOST");
 80031de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031e2:	4a7e      	ldr	r2, [pc, #504]	@ (80033dc <StartDisplayTask+0x620>)
 80031e4:	2130      	movs	r1, #48	@ 0x30
 80031e6:	4618      	mov	r0, r3
 80031e8:	f00c ffec 	bl	80101c4 <sniprintf>
		    }
		    ssd1306_SetCursor(1, 36);
 80031ec:	2124      	movs	r1, #36	@ 0x24
 80031ee:	2001      	movs	r0, #1
 80031f0:	f000 fd2c 	bl	8003c4c <ssd1306_SetCursor>
		    ssd1306_WriteString(display_str, Font_7x10, White);
 80031f4:	4a74      	ldr	r2, [pc, #464]	@ (80033c8 <StartDisplayTask+0x60c>)
 80031f6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80031fa:	2301      	movs	r3, #1
 80031fc:	ca06      	ldmia	r2, {r1, r2}
 80031fe:	f000 fcff 	bl	8003c00 <ssd1306_WriteString>
		    break;
 8003202:	e15d      	b.n	80034c0 <StartDisplayTask+0x704>

		case MODE_MOVEMENT:        // UPDATED - was MODE_MOVEMENT_SIMULATOR
		case MODE_MOVEMENT_HL:     // UPDATED - was MODE_MOVEMENT
			if (sbus_valid) {
 8003204:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 810f 	beq.w	800342c <StartDisplayTask+0x670>
				// Line 2: Joystick input values (LR=Left/Right, FB=Forward/Backward, R=Rotation)
				snprintf(display_str, sizeof(display_str),
 800320e:	4b74      	ldr	r3, [pc, #464]	@ (80033e0 <StartDisplayTask+0x624>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b21b      	sxth	r3, r3
 8003214:	4619      	mov	r1, r3
 8003216:	4b73      	ldr	r3, [pc, #460]	@ (80033e4 <StartDisplayTask+0x628>)
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b21b      	sxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	4b72      	ldr	r3, [pc, #456]	@ (80033e8 <StartDisplayTask+0x62c>)
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b21b      	sxth	r3, r3
 8003224:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	9200      	str	r2, [sp, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	4a6f      	ldr	r2, [pc, #444]	@ (80033ec <StartDisplayTask+0x630>)
 8003230:	2130      	movs	r1, #48	@ 0x30
 8003232:	f00c ffc7 	bl	80101c4 <sniprintf>
						"LR:%3d FB:%3d R:%3d", joystick_x, joystick_y,
						joystick_rotation);
				ssd1306_SetCursor(1, 12);
 8003236:	210c      	movs	r1, #12
 8003238:	2001      	movs	r0, #1
 800323a:	f000 fd07 	bl	8003c4c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 800323e:	4a62      	ldr	r2, [pc, #392]	@ (80033c8 <StartDisplayTask+0x60c>)
 8003240:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003244:	2301      	movs	r3, #1
 8003246:	ca06      	ldmia	r2, {r1, r2}
 8003248:	f000 fcda 	bl	8003c00 <ssd1306_WriteString>

				// Line 3: Show heading lock info with oscillation detection
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 800324c:	4b68      	ldr	r3, [pc, #416]	@ (80033f0 <StartDisplayTask+0x634>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d05f      	beq.n	8003316 <StartDisplayTask+0x55a>
 8003256:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800325a:	2b02      	cmp	r3, #2
 800325c:	d15b      	bne.n	8003316 <StartDisplayTask+0x55a>
					float current_robot_front = compass_to_robot_front(heading);
 800325e:	ed97 0a27 	vldr	s0, [r7, #156]	@ 0x9c
 8003262:	f7fe fd5f 	bl	8001d24 <compass_to_robot_front>
 8003266:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88

					// Enhanced status indicators
					char status_char = ' ';
 800326a:	2320      	movs	r3, #32
 800326c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (oscillation_detected) {
 8003270:	4b60      	ldr	r3, [pc, #384]	@ (80033f4 <StartDisplayTask+0x638>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <StartDisplayTask+0x4c6>
						status_char = '~'; // Oscillation detected
 800327a:	237e      	movs	r3, #126	@ 0x7e
 800327c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8003280:	e025      	b.n	80032ce <StartDisplayTask+0x512>
					} else if (overshoot_detected) {
 8003282:	4b5d      	ldr	r3, [pc, #372]	@ (80033f8 <StartDisplayTask+0x63c>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <StartDisplayTask+0x4d8>
						status_char = 'O'; // Overshoot detected
 800328c:	234f      	movs	r3, #79	@ 0x4f
 800328e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8003292:	e01c      	b.n	80032ce <StartDisplayTask+0x512>
					} else if (fabs(heading_error) > 2.0f) { // Reduced threshold
 8003294:	4b59      	ldr	r3, [pc, #356]	@ (80033fc <StartDisplayTask+0x640>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	eef0 7ae7 	vabs.f32	s15, s15
 800329e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80032a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	dd0d      	ble.n	80032c8 <StartDisplayTask+0x50c>
						status_char = (heading_pid_output > 0) ? 'R' : 'L'; // Turning Right/Left
 80032ac:	4b54      	ldr	r3, [pc, #336]	@ (8003400 <StartDisplayTask+0x644>)
 80032ae:	edd3 7a00 	vldr	s15, [r3]
 80032b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ba:	dd01      	ble.n	80032c0 <StartDisplayTask+0x504>
 80032bc:	2352      	movs	r3, #82	@ 0x52
 80032be:	e000      	b.n	80032c2 <StartDisplayTask+0x506>
 80032c0:	234c      	movs	r3, #76	@ 0x4c
 80032c2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80032c6:	e002      	b.n	80032ce <StartDisplayTask+0x512>
					} else {
						status_char = '='; // Near target
 80032c8:	233d      	movs	r3, #61	@ 0x3d
 80032ca:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					}

					snprintf(display_str, sizeof(display_str),
 80032ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003404 <StartDisplayTask+0x648>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f940 	bl	8000558 <__aeabi_f2d>
 80032d8:	4604      	mov	r4, r0
 80032da:	460d      	mov	r5, r1
 80032dc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80032e0:	f7fd f93a 	bl	8000558 <__aeabi_f2d>
 80032e4:	4680      	mov	r8, r0
 80032e6:	4689      	mov	r9, r1
 80032e8:	4b44      	ldr	r3, [pc, #272]	@ (80033fc <StartDisplayTask+0x640>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f933 	bl	8000558 <__aeabi_f2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	f897 10a7 	ldrb.w	r1, [r7, #167]	@ 0xa7
 80032fa:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80032fe:	9106      	str	r1, [sp, #24]
 8003300:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003304:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003308:	e9cd 4500 	strd	r4, r5, [sp]
 800330c:	4a3e      	ldr	r2, [pc, #248]	@ (8003408 <StartDisplayTask+0x64c>)
 800330e:	2130      	movs	r1, #48	@ 0x30
 8003310:	f00c ff58 	bl	80101c4 <sniprintf>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8003314:	e00e      	b.n	8003334 <StartDisplayTask+0x578>
							"L:%.0f N:%.0f E:%.1f%c", locked_heading,
							current_robot_front, heading_error, status_char);
				} else {
					// Show motor values
					snprintf(display_str, sizeof(display_str), "LF:%4d RF:%4d",
 8003316:	4b3d      	ldr	r3, [pc, #244]	@ (800340c <StartDisplayTask+0x650>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b21b      	sxth	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	4b3c      	ldr	r3, [pc, #240]	@ (8003410 <StartDisplayTask+0x654>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b21b      	sxth	r3, r3
 8003324:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	4a39      	ldr	r2, [pc, #228]	@ (8003414 <StartDisplayTask+0x658>)
 800332e:	2130      	movs	r1, #48	@ 0x30
 8003330:	f00c ff48 	bl	80101c4 <sniprintf>
							motor_left_front, motor_right_front);
				}
				ssd1306_SetCursor(1, 24);
 8003334:	2118      	movs	r1, #24
 8003336:	2001      	movs	r0, #1
 8003338:	f000 fc88 	bl	8003c4c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 800333c:	4a22      	ldr	r2, [pc, #136]	@ (80033c8 <StartDisplayTask+0x60c>)
 800333e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003342:	2301      	movs	r3, #1
 8003344:	ca06      	ldmia	r2, {r1, r2}
 8003346:	f000 fc5b 	bl	8003c00 <ssd1306_WriteString>

				// Line 4: PID output with overshoot indicator
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 800334a:	4b29      	ldr	r3, [pc, #164]	@ (80033f0 <StartDisplayTask+0x634>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d021      	beq.n	8003398 <StartDisplayTask+0x5dc>
 8003354:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8003358:	2b02      	cmp	r3, #2
 800335a:	d11d      	bne.n	8003398 <StartDisplayTask+0x5dc>
					snprintf(display_str, sizeof(display_str),
 800335c:	4b28      	ldr	r3, [pc, #160]	@ (8003400 <StartDisplayTask+0x644>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd f8f9 	bl	8000558 <__aeabi_f2d>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	492b      	ldr	r1, [pc, #172]	@ (8003418 <StartDisplayTask+0x65c>)
 800336c:	8809      	ldrh	r1, [r1, #0]
 800336e:	b209      	sxth	r1, r1
 8003370:	460c      	mov	r4, r1
							"PID:%.1f BK:%4d%s", heading_pid_output, motor_back,
							overshoot_detected ? " OS" : "");
 8003372:	4921      	ldr	r1, [pc, #132]	@ (80033f8 <StartDisplayTask+0x63c>)
 8003374:	7809      	ldrb	r1, [r1, #0]
 8003376:	b2c9      	uxtb	r1, r1
					snprintf(display_str, sizeof(display_str),
 8003378:	2900      	cmp	r1, #0
 800337a:	d001      	beq.n	8003380 <StartDisplayTask+0x5c4>
 800337c:	4927      	ldr	r1, [pc, #156]	@ (800341c <StartDisplayTask+0x660>)
 800337e:	e000      	b.n	8003382 <StartDisplayTask+0x5c6>
 8003380:	4927      	ldr	r1, [pc, #156]	@ (8003420 <StartDisplayTask+0x664>)
 8003382:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003386:	9103      	str	r1, [sp, #12]
 8003388:	9402      	str	r4, [sp, #8]
 800338a:	e9cd 2300 	strd	r2, r3, [sp]
 800338e:	4a25      	ldr	r2, [pc, #148]	@ (8003424 <StartDisplayTask+0x668>)
 8003390:	2130      	movs	r1, #48	@ 0x30
 8003392:	f00c ff17 	bl	80101c4 <sniprintf>
 8003396:	e008      	b.n	80033aa <StartDisplayTask+0x5ee>
				} else {
					snprintf(display_str, sizeof(display_str), "BK:%4d",
 8003398:	4b1f      	ldr	r3, [pc, #124]	@ (8003418 <StartDisplayTask+0x65c>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b21b      	sxth	r3, r3
 800339e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80033a2:	4a21      	ldr	r2, [pc, #132]	@ (8003428 <StartDisplayTask+0x66c>)
 80033a4:	2130      	movs	r1, #48	@ 0x30
 80033a6:	f00c ff0d 	bl	80101c4 <sniprintf>
							motor_back);
				}
				ssd1306_SetCursor(1, 36);
 80033aa:	2124      	movs	r1, #36	@ 0x24
 80033ac:	2001      	movs	r0, #1
 80033ae:	f000 fc4d 	bl	8003c4c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 80033b2:	4a05      	ldr	r2, [pc, #20]	@ (80033c8 <StartDisplayTask+0x60c>)
 80033b4:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80033b8:	2301      	movs	r3, #1
 80033ba:	ca06      	ldmia	r2, {r1, r2}
 80033bc:	f000 fc20 	bl	8003c00 <ssd1306_WriteString>

				snprintf(display_str, sizeof(display_str), "FOR SAFETY");
				ssd1306_SetCursor(1, 36);
				ssd1306_WriteString(display_str, Font_7x10, White);
			}
			break;
 80033c0:	e07e      	b.n	80034c0 <StartDisplayTask+0x704>
 80033c2:	bf00      	nop
 80033c4:	08012a00 	.word	0x08012a00
 80033c8:	20000000 	.word	0x20000000
 80033cc:	08012b28 	.word	0x08012b28
 80033d0:	08012a14 	.word	0x08012a14
 80033d4:	2000043c 	.word	0x2000043c
 80033d8:	08012a2c 	.word	0x08012a2c
 80033dc:	08012a40 	.word	0x08012a40
 80033e0:	2000048a 	.word	0x2000048a
 80033e4:	2000048c 	.word	0x2000048c
 80033e8:	2000048e 	.word	0x2000048e
 80033ec:	08012a54 	.word	0x08012a54
 80033f0:	20000496 	.word	0x20000496
 80033f4:	200004b1 	.word	0x200004b1
 80033f8:	200004b0 	.word	0x200004b0
 80033fc:	2000049c 	.word	0x2000049c
 8003400:	200004a0 	.word	0x200004a0
 8003404:	20000498 	.word	0x20000498
 8003408:	08012a68 	.word	0x08012a68
 800340c:	20000490 	.word	0x20000490
 8003410:	20000492 	.word	0x20000492
 8003414:	08012a80 	.word	0x08012a80
 8003418:	20000494 	.word	0x20000494
 800341c:	08012a90 	.word	0x08012a90
 8003420:	08012a94 	.word	0x08012a94
 8003424:	08012a98 	.word	0x08012a98
 8003428:	08012aac 	.word	0x08012aac
				snprintf(display_str, sizeof(display_str), "SBUS SIGNAL LOST");
 800342c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003430:	4a27      	ldr	r2, [pc, #156]	@ (80034d0 <StartDisplayTask+0x714>)
 8003432:	2130      	movs	r1, #48	@ 0x30
 8003434:	4618      	mov	r0, r3
 8003436:	f00c fec5 	bl	80101c4 <sniprintf>
				ssd1306_SetCursor(1, 12);
 800343a:	210c      	movs	r1, #12
 800343c:	2001      	movs	r0, #1
 800343e:	f000 fc05 	bl	8003c4c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8003442:	4a24      	ldr	r2, [pc, #144]	@ (80034d4 <StartDisplayTask+0x718>)
 8003444:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003448:	2301      	movs	r3, #1
 800344a:	ca06      	ldmia	r2, {r1, r2}
 800344c:	f000 fbd8 	bl	8003c00 <ssd1306_WriteString>
				snprintf(display_str, sizeof(display_str), "MOTORS STOPPED");
 8003450:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003454:	4a20      	ldr	r2, [pc, #128]	@ (80034d8 <StartDisplayTask+0x71c>)
 8003456:	2130      	movs	r1, #48	@ 0x30
 8003458:	4618      	mov	r0, r3
 800345a:	f00c feb3 	bl	80101c4 <sniprintf>
				ssd1306_SetCursor(1, 24);
 800345e:	2118      	movs	r1, #24
 8003460:	2001      	movs	r0, #1
 8003462:	f000 fbf3 	bl	8003c4c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8003466:	4a1b      	ldr	r2, [pc, #108]	@ (80034d4 <StartDisplayTask+0x718>)
 8003468:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800346c:	2301      	movs	r3, #1
 800346e:	ca06      	ldmia	r2, {r1, r2}
 8003470:	f000 fbc6 	bl	8003c00 <ssd1306_WriteString>
				snprintf(display_str, sizeof(display_str), "FOR SAFETY");
 8003474:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003478:	4a18      	ldr	r2, [pc, #96]	@ (80034dc <StartDisplayTask+0x720>)
 800347a:	2130      	movs	r1, #48	@ 0x30
 800347c:	4618      	mov	r0, r3
 800347e:	f00c fea1 	bl	80101c4 <sniprintf>
				ssd1306_SetCursor(1, 36);
 8003482:	2124      	movs	r1, #36	@ 0x24
 8003484:	2001      	movs	r0, #1
 8003486:	f000 fbe1 	bl	8003c4c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 800348a:	4a12      	ldr	r2, [pc, #72]	@ (80034d4 <StartDisplayTask+0x718>)
 800348c:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003490:	2301      	movs	r3, #1
 8003492:	ca06      	ldmia	r2, {r1, r2}
 8003494:	f000 fbb4 	bl	8003c00 <ssd1306_WriteString>
			break;
 8003498:	e012      	b.n	80034c0 <StartDisplayTask+0x704>

		case MODE_COUNT:
		default:
			// Handle invalid mode - should never happen
			snprintf(display_str, sizeof(display_str), "INVALID MODE");
 800349a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800349e:	4a10      	ldr	r2, [pc, #64]	@ (80034e0 <StartDisplayTask+0x724>)
 80034a0:	2130      	movs	r1, #48	@ 0x30
 80034a2:	4618      	mov	r0, r3
 80034a4:	f00c fe8e 	bl	80101c4 <sniprintf>
			ssd1306_SetCursor(1, 12);
 80034a8:	210c      	movs	r1, #12
 80034aa:	2001      	movs	r0, #1
 80034ac:	f000 fbce 	bl	8003c4c <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 80034b0:	4a08      	ldr	r2, [pc, #32]	@ (80034d4 <StartDisplayTask+0x718>)
 80034b2:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80034b6:	2301      	movs	r3, #1
 80034b8:	ca06      	ldmia	r2, {r1, r2}
 80034ba:	f000 fba1 	bl	8003c00 <ssd1306_WriteString>
			break;
 80034be:	bf00      	nop
		}

		ssd1306_UpdateScreen(&hi2c1);
 80034c0:	4808      	ldr	r0, [pc, #32]	@ (80034e4 <StartDisplayTask+0x728>)
 80034c2:	f000 fa6f 	bl	80039a4 <ssd1306_UpdateScreen>
		//osDelay(100);
		osDelay(200); // Update display every 200ms (5Hz) for smoother updates
 80034c6:	20c8      	movs	r0, #200	@ 0xc8
 80034c8:	f008 ff62 	bl	800c390 <osDelay>
	for (;;) {
 80034cc:	e488      	b.n	8002de0 <StartDisplayTask+0x24>
 80034ce:	bf00      	nop
 80034d0:	08012a40 	.word	0x08012a40
 80034d4:	20000000 	.word	0x20000000
 80034d8:	08012ab4 	.word	0x08012ab4
 80034dc:	08012ac4 	.word	0x08012ac4
 80034e0:	08012ad0 	.word	0x08012ad0
 80034e4:	20000260 	.word	0x20000260

080034e8 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	int32_t last_count = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
	robot_mode_t temp_mode = MODE_DISPLAY_SENSORS;
 80034f4:	2300      	movs	r3, #0
 80034f6:	76fb      	strb	r3, [r7, #27]
	/* Infinite loop */
	for (;;) {
		osMutexAcquire(EncoderMutexHandle, osWaitForever);
 80034f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003634 <StartEncoderTask+0x14c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	4618      	mov	r0, r3
 8003502:	f008 ffe6 	bl	800c4d2 <osMutexAcquire>
		int32_t count = encoder_count;
 8003506:	4b4c      	ldr	r3, [pc, #304]	@ (8003638 <StartEncoderTask+0x150>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	617b      	str	r3, [r7, #20]
		uint8_t button = encoder_button_pressed;
 800350c:	4b4b      	ldr	r3, [pc, #300]	@ (800363c <StartEncoderTask+0x154>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	74fb      	strb	r3, [r7, #19]
		if (button)
 8003512:	7cfb      	ldrb	r3, [r7, #19]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <StartEncoderTask+0x36>
			encoder_button_pressed = 0;
 8003518:	4b48      	ldr	r3, [pc, #288]	@ (800363c <StartEncoderTask+0x154>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
		osMutexRelease(EncoderMutexHandle);
 800351e:	4b45      	ldr	r3, [pc, #276]	@ (8003634 <StartEncoderTask+0x14c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f009 f820 	bl	800c568 <osMutexRelease>

		if (count != last_count) {
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	429a      	cmp	r2, r3
 800352e:	d044      	beq.n	80035ba <StartEncoderTask+0xd2>
			// Handle encoder movement - change mode selection
			int32_t diff = count - last_count;
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	60fb      	str	r3, [r7, #12]
			last_count = count;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	61fb      	str	r3, [r7, #28]

			osMutexAcquire(ModeMutexHandle, osWaitForever);
 800353c:	4b40      	ldr	r3, [pc, #256]	@ (8003640 <StartEncoderTask+0x158>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	4618      	mov	r0, r3
 8003546:	f008 ffc4 	bl	800c4d2 <osMutexAcquire>
			robot_state_t state = robot_state;
 800354a:	4b3e      	ldr	r3, [pc, #248]	@ (8003644 <StartEncoderTask+0x15c>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	72fb      	strb	r3, [r7, #11]
			osMutexRelease(ModeMutexHandle);
 8003550:	4b3b      	ldr	r3, [pc, #236]	@ (8003640 <StartEncoderTask+0x158>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f009 f807 	bl	800c568 <osMutexRelease>

			// Only allow mode change when robot is idle
			if (state == STATE_IDLE) {
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d12c      	bne.n	80035ba <StartEncoderTask+0xd2>
				if (diff > 0) {
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	dd0d      	ble.n	8003582 <StartEncoderTask+0x9a>
					temp_mode = (robot_mode_t) ((temp_mode + 1) % MODE_COUNT);
 8003566:	7efb      	ldrb	r3, [r7, #27]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	4b37      	ldr	r3, [pc, #220]	@ (8003648 <StartEncoderTask+0x160>)
 800356c:	fb83 3102 	smull	r3, r1, r3, r2
 8003570:	17d3      	asrs	r3, r2, #31
 8003572:	1ac9      	subs	r1, r1, r3
 8003574:	460b      	mov	r3, r1
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	440b      	add	r3, r1
 800357a:	1ad1      	subs	r1, r2, r3
 800357c:	460b      	mov	r3, r1
 800357e:	76fb      	strb	r3, [r7, #27]
 8003580:	e00c      	b.n	800359c <StartEncoderTask+0xb4>
				} else {
					temp_mode = (robot_mode_t) ((temp_mode + MODE_COUNT - 1)
 8003582:	7efb      	ldrb	r3, [r7, #27]
 8003584:	1c9a      	adds	r2, r3, #2
							% MODE_COUNT);
 8003586:	4b30      	ldr	r3, [pc, #192]	@ (8003648 <StartEncoderTask+0x160>)
 8003588:	fb83 3102 	smull	r3, r1, r3, r2
 800358c:	17d3      	asrs	r3, r2, #31
 800358e:	1ac9      	subs	r1, r1, r3
 8003590:	460b      	mov	r3, r1
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	440b      	add	r3, r1
 8003596:	1ad1      	subs	r1, r2, r3
					temp_mode = (robot_mode_t) ((temp_mode + MODE_COUNT - 1)
 8003598:	460b      	mov	r3, r1
 800359a:	76fb      	strb	r3, [r7, #27]
				}

				// Update the shared selected_mode variable
				osMutexAcquire(ModeMutexHandle, osWaitForever);
 800359c:	4b28      	ldr	r3, [pc, #160]	@ (8003640 <StartEncoderTask+0x158>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f04f 31ff 	mov.w	r1, #4294967295
 80035a4:	4618      	mov	r0, r3
 80035a6:	f008 ff94 	bl	800c4d2 <osMutexAcquire>
				selected_mode = temp_mode;
 80035aa:	4a28      	ldr	r2, [pc, #160]	@ (800364c <StartEncoderTask+0x164>)
 80035ac:	7efb      	ldrb	r3, [r7, #27]
 80035ae:	7013      	strb	r3, [r2, #0]
				osMutexRelease(ModeMutexHandle);
 80035b0:	4b23      	ldr	r3, [pc, #140]	@ (8003640 <StartEncoderTask+0x158>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f008 ffd7 	bl	800c568 <osMutexRelease>
			}
		}

		if (button) {
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d035      	beq.n	800362c <StartEncoderTask+0x144>
			// Handle button press
			osMutexAcquire(ModeMutexHandle, osWaitForever);
 80035c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003640 <StartEncoderTask+0x158>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	4618      	mov	r0, r3
 80035ca:	f008 ff82 	bl	800c4d2 <osMutexAcquire>
			robot_mode_t current = current_mode;
 80035ce:	4b20      	ldr	r3, [pc, #128]	@ (8003650 <StartEncoderTask+0x168>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	72bb      	strb	r3, [r7, #10]
			robot_state_t state = robot_state;
 80035d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003644 <StartEncoderTask+0x15c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	727b      	strb	r3, [r7, #9]

			if (state == STATE_IDLE) {
 80035da:	7a7b      	ldrb	r3, [r7, #9]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11a      	bne.n	8003616 <StartEncoderTask+0x12e>
				// If idle, either change mode or start movement (for movement modes)
				if (temp_mode != current) {
 80035e0:	7efa      	ldrb	r2, [r7, #27]
 80035e2:	7abb      	ldrb	r3, [r7, #10]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d009      	beq.n	80035fc <StartEncoderTask+0x114>
					// Change mode
					current_mode = temp_mode;
 80035e8:	4a19      	ldr	r2, [pc, #100]	@ (8003650 <StartEncoderTask+0x168>)
 80035ea:	7efb      	ldrb	r3, [r7, #27]
 80035ec:	7013      	strb	r3, [r2, #0]
					selected_mode = temp_mode;  // Keep them in sync
 80035ee:	4a17      	ldr	r2, [pc, #92]	@ (800364c <StartEncoderTask+0x164>)
 80035f0:	7efb      	ldrb	r3, [r7, #27]
 80035f2:	7013      	strb	r3, [r2, #0]
					mode_change_request = 1;
 80035f4:	4b17      	ldr	r3, [pc, #92]	@ (8003654 <StartEncoderTask+0x16c>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e012      	b.n	8003622 <StartEncoderTask+0x13a>
				} else if (current == MODE_MOVEMENT // UPDATED
 80035fc:	7abb      	ldrb	r3, [r7, #10]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d002      	beq.n	8003608 <StartEncoderTask+0x120>
						|| current == MODE_MOVEMENT_HL) { // UPDATED
 8003602:	7abb      	ldrb	r3, [r7, #10]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d10c      	bne.n	8003622 <StartEncoderTask+0x13a>
					// Start movement
					robot_state = STATE_RUNNING;
 8003608:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <StartEncoderTask+0x15c>)
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
					state_toggle_request = 1;
 800360e:	4b12      	ldr	r3, [pc, #72]	@ (8003658 <StartEncoderTask+0x170>)
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e005      	b.n	8003622 <StartEncoderTask+0x13a>
				}
			} else {
				// If running, stop movement
				robot_state = STATE_IDLE;
 8003616:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <StartEncoderTask+0x15c>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
				state_toggle_request = 1;
 800361c:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <StartEncoderTask+0x170>)
 800361e:	2201      	movs	r2, #1
 8003620:	701a      	strb	r2, [r3, #0]
			}
			osMutexRelease(ModeMutexHandle);
 8003622:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <StartEncoderTask+0x158>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f008 ff9e 	bl	800c568 <osMutexRelease>
		}
		//osDelay(10);
		osDelay(20); // Update encoder every 20ms (50Hz)
 800362c:	2014      	movs	r0, #20
 800362e:	f008 feaf 	bl	800c390 <osDelay>
	for (;;) {
 8003632:	e761      	b.n	80034f8 <StartEncoderTask+0x10>
 8003634:	20000410 	.word	0x20000410
 8003638:	20000470 	.word	0x20000470
 800363c:	20000474 	.word	0x20000474
 8003640:	20000418 	.word	0x20000418
 8003644:	20000486 	.word	0x20000486
 8003648:	55555556 	.word	0x55555556
 800364c:	20000485 	.word	0x20000485
 8003650:	20000484 	.word	0x20000484
 8003654:	20000487 	.word	0x20000487
 8003658:	20000488 	.word	0x20000488

0800365c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800366c:	d101      	bne.n	8003672 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800366e:	f003 fb7b 	bl	8006d68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
	/* User can add his own implementation to report the HAL error return state */

	// Don't disable interrupts - allow system to continue
	// __disable_irq();  // ❌ REMOVE THIS LINE
	// Enable GPIOC clock if not already enabled
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <Error_Handler+0x48>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	4a0e      	ldr	r2, [pc, #56]	@ (80036c4 <Error_Handler+0x48>)
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	6313      	str	r3, [r2, #48]	@ 0x30
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <Error_Handler+0x48>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	683b      	ldr	r3, [r7, #0]

	// Flash LED to indicate error, but don't get stuck
	for (int i = 0; i < 10; i++) {  // Flash 10 times then continue
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	e00a      	b.n	80036ba <Error_Handler+0x3e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80036a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036a8:	4807      	ldr	r0, [pc, #28]	@ (80036c8 <Error_Handler+0x4c>)
 80036aa:	f004 fd2a 	bl	8008102 <HAL_GPIO_TogglePin>
		HAL_Delay(100);  // Shorter delay
 80036ae:	2064      	movs	r0, #100	@ 0x64
 80036b0:	f003 fb7a 	bl	8006da8 <HAL_Delay>
	for (int i = 0; i < 10; i++) {  // Flash 10 times then continue
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3301      	adds	r3, #1
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b09      	cmp	r3, #9
 80036be:	ddf1      	ble.n	80036a4 <Error_Handler+0x28>
	}

	// Instead of infinite loop, try to recover
	// Reset system if this is a critical error
	NVIC_SystemReset();
 80036c0:	f7fd fc10 	bl	8000ee4 <__NVIC_SystemReset>
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40020800 	.word	0x40020800

080036cc <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af04      	add	r7, sp, #16
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
	osMutexAcquire(I2C1MutexHandle, osWaitForever);
 80036d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003718 <ssd1306_WriteCommand+0x4c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	4618      	mov	r0, r3
 80036e2:	f008 fef6 	bl	800c4d2 <osMutexAcquire>
	uint8_t res = HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80036e6:	230a      	movs	r3, #10
 80036e8:	9302      	str	r3, [sp, #8]
 80036ea:	2301      	movs	r3, #1
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	1cfb      	adds	r3, r7, #3
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2301      	movs	r3, #1
 80036f4:	2200      	movs	r2, #0
 80036f6:	2178      	movs	r1, #120	@ 0x78
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f005 f9a9 	bl	8008a50 <HAL_I2C_Mem_Write>
 80036fe:	4603      	mov	r3, r0
 8003700:	73fb      	strb	r3, [r7, #15]
    osMutexRelease(I2C1MutexHandle);
 8003702:	4b05      	ldr	r3, [pc, #20]	@ (8003718 <ssd1306_WriteCommand+0x4c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f008 ff2e 	bl	800c568 <osMutexRelease>
    return res;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2000040c 	.word	0x2000040c

0800371c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8003724:	2064      	movs	r0, #100	@ 0x64
 8003726:	f003 fb3f 	bl	8006da8 <HAL_Delay>
    int status = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800372e:	21ae      	movs	r1, #174	@ 0xae
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ffcb 	bl	80036cc <ssd1306_WriteCommand>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8003740:	2120      	movs	r1, #32
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ffc2 	bl	80036cc <ssd1306_WriteCommand>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003752:	2110      	movs	r1, #16
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ffb9 	bl	80036cc <ssd1306_WriteCommand>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8003764:	21b0      	movs	r1, #176	@ 0xb0
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ffb0 	bl	80036cc <ssd1306_WriteCommand>
 800376c:	4603      	mov	r3, r0
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8003776:	21c8      	movs	r1, #200	@ 0xc8
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ffa7 	bl	80036cc <ssd1306_WriteCommand>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4413      	add	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8003788:	2100      	movs	r1, #0
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff9e 	bl	80036cc <ssd1306_WriteCommand>
 8003790:	4603      	mov	r3, r0
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800379a:	2110      	movs	r1, #16
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff95 	bl	80036cc <ssd1306_WriteCommand>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80037ac:	2140      	movs	r1, #64	@ 0x40
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ff8c 	bl	80036cc <ssd1306_WriteCommand>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80037be:	2181      	movs	r1, #129	@ 0x81
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff83 	bl	80036cc <ssd1306_WriteCommand>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80037d0:	21ff      	movs	r1, #255	@ 0xff
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ff7a 	bl	80036cc <ssd1306_WriteCommand>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80037e2:	21a1      	movs	r1, #161	@ 0xa1
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff71 	bl	80036cc <ssd1306_WriteCommand>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80037f4:	21a6      	movs	r1, #166	@ 0xa6
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ff68 	bl	80036cc <ssd1306_WriteCommand>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8003806:	21a8      	movs	r1, #168	@ 0xa8
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff5f 	bl	80036cc <ssd1306_WriteCommand>
 800380e:	4603      	mov	r3, r0
 8003810:	461a      	mov	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8003818:	213f      	movs	r1, #63	@ 0x3f
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff56 	bl	80036cc <ssd1306_WriteCommand>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800382a:	21a4      	movs	r1, #164	@ 0xa4
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff ff4d 	bl	80036cc <ssd1306_WriteCommand>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4413      	add	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 800383c:	21d3      	movs	r1, #211	@ 0xd3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ff44 	bl	80036cc <ssd1306_WriteCommand>
 8003844:	4603      	mov	r3, r0
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800384e:	2100      	movs	r1, #0
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff3b 	bl	80036cc <ssd1306_WriteCommand>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8003860:	21d5      	movs	r1, #213	@ 0xd5
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff32 	bl	80036cc <ssd1306_WriteCommand>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8003872:	21f0      	movs	r1, #240	@ 0xf0
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff29 	bl	80036cc <ssd1306_WriteCommand>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8003884:	21d9      	movs	r1, #217	@ 0xd9
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ff20 	bl	80036cc <ssd1306_WriteCommand>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8003896:	2122      	movs	r1, #34	@ 0x22
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff17 	bl	80036cc <ssd1306_WriteCommand>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80038a8:	21da      	movs	r1, #218	@ 0xda
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ff0e 	bl	80036cc <ssd1306_WriteCommand>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 80038ba:	2112      	movs	r1, #18
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ff05 	bl	80036cc <ssd1306_WriteCommand>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4413      	add	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80038cc:	21db      	movs	r1, #219	@ 0xdb
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fefc 	bl	80036cc <ssd1306_WriteCommand>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80038de:	2120      	movs	r1, #32
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fef3 	bl	80036cc <ssd1306_WriteCommand>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80038f0:	218d      	movs	r1, #141	@ 0x8d
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff feea 	bl	80036cc <ssd1306_WriteCommand>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8003902:	2114      	movs	r1, #20
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fee1 	bl	80036cc <ssd1306_WriteCommand>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8003914:	21af      	movs	r1, #175	@ 0xaf
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fed8 	bl	80036cc <ssd1306_WriteCommand>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <ssd1306_Init+0x214>
        return 1;
 800392c:	2301      	movs	r3, #1
 800392e:	e00f      	b.n	8003950 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8003930:	2000      	movs	r0, #0
 8003932:	f000 f813 	bl	800395c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f834 	bl	80039a4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800393c:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <ssd1306_Init+0x23c>)
 800393e:	2200      	movs	r2, #0
 8003940:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <ssd1306_Init+0x23c>)
 8003944:	2200      	movs	r2, #0
 8003946:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003948:	4b03      	ldr	r3, [pc, #12]	@ (8003958 <ssd1306_Init+0x23c>)
 800394a:	2201      	movs	r2, #1
 800394c:	715a      	strb	r2, [r3, #5]

    return 0;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000930 	.word	0x20000930

0800395c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e00d      	b.n	8003988 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <ssd1306_Fill+0x1a>
 8003972:	2100      	movs	r1, #0
 8003974:	e000      	b.n	8003978 <ssd1306_Fill+0x1c>
 8003976:	21ff      	movs	r1, #255	@ 0xff
 8003978:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <ssd1306_Fill+0x44>)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4413      	add	r3, r2
 800397e:	460a      	mov	r2, r1
 8003980:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3301      	adds	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f5b3 6f82 	cmp.w	r3, #1040	@ 0x410
 800398e:	d3ed      	bcc.n	800396c <ssd1306_Fill+0x10>
    }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000520 	.word	0x20000520

080039a4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af04      	add	r7, sp, #16
 80039aa:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80039ac:	2300      	movs	r3, #0
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e030      	b.n	8003a14 <ssd1306_UpdateScreen+0x70>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	3b50      	subs	r3, #80	@ 0x50
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff fe86 	bl	80036cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80039c0:	2100      	movs	r1, #0
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fe82 	bl	80036cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80039c8:	2110      	movs	r1, #16
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fe7e 	bl	80036cc <ssd1306_WriteCommand>

        osMutexAcquire(I2C1MutexHandle, osWaitForever);
 80039d0:	4b14      	ldr	r3, [pc, #80]	@ (8003a24 <ssd1306_UpdateScreen+0x80>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295
 80039d8:	4618      	mov	r0, r3
 80039da:	f008 fd7a 	bl	800c4d2 <osMutexAcquire>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	4613      	mov	r3, r2
 80039e2:	019b      	lsls	r3, r3, #6
 80039e4:	4413      	add	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003a28 <ssd1306_UpdateScreen+0x84>)
 80039ec:	4413      	add	r3, r2
 80039ee:	2264      	movs	r2, #100	@ 0x64
 80039f0:	9202      	str	r2, [sp, #8]
 80039f2:	2282      	movs	r2, #130	@ 0x82
 80039f4:	9201      	str	r2, [sp, #4]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2301      	movs	r3, #1
 80039fa:	2240      	movs	r2, #64	@ 0x40
 80039fc:	2178      	movs	r1, #120	@ 0x78
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f005 f826 	bl	8008a50 <HAL_I2C_Mem_Write>
        osMutexRelease(I2C1MutexHandle);
 8003a04:	4b07      	ldr	r3, [pc, #28]	@ (8003a24 <ssd1306_UpdateScreen+0x80>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f008 fdad 	bl	800c568 <osMutexRelease>
    for (i = 0; i < 8; i++) {
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	3301      	adds	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b07      	cmp	r3, #7
 8003a18:	d9cb      	bls.n	80039b2 <ssd1306_UpdateScreen+0xe>
    }
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	2000040c 	.word	0x2000040c
 8003a28:	20000520 	.word	0x20000520

08003a2c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8003a2c:	b490      	push	{r4, r7}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
 8003a36:	460b      	mov	r3, r1
 8003a38:	71bb      	strb	r3, [r7, #6]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	2b81      	cmp	r3, #129	@ 0x81
 8003a42:	d854      	bhi.n	8003aee <ssd1306_DrawPixel+0xc2>
 8003a44:	79bb      	ldrb	r3, [r7, #6]
 8003a46:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a48:	d851      	bhi.n	8003aee <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8003a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003af8 <ssd1306_DrawPixel+0xcc>)
 8003a4c:	791b      	ldrb	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <ssd1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR)!color;
 8003a52:	797b      	ldrb	r3, [r7, #5]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8003a60:	797b      	ldrb	r3, [r7, #5]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d120      	bne.n	8003aa8 <ssd1306_DrawPixel+0x7c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003a66:	79fa      	ldrb	r2, [r7, #7]
 8003a68:	79bb      	ldrb	r3, [r7, #6]
 8003a6a:	08db      	lsrs	r3, r3, #3
 8003a6c:	b2d8      	uxtb	r0, r3
 8003a6e:	4601      	mov	r1, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	019b      	lsls	r3, r3, #6
 8003a74:	440b      	add	r3, r1
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	4413      	add	r3, r2
 8003a7a:	4a20      	ldr	r2, [pc, #128]	@ (8003afc <ssd1306_DrawPixel+0xd0>)
 8003a7c:	5cd3      	ldrb	r3, [r2, r3]
 8003a7e:	b25a      	sxtb	r2, r3
 8003a80:	79bb      	ldrb	r3, [r7, #6]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	2101      	movs	r1, #1
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b25c      	sxtb	r4, r3
 8003a92:	79fa      	ldrb	r2, [r7, #7]
 8003a94:	4601      	mov	r1, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	440b      	add	r3, r1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	b2e1      	uxtb	r1, r4
 8003aa2:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <ssd1306_DrawPixel+0xd0>)
 8003aa4:	54d1      	strb	r1, [r2, r3]
 8003aa6:	e023      	b.n	8003af0 <ssd1306_DrawPixel+0xc4>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003aa8:	79fa      	ldrb	r2, [r7, #7]
 8003aaa:	79bb      	ldrb	r3, [r7, #6]
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	b2d8      	uxtb	r0, r3
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	440b      	add	r3, r1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	4a0f      	ldr	r2, [pc, #60]	@ (8003afc <ssd1306_DrawPixel+0xd0>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	b25a      	sxtb	r2, r3
 8003ac2:	79bb      	ldrb	r3, [r7, #6]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	b25c      	sxtb	r4, r3
 8003ad8:	79fa      	ldrb	r2, [r7, #7]
 8003ada:	4601      	mov	r1, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	019b      	lsls	r3, r3, #6
 8003ae0:	440b      	add	r3, r1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	b2e1      	uxtb	r1, r4
 8003ae8:	4a04      	ldr	r2, [pc, #16]	@ (8003afc <ssd1306_DrawPixel+0xd0>)
 8003aea:	54d1      	strb	r1, [r2, r3]
 8003aec:	e000      	b.n	8003af0 <ssd1306_DrawPixel+0xc4>
        return;
 8003aee:	bf00      	nop
    }
}
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc90      	pop	{r4, r7}
 8003af6:	4770      	bx	lr
 8003af8:	20000930 	.word	0x20000930
 8003afc:	20000520 	.word	0x20000520

08003b00 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b089      	sub	sp, #36	@ 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4604      	mov	r4, r0
 8003b08:	1d38      	adds	r0, r7, #4
 8003b0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4623      	mov	r3, r4
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	4613      	mov	r3, r2
 8003b16:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003b18:	4b38      	ldr	r3, [pc, #224]	@ (8003bfc <ssd1306_WriteChar+0xfc>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	793b      	ldrb	r3, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	2b81      	cmp	r3, #129	@ 0x81
 8003b24:	dc06      	bgt.n	8003b34 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8003b26:	4b35      	ldr	r3, [pc, #212]	@ (8003bfc <ssd1306_WriteChar+0xfc>)
 8003b28:	885b      	ldrh	r3, [r3, #2]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	797b      	ldrb	r3, [r7, #5]
 8003b2e:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003b30:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b32:	dd01      	ble.n	8003b38 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e05c      	b.n	8003bf2 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	e04c      	b.n	8003bd8 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	3b20      	subs	r3, #32
 8003b44:	7979      	ldrb	r1, [r7, #5]
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	440b      	add	r3, r1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	e034      	b.n	8003bc8 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d012      	beq.n	8003b94 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003b6e:	4b23      	ldr	r3, [pc, #140]	@ (8003bfc <ssd1306_WriteChar+0xfc>)
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	b2d8      	uxtb	r0, r3
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bfc <ssd1306_WriteChar+0xfc>)
 8003b7e:	885b      	ldrh	r3, [r3, #2]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	7bba      	ldrb	r2, [r7, #14]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f7ff ff4d 	bl	8003a2c <ssd1306_DrawPixel>
 8003b92:	e016      	b.n	8003bc2 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003b94:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <ssd1306_WriteChar+0xfc>)
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	b2d8      	uxtb	r0, r3
 8003ba2:	4b16      	ldr	r3, [pc, #88]	@ (8003bfc <ssd1306_WriteChar+0xfc>)
 8003ba4:	885b      	ldrh	r3, [r3, #2]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	b2d9      	uxtb	r1, r3
 8003bb0:	7bbb      	ldrb	r3, [r7, #14]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f7ff ff35 	bl	8003a2c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	793b      	ldrb	r3, [r7, #4]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d3c5      	bcc.n	8003b5e <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	797b      	ldrb	r3, [r7, #5]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d3ad      	bcc.n	8003b3e <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <ssd1306_WriteChar+0xfc>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	793a      	ldrb	r2, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <ssd1306_WriteChar+0xfc>)
 8003bee:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3724      	adds	r7, #36	@ 0x24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000930 	.word	0x20000930

08003c00 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	1d38      	adds	r0, r7, #4
 8003c0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8003c0e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8003c10:	e012      	b.n	8003c38 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	7818      	ldrb	r0, [r3, #0]
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	1d3a      	adds	r2, r7, #4
 8003c1a:	ca06      	ldmia	r2, {r1, r2}
 8003c1c:	f7ff ff70 	bl	8003b00 <ssd1306_WriteChar>
 8003c20:	4603      	mov	r3, r0
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d002      	beq.n	8003c32 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	e008      	b.n	8003c44 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
    while (*str)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e8      	bne.n	8003c12 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	781b      	ldrb	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	460a      	mov	r2, r1
 8003c56:	71fb      	strb	r3, [r7, #7]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <ssd1306_SetCursor+0x2c>)
 8003c62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003c64:	79bb      	ldrb	r3, [r7, #6]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	4b03      	ldr	r3, [pc, #12]	@ (8003c78 <ssd1306_SetCursor+0x2c>)
 8003c6a:	805a      	strh	r2, [r3, #2]
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	20000930 	.word	0x20000930

08003c7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	4b12      	ldr	r3, [pc, #72]	@ (8003cd0 <HAL_MspInit+0x54>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	4a11      	ldr	r2, [pc, #68]	@ (8003cd0 <HAL_MspInit+0x54>)
 8003c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c92:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd0 <HAL_MspInit+0x54>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_MspInit+0x54>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd0 <HAL_MspInit+0x54>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <HAL_MspInit+0x54>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	210f      	movs	r1, #15
 8003cbe:	f06f 0001 	mvn.w	r0, #1
 8003cc2:	f003 f94d 	bl	8006f60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800

08003cd4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	@ 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	@ (8003d58 <HAL_I2C_MspInit+0x84>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d12b      	bne.n	8003d4e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	4b18      	ldr	r3, [pc, #96]	@ (8003d5c <HAL_I2C_MspInit+0x88>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	4a17      	ldr	r2, [pc, #92]	@ (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d06:	4b15      	ldr	r3, [pc, #84]	@ (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d12:	23c0      	movs	r3, #192	@ 0xc0
 8003d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d16:	2312      	movs	r3, #18
 8003d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d22:	2304      	movs	r3, #4
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	480c      	ldr	r0, [pc, #48]	@ (8003d60 <HAL_I2C_MspInit+0x8c>)
 8003d2e:	f004 f833 	bl	8007d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d42:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003d4e:	bf00      	nop
 8003d50:	3728      	adds	r7, #40	@ 0x28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40005400 	.word	0x40005400
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020400 	.word	0x40020400

08003d64 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a15      	ldr	r2, [pc, #84]	@ (8003dc8 <HAL_TIM_PWM_MspInit+0x64>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	4b14      	ldr	r3, [pc, #80]	@ (8003dcc <HAL_TIM_PWM_MspInit+0x68>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	4a13      	ldr	r2, [pc, #76]	@ (8003dcc <HAL_TIM_PWM_MspInit+0x68>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d86:	4b11      	ldr	r3, [pc, #68]	@ (8003dcc <HAL_TIM_PWM_MspInit+0x68>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d92:	e012      	b.n	8003dba <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd0 <HAL_TIM_PWM_MspInit+0x6c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10d      	bne.n	8003dba <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <HAL_TIM_PWM_MspInit+0x68>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	4a09      	ldr	r2, [pc, #36]	@ (8003dcc <HAL_TIM_PWM_MspInit+0x68>)
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dae:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <HAL_TIM_PWM_MspInit+0x68>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40000400 	.word	0x40000400

08003dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	@ 0x28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a24      	ldr	r2, [pc, #144]	@ (8003e84 <HAL_TIM_MspPostInit+0xb0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d11f      	bne.n	8003e36 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	4b23      	ldr	r3, [pc, #140]	@ (8003e88 <HAL_TIM_MspPostInit+0xb4>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <HAL_TIM_MspPostInit+0xb4>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e06:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <HAL_TIM_MspPostInit+0xb4>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_1A_PWM_Pin|Motor_1B_PWM_Pin|Motor_2A_PWM_Pin;
 8003e12:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8003e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e20:	2300      	movs	r3, #0
 8003e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e24:	2301      	movs	r3, #1
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4817      	ldr	r0, [pc, #92]	@ (8003e8c <HAL_TIM_MspPostInit+0xb8>)
 8003e30:	f003 ffb2 	bl	8007d98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e34:	e022      	b.n	8003e7c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a15      	ldr	r2, [pc, #84]	@ (8003e90 <HAL_TIM_MspPostInit+0xbc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d11d      	bne.n	8003e7c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	4b10      	ldr	r3, [pc, #64]	@ (8003e88 <HAL_TIM_MspPostInit+0xb4>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e48:	4a0f      	ldr	r2, [pc, #60]	@ (8003e88 <HAL_TIM_MspPostInit+0xb4>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e50:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <HAL_TIM_MspPostInit+0xb4>)
 8003e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_2B_PWM_Pin;
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	2302      	movs	r3, #2
 8003e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Motor_2B_PWM_GPIO_Port, &GPIO_InitStruct);
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	4619      	mov	r1, r3
 8003e76:	4805      	ldr	r0, [pc, #20]	@ (8003e8c <HAL_TIM_MspPostInit+0xb8>)
 8003e78:	f003 ff8e 	bl	8007d98 <HAL_GPIO_Init>
}
 8003e7c:	bf00      	nop
 8003e7e:	3728      	adds	r7, #40	@ 0x28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40020000 	.word	0x40020000
 8003e90:	40000400 	.word	0x40000400

08003e94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	@ 0x28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	f107 0314 	add.w	r3, r7, #20
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa4 <HAL_UART_MspInit+0x110>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d172      	bne.n	8003f9c <HAL_UART_MspInit+0x108>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa8 <HAL_UART_MspInit+0x114>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8003fa8 <HAL_UART_MspInit+0x114>)
 8003ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec6:	4b38      	ldr	r3, [pc, #224]	@ (8003fa8 <HAL_UART_MspInit+0x114>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <HAL_UART_MspInit+0x114>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	4a33      	ldr	r2, [pc, #204]	@ (8003fa8 <HAL_UART_MspInit+0x114>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ee2:	4b31      	ldr	r3, [pc, #196]	@ (8003fa8 <HAL_UART_MspInit+0x114>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003eee:	2304      	movs	r3, #4
 8003ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efa:	2303      	movs	r3, #3
 8003efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003efe:	2307      	movs	r3, #7
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f02:	f107 0314 	add.w	r3, r7, #20
 8003f06:	4619      	mov	r1, r3
 8003f08:	4828      	ldr	r0, [pc, #160]	@ (8003fac <HAL_UART_MspInit+0x118>)
 8003f0a:	f003 ff45 	bl	8007d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_RX_SBUS_RX_Pin;
 8003f0e:	2308      	movs	r3, #8
 8003f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f12:	2302      	movs	r3, #2
 8003f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f1e:	2307      	movs	r3, #7
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USART2_RX_SBUS_RX_GPIO_Port, &GPIO_InitStruct);
 8003f22:	f107 0314 	add.w	r3, r7, #20
 8003f26:	4619      	mov	r1, r3
 8003f28:	4820      	ldr	r0, [pc, #128]	@ (8003fac <HAL_UART_MspInit+0x118>)
 8003f2a:	f003 ff35 	bl	8007d98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003f2e:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f30:	4a20      	ldr	r2, [pc, #128]	@ (8003fb4 <HAL_UART_MspInit+0x120>)
 8003f32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003f34:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f42:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f50:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f56:	4b16      	ldr	r3, [pc, #88]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003f5c:	4b14      	ldr	r3, [pc, #80]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f62:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f64:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f6a:	4b11      	ldr	r3, [pc, #68]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f70:	480f      	ldr	r0, [pc, #60]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f72:	f003 f81f 	bl	8006fb4 <HAL_DMA_Init>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8003f7c:	f7ff fb7e 	bl	800367c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f86:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb0 <HAL_UART_MspInit+0x11c>)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2105      	movs	r1, #5
 8003f90:	2026      	movs	r0, #38	@ 0x26
 8003f92:	f002 ffe5 	bl	8006f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f96:	2026      	movs	r0, #38	@ 0x26
 8003f98:	f002 fffe 	bl	8006f98 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003f9c:	bf00      	nop
 8003f9e:	3728      	adds	r7, #40	@ 0x28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40004400 	.word	0x40004400
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40020000 	.word	0x40020000
 8003fb0:	20000398 	.word	0x20000398
 8003fb4:	40026088 	.word	0x40026088

08003fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08e      	sub	sp, #56	@ 0x38
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	4b34      	ldr	r3, [pc, #208]	@ (80040a0 <HAL_InitTick+0xe8>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	4a33      	ldr	r2, [pc, #204]	@ (80040a0 <HAL_InitTick+0xe8>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd8:	4b31      	ldr	r3, [pc, #196]	@ (80040a0 <HAL_InitTick+0xe8>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fe4:	f107 0210 	add.w	r2, r7, #16
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	4611      	mov	r1, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f006 f81e 	bl	800a030 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ffe:	f005 ffef 	bl	8009fe0 <HAL_RCC_GetPCLK1Freq>
 8004002:	6378      	str	r0, [r7, #52]	@ 0x34
 8004004:	e004      	b.n	8004010 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004006:	f005 ffeb 	bl	8009fe0 <HAL_RCC_GetPCLK1Freq>
 800400a:	4603      	mov	r3, r0
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004012:	4a24      	ldr	r2, [pc, #144]	@ (80040a4 <HAL_InitTick+0xec>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	0c9b      	lsrs	r3, r3, #18
 800401a:	3b01      	subs	r3, #1
 800401c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800401e:	4b22      	ldr	r3, [pc, #136]	@ (80040a8 <HAL_InitTick+0xf0>)
 8004020:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004024:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004026:	4b20      	ldr	r3, [pc, #128]	@ (80040a8 <HAL_InitTick+0xf0>)
 8004028:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800402c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800402e:	4a1e      	ldr	r2, [pc, #120]	@ (80040a8 <HAL_InitTick+0xf0>)
 8004030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004032:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004034:	4b1c      	ldr	r3, [pc, #112]	@ (80040a8 <HAL_InitTick+0xf0>)
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403a:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <HAL_InitTick+0xf0>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004040:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <HAL_InitTick+0xf0>)
 8004042:	2200      	movs	r2, #0
 8004044:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004046:	4818      	ldr	r0, [pc, #96]	@ (80040a8 <HAL_InitTick+0xf0>)
 8004048:	f006 f824 	bl	800a094 <HAL_TIM_Base_Init>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004052:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004056:	2b00      	cmp	r3, #0
 8004058:	d11b      	bne.n	8004092 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800405a:	4813      	ldr	r0, [pc, #76]	@ (80040a8 <HAL_InitTick+0xf0>)
 800405c:	f006 f874 	bl	800a148 <HAL_TIM_Base_Start_IT>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004066:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800406a:	2b00      	cmp	r3, #0
 800406c:	d111      	bne.n	8004092 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800406e:	201c      	movs	r0, #28
 8004070:	f002 ff92 	bl	8006f98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b0f      	cmp	r3, #15
 8004078:	d808      	bhi.n	800408c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800407a:	2200      	movs	r2, #0
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	201c      	movs	r0, #28
 8004080:	f002 ff6e 	bl	8006f60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004084:	4a09      	ldr	r2, [pc, #36]	@ (80040ac <HAL_InitTick+0xf4>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e002      	b.n	8004092 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004092:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004096:	4618      	mov	r0, r3
 8004098:	3738      	adds	r7, #56	@ 0x38
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	431bde83 	.word	0x431bde83
 80040a8:	20000938 	.word	0x20000938
 80040ac:	20000070 	.word	0x20000070

080040b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <NMI_Handler+0x4>

080040b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <HardFault_Handler+0x4>

080040c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <MemManage_Handler+0x4>

080040c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <BusFault_Handler+0x4>

080040d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <UsageFault_Handler+0x4>

080040d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_for_CLK___SNP00128_Pin);
 80040ea:	2010      	movs	r0, #16
 80040ec:	f004 f824 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80040f8:	4802      	ldr	r0, [pc, #8]	@ (8004104 <DMA1_Stream5_IRQHandler+0x10>)
 80040fa:	f003 f8f3 	bl	80072e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000398 	.word	0x20000398

08004108 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_for_SW___SNP00128_Pin);
 800410c:	2040      	movs	r0, #64	@ 0x40
 800410e:	f004 f813 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_for_BNO085_Pin);
 8004112:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004116:	f004 f80f 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004124:	4802      	ldr	r0, [pc, #8]	@ (8004130 <TIM2_IRQHandler+0x10>)
 8004126:	f006 f971 	bl	800a40c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000938 	.word	0x20000938

08004134 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004138:	4802      	ldr	r0, [pc, #8]	@ (8004144 <USART2_IRQHandler+0x10>)
 800413a:	f006 ff65 	bl	800b008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000350 	.word	0x20000350

08004148 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return 1;
 800414c:	2301      	movs	r3, #1
}
 800414e:	4618      	mov	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_kill>:

int _kill(int pid, int sig)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004162:	f00c f96b 	bl	801043c <__errno>
 8004166:	4603      	mov	r3, r0
 8004168:	2216      	movs	r2, #22
 800416a:	601a      	str	r2, [r3, #0]
  return -1;
 800416c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_exit>:

void _exit (int status)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004180:	f04f 31ff 	mov.w	r1, #4294967295
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ffe7 	bl	8004158 <_kill>
  while (1) {}    /* Make sure we hang here */
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <_exit+0x12>

0800418e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e00a      	b.n	80041b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041a0:	f3af 8000 	nop.w
 80041a4:	4601      	mov	r1, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	60ba      	str	r2, [r7, #8]
 80041ac:	b2ca      	uxtb	r2, r1
 80041ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	3301      	adds	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	dbf0      	blt.n	80041a0 <_read+0x12>
  }

  return len;
 80041be:	687b      	ldr	r3, [r7, #4]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e009      	b.n	80041ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	60ba      	str	r2, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3301      	adds	r3, #1
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	dbf1      	blt.n	80041da <_write+0x12>
  }
  return len;
 80041f6:	687b      	ldr	r3, [r7, #4]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <_close>:

int _close(int file)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004228:	605a      	str	r2, [r3, #4]
  return 0;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <_isatty>:

int _isatty(int file)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004240:	2301      	movs	r3, #1
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004270:	4a14      	ldr	r2, [pc, #80]	@ (80042c4 <_sbrk+0x5c>)
 8004272:	4b15      	ldr	r3, [pc, #84]	@ (80042c8 <_sbrk+0x60>)
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800427c:	4b13      	ldr	r3, [pc, #76]	@ (80042cc <_sbrk+0x64>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004284:	4b11      	ldr	r3, [pc, #68]	@ (80042cc <_sbrk+0x64>)
 8004286:	4a12      	ldr	r2, [pc, #72]	@ (80042d0 <_sbrk+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800428a:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <_sbrk+0x64>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d207      	bcs.n	80042a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004298:	f00c f8d0 	bl	801043c <__errno>
 800429c:	4603      	mov	r3, r0
 800429e:	220c      	movs	r2, #12
 80042a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	e009      	b.n	80042bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042a8:	4b08      	ldr	r3, [pc, #32]	@ (80042cc <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ae:	4b07      	ldr	r3, [pc, #28]	@ (80042cc <_sbrk+0x64>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	4a05      	ldr	r2, [pc, #20]	@ (80042cc <_sbrk+0x64>)
 80042b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20020000 	.word	0x20020000
 80042c8:	00000400 	.word	0x00000400
 80042cc:	20000980 	.word	0x20000980
 80042d0:	20005fa8 	.word	0x20005fa8

080042d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042d8:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <SystemInit+0x20>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	4a05      	ldr	r2, [pc, #20]	@ (80042f4 <SystemInit+0x20>)
 80042e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <TB6612FNG_Init>:
    {GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1, &htim1, TIM_CHANNEL_4},
    // MOTOR_2B: PB14, PB15, TIM3_CH2 (PA7)
    {GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_15, &htim3, TIM_CHANNEL_2}
};

void TB6612FNG_Init(void) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
    for (int i = 0; i < MOTOR_COUNT; i++) {
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	e042      	b.n	800438a <TB6612FNG_Init+0x92>
        HAL_GPIO_WritePin(tb6612fng_channels[i].IN1_Port, tb6612fng_channels[i].IN1_Pin, GPIO_PIN_RESET);
 8004304:	492a      	ldr	r1, [pc, #168]	@ (80043b0 <TB6612FNG_Init+0xb8>)
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	440b      	add	r3, r1
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	4926      	ldr	r1, [pc, #152]	@ (80043b0 <TB6612FNG_Init+0xb8>)
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	440b      	add	r3, r1
 8004322:	3304      	adds	r3, #4
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	4619      	mov	r1, r3
 800432a:	f003 fed1 	bl	80080d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(tb6612fng_channels[i].IN2_Port, tb6612fng_channels[i].IN2_Pin, GPIO_PIN_RESET);
 800432e:	4920      	ldr	r1, [pc, #128]	@ (80043b0 <TB6612FNG_Init+0xb8>)
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	440b      	add	r3, r1
 800433c:	3308      	adds	r3, #8
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	491b      	ldr	r1, [pc, #108]	@ (80043b0 <TB6612FNG_Init+0xb8>)
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	440b      	add	r3, r1
 800434e:	330c      	adds	r3, #12
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	4619      	mov	r1, r3
 8004356:	f003 febb 	bl	80080d0 <HAL_GPIO_WritePin>
        HAL_TIM_PWM_Start(tb6612fng_channels[i].PWM_Timer, tb6612fng_channels[i].PWM_Channel);
 800435a:	4915      	ldr	r1, [pc, #84]	@ (80043b0 <TB6612FNG_Init+0xb8>)
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	4413      	add	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	440b      	add	r3, r1
 8004368:	3310      	adds	r3, #16
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	4910      	ldr	r1, [pc, #64]	@ (80043b0 <TB6612FNG_Init+0xb8>)
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	440b      	add	r3, r1
 800437a:	3314      	adds	r3, #20
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4619      	mov	r1, r3
 8004380:	f005 ff94 	bl	800a2ac <HAL_TIM_PWM_Start>
    for (int i = 0; i < MOTOR_COUNT; i++) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3301      	adds	r3, #1
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b03      	cmp	r3, #3
 800438e:	ddb9      	ble.n	8004304 <TB6612FNG_Init+0xc>
    }
    // Set STBY pins high to enable drivers (if used)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // TB6612 #1 STBY
 8004390:	2201      	movs	r2, #1
 8004392:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004396:	4807      	ldr	r0, [pc, #28]	@ (80043b4 <TB6612FNG_Init+0xbc>)
 8004398:	f003 fe9a 	bl	80080d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // TB6612 #2 STBY
 800439c:	2201      	movs	r2, #1
 800439e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043a2:	4804      	ldr	r0, [pc, #16]	@ (80043b4 <TB6612FNG_Init+0xbc>)
 80043a4:	f003 fe94 	bl	80080d0 <HAL_GPIO_WritePin>
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000010 	.word	0x20000010
 80043b4:	40020400 	.word	0x40020400

080043b8 <TB6612FNG_Set>:

void TB6612FNG_Set(TB6612FNG_Channel* ch, TB6612FNG_Dir dir, uint16_t speed) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
 80043c4:	4613      	mov	r3, r2
 80043c6:	803b      	strh	r3, [r7, #0]
    if (!ch) return;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d07c      	beq.n	80044c8 <TB6612FNG_Set+0x110>
    // Get timer period
    uint32_t period = ch->PWM_Timer->Instance->ARR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	60fb      	str	r3, [r7, #12]
    if (speed > period) speed = period; // Clamp speed to period
 80043d8:	883b      	ldrh	r3, [r7, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d201      	bcs.n	80043e4 <TB6612FNG_Set+0x2c>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	803b      	strh	r3, [r7, #0]

    switch (dir) {
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d028      	beq.n	800443c <TB6612FNG_Set+0x84>
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	dc37      	bgt.n	800445e <TB6612FNG_Set+0xa6>
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d002      	beq.n	80043f8 <TB6612FNG_Set+0x40>
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d011      	beq.n	800441a <TB6612FNG_Set+0x62>
 80043f6:	e032      	b.n	800445e <TB6612FNG_Set+0xa6>
        case TB6612FNG_FORWARD:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_SET);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	889b      	ldrh	r3, [r3, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	4619      	mov	r1, r3
 8004404:	f003 fe64 	bl	80080d0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_RESET);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6898      	ldr	r0, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	899b      	ldrh	r3, [r3, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	4619      	mov	r1, r3
 8004414:	f003 fe5c 	bl	80080d0 <HAL_GPIO_WritePin>
            break;
 8004418:	e032      	b.n	8004480 <TB6612FNG_Set+0xc8>
        case TB6612FNG_BACKWARD:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_RESET);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	889b      	ldrh	r3, [r3, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	4619      	mov	r1, r3
 8004426:	f003 fe53 	bl	80080d0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_SET);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6898      	ldr	r0, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	899b      	ldrh	r3, [r3, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	4619      	mov	r1, r3
 8004436:	f003 fe4b 	bl	80080d0 <HAL_GPIO_WritePin>
            break;
 800443a:	e021      	b.n	8004480 <TB6612FNG_Set+0xc8>
        case TB6612FNG_BRAKE:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_SET);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	889b      	ldrh	r3, [r3, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	4619      	mov	r1, r3
 8004448:	f003 fe42 	bl	80080d0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_SET);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6898      	ldr	r0, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	899b      	ldrh	r3, [r3, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	4619      	mov	r1, r3
 8004458:	f003 fe3a 	bl	80080d0 <HAL_GPIO_WritePin>
            break;
 800445c:	e010      	b.n	8004480 <TB6612FNG_Set+0xc8>
        case TB6612FNG_STOP:
        default:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_RESET);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	889b      	ldrh	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	4619      	mov	r1, r3
 800446a:	f003 fe31 	bl	80080d0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_RESET);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6898      	ldr	r0, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	899b      	ldrh	r3, [r3, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	4619      	mov	r1, r3
 800447a:	f003 fe29 	bl	80080d0 <HAL_GPIO_WritePin>
            break;
 800447e:	bf00      	nop
    }
    __HAL_TIM_SET_COMPARE(ch->PWM_Timer, ch->PWM_Channel, speed);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <TB6612FNG_Set+0xdc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	883a      	ldrh	r2, [r7, #0]
 8004490:	635a      	str	r2, [r3, #52]	@ 0x34
 8004492:	e01a      	b.n	80044ca <TB6612FNG_Set+0x112>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d105      	bne.n	80044a8 <TB6612FNG_Set+0xf0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	883b      	ldrh	r3, [r7, #0]
 80044a4:	6393      	str	r3, [r2, #56]	@ 0x38
 80044a6:	e010      	b.n	80044ca <TB6612FNG_Set+0x112>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d105      	bne.n	80044bc <TB6612FNG_Set+0x104>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	883b      	ldrh	r3, [r7, #0]
 80044b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80044ba:	e006      	b.n	80044ca <TB6612FNG_Set+0x112>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	883b      	ldrh	r3, [r7, #0]
 80044c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80044c6:	e000      	b.n	80044ca <TB6612FNG_Set+0x112>
    if (!ch) return;
 80044c8:	bf00      	nop
}
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <tb6612fng_drive>:


void tb6612fng_drive(TB6612FNG_Motor motor, TB6612FNG_Dir dir, uint16_t speed) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
 80044da:	460b      	mov	r3, r1
 80044dc:	71bb      	strb	r3, [r7, #6]
 80044de:	4613      	mov	r3, r2
 80044e0:	80bb      	strh	r3, [r7, #4]
    if (motor < MOTOR_COUNT)
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d80b      	bhi.n	8004500 <tb6612fng_drive+0x30>
        TB6612FNG_Set(&tb6612fng_channels[motor], dir, speed);
 80044e8:	79fa      	ldrb	r2, [r7, #7]
 80044ea:	4613      	mov	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4413      	add	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4a05      	ldr	r2, [pc, #20]	@ (8004508 <tb6612fng_drive+0x38>)
 80044f4:	4413      	add	r3, r2
 80044f6:	88ba      	ldrh	r2, [r7, #4]
 80044f8:	79b9      	ldrb	r1, [r7, #6]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff ff5c 	bl	80043b8 <TB6612FNG_Set>
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000010 	.word	0x20000010

0800450c <tb6612fng_stop>:

void tb6612fng_stop(TB6612FNG_Motor motor) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
    if (motor < MOTOR_COUNT)
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d80b      	bhi.n	8004534 <tb6612fng_stop+0x28>
        TB6612FNG_Set(&tb6612fng_channels[motor], TB6612FNG_STOP, 0);
 800451c:	79fa      	ldrb	r2, [r7, #7]
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4a05      	ldr	r2, [pc, #20]	@ (800453c <tb6612fng_stop+0x30>)
 8004528:	4413      	add	r3, r2
 800452a:	2200      	movs	r2, #0
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff42 	bl	80043b8 <TB6612FNG_Set>
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000010 	.word	0x20000010

08004540 <tb6612fng_brake>:

void tb6612fng_brake(TB6612FNG_Motor motor) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
    if (motor < MOTOR_COUNT)
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d80b      	bhi.n	8004568 <tb6612fng_brake+0x28>
        TB6612FNG_Set(&tb6612fng_channels[motor], TB6612FNG_BRAKE, 0);
 8004550:	79fa      	ldrb	r2, [r7, #7]
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4a05      	ldr	r2, [pc, #20]	@ (8004570 <tb6612fng_brake+0x30>)
 800455c:	4413      	add	r3, r2
 800455e:	2200      	movs	r2, #0
 8004560:	2103      	movs	r1, #3
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff28 	bl	80043b8 <TB6612FNG_Set>
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000010 	.word	0x20000010

08004574 <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <opStart+0x18>
 8004586:	f06f 0302 	mvn.w	r3, #2
 800458a:	e014      	b.n	80045b6 <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
 80045a0:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	61da      	str	r2, [r3, #28]
    }

    return rc;
 80045b4:	68fb      	ldr	r3, [r7, #12]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	4613      	mov	r3, r2
 80045ca:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d006      	beq.n	80045ec <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	4798      	blx	r3
    }
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00f      	beq.n	8004648 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 800463c:	e004      	b.n	8004648 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 800463e:	f04f 31ff 	mov.w	r1, #4294967295
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff ffd6 	bl	80045f4 <opCompleted>
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e00f      	b.n	8004680 <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 8004660:	4a0c      	ldr	r2, [pc, #48]	@ (8004694 <getReportLen+0x44>)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004668:	79fa      	ldrb	r2, [r7, #7]
 800466a:	429a      	cmp	r2, r3
 800466c:	d105      	bne.n	800467a <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 800466e:	4a09      	ldr	r2, [pc, #36]	@ (8004694 <getReportLen+0x44>)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	4413      	add	r3, r2
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	e006      	b.n	8004688 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b2f      	cmp	r3, #47	@ 0x2f
 8004684:	d9ec      	bls.n	8004660 <getReportLen+0x10>
        }
    }

    return 0;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	080133c4 	.word	0x080133c4

08004698 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	@ 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint32_t count = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 8094 	bne.w	80047e8 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        return;
 80046ce:	e090      	b.n	80047f2 <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	3301      	adds	r3, #1
 80046d4:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 80046d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	4413      	add	r3, r2
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff ffb4 	bl	8004650 <getReportLen>
 80046e8:	4603      	mov	r3, r0
 80046ea:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 80046ec:	7dbb      	ldrb	r3, [r7, #22]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
            return;
 8004700:	e077      	b.n	80047f2 <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2bf1      	cmp	r3, #241	@ 0xf1
 8004706:	d107      	bne.n	8004718 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 8004708:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	789b      	ldrb	r3, [r3, #2]
 8004714:	2b84      	cmp	r3, #132	@ 0x84
 8004716:	e059      	b.n	80047cc <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	2bfc      	cmp	r3, #252	@ 0xfc
 800471c:	d156      	bne.n	80047cc <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004722:	2b00      	cmp	r3, #0
 8004724:	d052      	beq.n	80047cc <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 8004726:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	4413      	add	r3, r2
 800472c:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 800472e:	4b32      	ldr	r3, [pc, #200]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 8004730:	2202      	movs	r2, #2
 8004732:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	785a      	ldrb	r2, [r3, #1]
 8004738:	4b2f      	ldr	r3, [pc, #188]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 800473a:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	789b      	ldrb	r3, [r3, #2]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 800474e:	4b2a      	ldr	r3, [pc, #168]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 8004750:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	789b      	ldrb	r3, [r3, #2]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8004764:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 8004766:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	789b      	ldrb	r3, [r3, #2]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 800477a:	4b1f      	ldr	r3, [pc, #124]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 800477c:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	789b      	ldrb	r3, [r3, #2]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 8004790:	4b19      	ldr	r3, [pc, #100]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 8004792:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800479a:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 800479c:	4b16      	ldr	r3, [pc, #88]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 800479e:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 80047a6:	4a14      	ldr	r2, [pc, #80]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 80047a8:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 80047b0:	4a11      	ldr	r2, [pc, #68]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 80047b2:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 80047ba:	4a0f      	ldr	r2, [pc, #60]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 80047bc:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047c6:	490c      	ldr	r1, [pc, #48]	@ (80047f8 <sensorhubControlHdlr+0x160>)
 80047c8:	4610      	mov	r0, r2
 80047ca:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 80047cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4413      	add	r3, r2
 80047d2:	7dba      	ldrb	r2, [r7, #22]
 80047d4:	b292      	uxth	r2, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	69f8      	ldr	r0, [r7, #28]
 80047da:	f7ff fef0 	bl	80045be <opRx>
            cursor += reportLen;
 80047de:	7dbb      	ldrb	r3, [r7, #22]
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047e4:	4413      	add	r3, r2
 80047e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (cursor < len) {
 80047e8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	f4ff af6f 	bcc.w	80046d0 <sensorhubControlHdlr+0x38>
        }
    }
}
 80047f2:	3728      	adds	r7, #40	@ 0x28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000afc 	.word	0x20000afc

080047fc <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	4610      	mov	r0, r2
 800481a:	4798      	blx	r3
 800481c:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 800481e:	6839      	ldr	r1, [r7, #0]
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff fea7 	bl	8004574 <opStart>
 8004826:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <opProcess+0x36>
        return status;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	e034      	b.n	800489c <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 8004836:	e015      	b.n	8004864 <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f04f 32ff 	mov.w	r2, #4294967295
 8004846:	621a      	str	r2, [r3, #32]
            break;
 8004848:	e01b      	b.n	8004882 <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4618      	mov	r0, r3
 8004850:	f002 fa17 	bl	8006c82 <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	4610      	mov	r0, r2
 8004860:	4798      	blx	r3
 8004862:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0e1      	beq.n	8004838 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad2      	subs	r2, r2, r3
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d3da      	bcc.n	8004838 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d006      	beq.n	8004898 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f06f 0205 	mvn.w	r2, #5
 8004896:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 80048a4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80048a8:	b087      	sub	sp, #28
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 80048b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004924 <touSTimestamp+0x80>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d204      	bcs.n	80048c8 <touSTimestamp+0x24>
        rollovers++;
 80048be:	4b1a      	ldr	r3, [pc, #104]	@ (8004928 <touSTimestamp+0x84>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	4a18      	ldr	r2, [pc, #96]	@ (8004928 <touSTimestamp+0x84>)
 80048c6:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 80048c8:	4a16      	ldr	r2, [pc, #88]	@ (8004924 <touSTimestamp+0x80>)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 80048ce:	4b16      	ldr	r3, [pc, #88]	@ (8004928 <touSTimestamp+0x84>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	469a      	mov	sl, r3
 80048d6:	4693      	mov	fp, r2
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	4653      	mov	r3, sl
 80048e2:	2200      	movs	r2, #0
 80048e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 80048e8:	88fa      	ldrh	r2, [r7, #6]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	2264      	movs	r2, #100	@ 0x64
 80048f0:	fb02 f303 	mul.w	r3, r2, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	2200      	movs	r2, #0
 80048fc:	461c      	mov	r4, r3
 80048fe:	4615      	mov	r5, r2
 8004900:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004904:	eb12 0804 	adds.w	r8, r2, r4
 8004908:	eb43 0905 	adc.w	r9, r3, r5
 800490c:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8004910:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000b18 	.word	0x20000b18
 8004928:	20000b1c 	.word	0x20000b1c

0800492c <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 800492c:	b5b0      	push	{r4, r5, r7, lr}
 800492e:	b0a0      	sub	sp, #128	@ 0x80
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

    int32_t referenceDelta = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (cursor < len) {
 8004946:	e098      	b.n	8004a7a <sensorhubInputHdlr+0x14e>
        // Get next report id
        uint8_t reportId = payload[cursor];
 8004948:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	4413      	add	r3, r2
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8004956:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fe78 	bl	8004650 <getReportLen>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        if (reportLen == 0) {
 8004966:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800496a:	2b00      	cmp	r3, #0
 800496c:	d107      	bne.n	800497e <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 800497c:	e083      	b.n	8004a86 <sensorhubInputHdlr+0x15a>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 800497e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004982:	2bfb      	cmp	r3, #251	@ 0xfb
 8004984:	d10a      	bne.n	800499c <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8004986:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4413      	add	r3, r2
 800498e:	667b      	str	r3, [r7, #100]	@ 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 8004990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004992:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004996:	425b      	negs	r3, r3
 8004998:	67bb      	str	r3, [r7, #120]	@ 0x78
 800499a:	e066      	b.n	8004a6a <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 800499c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80049a0:	2bfa      	cmp	r3, #250	@ 0xfa
 80049a2:	d10b      	bne.n	80049bc <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 80049a4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	4413      	add	r3, r2
 80049ac:	66bb      	str	r3, [r7, #104]	@ 0x68

                referenceDelta += rpt->timebase;
 80049ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049b0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80049b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80049b6:	4413      	add	r3, r2
 80049b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049ba:	e056      	b.n	8004a6a <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 80049bc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80049c0:	2bef      	cmp	r3, #239	@ 0xef
 80049c2:	d10b      	bne.n	80049dc <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 80049c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4413      	add	r3, r2
 80049cc:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 80049d0:	b292      	uxth	r2, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff fdf2 	bl	80045be <opRx>
 80049da:	e046      	b.n	8004a6a <sensorhubInputHdlr+0x13e>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 80049dc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	4413      	add	r3, r2
 80049e4:	673b      	str	r3, [r7, #112]	@ 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 80049e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e8:	3302      	adds	r3, #2
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80049f8:	3203      	adds	r2, #3
 80049fa:	7812      	ldrb	r2, [r2, #0]
 80049fc:	4413      	add	r3, r2
 80049fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8004a02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a06:	461a      	mov	r2, r3
 8004a08:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004a0a:	6838      	ldr	r0, [r7, #0]
 8004a0c:	f7ff ff4a 	bl	80048a4 <touSTimestamp>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8004a18:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8004a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a1e:	4413      	add	r3, r2
 8004a20:	2264      	movs	r2, #100	@ 0x64
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	17da      	asrs	r2, r3, #31
 8004a28:	461c      	mov	r4, r3
 8004a2a:	4615      	mov	r5, r2
 8004a2c:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8004a30:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004a34:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                memcpy(event.report, pReport, reportLen);
 8004a38:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	3312      	adds	r3, #18
 8004a42:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8004a44:	4618      	mov	r0, r3
 8004a46:	f00b fd26 	bl	8010496 <memcpy>
                event.len = reportLen;
 8004a4a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004a4e:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <sensorhubInputHdlr+0x13e>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a62:	f107 0110 	add.w	r1, r7, #16
 8004a66:	4610      	mov	r0, r2
 8004a68:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 8004a6a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004a74:	4413      	add	r3, r2
 8004a76:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    while (cursor < len) {
 8004a7a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	f4ff af61 	bcc.w	8004948 <sensorhubInputHdlr+0x1c>
        }
    }
}
 8004a86:	3780      	adds	r7, #128	@ 0x80
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bdb0      	pop	{r4, r5, r7, pc}

08004a8c <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7ff ff40 	bl	800492c <sensorhubInputHdlr>
}
 8004aac:	bf00      	nop
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8004ac8:	88fa      	ldrh	r2, [r7, #6]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f7ff ff2c 	bl	800492c <sensorhubInputHdlr>
}
 8004ad4:	bf00      	nop
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004adc:	b5b0      	push	{r4, r5, r7, lr}
 8004ade:	b09c      	sub	sp, #112	@ 0x70
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	66bb      	str	r3, [r7, #104]	@ 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 8004af6:	232a      	movs	r3, #42	@ 0x2a
 8004af8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    uint8_t reportLen = getReportLen(reportId);
 8004afc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fda5 	bl	8004650 <getReportLen>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    while (cursor < len) {
 8004b0c:	e02d      	b.n	8004b6a <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2200      	movs	r2, #0
 8004b12:	461c      	mov	r4, r3
 8004b14:	4615      	mov	r5, r2
 8004b16:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8004b1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004b1e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        memcpy(event.report, payload+cursor, reportLen);
 8004b22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	18d1      	adds	r1, r2, r3
 8004b2a:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004b2e:	f107 0310 	add.w	r3, r7, #16
 8004b32:	3312      	adds	r3, #18
 8004b34:	4618      	mov	r0, r3
 8004b36:	f00b fcae 	bl	8010496 <memcpy>
        event.len = reportLen;
 8004b3a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004b3e:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 8004b42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8004b4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004b50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004b52:	f107 0110 	add.w	r1, r7, #16
 8004b56:	4610      	mov	r0, r2
 8004b58:	4798      	blx	r3
        }

        cursor += reportLen;
 8004b5a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b64:	4413      	add	r3, r2
 8004b66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    while (cursor < len) {
 8004b6a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d3cc      	bcc.n	8004b0e <sensorhubInputGyroRvHdlr+0x32>
    }
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3770      	adds	r7, #112	@ 0x70
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004b80 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d007      	beq.n	8004baa <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        return;
 8004ba8:	e021      	b.n	8004bee <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d114      	bne.n	8004bdc <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 8004bb8:	6978      	ldr	r0, [r7, #20]
 8004bba:	f7ff fd2d 	bl	8004618 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <executableDeviceHdlr+0x74>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00f      	beq.n	8004bec <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bd4:	4907      	ldr	r1, [pc, #28]	@ (8004bf4 <executableDeviceHdlr+0x74>)
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4798      	blx	r3
            }
            break;
 8004bda:	e007      	b.n	8004bec <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            break;
 8004bea:	e000      	b.n	8004bee <executableDeviceHdlr+0x6e>
            break;
 8004bec:	bf00      	nop
    }
}
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000afc 	.word	0x20000afc

08004bf8 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6858      	ldr	r0, [r3, #4]
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	2102      	movs	r1, #2
 8004c10:	f002 f806 	bl	8006c20 <shtp_send>
 8004c14:	4603      	mov	r3, r0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b08a      	sub	sp, #40	@ 0x28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <setSensorConfigStart+0x28>
 8004c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c3e:	f043 0302 	orr.w	r3, r3, #2
 8004c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <setSensorConfigStart+0x3c>
 8004c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	789b      	ldrb	r3, [r3, #2]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <setSensorConfigStart+0x50>
 8004c62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c66:	f043 0304 	orr.w	r3, r3, #4
 8004c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	78db      	ldrb	r3, [r3, #3]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <setSensorConfigStart+0x64>
 8004c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c7a:	f043 0308 	orr.w	r3, r3, #8
 8004c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	791b      	ldrb	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <setSensorConfigStart+0x78>
 8004c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c8e:	f043 0310 	orr.w	r3, r3, #16
 8004c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    memset(&req, 0, sizeof(req));
 8004c96:	f107 0308 	add.w	r3, r7, #8
 8004c9a:	2211      	movs	r2, #17
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f00b fb09 	bl	80102b6 <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 8004ca4:	23fd      	movs	r3, #253	@ 0xfd
 8004ca6:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cae:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 8004cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cb4:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	88db      	ldrh	r3, [r3, #6]
 8004cba:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8004cd6:	f107 0308 	add.w	r3, r7, #8
 8004cda:	2211      	movs	r2, #17
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff ff8a 	bl	8004bf8 <sendCtrl>
 8004ce4:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 8004ce6:	69f9      	ldr	r1, [r7, #28]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fc83 	bl	80045f4 <opCompleted>

    return rc;
 8004cee:	69fb      	ldr	r3, [r7, #28]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	@ 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <sendCmd>:

// ------------------------------------------------------------------------
// Support for sending commands

static int sendCmd(sh2_t *pSh2, uint8_t cmd, uint8_t p[COMMAND_PARAMS])
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	@ 0x28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	460b      	mov	r3, r1
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	72fb      	strb	r3, [r7, #11]
    int rc = SH2_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	623b      	str	r3, [r7, #32]
    CommandReq_t req;

    // Clear request structure
    memset(&req, 0, sizeof(req));
 8004d0a:	f107 0314 	add.w	r3, r7, #20
 8004d0e:	220c      	movs	r2, #12
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f00b facf 	bl	80102b6 <memset>
    
    // Create a command sequence number for this command
    pSh2->lastCmdId = cmd;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	7afa      	ldrb	r2, [r7, #11]
 8004d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    pSh2->cmdSeq = pSh2->nextCmdSeq++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	b2d1      	uxtb	r1, r2
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	f882 1036 	strb.w	r1, [r2, #54]	@ 0x36
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
    
    // set up request to issue
    req.reportId = SENSORHUB_COMMAND_REQ;
 8004d36:	23f2      	movs	r3, #242	@ 0xf2
 8004d38:	753b      	strb	r3, [r7, #20]
    req.seq = pSh2->cmdSeq;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d40:	757b      	strb	r3, [r7, #21]
    req.command = cmd;
 8004d42:	7afb      	ldrb	r3, [r7, #11]
 8004d44:	75bb      	strb	r3, [r7, #22]
    for (int n = 0; n < COMMAND_PARAMS; n++) {
 8004d46:	2300      	movs	r3, #0
 8004d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4a:	e00c      	b.n	8004d66 <sendCmd+0x6e>
        req.p[n] = p[n];
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	7819      	ldrb	r1, [r3, #0]
 8004d54:	f107 0217 	add.w	r2, r7, #23
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	4413      	add	r3, r2
 8004d5c:	460a      	mov	r2, r1
 8004d5e:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < COMMAND_PARAMS; n++) {
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	3301      	adds	r3, #1
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	ddef      	ble.n	8004d4c <sendCmd+0x54>
    }
    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	220c      	movs	r2, #12
 8004d72:	4619      	mov	r1, r3
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff ff3f 	bl	8004bf8 <sendCtrl>
 8004d7a:	6238      	str	r0, [r7, #32]
    
    return rc;
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3728      	adds	r7, #40	@ 0x28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <sendCmdStart>:

// ------------------------------------------------------------------------
// Generic Send Command

static int sendCmdStart(sh2_t *pSh2)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
    int status = sendCmd(pSh2, pSh2->opData.sendCmd.req.command,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
                     pSh2->opData.sendCmd.req.p);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3327      	adds	r3, #39	@ 0x27
    int status = sendCmd(pSh2, pSh2->opData.sendCmd.req.command,
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff ffac 	bl	8004cf8 <sendCmd>
 8004da0:	60f8      	str	r0, [r7, #12]

    opCompleted(pSh2, status);
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff fc25 	bl	80045f4 <opCompleted>

    return status;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <shtpEventCallback+0x3c>)
 8004dc2:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004df4 <shtpEventCallback+0x40>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 8004dca:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <shtpEventCallback+0x40>)
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d006      	beq.n	8004de6 <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004de0:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <shtpEventCallback+0x40>)
 8004de2:	4610      	mov	r0, r2
 8004de4:	4798      	blx	r3
    }
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000984 	.word	0x20000984
 8004df4:	20000afc 	.word	0x20000afc

08004df8 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 8004e04:	4b41      	ldr	r3, [pc, #260]	@ (8004f0c <sh2_open+0x114>)
 8004e06:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <sh2_open+0x1c>
 8004e0e:	f06f 0301 	mvn.w	r3, #1
 8004e12:	e077      	b.n	8004f04 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8004e14:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8004e18:	2100      	movs	r1, #0
 8004e1a:	69b8      	ldr	r0, [r7, #24]
 8004e1c:	f00b fa4b 	bl	80102b6 <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2200      	movs	r2, #0
 8004e24:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	639a      	str	r2, [r3, #56]	@ 0x38
    pSh2->eventCookie = eventCookie;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	63da      	str	r2, [r3, #60]	@ 0x3c
    pSh2->sensorCallback = 0;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = 0;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2200      	movs	r2, #0
 8004e42:	645a      	str	r2, [r3, #68]	@ 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 fe71 	bl	8006b30 <shtp_open>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	e050      	b.n	8004f04 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4929      	ldr	r1, [pc, #164]	@ (8004f10 <sh2_open+0x118>)
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 fe94 	bl	8006b98 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	6858      	ldr	r0, [r3, #4]
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	4a27      	ldr	r2, [pc, #156]	@ (8004f14 <sh2_open+0x11c>)
 8004e78:	2102      	movs	r1, #2
 8004e7a:	f001 fea1 	bl	8006bc0 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	6858      	ldr	r0, [r3, #4]
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	4a24      	ldr	r2, [pc, #144]	@ (8004f18 <sh2_open+0x120>)
 8004e86:	2103      	movs	r1, #3
 8004e88:	f001 fe9a 	bl	8006bc0 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	6858      	ldr	r0, [r3, #4]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <sh2_open+0x124>)
 8004e94:	2104      	movs	r1, #4
 8004e96:	f001 fe93 	bl	8006bc0 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	6858      	ldr	r0, [r3, #4]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f20 <sh2_open+0x128>)
 8004ea2:	2105      	movs	r1, #5
 8004ea4:	f001 fe8c 	bl	8006bc0 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	6858      	ldr	r0, [r3, #4]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	4a1d      	ldr	r2, [pc, #116]	@ (8004f24 <sh2_open+0x12c>)
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	f001 fe85 	bl	8006bc0 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4798      	blx	r3
 8004ec4:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8004eca:	e00c      	b.n	8004ee6 <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f001 fed6 	bl	8006c82 <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4798      	blx	r3
 8004ee4:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	4a0e      	ldr	r2, [pc, #56]	@ (8004f28 <sh2_open+0x130>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d807      	bhi.n	8004f02 <sh2_open+0x10a>
           (!pSh2->resetComplete))
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	7a1b      	ldrb	r3, [r3, #8]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f083 0301 	eor.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e4      	bne.n	8004ecc <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000984 	.word	0x20000984
 8004f10:	08004db5 	.word	0x08004db5
 8004f14:	08004699 	.word	0x08004699
 8004f18:	08004a8d 	.word	0x08004a8d
 8004f1c:	08004ab5 	.word	0x08004ab5
 8004f20:	08004add 	.word	0x08004add
 8004f24:	08004b81 	.word	0x08004b81
 8004f28:	00030d3f 	.word	0x00030d3f

08004f2c <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 8004f32:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <sh2_service+0x24>)
 8004f34:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 fe9d 	bl	8006c82 <shtp_service>
    }
}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000984 	.word	0x20000984

08004f54 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 8004f5e:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <sh2_setSensorCallback+0x28>)
 8004f60:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = cookie;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	645a      	str	r2, [r3, #68]	@ 0x44

    return SH2_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000984 	.word	0x20000984

08004f80 <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	6039      	str	r1, [r7, #0]
 8004f8a:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <sh2_setSensorConfig+0x4c>)
 8004f8e:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9c:	e012      	b.n	8004fc4 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3324      	adds	r3, #36	@ 0x24
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f00b f985 	bl	80102b6 <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	79fa      	ldrb	r2, [r7, #7]
 8004fb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	625a      	str	r2, [r3, #36]	@ 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 8004fba:	4905      	ldr	r1, [pc, #20]	@ (8004fd0 <sh2_setSensorConfig+0x50>)
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff fc1d 	bl	80047fc <opProcess>
 8004fc2:	4603      	mov	r3, r0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000984 	.word	0x20000984
 8004fd0:	08013424 	.word	0x08013424

08004fd4 <sh2_clearTare>:
 * @brief Clears the previously applied tare operation.
 *
 * @return SH2_OK \n");
 */
int sh2_clearTare(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 8004fda:	4b10      	ldr	r3, [pc, #64]	@ (800501c <sh2_clearTare+0x48>)
 8004fdc:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp == 0) {
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <sh2_clearTare+0x18>
        return SH2_ERR;  // sh2 API isn't open
 8004fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fea:	e013      	b.n	8005014 <sh2_clearTare+0x40>
    }

    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3324      	adds	r3, #36	@ 0x24
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f00b f95e 	bl	80102b6 <memset>
    
    
    pSh2->opData.sendCmd.req.command = SH2_CMD_TARE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pSh2->opData.sendCmd.req.p[0] = SH2_TARE_SET_REORIENTATION;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

    return opProcess(pSh2, &sendCmdOp);
 800500a:	4905      	ldr	r1, [pc, #20]	@ (8005020 <sh2_clearTare+0x4c>)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff fbf5 	bl	80047fc <opProcess>
 8005012:	4603      	mov	r3, r0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000984 	.word	0x20000984
 8005020:	08013434 	.word	0x08013434

08005024 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	7c5a      	ldrb	r2, [r3, #17]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b2a      	cmp	r3, #42	@ 0x2a
 800504c:	d00b      	beq.n	8005066 <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	7cda      	ldrb	r2, [r3, #19]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	7d1b      	ldrb	r3, [r3, #20]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	b2da      	uxtb	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	709a      	strb	r2, [r3, #2]
 8005064:	e005      	b.n	8005072 <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	3b01      	subs	r3, #1
 8005078:	2b2d      	cmp	r3, #45	@ 0x2d
 800507a:	f200 8155 	bhi.w	8005328 <sh2_decodeSensorEvent+0x304>
 800507e:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <sh2_decodeSensorEvent+0x60>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	08005149 	.word	0x08005149
 8005088:	08005179 	.word	0x08005179
 800508c:	0800519d 	.word	0x0800519d
 8005090:	08005155 	.word	0x08005155
 8005094:	080051b5 	.word	0x080051b5
 8005098:	08005161 	.word	0x08005161
 800509c:	08005185 	.word	0x08005185
 80050a0:	080051c1 	.word	0x080051c1
 80050a4:	080051cd 	.word	0x080051cd
 80050a8:	080051d9 	.word	0x080051d9
 80050ac:	080051e5 	.word	0x080051e5
 80050b0:	080051f1 	.word	0x080051f1
 80050b4:	080051fd 	.word	0x080051fd
 80050b8:	08005209 	.word	0x08005209
 80050bc:	080051a9 	.word	0x080051a9
 80050c0:	08005221 	.word	0x08005221
 80050c4:	08005239 	.word	0x08005239
 80050c8:	08005245 	.word	0x08005245
 80050cc:	08005251 	.word	0x08005251
 80050d0:	0800513d 	.word	0x0800513d
 80050d4:	0800516d 	.word	0x0800516d
 80050d8:	08005191 	.word	0x08005191
 80050dc:	08005215 	.word	0x08005215
 80050e0:	0800522d 	.word	0x0800522d
 80050e4:	0800525d 	.word	0x0800525d
 80050e8:	08005269 	.word	0x08005269
 80050ec:	08005275 	.word	0x08005275
 80050f0:	08005281 	.word	0x08005281
 80050f4:	08005329 	.word	0x08005329
 80050f8:	0800528d 	.word	0x0800528d
 80050fc:	08005299 	.word	0x08005299
 8005100:	080052a5 	.word	0x080052a5
 8005104:	080052b1 	.word	0x080052b1
 8005108:	080052bd 	.word	0x080052bd
 800510c:	080052c9 	.word	0x080052c9
 8005110:	08005329 	.word	0x08005329
 8005114:	08005329 	.word	0x08005329
 8005118:	08005329 	.word	0x08005329
 800511c:	08005329 	.word	0x08005329
 8005120:	080052d5 	.word	0x080052d5
 8005124:	080052e1 	.word	0x080052e1
 8005128:	080052ed 	.word	0x080052ed
 800512c:	080052f9 	.word	0x080052f9
 8005130:	08005305 	.word	0x08005305
 8005134:	08005311 	.word	0x08005311
 8005138:	0800531d 	.word	0x0800531d
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8fc 	bl	800533c <decodeRawAccelerometer>
 8005144:	60f8      	str	r0, [r7, #12]
            break;
 8005146:	e0f3      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f924 	bl	8005398 <decodeAccelerometer>
 8005150:	60f8      	str	r0, [r7, #12]
            break;
 8005152:	e0ed      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f95e 	bl	8005418 <decodeLinearAcceleration>
 800515c:	60f8      	str	r0, [r7, #12]
            break;
 800515e:	e0e7      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f998 	bl	8005498 <decodeGravity>
 8005168:	60f8      	str	r0, [r7, #12]
            break;
 800516a:	e0e1      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9d2 	bl	8005518 <decodeRawGyroscope>
 8005174:	60f8      	str	r0, [r7, #12]
            break;
 8005176:	e0db      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa04 	bl	8005588 <decodeGyroscopeCalibrated>
 8005180:	60f8      	str	r0, [r7, #12]
            break;
 8005182:	e0d5      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa3e 	bl	8005608 <decodeGyroscopeUncal>
 800518c:	60f8      	str	r0, [r7, #12]
            break;
 800518e:	e0cf      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 faaa 	bl	80056ec <decodeRawMagnetometer>
 8005198:	60f8      	str	r0, [r7, #12]
            break;
 800519a:	e0c9      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fad2 	bl	8005748 <decodeMagneticFieldCalibrated>
 80051a4:	60f8      	str	r0, [r7, #12]
            break;
 80051a6:	e0c3      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fb0c 	bl	80057c8 <decodeMagneticFieldUncal>
 80051b0:	60f8      	str	r0, [r7, #12]
            break;
 80051b2:	e0bd      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fb78 	bl	80058ac <decodeRotationVector>
 80051bc:	60f8      	str	r0, [r7, #12]
            break;
 80051be:	e0b7      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fbd6 	bl	8005974 <decodeGameRotationVector>
 80051c8:	60f8      	str	r0, [r7, #12]
            break;
 80051ca:	e0b1      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fc20 	bl	8005a14 <decodeGeomagneticRotationVector>
 80051d4:	60f8      	str	r0, [r7, #12]
            break;
 80051d6:	e0ab      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fc7e 	bl	8005adc <decodePressure>
 80051e0:	60f8      	str	r0, [r7, #12]
            break;
 80051e2:	e0a5      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fc94 	bl	8005b14 <decodeAmbientLight>
 80051ec:	60f8      	str	r0, [r7, #12]
            break;
 80051ee:	e09f      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fcaa 	bl	8005b4c <decodeHumidity>
 80051f8:	60f8      	str	r0, [r7, #12]
            break;
 80051fa:	e099      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fcc2 	bl	8005b88 <decodeProximity>
 8005204:	60f8      	str	r0, [r7, #12]
            break;
 8005206:	e093      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fcda 	bl	8005bc4 <decodeTemperature>
 8005210:	60f8      	str	r0, [r7, #12]
            break;
 8005212:	e08d      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fcf2 	bl	8005c00 <decodeReserved>
 800521c:	60f8      	str	r0, [r7, #12]
            break;
 800521e:	e087      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fd0a 	bl	8005c3c <decodeTapDetector>
 8005228:	60f8      	str	r0, [r7, #12]
            break;
 800522a:	e081      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fd14 	bl	8005c5c <decodeStepDetector>
 8005234:	60f8      	str	r0, [r7, #12]
            break;
 8005236:	e07b      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fd20 	bl	8005c80 <decodeStepCounter>
 8005240:	60f8      	str	r0, [r7, #12]
            break;
 8005242:	e075      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fd35 	bl	8005cb6 <decodeSignificantMotion>
 800524c:	60f8      	str	r0, [r7, #12]
            break;
 800524e:	e06f      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fd42 	bl	8005cdc <decodeStabilityClassifier>
 8005258:	60f8      	str	r0, [r7, #12]
            break;
 800525a:	e069      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fd4c 	bl	8005cfc <decodeShakeDetector>
 8005264:	60f8      	str	r0, [r7, #12]
            break;
 8005266:	e063      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fd59 	bl	8005d22 <decodeFlipDetector>
 8005270:	60f8      	str	r0, [r7, #12]
            break;
 8005272:	e05d      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fd66 	bl	8005d48 <decodePickupDetector>
 800527c:	60f8      	str	r0, [r7, #12]
            break;
 800527e:	e057      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fd73 	bl	8005d6e <decodeStabilityDetector>
 8005288:	60f8      	str	r0, [r7, #12]
            break;
 800528a:	e051      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fd80 	bl	8005d94 <decodePersonalActivityClassifier>
 8005294:	60f8      	str	r0, [r7, #12]
            break;
 8005296:	e04b      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fdad 	bl	8005dfa <decodeSleepDetector>
 80052a0:	60f8      	str	r0, [r7, #12]
            break;
 80052a2:	e045      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fdb7 	bl	8005e1a <decodeTiltDetector>
 80052ac:	60f8      	str	r0, [r7, #12]
            break;
 80052ae:	e03f      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fdc4 	bl	8005e40 <decodePocketDetector>
 80052b8:	60f8      	str	r0, [r7, #12]
            break;
 80052ba:	e039      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fdd1 	bl	8005e66 <decodeCircleDetector>
 80052c4:	60f8      	str	r0, [r7, #12]
            break;
 80052c6:	e033      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fdde 	bl	8005e8c <decodeHeartRateMonitor>
 80052d0:	60f8      	str	r0, [r7, #12]
            break;
 80052d2:	e02d      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fdec 	bl	8005eb4 <decodeArvrStabilizedRV>
 80052dc:	60f8      	str	r0, [r7, #12]
            break;
 80052de:	e027      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fe4a 	bl	8005f7c <decodeArvrStabilizedGRV>
 80052e8:	60f8      	str	r0, [r7, #12]
            break;
 80052ea:	e021      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fe94 	bl	800601c <decodeGyroIntegratedRV>
 80052f4:	60f8      	str	r0, [r7, #12]
            break;
 80052f6:	e01b      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 ff14 	bl	8006128 <decodeIZroRequest>
 8005300:	60f8      	str	r0, [r7, #12]
            break;
 8005302:	e015      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 ff22 	bl	8006150 <decodeRawOptFlow>
 800530c:	60f8      	str	r0, [r7, #12]
            break;
 800530e:	e00f      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 ff9a 	bl	800624c <decodeDeadReckoningPose>
 8005318:	60f8      	str	r0, [r7, #12]
            break;
 800531a:	e009      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 f87e 	bl	8006420 <decodeWheelEncoder>
 8005324:	60f8      	str	r0, [r7, #12]
            break;
 8005326:	e003      	b.n	8005330 <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 8005328:	f04f 33ff 	mov.w	r3, #4294967295
 800532c:	60fb      	str	r3, [r7, #12]
            break;
 800532e:	bf00      	nop
    }

    return rc;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop

0800533c <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	3316      	adds	r3, #22
 800534a:	4618      	mov	r0, r3
 800534c:	f001 f969 	bl	8006622 <read16>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	3318      	adds	r3, #24
 800535c:	4618      	mov	r0, r3
 800535e:	f001 f960 	bl	8006622 <read16>
 8005362:	4603      	mov	r3, r0
 8005364:	461a      	mov	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	331a      	adds	r3, #26
 800536e:	4618      	mov	r0, r3
 8005370:	f001 f957 	bl	8006622 <read16>
 8005374:	4603      	mov	r3, r0
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	331e      	adds	r3, #30
 8005380:	4618      	mov	r0, r3
 8005382:	f001 f965 	bl	8006650 <read32>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	3316      	adds	r3, #22
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 f93b 	bl	8006622 <read16>
 80053ac:	4603      	mov	r3, r0
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053b6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005414 <decodeAccelerometer+0x7c>
 80053ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	3318      	adds	r3, #24
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 f92a 	bl	8006622 <read16>
 80053ce:	4603      	mov	r3, r0
 80053d0:	ee07 3a90 	vmov	s15, r3
 80053d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005414 <decodeAccelerometer+0x7c>
 80053dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	331a      	adds	r3, #26
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 f919 	bl	8006622 <read16>
 80053f0:	4603      	mov	r3, r0
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053fa:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005414 <decodeAccelerometer+0x7c>
 80053fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	3b800000 	.word	0x3b800000

08005418 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	3316      	adds	r3, #22
 8005426:	4618      	mov	r0, r3
 8005428:	f001 f8fb 	bl	8006622 <read16>
 800542c:	4603      	mov	r3, r0
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005436:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005494 <decodeLinearAcceleration+0x7c>
 800543a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	3318      	adds	r3, #24
 8005448:	4618      	mov	r0, r3
 800544a:	f001 f8ea 	bl	8006622 <read16>
 800544e:	4603      	mov	r3, r0
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005458:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005494 <decodeLinearAcceleration+0x7c>
 800545c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	331a      	adds	r3, #26
 800546a:	4618      	mov	r0, r3
 800546c:	f001 f8d9 	bl	8006622 <read16>
 8005470:	4603      	mov	r3, r0
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800547a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005494 <decodeLinearAcceleration+0x7c>
 800547e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	3b800000 	.word	0x3b800000

08005498 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	3316      	adds	r3, #22
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 f8bb 	bl	8006622 <read16>
 80054ac:	4603      	mov	r3, r0
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054b6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005514 <decodeGravity+0x7c>
 80054ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	3318      	adds	r3, #24
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 f8aa 	bl	8006622 <read16>
 80054ce:	4603      	mov	r3, r0
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005514 <decodeGravity+0x7c>
 80054dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	331a      	adds	r3, #26
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 f899 	bl	8006622 <read16>
 80054f0:	4603      	mov	r3, r0
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054fa:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005514 <decodeGravity+0x7c>
 80054fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	3b800000 	.word	0x3b800000

08005518 <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3316      	adds	r3, #22
 8005526:	4618      	mov	r0, r3
 8005528:	f001 f87b 	bl	8006622 <read16>
 800552c:	4603      	mov	r3, r0
 800552e:	461a      	mov	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	3318      	adds	r3, #24
 8005538:	4618      	mov	r0, r3
 800553a:	f001 f872 	bl	8006622 <read16>
 800553e:	4603      	mov	r3, r0
 8005540:	461a      	mov	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	331a      	adds	r3, #26
 800554a:	4618      	mov	r0, r3
 800554c:	f001 f869 	bl	8006622 <read16>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	331c      	adds	r3, #28
 800555c:	4618      	mov	r0, r3
 800555e:	f001 f860 	bl	8006622 <read16>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	331e      	adds	r3, #30
 800556e:	4618      	mov	r0, r3
 8005570:	f001 f86e 	bl	8006650 <read32>
 8005574:	4603      	mov	r3, r0
 8005576:	461a      	mov	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	3316      	adds	r3, #22
 8005596:	4618      	mov	r0, r3
 8005598:	f001 f843 	bl	8006622 <read16>
 800559c:	4603      	mov	r3, r0
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005604 <decodeGyroscopeCalibrated+0x7c>
 80055aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	3318      	adds	r3, #24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 f832 	bl	8006622 <read16>
 80055be:	4603      	mov	r3, r0
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005604 <decodeGyroscopeCalibrated+0x7c>
 80055cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	331a      	adds	r3, #26
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 f821 	bl	8006622 <read16>
 80055e0:	4603      	mov	r3, r0
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ea:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005604 <decodeGyroscopeCalibrated+0x7c>
 80055ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	3b000000 	.word	0x3b000000

08005608 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	3316      	adds	r3, #22
 8005616:	4618      	mov	r0, r3
 8005618:	f001 f803 	bl	8006622 <read16>
 800561c:	4603      	mov	r3, r0
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005626:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80056e8 <decodeGyroscopeUncal+0xe0>
 800562a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	3318      	adds	r3, #24
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fff2 	bl	8006622 <read16>
 800563e:	4603      	mov	r3, r0
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005648:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80056e8 <decodeGyroscopeUncal+0xe0>
 800564c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	331a      	adds	r3, #26
 800565a:	4618      	mov	r0, r3
 800565c:	f000 ffe1 	bl	8006622 <read16>
 8005660:	4603      	mov	r3, r0
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80056e8 <decodeGyroscopeUncal+0xe0>
 800566e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	331c      	adds	r3, #28
 800567c:	4618      	mov	r0, r3
 800567e:	f000 ffd0 	bl	8006622 <read16>
 8005682:	4603      	mov	r3, r0
 8005684:	ee07 3a90 	vmov	s15, r3
 8005688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800568c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80056e8 <decodeGyroscopeUncal+0xe0>
 8005690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	331e      	adds	r3, #30
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 ffbf 	bl	8006622 <read16>
 80056a4:	4603      	mov	r3, r0
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80056e8 <decodeGyroscopeUncal+0xe0>
 80056b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	3320      	adds	r3, #32
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 ffae 	bl	8006622 <read16>
 80056c6:	4603      	mov	r3, r0
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80056e8 <decodeGyroscopeUncal+0xe0>
 80056d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	3b000000 	.word	0x3b000000

080056ec <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	3316      	adds	r3, #22
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 ff91 	bl	8006622 <read16>
 8005700:	4603      	mov	r3, r0
 8005702:	461a      	mov	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	3318      	adds	r3, #24
 800570c:	4618      	mov	r0, r3
 800570e:	f000 ff88 	bl	8006622 <read16>
 8005712:	4603      	mov	r3, r0
 8005714:	461a      	mov	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	331a      	adds	r3, #26
 800571e:	4618      	mov	r0, r3
 8005720:	f000 ff7f 	bl	8006622 <read16>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	331e      	adds	r3, #30
 8005730:	4618      	mov	r0, r3
 8005732:	f000 ff8d 	bl	8006650 <read32>
 8005736:	4603      	mov	r3, r0
 8005738:	461a      	mov	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	3316      	adds	r3, #22
 8005756:	4618      	mov	r0, r3
 8005758:	f000 ff63 	bl	8006622 <read16>
 800575c:	4603      	mov	r3, r0
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005766:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80057c4 <decodeMagneticFieldCalibrated+0x7c>
 800576a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	3318      	adds	r3, #24
 8005778:	4618      	mov	r0, r3
 800577a:	f000 ff52 	bl	8006622 <read16>
 800577e:	4603      	mov	r3, r0
 8005780:	ee07 3a90 	vmov	s15, r3
 8005784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005788:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80057c4 <decodeMagneticFieldCalibrated+0x7c>
 800578c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	331a      	adds	r3, #26
 800579a:	4618      	mov	r0, r3
 800579c:	f000 ff41 	bl	8006622 <read16>
 80057a0:	4603      	mov	r3, r0
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057aa:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80057c4 <decodeMagneticFieldCalibrated+0x7c>
 80057ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	3d800000 	.word	0x3d800000

080057c8 <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	3316      	adds	r3, #22
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 ff23 	bl	8006622 <read16>
 80057dc:	4603      	mov	r3, r0
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80058a8 <decodeMagneticFieldUncal+0xe0>
 80057ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	3318      	adds	r3, #24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 ff12 	bl	8006622 <read16>
 80057fe:	4603      	mov	r3, r0
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005808:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80058a8 <decodeMagneticFieldUncal+0xe0>
 800580c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	331a      	adds	r3, #26
 800581a:	4618      	mov	r0, r3
 800581c:	f000 ff01 	bl	8006622 <read16>
 8005820:	4603      	mov	r3, r0
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800582a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80058a8 <decodeMagneticFieldUncal+0xe0>
 800582e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	331c      	adds	r3, #28
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fef0 	bl	8006622 <read16>
 8005842:	4603      	mov	r3, r0
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800584c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80058a8 <decodeMagneticFieldUncal+0xe0>
 8005850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	331e      	adds	r3, #30
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fedf 	bl	8006622 <read16>
 8005864:	4603      	mov	r3, r0
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800586e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80058a8 <decodeMagneticFieldUncal+0xe0>
 8005872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	3320      	adds	r3, #32
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fece 	bl	8006622 <read16>
 8005886:	4603      	mov	r3, r0
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005890:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80058a8 <decodeMagneticFieldUncal+0xe0>
 8005894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	3d800000 	.word	0x3d800000

080058ac <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	3316      	adds	r3, #22
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 feb1 	bl	8006622 <read16>
 80058c0:	4603      	mov	r3, r0
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ca:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800596c <decodeRotationVector+0xc0>
 80058ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	3318      	adds	r3, #24
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fea0 	bl	8006622 <read16>
 80058e2:	4603      	mov	r3, r0
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ec:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800596c <decodeRotationVector+0xc0>
 80058f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	331a      	adds	r3, #26
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fe8f 	bl	8006622 <read16>
 8005904:	4603      	mov	r3, r0
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800590e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800596c <decodeRotationVector+0xc0>
 8005912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	331c      	adds	r3, #28
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fe7e 	bl	8006622 <read16>
 8005926:	4603      	mov	r3, r0
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005930:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800596c <decodeRotationVector+0xc0>
 8005934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	331e      	adds	r3, #30
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fe6d 	bl	8006622 <read16>
 8005948:	4603      	mov	r3, r0
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005952:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005970 <decodeRotationVector+0xc4>
 8005956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	38800000 	.word	0x38800000
 8005970:	39800000 	.word	0x39800000

08005974 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	3316      	adds	r3, #22
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fe4d 	bl	8006622 <read16>
 8005988:	4603      	mov	r3, r0
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005992:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005a10 <decodeGameRotationVector+0x9c>
 8005996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	3318      	adds	r3, #24
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fe3c 	bl	8006622 <read16>
 80059aa:	4603      	mov	r3, r0
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059b4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005a10 <decodeGameRotationVector+0x9c>
 80059b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	331a      	adds	r3, #26
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fe2b 	bl	8006622 <read16>
 80059cc:	4603      	mov	r3, r0
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005a10 <decodeGameRotationVector+0x9c>
 80059da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	331c      	adds	r3, #28
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fe1a 	bl	8006622 <read16>
 80059ee:	4603      	mov	r3, r0
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059f8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005a10 <decodeGameRotationVector+0x9c>
 80059fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	38800000 	.word	0x38800000

08005a14 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	3316      	adds	r3, #22
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fdfd 	bl	8006622 <read16>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a32:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005ad4 <decodeGeomagneticRotationVector+0xc0>
 8005a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	3318      	adds	r3, #24
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fdec 	bl	8006622 <read16>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	ee07 3a90 	vmov	s15, r3
 8005a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a54:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005ad4 <decodeGeomagneticRotationVector+0xc0>
 8005a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	331a      	adds	r3, #26
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fddb 	bl	8006622 <read16>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a76:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005ad4 <decodeGeomagneticRotationVector+0xc0>
 8005a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	331c      	adds	r3, #28
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fdca 	bl	8006622 <read16>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a98:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005ad4 <decodeGeomagneticRotationVector+0xc0>
 8005a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	331e      	adds	r3, #30
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fdb9 	bl	8006622 <read16>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005ad8 <decodeGeomagneticRotationVector+0xc4>
 8005abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	38800000 	.word	0x38800000
 8005ad8:	39800000 	.word	0x39800000

08005adc <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	3316      	adds	r3, #22
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fdb0 	bl	8006650 <read32>
 8005af0:	ee07 0a90 	vmov	s15, r0
 8005af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005b10 <decodePressure+0x34>
 8005afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	35800000 	.word	0x35800000

08005b14 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	3316      	adds	r3, #22
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fd94 	bl	8006650 <read32>
 8005b28:	ee07 0a90 	vmov	s15, r0
 8005b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b30:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005b48 <decodeAmbientLight+0x34>
 8005b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	3b800000 	.word	0x3b800000

08005b4c <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	3316      	adds	r3, #22
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fd61 	bl	8006622 <read16>
 8005b60:	4603      	mov	r3, r0
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b6a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005b84 <decodeHumidity+0x38>
 8005b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	3b800000 	.word	0x3b800000

08005b88 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	3316      	adds	r3, #22
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fd43 	bl	8006622 <read16>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005bc0 <decodeProximity+0x38>
 8005baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	3d800000 	.word	0x3d800000

08005bc4 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	3316      	adds	r3, #22
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fd25 	bl	8006622 <read16>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005bfc <decodeTemperature+0x38>
 8005be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	3c000000 	.word	0x3c000000

08005c00 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	3316      	adds	r3, #22
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fd07 	bl	8006622 <read16>
 8005c14:	4603      	mov	r3, r0
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c1e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c38 <decodeReserved+0x38>
 8005c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	3c000000 	.word	0x3c000000

08005c3c <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	7d9a      	ldrb	r2, [r3, #22]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	3316      	adds	r3, #22
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fcac 	bl	80065c8 <readu32>
 8005c70:	4602      	mov	r2, r0
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	3316      	adds	r3, #22
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fc9a 	bl	80065c8 <readu32>
 8005c94:	4602      	mov	r2, r0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	331a      	adds	r3, #26
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fc92 	bl	80065c8 <readu32>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	3316      	adds	r3, #22
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fc68 	bl	800659a <readu16>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	461a      	mov	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	7d9a      	ldrb	r2, [r3, #22]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	3316      	adds	r3, #22
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fc45 	bl	800659a <readu16>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	3316      	adds	r3, #22
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fc32 	bl	800659a <readu16>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	3316      	adds	r3, #22
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fc1f 	bl	800659a <readu16>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	3316      	adds	r3, #22
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fc0c 	bl	800659a <readu16>
 8005d82:	4603      	mov	r3, r0
 8005d84:	461a      	mov	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	7d9b      	ldrb	r3, [r3, #22]
 8005da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	7d9b      	ldrb	r3, [r3, #22]
 8005db0:	b25b      	sxtb	r3, r3
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	09db      	lsrs	r3, r3, #7
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	7dda      	ldrb	r2, [r3, #23]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e00d      	b.n	8005de6 <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3306      	adds	r3, #6
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	7c99      	ldrb	r1, [r3, #18]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	3317      	adds	r3, #23
 8005ddc:	460a      	mov	r2, r1
 8005dde:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3301      	adds	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	ddee      	ble.n	8005dca <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	7d9a      	ldrb	r2, [r3, #22]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	3316      	adds	r3, #22
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fbb6 	bl	800659a <readu16>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	461a      	mov	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	3316      	adds	r3, #22
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fba3 	bl	800659a <readu16>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	3316      	adds	r3, #22
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fb90 	bl	800659a <readu16>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	3316      	adds	r3, #22
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fb7d 	bl	800659a <readu16>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	3316      	adds	r3, #22
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fbad 	bl	8006622 <read16>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ed2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005f74 <decodeArvrStabilizedRV+0xc0>
 8005ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	3318      	adds	r3, #24
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fb9c 	bl	8006622 <read16>
 8005eea:	4603      	mov	r3, r0
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ef4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005f74 <decodeArvrStabilizedRV+0xc0>
 8005ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	331a      	adds	r3, #26
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fb8b 	bl	8006622 <read16>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f16:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005f74 <decodeArvrStabilizedRV+0xc0>
 8005f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	331c      	adds	r3, #28
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fb7a 	bl	8006622 <read16>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	ee07 3a90 	vmov	s15, r3
 8005f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f38:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005f74 <decodeArvrStabilizedRV+0xc0>
 8005f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	331e      	adds	r3, #30
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fb69 	bl	8006622 <read16>
 8005f50:	4603      	mov	r3, r0
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f5a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005f78 <decodeArvrStabilizedRV+0xc4>
 8005f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	38800000 	.word	0x38800000
 8005f78:	39800000 	.word	0x39800000

08005f7c <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	3316      	adds	r3, #22
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fb49 	bl	8006622 <read16>
 8005f90:	4603      	mov	r3, r0
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f9a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8006018 <decodeArvrStabilizedGRV+0x9c>
 8005f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	3318      	adds	r3, #24
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fb38 	bl	8006622 <read16>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fbc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006018 <decodeArvrStabilizedGRV+0x9c>
 8005fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	331a      	adds	r3, #26
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fb27 	bl	8006622 <read16>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fde:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8006018 <decodeArvrStabilizedGRV+0x9c>
 8005fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	331c      	adds	r3, #28
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fb16 	bl	8006622 <read16>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006000:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006018 <decodeArvrStabilizedGRV+0x9c>
 8006004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	38800000 	.word	0x38800000

0800601c <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	3312      	adds	r3, #18
 800602a:	4618      	mov	r0, r3
 800602c:	f000 faf9 	bl	8006622 <read16>
 8006030:	4603      	mov	r3, r0
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800603a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8006120 <decodeGyroIntegratedRV+0x104>
 800603e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	3314      	adds	r3, #20
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fae8 	bl	8006622 <read16>
 8006052:	4603      	mov	r3, r0
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800605c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006120 <decodeGyroIntegratedRV+0x104>
 8006060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	3316      	adds	r3, #22
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fad7 	bl	8006622 <read16>
 8006074:	4603      	mov	r3, r0
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800607e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006120 <decodeGyroIntegratedRV+0x104>
 8006082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	3318      	adds	r3, #24
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fac6 	bl	8006622 <read16>
 8006096:	4603      	mov	r3, r0
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8006120 <decodeGyroIntegratedRV+0x104>
 80060a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	331a      	adds	r3, #26
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fab5 	bl	8006622 <read16>
 80060b8:	4603      	mov	r3, r0
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060c2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006124 <decodeGyroIntegratedRV+0x108>
 80060c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	331c      	adds	r3, #28
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 faa4 	bl	8006622 <read16>
 80060da:	4603      	mov	r3, r0
 80060dc:	ee07 3a90 	vmov	s15, r3
 80060e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060e4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006124 <decodeGyroIntegratedRV+0x108>
 80060e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	331e      	adds	r3, #30
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fa93 	bl	8006622 <read16>
 80060fc:	4603      	mov	r3, r0
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006106:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006124 <decodeGyroIntegratedRV+0x108>
 800610a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    return SH2_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	38800000 	.word	0x38800000
 8006124:	3a800000 	.word	0x3a800000

08006128 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	7d9a      	ldrb	r2, [r3, #22]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	7dda      	ldrb	r2, [r3, #23]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	3316      	adds	r3, #22
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fa5f 	bl	8006622 <read16>
 8006164:	4603      	mov	r3, r0
 8006166:	461a      	mov	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	3318      	adds	r3, #24
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fa56 	bl	8006622 <read16>
 8006176:	4603      	mov	r3, r0
 8006178:	461a      	mov	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	331a      	adds	r3, #26
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fa4d 	bl	8006622 <read16>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	331c      	adds	r3, #28
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fa35 	bl	8006604 <read8>
 800619a:	4603      	mov	r3, r0
 800619c:	b2da      	uxtb	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	331d      	adds	r3, #29
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fa2b 	bl	8006604 <read8>
 80061ae:	4603      	mov	r3, r0
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	331e      	adds	r3, #30
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fa21 	bl	8006604 <read8>
 80061c2:	4603      	mov	r3, r0
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	331f      	adds	r3, #31
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fa17 	bl	8006604 <read8>
 80061d6:	4603      	mov	r3, r0
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	3320      	adds	r3, #32
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fa0d 	bl	8006604 <read8>
 80061ea:	4603      	mov	r3, r0
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	3321      	adds	r3, #33	@ 0x21
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fa03 	bl	8006604 <read8>
 80061fe:	4603      	mov	r3, r0
 8006200:	b2da      	uxtb	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	3322      	adds	r3, #34	@ 0x22
 800620c:	4618      	mov	r0, r3
 800620e:	f000 f9f9 	bl	8006604 <read8>
 8006212:	4603      	mov	r3, r0
 8006214:	b2da      	uxtb	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	3324      	adds	r3, #36	@ 0x24
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f9fe 	bl	8006622 <read16>
 8006226:	4603      	mov	r3, r0
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	3326      	adds	r3, #38	@ 0x26
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fa0c 	bl	8006650 <read32>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	3316      	adds	r3, #22
 800625a:	4618      	mov	r0, r3
 800625c:	f000 f9f8 	bl	8006650 <read32>
 8006260:	4603      	mov	r3, r0
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	331a      	adds	r3, #26
 800626c:	4618      	mov	r0, r3
 800626e:	f000 f9ef 	bl	8006650 <read32>
 8006272:	ee07 0a90 	vmov	s15, r0
 8006276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800627a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8006414 <decodeDeadReckoningPose+0x1c8>
 800627e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	331e      	adds	r3, #30
 800628c:	4618      	mov	r0, r3
 800628e:	f000 f9df 	bl	8006650 <read32>
 8006292:	ee07 0a90 	vmov	s15, r0
 8006296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800629a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006414 <decodeDeadReckoningPose+0x1c8>
 800629e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	3322      	adds	r3, #34	@ 0x22
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f9cf 	bl	8006650 <read32>
 80062b2:	ee07 0a90 	vmov	s15, r0
 80062b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ba:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8006414 <decodeDeadReckoningPose+0x1c8>
 80062be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	3326      	adds	r3, #38	@ 0x26
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 f9bf 	bl	8006650 <read32>
 80062d2:	ee07 0a90 	vmov	s15, r0
 80062d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062da:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8006418 <decodeDeadReckoningPose+0x1cc>
 80062de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	332a      	adds	r3, #42	@ 0x2a
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 f9af 	bl	8006650 <read32>
 80062f2:	ee07 0a90 	vmov	s15, r0
 80062f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062fa:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8006418 <decodeDeadReckoningPose+0x1cc>
 80062fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	332e      	adds	r3, #46	@ 0x2e
 800630c:	4618      	mov	r0, r3
 800630e:	f000 f99f 	bl	8006650 <read32>
 8006312:	ee07 0a90 	vmov	s15, r0
 8006316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800631a:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006418 <decodeDeadReckoningPose+0x1cc>
 800631e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	3332      	adds	r3, #50	@ 0x32
 800632c:	4618      	mov	r0, r3
 800632e:	f000 f98f 	bl	8006650 <read32>
 8006332:	ee07 0a90 	vmov	s15, r0
 8006336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800633a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8006418 <decodeDeadReckoningPose+0x1cc>
 800633e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	3336      	adds	r3, #54	@ 0x36
 800634c:	4618      	mov	r0, r3
 800634e:	f000 f97f 	bl	8006650 <read32>
 8006352:	ee07 0a90 	vmov	s15, r0
 8006356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800635a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800641c <decodeDeadReckoningPose+0x1d0>
 800635e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	333a      	adds	r3, #58	@ 0x3a
 800636c:	4618      	mov	r0, r3
 800636e:	f000 f96f 	bl	8006650 <read32>
 8006372:	ee07 0a90 	vmov	s15, r0
 8006376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800637a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800641c <decodeDeadReckoningPose+0x1d0>
 800637e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	333e      	adds	r3, #62	@ 0x3e
 800638c:	4618      	mov	r0, r3
 800638e:	f000 f95f 	bl	8006650 <read32>
 8006392:	ee07 0a90 	vmov	s15, r0
 8006396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800639a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800641c <decodeDeadReckoningPose+0x1d0>
 800639e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	3342      	adds	r3, #66	@ 0x42
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 f94f 	bl	8006650 <read32>
 80063b2:	ee07 0a90 	vmov	s15, r0
 80063b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ba:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800641c <decodeDeadReckoningPose+0x1d0>
 80063be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	3346      	adds	r3, #70	@ 0x46
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f93f 	bl	8006650 <read32>
 80063d2:	ee07 0a90 	vmov	s15, r0
 80063d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063da:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800641c <decodeDeadReckoningPose+0x1d0>
 80063de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	334a      	adds	r3, #74	@ 0x4a
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 f92f 	bl	8006650 <read32>
 80063f2:	ee07 0a90 	vmov	s15, r0
 80063f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063fa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800641c <decodeDeadReckoningPose+0x1d0>
 80063fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    return SH2_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	37000000 	.word	0x37000000
 8006418:	30800000 	.word	0x30800000
 800641c:	33000000 	.word	0x33000000

08006420 <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	3316      	adds	r3, #22
 800642e:	4618      	mov	r0, r3
 8006430:	f000 f90e 	bl	8006650 <read32>
 8006434:	4603      	mov	r3, r0
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	331a      	adds	r3, #26
 8006440:	4618      	mov	r0, r3
 8006442:	f000 f8df 	bl	8006604 <read8>
 8006446:	4603      	mov	r3, r0
 8006448:	b2da      	uxtb	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	331b      	adds	r3, #27
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f8d6 	bl	8006604 <read8>
 8006458:	4603      	mov	r3, r0
 800645a:	b2da      	uxtb	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	331c      	adds	r3, #28
 8006464:	4618      	mov	r0, r3
 8006466:	f000 f8dc 	bl	8006622 <read16>
 800646a:	4603      	mov	r3, r0
 800646c:	b29a      	uxth	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <sh2_hal_open>:

extern I2C_HandleTypeDef hi2c1;
extern osMutexId_t I2C1MutexHandle; // Use the same mutex for accessing I2C1
#define BNO085_I2C_ADDR   (0x4A << 1)

int sh2_hal_open(sh2_Hal_t *self)   { return 0; }
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	2300      	movs	r3, #0
 8006486:	4618      	mov	r0, r3
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <sh2_hal_close>:
void sh2_hal_close(sh2_Hal_t *self) { }
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <sh2_hal_read>:

int sh2_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t_us) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
    osMutexAcquire(I2C1MutexHandle, osWaitForever);
 80064ba:	4b17      	ldr	r3, [pc, #92]	@ (8006518 <sh2_hal_read+0x70>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f04f 31ff 	mov.w	r1, #4294967295
 80064c2:	4618      	mov	r0, r3
 80064c4:	f006 f805 	bl	800c4d2 <osMutexAcquire>
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c1, BNO085_I2C_ADDR, pBuffer, len, 1000);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064d0:	9200      	str	r2, [sp, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	2194      	movs	r1, #148	@ 0x94
 80064d6:	4811      	ldr	r0, [pc, #68]	@ (800651c <sh2_hal_read+0x74>)
 80064d8:	f002 f888 	bl	80085ec <HAL_I2C_Master_Receive>
 80064dc:	4603      	mov	r3, r0
 80064de:	74fb      	strb	r3, [r7, #19]
    osMutexRelease(I2C1MutexHandle);
 80064e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006518 <sh2_hal_read+0x70>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f006 f83f 	bl	800c568 <osMutexRelease>
    if (status == HAL_OK) {
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10d      	bne.n	800650c <sh2_hal_read+0x64>
        if (t_us) *t_us = HAL_GetTick() * 1000;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <sh2_hal_read+0x60>
 80064f6:	f000 fc4b 	bl	8006d90 <HAL_GetTick>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006500:	fb03 f202 	mul.w	r2, r3, r2
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	601a      	str	r2, [r3, #0]
        ret = len;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	617b      	str	r3, [r7, #20]
    }
    return ret;
 800650c:	697b      	ldr	r3, [r7, #20]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	2000040c 	.word	0x2000040c
 800651c:	20000260 	.word	0x20000260

08006520 <sh2_hal_write>:

int sh2_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
    int ret = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	617b      	str	r3, [r7, #20]
    osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8006530:	4b10      	ldr	r3, [pc, #64]	@ (8006574 <sh2_hal_write+0x54>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f04f 31ff 	mov.w	r1, #4294967295
 8006538:	4618      	mov	r0, r3
 800653a:	f005 ffca 	bl	800c4d2 <osMutexAcquire>
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BNO085_I2C_ADDR, pBuffer, len, 1000);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006546:	9200      	str	r2, [sp, #0]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	2194      	movs	r1, #148	@ 0x94
 800654c:	480a      	ldr	r0, [pc, #40]	@ (8006578 <sh2_hal_write+0x58>)
 800654e:	f001 ff4f 	bl	80083f0 <HAL_I2C_Master_Transmit>
 8006552:	4603      	mov	r3, r0
 8006554:	74fb      	strb	r3, [r7, #19]
    osMutexRelease(I2C1MutexHandle);
 8006556:	4b07      	ldr	r3, [pc, #28]	@ (8006574 <sh2_hal_write+0x54>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f006 f804 	bl	800c568 <osMutexRelease>
    if (status == HAL_OK) ret = len;
 8006560:	7cfb      	ldrb	r3, [r7, #19]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <sh2_hal_write+0x4a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	617b      	str	r3, [r7, #20]
    return ret;
 800656a:	697b      	ldr	r3, [r7, #20]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	2000040c 	.word	0x2000040c
 8006578:	20000260 	.word	0x20000260

0800657c <sh2_hal_getTimeUs>:

uint32_t sh2_hal_getTimeUs(sh2_Hal_t *self) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
    return HAL_GetTick() * 1000;
 8006584:	f000 fc04 	bl	8006d90 <HAL_GetTick>
 8006588:	4603      	mov	r3, r0
 800658a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800658e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	b21a      	sxth	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3301      	adds	r3, #1
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	b21b      	sxth	r3, r3
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	b21b      	sxth	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b21b      	sxth	r3, r3
 80065b8:	81fb      	strh	r3, [r7, #14]
    return retval;
 80065ba:	89fb      	ldrh	r3, [r7, #14]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3301      	adds	r3, #1
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3302      	adds	r3, #2
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3303      	adds	r3, #3
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	061b      	lsls	r3, r3, #24
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
    return retval;
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	73fb      	strb	r3, [r7, #15]
    return retval;
 8006612:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	b21a      	sxth	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3301      	adds	r3, #1
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b21b      	sxth	r3, r3
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	b21b      	sxth	r3, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	81fb      	strh	r3, [r7, #14]
    return retval;
 8006640:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3301      	adds	r3, #1
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3302      	adds	r3, #2
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3303      	adds	r3, #3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
    return retval;
 800667e:	68fb      	ldr	r3, [r7, #12]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	e00b      	b.n	80066b0 <shtp_init+0x24>
        instances[n].pHal = 0;
 8006698:	4a0b      	ldr	r2, [pc, #44]	@ (80066c8 <shtp_init+0x3c>)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f640 1114 	movw	r1, #2324	@ 0x914
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	4413      	add	r3, r2
 80066a6:	2200      	movs	r2, #0
 80066a8:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3301      	adds	r3, #1
 80066ae:	607b      	str	r3, [r7, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	ddf0      	ble.n	8006698 <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 80066b6:	4b05      	ldr	r3, [pc, #20]	@ (80066cc <shtp_init+0x40>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20000b20 	.word	0x20000b20
 80066cc:	20001434 	.word	0x20001434

080066d0 <getInstance>:

static shtp_t *getInstance(void)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80066d6:	2300      	movs	r3, #0
 80066d8:	607b      	str	r3, [r7, #4]
 80066da:	e014      	b.n	8006706 <getInstance+0x36>
        if (instances[n].pHal == 0) {
 80066dc:	4a0f      	ldr	r2, [pc, #60]	@ (800671c <getInstance+0x4c>)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f640 1114 	movw	r1, #2324	@ 0x914
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	4413      	add	r3, r2
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d107      	bne.n	8006700 <getInstance+0x30>
            // This instance is free
            return &instances[n];
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f640 1214 	movw	r2, #2324	@ 0x914
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	4a08      	ldr	r2, [pc, #32]	@ (800671c <getInstance+0x4c>)
 80066fc:	4413      	add	r3, r2
 80066fe:	e006      	b.n	800670e <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3301      	adds	r3, #1
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	dde7      	ble.n	80066dc <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20000b20 	.word	0x20000b20

08006720 <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	460a      	mov	r2, r1
 800672a:	80fb      	strh	r3, [r7, #6]
 800672c:	4613      	mov	r3, r2
 800672e:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 8006730:	88fa      	ldrh	r2, [r7, #6]
 8006732:	88bb      	ldrh	r3, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d201      	bcs.n	800673c <min_u16+0x1c>
        return a;
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	e000      	b.n	800673e <min_u16+0x1e>
    }
    else {
        return b;
 800673c:	88bb      	ldrh	r3, [r7, #4]
    }
}
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 800674a:	b590      	push	{r4, r7, lr}
 800674c:	b089      	sub	sp, #36	@ 0x24
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	460b      	mov	r3, r1
 8006758:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 800675e:	2300      	movs	r3, #0
 8006760:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	833b      	strh	r3, [r7, #24]
    remaining = len;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 800676e:	e079      	b.n	8006864 <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8006770:	8afb      	ldrh	r3, [r7, #22]
 8006772:	217c      	movs	r1, #124	@ 0x7c
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff ffd3 	bl	8006720 <min_u16>
 800677a:	4603      	mov	r3, r0
 800677c:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 800677e:	8abb      	ldrh	r3, [r7, #20]
 8006780:	3304      	adds	r3, #4
 8006782:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 8006784:	8a7b      	ldrh	r3, [r7, #18]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 800678c:	8a7b      	ldrh	r3, [r7, #18]
 800678e:	0a1b      	lsrs	r3, r3, #8
 8006790:	b29b      	uxth	r3, r3
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 800679e:	7efb      	ldrb	r3, [r7, #27]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d006      	beq.n	80067b2 <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	7b5b      	ldrb	r3, [r3, #13]
 80067a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	7afa      	ldrb	r2, [r7, #11]
 80067b6:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 80067b8:	7afa      	ldrb	r2, [r7, #11]
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	4613      	mov	r3, r2
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 80067ca:	7819      	ldrb	r1, [r3, #0]
 80067cc:	1c4b      	adds	r3, r1, #1
 80067ce:	b2dc      	uxtb	r4, r3
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4403      	add	r3, r0
 80067dc:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 80067e0:	4622      	mov	r2, r4
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	460a      	mov	r2, r1
 80067e8:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	330c      	adds	r3, #12
 80067ee:	1d18      	adds	r0, r3, #4
 80067f0:	8b3b      	ldrh	r3, [r7, #24]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	4413      	add	r3, r2
 80067f6:	8aba      	ldrh	r2, [r7, #20]
 80067f8:	4619      	mov	r1, r3
 80067fa:	f009 fe4c 	bl	8010496 <memcpy>
        remaining -= transferLen;
 80067fe:	8afa      	ldrh	r2, [r7, #22]
 8006800:	8abb      	ldrh	r3, [r7, #20]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 8006806:	8b3a      	ldrh	r2, [r7, #24]
 8006808:	8abb      	ldrh	r3, [r7, #20]
 800680a:	4413      	add	r3, r2
 800680c:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	6810      	ldr	r0, [r2, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f102 010c 	add.w	r1, r2, #12
 800681e:	8a7a      	ldrh	r2, [r7, #18]
 8006820:	4798      	blx	r3
 8006822:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8006824:	e00d      	b.n	8006842 <txProcess+0xf8>
        {
            shtp_service(pShtp);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fa2b 	bl	8006c82 <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	6810      	ldr	r0, [r2, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f102 010c 	add.w	r1, r2, #12
 800683c:	8a7a      	ldrh	r2, [r7, #18]
 800683e:	4798      	blx	r3
 8006840:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0ee      	beq.n	8006826 <txProcess+0xdc>
        }
        
        if (status < 0)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	2b00      	cmp	r3, #0
 800684c:	da08      	bge.n	8006860 <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
            return status;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	e005      	b.n	800686c <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8006860:	2301      	movs	r3, #1
 8006862:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 8006864:	8afb      	ldrh	r3, [r7, #22]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d182      	bne.n	8006770 <txProcess+0x26>
    }

    return SH2_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3724      	adds	r7, #36	@ 0x24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd90      	pop	{r4, r7, pc}

08006874 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8006874:	b590      	push	{r4, r7, lr}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	2b03      	cmp	r3, #3
 8006890:	d813      	bhi.n	80068ba <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8139 	beq.w	8006b1c <rxAssemble+0x2a8>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	6892      	ldr	r2, [r2, #8]
 80068b2:	2101      	movs	r1, #1
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
        }
        return;
 80068b8:	e130      	b.n	8006b1c <rxAssemble+0x2a8>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	3301      	adds	r3, #1
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80068d2:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	3301      	adds	r3, #1
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	b25b      	sxtb	r3, r3
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	09db      	lsrs	r3, r3, #7
 80068e0:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	789b      	ldrb	r3, [r3, #2]
 80068e6:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	78db      	ldrb	r3, [r3, #3]
 80068ec:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 80068ee:	7dfa      	ldrb	r2, [r7, #23]
 80068f0:	68f9      	ldr	r1, [r7, #12]
 80068f2:	4613      	mov	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	7dba      	ldrb	r2, [r7, #22]
 8006904:	429a      	cmp	r2, r3
 8006906:	d00a      	beq.n	800691e <rxAssemble+0xaa>
        if (pShtp->eventCallback) {
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d006      	beq.n	800691e <rxAssemble+0xaa>
            pShtp->eventCallback(pShtp->eventCookie,
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	6892      	ldr	r2, [r2, #8]
 8006918:	2106      	movs	r1, #6
 800691a:	4610      	mov	r0, r2
 800691c:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 800691e:	8abb      	ldrh	r3, [r7, #20]
 8006920:	2b03      	cmp	r3, #3
 8006922:	d813      	bhi.n	800694c <rxAssemble+0xd8>
        pShtp->rxShortFragments++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 80f2 	beq.w	8006b20 <rxAssemble+0x2ac>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	6892      	ldr	r2, [r2, #8]
 8006944:	2101      	movs	r1, #1
 8006946:	4610      	mov	r0, r2
 8006948:	4798      	blx	r3
        }
        return;
 800694a:	e0e9      	b.n	8006b20 <rxAssemble+0x2ac>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b07      	cmp	r3, #7
 8006950:	d913      	bls.n	800697a <rxAssemble+0x106>
        // Invalid channel id.
        pShtp->rxBadChan++;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

        if (pShtp->eventCallback) {
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80dd 	beq.w	8006b24 <rxAssemble+0x2b0>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	6892      	ldr	r2, [r2, #8]
 8006972:	2103      	movs	r1, #3
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
        }
        return;
 8006978:	e0d4      	b.n	8006b24 <rxAssemble+0x2b0>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d040      	beq.n	8006a06 <rxAssemble+0x192>
        // Check this against previously received data.
        if (!continuation ||
 8006984:	7cfb      	ldrb	r3, [r7, #19]
 8006986:	f083 0301 	eor.w	r3, r3, #1
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d119      	bne.n	80069c4 <rxAssemble+0x150>
            (chan != pShtp->inChan) ||
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
        if (!continuation ||
 8006996:	7dfa      	ldrb	r2, [r7, #23]
 8006998:	429a      	cmp	r2, r3
 800699a:	d113      	bne.n	80069c4 <rxAssemble+0x150>
            (seq != pShtp->chan[chan].nextInSeq) ||
 800699c:	7dfa      	ldrb	r2, [r7, #23]
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	4613      	mov	r3, r2
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 80069ae:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 80069b0:	7dba      	ldrb	r2, [r7, #22]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d106      	bne.n	80069c4 <rxAssemble+0x150>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 80069b6:	8abb      	ldrh	r3, [r7, #20]
 80069b8:	3b04      	subs	r3, #4
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	f8b2 208c 	ldrh.w	r2, [r2, #140]	@ 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d020      	beq.n	8006a06 <rxAssemble+0x192>
            
            if (pShtp->eventCallback) {
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d006      	beq.n	80069da <rxAssemble+0x166>
                pShtp->eventCallback(pShtp->eventCookie,
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	6892      	ldr	r2, [r2, #8]
 80069d4:	2105      	movs	r1, #5
 80069d6:	4610      	mov	r0, r2
 80069d8:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

            pShtp->rxInterruptedPayloads++;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            if (pShtp->eventCallback) {
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d006      	beq.n	8006a06 <rxAssemble+0x192>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	6892      	ldr	r2, [r2, #8]
 8006a00:	2107      	movs	r1, #7
 8006a02:	4610      	mov	r0, r2
 8006a04:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 8006a06:	7dfa      	ldrb	r2, [r7, #23]
 8006a08:	7dbb      	ldrb	r3, [r7, #22]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	b2d8      	uxtb	r0, r3
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	4613      	mov	r3, r2
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8006a1e:	4602      	mov	r2, r0
 8006a20:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d122      	bne.n	8006a72 <rxAssemble+0x1fe>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 8006a2c:	8abb      	ldrh	r3, [r7, #20]
 8006a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a32:	d912      	bls.n	8006a5a <rxAssemble+0x1e6>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
            
            if (pShtp->eventCallback) {
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d06e      	beq.n	8006b28 <rxAssemble+0x2b4>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	6892      	ldr	r2, [r2, #8]
 8006a52:	2102      	movs	r1, #2
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
            }

            return;
 8006a58:	e066      	b.n	8006b28 <rxAssemble+0x2b4>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
        pShtp->inChan = chan;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	7dfa      	ldrb	r2, [r7, #23]
 8006a6e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8006a72:	88fa      	ldrh	r2, [r7, #6]
 8006a74:	8abb      	ldrh	r3, [r7, #20]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d901      	bls.n	8006a7e <rxAssemble+0x20a>
        // Only use the valid portion of the transfer
        len = payloadLen;
 8006a7a:	8abb      	ldrh	r3, [r7, #20]
 8006a7c:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	338f      	adds	r3, #143	@ 0x8f
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	@ 0x490
 8006a88:	1898      	adds	r0, r3, r2
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	1d19      	adds	r1, r3, #4
 8006a8e:	88fb      	ldrh	r3, [r7, #6]
 8006a90:	3b04      	subs	r3, #4
 8006a92:	461a      	mov	r2, r3
 8006a94:	f009 fcff 	bl	8010496 <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b04      	subs	r3, #4
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
    pShtp->inRemaining = payloadLen - len;
 8006aae:	8aba      	ldrh	r2, [r7, #20]
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d131      	bne.n	8006b2a <rxAssemble+0x2b6>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 8006ac6:	7dfa      	ldrb	r2, [r7, #23]
 8006ac8:	68f9      	ldr	r1, [r7, #12]
 8006aca:	4613      	mov	r3, r2
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d025      	beq.n	8006b2a <rxAssemble+0x2b6>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006ade:	7dfa      	ldrb	r2, [r7, #23]
 8006ae0:	68f9      	ldr	r1, [r7, #12]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8006af0:	681c      	ldr	r4, [r3, #0]
 8006af2:	7dfa      	ldrb	r2, [r7, #23]
 8006af4:	68f9      	ldr	r1, [r7, #12]
 8006af6:	4613      	mov	r3, r2
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	440b      	add	r3, r1
 8006b00:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006b04:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f103 018f 	add.w	r1, r3, #143	@ 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8006b18:	47a0      	blx	r4
 8006b1a:	e006      	b.n	8006b2a <rxAssemble+0x2b6>
        return;
 8006b1c:	bf00      	nop
 8006b1e:	e004      	b.n	8006b2a <rxAssemble+0x2b6>
        return;
 8006b20:	bf00      	nop
 8006b22:	e002      	b.n	8006b2a <rxAssemble+0x2b6>
        return;
 8006b24:	bf00      	nop
 8006b26:	e000      	b.n	8006b2a <rxAssemble+0x2b6>
            return;
 8006b28:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd90      	pop	{r4, r7, pc}

08006b30 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8006b38:	4b16      	ldr	r3, [pc, #88]	@ (8006b94 <shtp_open+0x64>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f083 0301 	eor.w	r3, r3, #1
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 8006b46:	f7ff fda1 	bl	800668c <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <shtp_open+0x24>
        // Error
        return 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e01b      	b.n	8006b8c <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8006b54:	f7ff fdbc 	bl	80066d0 <getInstance>
 8006b58:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e013      	b.n	8006b8c <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8006b64:	f640 1214 	movw	r2, #2324	@ 0x914
 8006b68:	2100      	movs	r1, #0
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f009 fba3 	bl	80102b6 <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
 8006b78:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <shtp_open+0x54>
        return 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	e003      	b.n	8006b8c <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	601a      	str	r2, [r3, #0]

    return pShtp;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20001434 	.word	0x20001434

08006b98 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	609a      	str	r2, [r3, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 8006bd4:	7afb      	ldrb	r3, [r7, #11]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <shtp_listenChan+0x20>
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	2b07      	cmp	r3, #7
 8006bde:	d902      	bls.n	8006be6 <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8006be0:	f06f 0301 	mvn.w	r3, #1
 8006be4:	e016      	b.n	8006c14 <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 8006be6:	7afa      	ldrb	r2, [r7, #11]
 8006be8:	6979      	ldr	r1, [r7, #20]
 8006bea:	4613      	mov	r3, r2
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 8006bfc:	7afa      	ldrb	r2, [r7, #11]
 8006bfe:	6979      	ldr	r1, [r7, #20]
 8006c00:	4613      	mov	r3, r2
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	72fb      	strb	r3, [r7, #11]
 8006c30:	4613      	mov	r3, r2
 8006c32:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 8006c38:	893b      	ldrh	r3, [r7, #8]
 8006c3a:	2b80      	cmp	r3, #128	@ 0x80
 8006c3c:	d909      	bls.n	8006c52 <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
        return SH2_ERR_BAD_PARAM;
 8006c4c:	f06f 0301 	mvn.w	r3, #1
 8006c50:	e013      	b.n	8006c7a <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	2b07      	cmp	r3, #7
 8006c56:	d909      	bls.n	8006c6c <shtp_send+0x4c>
        pShtp->badTxChan++;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
        return SH2_ERR_BAD_PARAM;
 8006c66:	f06f 0301 	mvn.w	r3, #1
 8006c6a:	e006      	b.n	8006c7a <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8006c6c:	893b      	ldrh	r3, [r7, #8]
 8006c6e:	7af9      	ldrb	r1, [r7, #11]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6978      	ldr	r0, [r7, #20]
 8006c74:	f7ff fd69 	bl	800674a <txProcess>
 8006c78:	4603      	mov	r3, r0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8006c82:	b590      	push	{r4, r7, lr}
 8006c84:	b087      	sub	sp, #28
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689c      	ldr	r4, [r3, #8]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8006ca2:	f107 030c 	add.w	r3, r7, #12
 8006ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006caa:	47a0      	blx	r4
 8006cac:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dd08      	ble.n	8006cc6 <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6978      	ldr	r0, [r7, #20]
 8006cc2:	f7ff fdd7 	bl	8006874 <rxAssemble>
    }
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd90      	pop	{r4, r7, pc}
	...

08006cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006d08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006cd4:	f7fd fafe 	bl	80042d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006cd8:	480c      	ldr	r0, [pc, #48]	@ (8006d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006cda:	490d      	ldr	r1, [pc, #52]	@ (8006d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8006d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ce0:	e002      	b.n	8006ce8 <LoopCopyDataInit>

08006ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ce6:	3304      	adds	r3, #4

08006ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cec:	d3f9      	bcc.n	8006ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cee:	4a0a      	ldr	r2, [pc, #40]	@ (8006d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8006d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006cf4:	e001      	b.n	8006cfa <LoopFillZerobss>

08006cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006cf8:	3204      	adds	r2, #4

08006cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006cfc:	d3fb      	bcc.n	8006cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006cfe:	f009 fba3 	bl	8010448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d02:	f7fb f8dd 	bl	8001ec0 <main>
  bx  lr    
 8006d06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d10:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8006d14:	0801380c 	.word	0x0801380c
  ldr r2, =_sbss
 8006d18:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8006d1c:	20005fa4 	.word	0x20005fa4

08006d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d20:	e7fe      	b.n	8006d20 <ADC_IRQHandler>
	...

08006d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d28:	4b0e      	ldr	r3, [pc, #56]	@ (8006d64 <HAL_Init+0x40>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d64 <HAL_Init+0x40>)
 8006d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d34:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <HAL_Init+0x40>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a0a      	ldr	r2, [pc, #40]	@ (8006d64 <HAL_Init+0x40>)
 8006d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d40:	4b08      	ldr	r3, [pc, #32]	@ (8006d64 <HAL_Init+0x40>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a07      	ldr	r2, [pc, #28]	@ (8006d64 <HAL_Init+0x40>)
 8006d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d4c:	2003      	movs	r0, #3
 8006d4e:	f000 f8fc 	bl	8006f4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d52:	200f      	movs	r0, #15
 8006d54:	f7fd f930 	bl	8003fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d58:	f7fc ff90 	bl	8003c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40023c00 	.word	0x40023c00

08006d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d6c:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <HAL_IncTick+0x20>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	4b06      	ldr	r3, [pc, #24]	@ (8006d8c <HAL_IncTick+0x24>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4413      	add	r3, r2
 8006d78:	4a04      	ldr	r2, [pc, #16]	@ (8006d8c <HAL_IncTick+0x24>)
 8006d7a:	6013      	str	r3, [r2, #0]
}
 8006d7c:	bf00      	nop
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20000074 	.word	0x20000074
 8006d8c:	20001438 	.word	0x20001438

08006d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  return uwTick;
 8006d94:	4b03      	ldr	r3, [pc, #12]	@ (8006da4 <HAL_GetTick+0x14>)
 8006d96:	681b      	ldr	r3, [r3, #0]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	20001438 	.word	0x20001438

08006da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006db0:	f7ff ffee 	bl	8006d90 <HAL_GetTick>
 8006db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d005      	beq.n	8006dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <HAL_Delay+0x44>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006dce:	bf00      	nop
 8006dd0:	f7ff ffde 	bl	8006d90 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d8f7      	bhi.n	8006dd0 <HAL_Delay+0x28>
  {
  }
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000074 	.word	0x20000074

08006df0 <__NVIC_SetPriorityGrouping>:
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e00:	4b0c      	ldr	r3, [pc, #48]	@ (8006e34 <__NVIC_SetPriorityGrouping+0x44>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e22:	4a04      	ldr	r2, [pc, #16]	@ (8006e34 <__NVIC_SetPriorityGrouping+0x44>)
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	60d3      	str	r3, [r2, #12]
}
 8006e28:	bf00      	nop
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	e000ed00 	.word	0xe000ed00

08006e38 <__NVIC_GetPriorityGrouping>:
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e3c:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <__NVIC_GetPriorityGrouping+0x18>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	f003 0307 	and.w	r3, r3, #7
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	e000ed00 	.word	0xe000ed00

08006e54 <__NVIC_EnableIRQ>:
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	db0b      	blt.n	8006e7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	f003 021f 	and.w	r2, r3, #31
 8006e6c:	4907      	ldr	r1, [pc, #28]	@ (8006e8c <__NVIC_EnableIRQ+0x38>)
 8006e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	2001      	movs	r0, #1
 8006e76:	fa00 f202 	lsl.w	r2, r0, r2
 8006e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	e000e100 	.word	0xe000e100

08006e90 <__NVIC_SetPriority>:
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	db0a      	blt.n	8006eba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	490c      	ldr	r1, [pc, #48]	@ (8006edc <__NVIC_SetPriority+0x4c>)
 8006eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eae:	0112      	lsls	r2, r2, #4
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006eb8:	e00a      	b.n	8006ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	4908      	ldr	r1, [pc, #32]	@ (8006ee0 <__NVIC_SetPriority+0x50>)
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	3b04      	subs	r3, #4
 8006ec8:	0112      	lsls	r2, r2, #4
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	440b      	add	r3, r1
 8006ece:	761a      	strb	r2, [r3, #24]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	e000e100 	.word	0xe000e100
 8006ee0:	e000ed00 	.word	0xe000ed00

08006ee4 <NVIC_EncodePriority>:
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b089      	sub	sp, #36	@ 0x24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	f1c3 0307 	rsb	r3, r3, #7
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	bf28      	it	cs
 8006f02:	2304      	movcs	r3, #4
 8006f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	2b06      	cmp	r3, #6
 8006f0c:	d902      	bls.n	8006f14 <NVIC_EncodePriority+0x30>
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	3b03      	subs	r3, #3
 8006f12:	e000      	b.n	8006f16 <NVIC_EncodePriority+0x32>
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f18:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	43da      	mvns	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	401a      	ands	r2, r3
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	fa01 f303 	lsl.w	r3, r1, r3
 8006f36:	43d9      	mvns	r1, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f3c:	4313      	orrs	r3, r2
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3724      	adds	r7, #36	@ 0x24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff ff4c 	bl	8006df0 <__NVIC_SetPriorityGrouping>
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f72:	f7ff ff61 	bl	8006e38 <__NVIC_GetPriorityGrouping>
 8006f76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68b9      	ldr	r1, [r7, #8]
 8006f7c:	6978      	ldr	r0, [r7, #20]
 8006f7e:	f7ff ffb1 	bl	8006ee4 <NVIC_EncodePriority>
 8006f82:	4602      	mov	r2, r0
 8006f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff ff80 	bl	8006e90 <__NVIC_SetPriority>
}
 8006f90:	bf00      	nop
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff ff54 	bl	8006e54 <__NVIC_EnableIRQ>
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006fc0:	f7ff fee6 	bl	8006d90 <HAL_GetTick>
 8006fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e099      	b.n	8007104 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0201 	bic.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ff0:	e00f      	b.n	8007012 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ff2:	f7ff fecd 	bl	8006d90 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d908      	bls.n	8007012 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2220      	movs	r2, #32
 8007004:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2203      	movs	r2, #3
 800700a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e078      	b.n	8007104 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e8      	bne.n	8006ff2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4b38      	ldr	r3, [pc, #224]	@ (800710c <HAL_DMA_Init+0x158>)
 800702c:	4013      	ands	r3, r2
 800702e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800703e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800704a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	2b04      	cmp	r3, #4
 800706a:	d107      	bne.n	800707c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007074:	4313      	orrs	r3, r2
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f023 0307 	bic.w	r3, r3, #7
 8007092:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d117      	bne.n	80070d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00e      	beq.n	80070d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fb0d 	bl	80076d8 <DMA_CheckFifoParam>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d008      	beq.n	80070d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2240      	movs	r2, #64	@ 0x40
 80070c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80070d2:	2301      	movs	r3, #1
 80070d4:	e016      	b.n	8007104 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fac4 	bl	800766c <DMA_CalcBaseAndBitshift>
 80070e4:	4603      	mov	r3, r0
 80070e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ec:	223f      	movs	r2, #63	@ 0x3f
 80070ee:	409a      	lsls	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	f010803f 	.word	0xf010803f

08007110 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007126:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_DMA_Start_IT+0x26>
 8007132:	2302      	movs	r3, #2
 8007134:	e040      	b.n	80071b8 <HAL_DMA_Start_IT+0xa8>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b01      	cmp	r3, #1
 8007148:	d12f      	bne.n	80071aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 fa56 	bl	8007610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007168:	223f      	movs	r2, #63	@ 0x3f
 800716a:	409a      	lsls	r2, r3
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0216 	orr.w	r2, r2, #22
 800717e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007184:	2b00      	cmp	r3, #0
 8007186:	d007      	beq.n	8007198 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0208 	orr.w	r2, r2, #8
 8007196:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e005      	b.n	80071b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071b2:	2302      	movs	r3, #2
 80071b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80071ce:	f7ff fddf 	bl	8006d90 <HAL_GetTick>
 80071d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d008      	beq.n	80071f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2280      	movs	r2, #128	@ 0x80
 80071e4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e052      	b.n	8007298 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0216 	bic.w	r2, r2, #22
 8007200:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	695a      	ldr	r2, [r3, #20]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007210:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <HAL_DMA_Abort+0x62>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0208 	bic.w	r2, r2, #8
 8007230:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0201 	bic.w	r2, r2, #1
 8007240:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007242:	e013      	b.n	800726c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007244:	f7ff fda4 	bl	8006d90 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b05      	cmp	r3, #5
 8007250:	d90c      	bls.n	800726c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2203      	movs	r2, #3
 800725c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e015      	b.n	8007298 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e4      	bne.n	8007244 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800727e:	223f      	movs	r2, #63	@ 0x3f
 8007280:	409a      	lsls	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d004      	beq.n	80072be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2280      	movs	r2, #128	@ 0x80
 80072b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e00c      	b.n	80072d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2205      	movs	r2, #5
 80072c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0201 	bic.w	r2, r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072f0:	4b8e      	ldr	r3, [pc, #568]	@ (800752c <HAL_DMA_IRQHandler+0x248>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a8e      	ldr	r2, [pc, #568]	@ (8007530 <HAL_DMA_IRQHandler+0x24c>)
 80072f6:	fba2 2303 	umull	r2, r3, r2, r3
 80072fa:	0a9b      	lsrs	r3, r3, #10
 80072fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007302:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800730e:	2208      	movs	r2, #8
 8007310:	409a      	lsls	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4013      	ands	r3, r2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d01a      	beq.n	8007350 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d013      	beq.n	8007350 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0204 	bic.w	r2, r2, #4
 8007336:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800733c:	2208      	movs	r2, #8
 800733e:	409a      	lsls	r2, r3
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007348:	f043 0201 	orr.w	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007354:	2201      	movs	r2, #1
 8007356:	409a      	lsls	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4013      	ands	r3, r2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d012      	beq.n	8007386 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00b      	beq.n	8007386 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007372:	2201      	movs	r2, #1
 8007374:	409a      	lsls	r2, r3
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737e:	f043 0202 	orr.w	r2, r3, #2
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738a:	2204      	movs	r2, #4
 800738c:	409a      	lsls	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4013      	ands	r3, r2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d012      	beq.n	80073bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a8:	2204      	movs	r2, #4
 80073aa:	409a      	lsls	r2, r3
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b4:	f043 0204 	orr.w	r2, r3, #4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c0:	2210      	movs	r2, #16
 80073c2:	409a      	lsls	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4013      	ands	r3, r2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d043      	beq.n	8007454 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d03c      	beq.n	8007454 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073de:	2210      	movs	r2, #16
 80073e0:	409a      	lsls	r2, r3
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d018      	beq.n	8007426 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d108      	bne.n	8007414 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d024      	beq.n	8007454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
 8007412:	e01f      	b.n	8007454 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01b      	beq.n	8007454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
 8007424:	e016      	b.n	8007454 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007430:	2b00      	cmp	r3, #0
 8007432:	d107      	bne.n	8007444 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0208 	bic.w	r2, r2, #8
 8007442:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007458:	2220      	movs	r2, #32
 800745a:	409a      	lsls	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4013      	ands	r3, r2
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 808f 	beq.w	8007584 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8087 	beq.w	8007584 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800747a:	2220      	movs	r2, #32
 800747c:	409a      	lsls	r2, r3
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b05      	cmp	r3, #5
 800748c:	d136      	bne.n	80074fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0216 	bic.w	r2, r2, #22
 800749c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d103      	bne.n	80074be <HAL_DMA_IRQHandler+0x1da>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0208 	bic.w	r2, r2, #8
 80074cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d2:	223f      	movs	r2, #63	@ 0x3f
 80074d4:	409a      	lsls	r2, r3
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d07e      	beq.n	80075f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
        }
        return;
 80074fa:	e079      	b.n	80075f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d01d      	beq.n	8007546 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10d      	bne.n	8007534 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751c:	2b00      	cmp	r3, #0
 800751e:	d031      	beq.n	8007584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
 8007528:	e02c      	b.n	8007584 <HAL_DMA_IRQHandler+0x2a0>
 800752a:	bf00      	nop
 800752c:	2000000c 	.word	0x2000000c
 8007530:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d023      	beq.n	8007584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
 8007544:	e01e      	b.n	8007584 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10f      	bne.n	8007574 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0210 	bic.w	r2, r2, #16
 8007562:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007588:	2b00      	cmp	r3, #0
 800758a:	d032      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d022      	beq.n	80075de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2205      	movs	r2, #5
 800759c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0201 	bic.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60bb      	str	r3, [r7, #8]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d307      	bcc.n	80075cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1f2      	bne.n	80075b0 <HAL_DMA_IRQHandler+0x2cc>
 80075ca:	e000      	b.n	80075ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80075cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d005      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
 80075ee:	e000      	b.n	80075f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80075f0:	bf00      	nop
    }
  }
}
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800762c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b40      	cmp	r3, #64	@ 0x40
 800763c:	d108      	bne.n	8007650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800764e:	e007      	b.n	8007660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	60da      	str	r2, [r3, #12]
}
 8007660:	bf00      	nop
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	3b10      	subs	r3, #16
 800767c:	4a14      	ldr	r2, [pc, #80]	@ (80076d0 <DMA_CalcBaseAndBitshift+0x64>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007686:	4a13      	ldr	r2, [pc, #76]	@ (80076d4 <DMA_CalcBaseAndBitshift+0x68>)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b03      	cmp	r3, #3
 8007698:	d909      	bls.n	80076ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80076a2:	f023 0303 	bic.w	r3, r3, #3
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80076ac:	e007      	b.n	80076be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	aaaaaaab 	.word	0xaaaaaaab
 80076d4:	08013444 	.word	0x08013444

080076d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d11f      	bne.n	8007732 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d856      	bhi.n	80077a6 <DMA_CheckFifoParam+0xce>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <DMA_CheckFifoParam+0x28>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007711 	.word	0x08007711
 8007704:	08007723 	.word	0x08007723
 8007708:	08007711 	.word	0x08007711
 800770c:	080077a7 	.word	0x080077a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d046      	beq.n	80077aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007720:	e043      	b.n	80077aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007726:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800772a:	d140      	bne.n	80077ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007730:	e03d      	b.n	80077ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800773a:	d121      	bne.n	8007780 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d837      	bhi.n	80077b2 <DMA_CheckFifoParam+0xda>
 8007742:	a201      	add	r2, pc, #4	@ (adr r2, 8007748 <DMA_CheckFifoParam+0x70>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	08007759 	.word	0x08007759
 800774c:	0800775f 	.word	0x0800775f
 8007750:	08007759 	.word	0x08007759
 8007754:	08007771 	.word	0x08007771
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e030      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007762:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d025      	beq.n	80077b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800776e:	e022      	b.n	80077b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007774:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007778:	d11f      	bne.n	80077ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800777e:	e01c      	b.n	80077ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d903      	bls.n	800778e <DMA_CheckFifoParam+0xb6>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b03      	cmp	r3, #3
 800778a:	d003      	beq.n	8007794 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800778c:	e018      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
      break;
 8007792:	e015      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007798:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00e      	beq.n	80077be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73fb      	strb	r3, [r7, #15]
      break;
 80077a4:	e00b      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      break;
 80077a6:	bf00      	nop
 80077a8:	e00a      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077aa:	bf00      	nop
 80077ac:	e008      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077ae:	bf00      	nop
 80077b0:	e006      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077b2:	bf00      	nop
 80077b4:	e004      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077b6:	bf00      	nop
 80077b8:	e002      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80077ba:	bf00      	nop
 80077bc:	e000      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077be:	bf00      	nop
    }
  } 
  
  return status; 
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop

080077d0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80077de:	4b23      	ldr	r3, [pc, #140]	@ (800786c <HAL_FLASH_Program+0x9c>)
 80077e0:	7e1b      	ldrb	r3, [r3, #24]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_FLASH_Program+0x1a>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e03b      	b.n	8007862 <HAL_FLASH_Program+0x92>
 80077ea:	4b20      	ldr	r3, [pc, #128]	@ (800786c <HAL_FLASH_Program+0x9c>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80077f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80077f4:	f000 f870 	bl	80078d8 <FLASH_WaitForLastOperation>
 80077f8:	4603      	mov	r3, r0
 80077fa:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80077fc:	7dfb      	ldrb	r3, [r7, #23]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d12b      	bne.n	800785a <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007808:	783b      	ldrb	r3, [r7, #0]
 800780a:	4619      	mov	r1, r3
 800780c:	68b8      	ldr	r0, [r7, #8]
 800780e:	f000 f91b 	bl	8007a48 <FLASH_Program_Byte>
 8007812:	e016      	b.n	8007842 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d105      	bne.n	8007826 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800781a:	883b      	ldrh	r3, [r7, #0]
 800781c:	4619      	mov	r1, r3
 800781e:	68b8      	ldr	r0, [r7, #8]
 8007820:	f000 f8ee 	bl	8007a00 <FLASH_Program_HalfWord>
 8007824:	e00d      	b.n	8007842 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d105      	bne.n	8007838 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	4619      	mov	r1, r3
 8007830:	68b8      	ldr	r0, [r7, #8]
 8007832:	f000 f8c3 	bl	80079bc <FLASH_Program_Word>
 8007836:	e004      	b.n	8007842 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800783c:	68b8      	ldr	r0, [r7, #8]
 800783e:	f000 f88b 	bl	8007958 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007842:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007846:	f000 f847 	bl	80078d8 <FLASH_WaitForLastOperation>
 800784a:	4603      	mov	r3, r0
 800784c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800784e:	4b08      	ldr	r3, [pc, #32]	@ (8007870 <HAL_FLASH_Program+0xa0>)
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	4a07      	ldr	r2, [pc, #28]	@ (8007870 <HAL_FLASH_Program+0xa0>)
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800785a:	4b04      	ldr	r3, [pc, #16]	@ (800786c <HAL_FLASH_Program+0x9c>)
 800785c:	2200      	movs	r2, #0
 800785e:	761a      	strb	r2, [r3, #24]

  return status;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	2000143c 	.word	0x2000143c
 8007870:	40023c00 	.word	0x40023c00

08007874 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800787e:	4b0b      	ldr	r3, [pc, #44]	@ (80078ac <HAL_FLASH_Unlock+0x38>)
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	da0b      	bge.n	800789e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007886:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <HAL_FLASH_Unlock+0x38>)
 8007888:	4a09      	ldr	r2, [pc, #36]	@ (80078b0 <HAL_FLASH_Unlock+0x3c>)
 800788a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800788c:	4b07      	ldr	r3, [pc, #28]	@ (80078ac <HAL_FLASH_Unlock+0x38>)
 800788e:	4a09      	ldr	r2, [pc, #36]	@ (80078b4 <HAL_FLASH_Unlock+0x40>)
 8007890:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007892:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <HAL_FLASH_Unlock+0x38>)
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	da01      	bge.n	800789e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800789e:	79fb      	ldrb	r3, [r7, #7]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	40023c00 	.word	0x40023c00
 80078b0:	45670123 	.word	0x45670123
 80078b4:	cdef89ab 	.word	0xcdef89ab

080078b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80078bc:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <HAL_FLASH_Lock+0x1c>)
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	4a04      	ldr	r2, [pc, #16]	@ (80078d4 <HAL_FLASH_Lock+0x1c>)
 80078c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078c6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	40023c00 	.word	0x40023c00

080078d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80078e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007950 <FLASH_WaitForLastOperation+0x78>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80078ea:	f7ff fa51 	bl	8006d90 <HAL_GetTick>
 80078ee:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80078f0:	e010      	b.n	8007914 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d00c      	beq.n	8007914 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <FLASH_WaitForLastOperation+0x38>
 8007900:	f7ff fa46 	bl	8006d90 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	d201      	bcs.n	8007914 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e019      	b.n	8007948 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8007914:	4b0f      	ldr	r3, [pc, #60]	@ (8007954 <FLASH_WaitForLastOperation+0x7c>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e8      	bne.n	80078f2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007920:	4b0c      	ldr	r3, [pc, #48]	@ (8007954 <FLASH_WaitForLastOperation+0x7c>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800792c:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <FLASH_WaitForLastOperation+0x7c>)
 800792e:	2201      	movs	r2, #1
 8007930:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007932:	4b08      	ldr	r3, [pc, #32]	@ (8007954 <FLASH_WaitForLastOperation+0x7c>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800793e:	f000 f8a5 	bl	8007a8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007946:	2300      	movs	r3, #0

}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	2000143c 	.word	0x2000143c
 8007954:	40023c00 	.word	0x40023c00

08007958 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007964:	4b14      	ldr	r3, [pc, #80]	@ (80079b8 <FLASH_Program_DoubleWord+0x60>)
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	4a13      	ldr	r2, [pc, #76]	@ (80079b8 <FLASH_Program_DoubleWord+0x60>)
 800796a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800796e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007970:	4b11      	ldr	r3, [pc, #68]	@ (80079b8 <FLASH_Program_DoubleWord+0x60>)
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	4a10      	ldr	r2, [pc, #64]	@ (80079b8 <FLASH_Program_DoubleWord+0x60>)
 8007976:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800797a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800797c:	4b0e      	ldr	r3, [pc, #56]	@ (80079b8 <FLASH_Program_DoubleWord+0x60>)
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	4a0d      	ldr	r2, [pc, #52]	@ (80079b8 <FLASH_Program_DoubleWord+0x60>)
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800798e:	f3bf 8f6f 	isb	sy
}
 8007992:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8007994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	000a      	movs	r2, r1
 80079a2:	2300      	movs	r3, #0
 80079a4:	68f9      	ldr	r1, [r7, #12]
 80079a6:	3104      	adds	r1, #4
 80079a8:	4613      	mov	r3, r2
 80079aa:	600b      	str	r3, [r1, #0]
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40023c00 	.word	0x40023c00

080079bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80079c6:	4b0d      	ldr	r3, [pc, #52]	@ (80079fc <FLASH_Program_Word+0x40>)
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	4a0c      	ldr	r2, [pc, #48]	@ (80079fc <FLASH_Program_Word+0x40>)
 80079cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80079d2:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <FLASH_Program_Word+0x40>)
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	4a09      	ldr	r2, [pc, #36]	@ (80079fc <FLASH_Program_Word+0x40>)
 80079d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80079dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80079de:	4b07      	ldr	r3, [pc, #28]	@ (80079fc <FLASH_Program_Word+0x40>)
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	4a06      	ldr	r2, [pc, #24]	@ (80079fc <FLASH_Program_Word+0x40>)
 80079e4:	f043 0301 	orr.w	r3, r3, #1
 80079e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	601a      	str	r2, [r3, #0]
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	40023c00 	.word	0x40023c00

08007a00 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a44 <FLASH_Program_HalfWord+0x44>)
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	4a0c      	ldr	r2, [pc, #48]	@ (8007a44 <FLASH_Program_HalfWord+0x44>)
 8007a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007a18:	4b0a      	ldr	r3, [pc, #40]	@ (8007a44 <FLASH_Program_HalfWord+0x44>)
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	4a09      	ldr	r2, [pc, #36]	@ (8007a44 <FLASH_Program_HalfWord+0x44>)
 8007a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007a24:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <FLASH_Program_HalfWord+0x44>)
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	4a06      	ldr	r2, [pc, #24]	@ (8007a44 <FLASH_Program_HalfWord+0x44>)
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	887a      	ldrh	r2, [r7, #2]
 8007a34:	801a      	strh	r2, [r3, #0]
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40023c00 	.word	0x40023c00

08007a48 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007a54:	4b0c      	ldr	r3, [pc, #48]	@ (8007a88 <FLASH_Program_Byte+0x40>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	4a0b      	ldr	r2, [pc, #44]	@ (8007a88 <FLASH_Program_Byte+0x40>)
 8007a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007a60:	4b09      	ldr	r3, [pc, #36]	@ (8007a88 <FLASH_Program_Byte+0x40>)
 8007a62:	4a09      	ldr	r2, [pc, #36]	@ (8007a88 <FLASH_Program_Byte+0x40>)
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007a68:	4b07      	ldr	r3, [pc, #28]	@ (8007a88 <FLASH_Program_Byte+0x40>)
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	4a06      	ldr	r2, [pc, #24]	@ (8007a88 <FLASH_Program_Byte+0x40>)
 8007a6e:	f043 0301 	orr.w	r3, r3, #1
 8007a72:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	701a      	strb	r2, [r3, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40023c00 	.word	0x40023c00

08007a8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007a90:	4b2f      	ldr	r3, [pc, #188]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f043 0310 	orr.w	r3, r3, #16
 8007aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007aa6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007aa8:	4b29      	ldr	r3, [pc, #164]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007aaa:	2210      	movs	r2, #16
 8007aac:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007aae:	4b28      	ldr	r3, [pc, #160]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d008      	beq.n	8007acc <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007aba:	4b26      	ldr	r3, [pc, #152]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	f043 0308 	orr.w	r3, r3, #8
 8007ac2:	4a24      	ldr	r2, [pc, #144]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007ac4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007ac6:	4b22      	ldr	r3, [pc, #136]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007ac8:	2220      	movs	r2, #32
 8007aca:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007acc:	4b20      	ldr	r3, [pc, #128]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d008      	beq.n	8007aea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f043 0304 	orr.w	r3, r3, #4
 8007ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007ae2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007ae6:	2240      	movs	r2, #64	@ 0x40
 8007ae8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007aea:	4b19      	ldr	r3, [pc, #100]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d008      	beq.n	8007b08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007af6:	4b17      	ldr	r3, [pc, #92]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f043 0302 	orr.w	r3, r3, #2
 8007afe:	4a15      	ldr	r2, [pc, #84]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007b00:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007b02:	4b13      	ldr	r3, [pc, #76]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007b04:	2280      	movs	r2, #128	@ 0x80
 8007b06:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007b08:	4b11      	ldr	r3, [pc, #68]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d009      	beq.n	8007b28 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007b14:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	f043 0301 	orr.w	r3, r3, #1
 8007b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007b1e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007b20:	4b0b      	ldr	r3, [pc, #44]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007b22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b26:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007b28:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007b34:	4b07      	ldr	r3, [pc, #28]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	f043 0320 	orr.w	r3, r3, #32
 8007b3c:	4a05      	ldr	r2, [pc, #20]	@ (8007b54 <FLASH_SetErrorCode+0xc8>)
 8007b3e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007b40:	4b03      	ldr	r3, [pc, #12]	@ (8007b50 <FLASH_SetErrorCode+0xc4>)
 8007b42:	2202      	movs	r2, #2
 8007b44:	60da      	str	r2, [r3, #12]
  }
}
 8007b46:	bf00      	nop
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	40023c00 	.word	0x40023c00
 8007b54:	2000143c 	.word	0x2000143c

08007b58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007b66:	4b31      	ldr	r3, [pc, #196]	@ (8007c2c <HAL_FLASHEx_Erase+0xd4>)
 8007b68:	7e1b      	ldrb	r3, [r3, #24]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d101      	bne.n	8007b72 <HAL_FLASHEx_Erase+0x1a>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e058      	b.n	8007c24 <HAL_FLASHEx_Erase+0xcc>
 8007b72:	4b2e      	ldr	r3, [pc, #184]	@ (8007c2c <HAL_FLASHEx_Erase+0xd4>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b78:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007b7c:	f7ff feac 	bl	80078d8 <FLASH_WaitForLastOperation>
 8007b80:	4603      	mov	r3, r0
 8007b82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d148      	bne.n	8007c1c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b90:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d115      	bne.n	8007bc6 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f000 f844 	bl	8007c34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007bac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007bb0:	f7ff fe92 	bl	80078d8 <FLASH_WaitForLastOperation>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c30 <HAL_FLASHEx_Erase+0xd8>)
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8007c30 <HAL_FLASHEx_Erase+0xd8>)
 8007bbe:	f023 0304 	bic.w	r3, r3, #4
 8007bc2:	6113      	str	r3, [r2, #16]
 8007bc4:	e028      	b.n	8007c18 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	60bb      	str	r3, [r7, #8]
 8007bcc:	e01c      	b.n	8007c08 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	68b8      	ldr	r0, [r7, #8]
 8007bd8:	f000 f850 	bl	8007c7c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007bdc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007be0:	f7ff fe7a 	bl	80078d8 <FLASH_WaitForLastOperation>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007be8:	4b11      	ldr	r3, [pc, #68]	@ (8007c30 <HAL_FLASHEx_Erase+0xd8>)
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	4a10      	ldr	r2, [pc, #64]	@ (8007c30 <HAL_FLASHEx_Erase+0xd8>)
 8007bee:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8007bf2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	601a      	str	r2, [r3, #0]
          break;
 8007c00:	e00a      	b.n	8007c18 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	3301      	adds	r3, #1
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	4413      	add	r3, r2
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d3da      	bcc.n	8007bce <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007c18:	f000 f878 	bl	8007d0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007c1c:	4b03      	ldr	r3, [pc, #12]	@ (8007c2c <HAL_FLASHEx_Erase+0xd4>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	761a      	strb	r2, [r3, #24]

  return status;
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	2000143c 	.word	0x2000143c
 8007c30:	40023c00 	.word	0x40023c00

08007c34 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c40:	4b0d      	ldr	r3, [pc, #52]	@ (8007c78 <FLASH_MassErase+0x44>)
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	4a0c      	ldr	r2, [pc, #48]	@ (8007c78 <FLASH_MassErase+0x44>)
 8007c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c78 <FLASH_MassErase+0x44>)
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	4a09      	ldr	r2, [pc, #36]	@ (8007c78 <FLASH_MassErase+0x44>)
 8007c52:	f043 0304 	orr.w	r3, r3, #4
 8007c56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007c58:	4b07      	ldr	r3, [pc, #28]	@ (8007c78 <FLASH_MassErase+0x44>)
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	021b      	lsls	r3, r3, #8
 8007c60:	4313      	orrs	r3, r2
 8007c62:	4a05      	ldr	r2, [pc, #20]	@ (8007c78 <FLASH_MassErase+0x44>)
 8007c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c68:	6113      	str	r3, [r2, #16]
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40023c00 	.word	0x40023c00

08007c7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d102      	bne.n	8007c98 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	e010      	b.n	8007cba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d103      	bne.n	8007ca6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	e009      	b.n	8007cba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d103      	bne.n	8007cb4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	e002      	b.n	8007cba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007cb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007cb8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007cba:	4b13      	ldr	r3, [pc, #76]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	4a12      	ldr	r2, [pc, #72]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007cc6:	4b10      	ldr	r3, [pc, #64]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007cc8:	691a      	ldr	r2, [r3, #16]
 8007cca:	490f      	ldr	r1, [pc, #60]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007cd8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007cdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007cde:	4b0a      	ldr	r3, [pc, #40]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	4a07      	ldr	r2, [pc, #28]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007cea:	f043 0302 	orr.w	r3, r3, #2
 8007cee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007cf0:	4b05      	ldr	r3, [pc, #20]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	4a04      	ldr	r2, [pc, #16]	@ (8007d08 <FLASH_Erase_Sector+0x8c>)
 8007cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cfa:	6113      	str	r3, [r2, #16]
}
 8007cfc:	bf00      	nop
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	40023c00 	.word	0x40023c00

08007d0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007d10:	4b20      	ldr	r3, [pc, #128]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d017      	beq.n	8007d4c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1c      	ldr	r2, [pc, #112]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d22:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007d28:	4b1a      	ldr	r3, [pc, #104]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a19      	ldr	r2, [pc, #100]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	4b17      	ldr	r3, [pc, #92]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a16      	ldr	r2, [pc, #88]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d40:	4b14      	ldr	r3, [pc, #80]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a13      	ldr	r2, [pc, #76]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d4a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007d4c:	4b11      	ldr	r3, [pc, #68]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d017      	beq.n	8007d88 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007d58:	4b0e      	ldr	r3, [pc, #56]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d62:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007d64:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a0a      	ldr	r2, [pc, #40]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	4b08      	ldr	r3, [pc, #32]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a07      	ldr	r2, [pc, #28]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d7c:	4b05      	ldr	r3, [pc, #20]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a04      	ldr	r2, [pc, #16]	@ (8007d94 <FLASH_FlushCaches+0x88>)
 8007d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d86:	6013      	str	r3, [r2, #0]
  }
}
 8007d88:	bf00      	nop
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40023c00 	.word	0x40023c00

08007d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b089      	sub	sp, #36	@ 0x24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007dae:	2300      	movs	r3, #0
 8007db0:	61fb      	str	r3, [r7, #28]
 8007db2:	e159      	b.n	8008068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007db4:	2201      	movs	r2, #1
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	f040 8148 	bne.w	8008062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d005      	beq.n	8007dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d130      	bne.n	8007e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	2203      	movs	r2, #3
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e20:	2201      	movs	r2, #1
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	43db      	mvns	r3, r3
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	091b      	lsrs	r3, r3, #4
 8007e36:	f003 0201 	and.w	r2, r3, #1
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d017      	beq.n	8007e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	2203      	movs	r2, #3
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	43db      	mvns	r3, r3
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d123      	bne.n	8007edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	08da      	lsrs	r2, r3, #3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3208      	adds	r2, #8
 8007e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	220f      	movs	r2, #15
 8007eac:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	08da      	lsrs	r2, r3, #3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3208      	adds	r2, #8
 8007ed6:	69b9      	ldr	r1, [r7, #24]
 8007ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	2203      	movs	r2, #3
 8007ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eec:	43db      	mvns	r3, r3
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f003 0203 	and.w	r2, r3, #3
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 80a2 	beq.w	8008062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	4b57      	ldr	r3, [pc, #348]	@ (8008080 <HAL_GPIO_Init+0x2e8>)
 8007f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f26:	4a56      	ldr	r2, [pc, #344]	@ (8008080 <HAL_GPIO_Init+0x2e8>)
 8007f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f2e:	4b54      	ldr	r3, [pc, #336]	@ (8008080 <HAL_GPIO_Init+0x2e8>)
 8007f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f3a:	4a52      	ldr	r2, [pc, #328]	@ (8008084 <HAL_GPIO_Init+0x2ec>)
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	089b      	lsrs	r3, r3, #2
 8007f40:	3302      	adds	r3, #2
 8007f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	220f      	movs	r2, #15
 8007f52:	fa02 f303 	lsl.w	r3, r2, r3
 8007f56:	43db      	mvns	r3, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a49      	ldr	r2, [pc, #292]	@ (8008088 <HAL_GPIO_Init+0x2f0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d019      	beq.n	8007f9a <HAL_GPIO_Init+0x202>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a48      	ldr	r2, [pc, #288]	@ (800808c <HAL_GPIO_Init+0x2f4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d013      	beq.n	8007f96 <HAL_GPIO_Init+0x1fe>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a47      	ldr	r2, [pc, #284]	@ (8008090 <HAL_GPIO_Init+0x2f8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00d      	beq.n	8007f92 <HAL_GPIO_Init+0x1fa>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a46      	ldr	r2, [pc, #280]	@ (8008094 <HAL_GPIO_Init+0x2fc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d007      	beq.n	8007f8e <HAL_GPIO_Init+0x1f6>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a45      	ldr	r2, [pc, #276]	@ (8008098 <HAL_GPIO_Init+0x300>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d101      	bne.n	8007f8a <HAL_GPIO_Init+0x1f2>
 8007f86:	2304      	movs	r3, #4
 8007f88:	e008      	b.n	8007f9c <HAL_GPIO_Init+0x204>
 8007f8a:	2307      	movs	r3, #7
 8007f8c:	e006      	b.n	8007f9c <HAL_GPIO_Init+0x204>
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e004      	b.n	8007f9c <HAL_GPIO_Init+0x204>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e002      	b.n	8007f9c <HAL_GPIO_Init+0x204>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e000      	b.n	8007f9c <HAL_GPIO_Init+0x204>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	f002 0203 	and.w	r2, r2, #3
 8007fa2:	0092      	lsls	r2, r2, #2
 8007fa4:	4093      	lsls	r3, r2
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fac:	4935      	ldr	r1, [pc, #212]	@ (8008084 <HAL_GPIO_Init+0x2ec>)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	089b      	lsrs	r3, r3, #2
 8007fb2:	3302      	adds	r3, #2
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007fba:	4b38      	ldr	r3, [pc, #224]	@ (800809c <HAL_GPIO_Init+0x304>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	43db      	mvns	r3, r3
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007fde:	4a2f      	ldr	r2, [pc, #188]	@ (800809c <HAL_GPIO_Init+0x304>)
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800809c <HAL_GPIO_Init+0x304>)
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	43db      	mvns	r3, r3
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008008:	4a24      	ldr	r2, [pc, #144]	@ (800809c <HAL_GPIO_Init+0x304>)
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800800e:	4b23      	ldr	r3, [pc, #140]	@ (800809c <HAL_GPIO_Init+0x304>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	43db      	mvns	r3, r3
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	4013      	ands	r3, r2
 800801c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008032:	4a1a      	ldr	r2, [pc, #104]	@ (800809c <HAL_GPIO_Init+0x304>)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008038:	4b18      	ldr	r3, [pc, #96]	@ (800809c <HAL_GPIO_Init+0x304>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	43db      	mvns	r3, r3
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	4013      	ands	r3, r2
 8008046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800805c:	4a0f      	ldr	r2, [pc, #60]	@ (800809c <HAL_GPIO_Init+0x304>)
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	3301      	adds	r3, #1
 8008066:	61fb      	str	r3, [r7, #28]
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	2b0f      	cmp	r3, #15
 800806c:	f67f aea2 	bls.w	8007db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	3724      	adds	r7, #36	@ 0x24
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40023800 	.word	0x40023800
 8008084:	40013800 	.word	0x40013800
 8008088:	40020000 	.word	0x40020000
 800808c:	40020400 	.word	0x40020400
 8008090:	40020800 	.word	0x40020800
 8008094:	40020c00 	.word	0x40020c00
 8008098:	40021000 	.word	0x40021000
 800809c:	40013c00 	.word	0x40013c00

080080a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	887b      	ldrh	r3, [r7, #2]
 80080b2:	4013      	ands	r3, r2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080b8:	2301      	movs	r3, #1
 80080ba:	73fb      	strb	r3, [r7, #15]
 80080bc:	e001      	b.n	80080c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	807b      	strh	r3, [r7, #2]
 80080dc:	4613      	mov	r3, r2
 80080de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080e0:	787b      	ldrb	r3, [r7, #1]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080e6:	887a      	ldrh	r2, [r7, #2]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80080ec:	e003      	b.n	80080f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80080ee:	887b      	ldrh	r3, [r7, #2]
 80080f0:	041a      	lsls	r2, r3, #16
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	619a      	str	r2, [r3, #24]
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008102:	b480      	push	{r7}
 8008104:	b085      	sub	sp, #20
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008114:	887a      	ldrh	r2, [r7, #2]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4013      	ands	r3, r2
 800811a:	041a      	lsls	r2, r3, #16
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	43d9      	mvns	r1, r3
 8008120:	887b      	ldrh	r3, [r7, #2]
 8008122:	400b      	ands	r3, r1
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	619a      	str	r2, [r3, #24]
}
 800812a:	bf00      	nop
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008142:	4b08      	ldr	r3, [pc, #32]	@ (8008164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008144:	695a      	ldr	r2, [r3, #20]
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	4013      	ands	r3, r2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800814e:	4a05      	ldr	r2, [pc, #20]	@ (8008164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008154:	88fb      	ldrh	r3, [r7, #6]
 8008156:	4618      	mov	r0, r3
 8008158:	f7fa fa8e 	bl	8002678 <HAL_GPIO_EXTI_Callback>
  }
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40013c00 	.word	0x40013c00

08008168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e12b      	b.n	80083d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d106      	bne.n	8008194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7fb fda0 	bl	8003cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2224      	movs	r2, #36	@ 0x24
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80081cc:	f001 ff08 	bl	8009fe0 <HAL_RCC_GetPCLK1Freq>
 80081d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	4a81      	ldr	r2, [pc, #516]	@ (80083dc <HAL_I2C_Init+0x274>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d807      	bhi.n	80081ec <HAL_I2C_Init+0x84>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a80      	ldr	r2, [pc, #512]	@ (80083e0 <HAL_I2C_Init+0x278>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	bf94      	ite	ls
 80081e4:	2301      	movls	r3, #1
 80081e6:	2300      	movhi	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	e006      	b.n	80081fa <HAL_I2C_Init+0x92>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4a7d      	ldr	r2, [pc, #500]	@ (80083e4 <HAL_I2C_Init+0x27c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	bf94      	ite	ls
 80081f4:	2301      	movls	r3, #1
 80081f6:	2300      	movhi	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e0e7      	b.n	80083d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4a78      	ldr	r2, [pc, #480]	@ (80083e8 <HAL_I2C_Init+0x280>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	0c9b      	lsrs	r3, r3, #18
 800820c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	430a      	orrs	r2, r1
 8008220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	4a6a      	ldr	r2, [pc, #424]	@ (80083dc <HAL_I2C_Init+0x274>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d802      	bhi.n	800823c <HAL_I2C_Init+0xd4>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	3301      	adds	r3, #1
 800823a:	e009      	b.n	8008250 <HAL_I2C_Init+0xe8>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008242:	fb02 f303 	mul.w	r3, r2, r3
 8008246:	4a69      	ldr	r2, [pc, #420]	@ (80083ec <HAL_I2C_Init+0x284>)
 8008248:	fba2 2303 	umull	r2, r3, r2, r3
 800824c:	099b      	lsrs	r3, r3, #6
 800824e:	3301      	adds	r3, #1
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6812      	ldr	r2, [r2, #0]
 8008254:	430b      	orrs	r3, r1
 8008256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008262:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	495c      	ldr	r1, [pc, #368]	@ (80083dc <HAL_I2C_Init+0x274>)
 800826c:	428b      	cmp	r3, r1
 800826e:	d819      	bhi.n	80082a4 <HAL_I2C_Init+0x13c>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	1e59      	subs	r1, r3, #1
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	fbb1 f3f3 	udiv	r3, r1, r3
 800827e:	1c59      	adds	r1, r3, #1
 8008280:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008284:	400b      	ands	r3, r1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_I2C_Init+0x138>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	1e59      	subs	r1, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	fbb1 f3f3 	udiv	r3, r1, r3
 8008298:	3301      	adds	r3, #1
 800829a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800829e:	e051      	b.n	8008344 <HAL_I2C_Init+0x1dc>
 80082a0:	2304      	movs	r3, #4
 80082a2:	e04f      	b.n	8008344 <HAL_I2C_Init+0x1dc>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d111      	bne.n	80082d0 <HAL_I2C_Init+0x168>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1e58      	subs	r0, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6859      	ldr	r1, [r3, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	440b      	add	r3, r1
 80082ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80082be:	3301      	adds	r3, #1
 80082c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bf0c      	ite	eq
 80082c8:	2301      	moveq	r3, #1
 80082ca:	2300      	movne	r3, #0
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	e012      	b.n	80082f6 <HAL_I2C_Init+0x18e>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	1e58      	subs	r0, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6859      	ldr	r1, [r3, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	440b      	add	r3, r1
 80082de:	0099      	lsls	r1, r3, #2
 80082e0:	440b      	add	r3, r1
 80082e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082e6:	3301      	adds	r3, #1
 80082e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	bf0c      	ite	eq
 80082f0:	2301      	moveq	r3, #1
 80082f2:	2300      	movne	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <HAL_I2C_Init+0x196>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e022      	b.n	8008344 <HAL_I2C_Init+0x1dc>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10e      	bne.n	8008324 <HAL_I2C_Init+0x1bc>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	1e58      	subs	r0, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6859      	ldr	r1, [r3, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	440b      	add	r3, r1
 8008314:	fbb0 f3f3 	udiv	r3, r0, r3
 8008318:	3301      	adds	r3, #1
 800831a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800831e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008322:	e00f      	b.n	8008344 <HAL_I2C_Init+0x1dc>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	1e58      	subs	r0, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6859      	ldr	r1, [r3, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	440b      	add	r3, r1
 8008332:	0099      	lsls	r1, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	fbb0 f3f3 	udiv	r3, r0, r3
 800833a:	3301      	adds	r3, #1
 800833c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008340:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	6809      	ldr	r1, [r1, #0]
 8008348:	4313      	orrs	r3, r2
 800834a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69da      	ldr	r2, [r3, #28]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008372:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6911      	ldr	r1, [r2, #16]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	68d2      	ldr	r2, [r2, #12]
 800837e:	4311      	orrs	r1, r2
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6812      	ldr	r2, [r2, #0]
 8008384:	430b      	orrs	r3, r1
 8008386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695a      	ldr	r2, [r3, #20]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0201 	orr.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	000186a0 	.word	0x000186a0
 80083e0:	001e847f 	.word	0x001e847f
 80083e4:	003d08ff 	.word	0x003d08ff
 80083e8:	431bde83 	.word	0x431bde83
 80083ec:	10624dd3 	.word	0x10624dd3

080083f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	607a      	str	r2, [r7, #4]
 80083fa:	461a      	mov	r2, r3
 80083fc:	460b      	mov	r3, r1
 80083fe:	817b      	strh	r3, [r7, #10]
 8008400:	4613      	mov	r3, r2
 8008402:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008404:	f7fe fcc4 	bl	8006d90 <HAL_GetTick>
 8008408:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b20      	cmp	r3, #32
 8008414:	f040 80e0 	bne.w	80085d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	2319      	movs	r3, #25
 800841e:	2201      	movs	r2, #1
 8008420:	4970      	ldr	r1, [pc, #448]	@ (80085e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 ff22 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800842e:	2302      	movs	r3, #2
 8008430:	e0d3      	b.n	80085da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_I2C_Master_Transmit+0x50>
 800843c:	2302      	movs	r3, #2
 800843e:	e0cc      	b.n	80085da <HAL_I2C_Master_Transmit+0x1ea>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b01      	cmp	r3, #1
 8008454:	d007      	beq.n	8008466 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f042 0201 	orr.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008474:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2221      	movs	r2, #33	@ 0x21
 800847a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2210      	movs	r2, #16
 8008482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	893a      	ldrh	r2, [r7, #8]
 8008496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800849c:	b29a      	uxth	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4a50      	ldr	r2, [pc, #320]	@ (80085e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80084a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80084a8:	8979      	ldrh	r1, [r7, #10]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	6a3a      	ldr	r2, [r7, #32]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 fcf6 	bl	8008ea0 <I2C_MasterRequestWrite>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e08d      	b.n	80085da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084be:	2300      	movs	r3, #0
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	613b      	str	r3, [r7, #16]
 80084d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80084d4:	e066      	b.n	80085a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	6a39      	ldr	r1, [r7, #32]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 ffe0 	bl	80094a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00d      	beq.n	8008502 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d107      	bne.n	80084fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e06b      	b.n	80085da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b04      	cmp	r3, #4
 800853e:	d11b      	bne.n	8008578 <HAL_I2C_Master_Transmit+0x188>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008544:	2b00      	cmp	r3, #0
 8008546:	d017      	beq.n	8008578 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	6a39      	ldr	r1, [r7, #32]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 ffd7 	bl	8009530 <I2C_WaitOnBTFFlagUntilTimeout>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00d      	beq.n	80085a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858c:	2b04      	cmp	r3, #4
 800858e:	d107      	bne.n	80085a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800859e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e01a      	b.n	80085da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d194      	bne.n	80084d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2220      	movs	r2, #32
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e000      	b.n	80085da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80085d8:	2302      	movs	r3, #2
  }
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	00100002 	.word	0x00100002
 80085e8:	ffff0000 	.word	0xffff0000

080085ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08c      	sub	sp, #48	@ 0x30
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	607a      	str	r2, [r7, #4]
 80085f6:	461a      	mov	r2, r3
 80085f8:	460b      	mov	r3, r1
 80085fa:	817b      	strh	r3, [r7, #10]
 80085fc:	4613      	mov	r3, r2
 80085fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008600:	f7fe fbc6 	bl	8006d90 <HAL_GetTick>
 8008604:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b20      	cmp	r3, #32
 8008610:	f040 8217 	bne.w	8008a42 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	2319      	movs	r3, #25
 800861a:	2201      	movs	r2, #1
 800861c:	497c      	ldr	r1, [pc, #496]	@ (8008810 <HAL_I2C_Master_Receive+0x224>)
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 fe24 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800862a:	2302      	movs	r3, #2
 800862c:	e20a      	b.n	8008a44 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_I2C_Master_Receive+0x50>
 8008638:	2302      	movs	r3, #2
 800863a:	e203      	b.n	8008a44 <HAL_I2C_Master_Receive+0x458>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b01      	cmp	r3, #1
 8008650:	d007      	beq.n	8008662 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0201 	orr.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008670:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2222      	movs	r2, #34	@ 0x22
 8008676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2210      	movs	r2, #16
 800867e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	893a      	ldrh	r2, [r7, #8]
 8008692:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008698:	b29a      	uxth	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4a5c      	ldr	r2, [pc, #368]	@ (8008814 <HAL_I2C_Master_Receive+0x228>)
 80086a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80086a4:	8979      	ldrh	r1, [r7, #10]
 80086a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 fc7a 	bl	8008fa4 <I2C_MasterRequestRead>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e1c4      	b.n	8008a44 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d113      	bne.n	80086ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086c2:	2300      	movs	r3, #0
 80086c4:	623b      	str	r3, [r7, #32]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	623b      	str	r3, [r7, #32]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	e198      	b.n	8008a1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d11b      	bne.n	800872a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008700:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	e178      	b.n	8008a1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800872e:	2b02      	cmp	r3, #2
 8008730:	d11b      	bne.n	800876a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008740:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008752:	2300      	movs	r3, #0
 8008754:	61bb      	str	r3, [r7, #24]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	61bb      	str	r3, [r7, #24]
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	e158      	b.n	8008a1c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800877a:	2300      	movs	r3, #0
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008790:	e144      	b.n	8008a1c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008796:	2b03      	cmp	r3, #3
 8008798:	f200 80f1 	bhi.w	800897e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d123      	bne.n	80087ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 ff09 	bl	80095c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e145      	b.n	8008a44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c2:	b2d2      	uxtb	r2, r2
 80087c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087d4:	3b01      	subs	r3, #1
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	3b01      	subs	r3, #1
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80087ea:	e117      	b.n	8008a1c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d14e      	bne.n	8008892 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	2200      	movs	r2, #0
 80087fc:	4906      	ldr	r1, [pc, #24]	@ (8008818 <HAL_I2C_Master_Receive+0x22c>)
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 fd34 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d008      	beq.n	800881c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e11a      	b.n	8008a44 <HAL_I2C_Master_Receive+0x458>
 800880e:	bf00      	nop
 8008810:	00100002 	.word	0x00100002
 8008814:	ffff0000 	.word	0xffff0000
 8008818:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800882a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691a      	ldr	r2, [r3, #16]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008886:	b29b      	uxth	r3, r3
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008890:	e0c4      	b.n	8008a1c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008898:	2200      	movs	r2, #0
 800889a:	496c      	ldr	r1, [pc, #432]	@ (8008a4c <HAL_I2C_Master_Receive+0x460>)
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 fce5 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e0cb      	b.n	8008a44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	691a      	ldr	r2, [r3, #16]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088d8:	3b01      	subs	r3, #1
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	2200      	movs	r2, #0
 80088f6:	4955      	ldr	r1, [pc, #340]	@ (8008a4c <HAL_I2C_Master_Receive+0x460>)
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fcb7 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e09d      	b.n	8008a44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008916:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	691a      	ldr	r2, [r3, #16]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	691a      	ldr	r2, [r3, #16]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800897c:	e04e      	b.n	8008a1c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800897e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008980:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 fe1c 	bl	80095c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e058      	b.n	8008a44 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899c:	b2d2      	uxtb	r2, r2
 800899e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ae:	3b01      	subs	r3, #1
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	3b01      	subs	r3, #1
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	d124      	bne.n	8008a1c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d107      	bne.n	80089ea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089e8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f4:	b2d2      	uxtb	r2, r2
 80089f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f47f aeb6 	bne.w	8008792 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e000      	b.n	8008a44 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008a42:	2302      	movs	r3, #2
  }
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3728      	adds	r7, #40	@ 0x28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	00010004 	.word	0x00010004

08008a50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	4608      	mov	r0, r1
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	817b      	strh	r3, [r7, #10]
 8008a62:	460b      	mov	r3, r1
 8008a64:	813b      	strh	r3, [r7, #8]
 8008a66:	4613      	mov	r3, r2
 8008a68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a6a:	f7fe f991 	bl	8006d90 <HAL_GetTick>
 8008a6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	f040 80d9 	bne.w	8008c30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	2319      	movs	r3, #25
 8008a84:	2201      	movs	r2, #1
 8008a86:	496d      	ldr	r1, [pc, #436]	@ (8008c3c <HAL_I2C_Mem_Write+0x1ec>)
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fbef 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008a94:	2302      	movs	r3, #2
 8008a96:	e0cc      	b.n	8008c32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d101      	bne.n	8008aa6 <HAL_I2C_Mem_Write+0x56>
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e0c5      	b.n	8008c32 <HAL_I2C_Mem_Write+0x1e2>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d007      	beq.n	8008acc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ada:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2221      	movs	r2, #33	@ 0x21
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2240      	movs	r2, #64	@ 0x40
 8008ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a3a      	ldr	r2, [r7, #32]
 8008af6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8008c40 <HAL_I2C_Mem_Write+0x1f0>)
 8008b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b0e:	88f8      	ldrh	r0, [r7, #6]
 8008b10:	893a      	ldrh	r2, [r7, #8]
 8008b12:	8979      	ldrh	r1, [r7, #10]
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 fb0e 	bl	8009140 <I2C_RequestMemoryWrite>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d052      	beq.n	8008bd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e081      	b.n	8008c32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 fcb4 	bl	80094a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00d      	beq.n	8008b5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d107      	bne.n	8008b56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e06b      	b.n	8008c32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5e:	781a      	ldrb	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b74:	3b01      	subs	r3, #1
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b01      	subs	r3, #1
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d11b      	bne.n	8008bd0 <HAL_I2C_Mem_Write+0x180>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d017      	beq.n	8008bd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1aa      	bne.n	8008b2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 fca7 	bl	8009530 <I2C_WaitOnBTFFlagUntilTimeout>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00d      	beq.n	8008c04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	d107      	bne.n	8008c00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e016      	b.n	8008c32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e000      	b.n	8008c32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008c30:	2302      	movs	r3, #2
  }
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	00100002 	.word	0x00100002
 8008c40:	ffff0000 	.word	0xffff0000

08008c44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08a      	sub	sp, #40	@ 0x28
 8008c48:	af02      	add	r7, sp, #8
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	607a      	str	r2, [r7, #4]
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	460b      	mov	r3, r1
 8008c52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008c54:	f7fe f89c 	bl	8006d90 <HAL_GetTick>
 8008c58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b20      	cmp	r3, #32
 8008c68:	f040 8111 	bne.w	8008e8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	2319      	movs	r3, #25
 8008c72:	2201      	movs	r2, #1
 8008c74:	4988      	ldr	r1, [pc, #544]	@ (8008e98 <HAL_I2C_IsDeviceReady+0x254>)
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 faf8 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008c82:	2302      	movs	r3, #2
 8008c84:	e104      	b.n	8008e90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_I2C_IsDeviceReady+0x50>
 8008c90:	2302      	movs	r3, #2
 8008c92:	e0fd      	b.n	8008e90 <HAL_I2C_IsDeviceReady+0x24c>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d007      	beq.n	8008cba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f042 0201 	orr.w	r2, r2, #1
 8008cb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008cc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2224      	movs	r2, #36	@ 0x24
 8008cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4a70      	ldr	r2, [pc, #448]	@ (8008e9c <HAL_I2C_IsDeviceReady+0x258>)
 8008cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 fab6 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00d      	beq.n	8008d22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d14:	d103      	bne.n	8008d1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d1c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e0b6      	b.n	8008e90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d22:	897b      	ldrh	r3, [r7, #10]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	461a      	mov	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008d30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008d32:	f7fe f82d 	bl	8006d90 <HAL_GetTick>
 8008d36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	bf0c      	ite	eq
 8008d46:	2301      	moveq	r3, #1
 8008d48:	2300      	movne	r3, #0
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008d66:	e025      	b.n	8008db4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d68:	f7fe f812 	bl	8006d90 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d302      	bcc.n	8008d7e <HAL_I2C_IsDeviceReady+0x13a>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d103      	bne.n	8008d86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	22a0      	movs	r2, #160	@ 0xa0
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	bf0c      	ite	eq
 8008d94:	2301      	moveq	r3, #1
 8008d96:	2300      	movne	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008daa:	bf0c      	ite	eq
 8008dac:	2301      	moveq	r3, #1
 8008dae:	2300      	movne	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2ba0      	cmp	r3, #160	@ 0xa0
 8008dbe:	d005      	beq.n	8008dcc <HAL_I2C_IsDeviceReady+0x188>
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d102      	bne.n	8008dcc <HAL_I2C_IsDeviceReady+0x188>
 8008dc6:	7dbb      	ldrb	r3, [r7, #22]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d0cd      	beq.n	8008d68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d129      	bne.n	8008e36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008df0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	613b      	str	r3, [r7, #16]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	613b      	str	r3, [r7, #16]
 8008e06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	2319      	movs	r3, #25
 8008e0e:	2201      	movs	r2, #1
 8008e10:	4921      	ldr	r1, [pc, #132]	@ (8008e98 <HAL_I2C_IsDeviceReady+0x254>)
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fa2a 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e036      	b.n	8008e90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e02c      	b.n	8008e90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008e4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	2319      	movs	r3, #25
 8008e56:	2201      	movs	r2, #1
 8008e58:	490f      	ldr	r1, [pc, #60]	@ (8008e98 <HAL_I2C_IsDeviceReady+0x254>)
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fa06 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e012      	b.n	8008e90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	f4ff af32 	bcc.w	8008cde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e000      	b.n	8008e90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008e8e:	2302      	movs	r3, #2
  }
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	00100002 	.word	0x00100002
 8008e9c:	ffff0000 	.word	0xffff0000

08008ea0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	607a      	str	r2, [r7, #4]
 8008eaa:	603b      	str	r3, [r7, #0]
 8008eac:	460b      	mov	r3, r1
 8008eae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d006      	beq.n	8008eca <I2C_MasterRequestWrite+0x2a>
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d003      	beq.n	8008eca <I2C_MasterRequestWrite+0x2a>
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ec8:	d108      	bne.n	8008edc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	e00b      	b.n	8008ef4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee0:	2b12      	cmp	r3, #18
 8008ee2:	d107      	bne.n	8008ef4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ef2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f9b3 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00d      	beq.n	8008f28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f1a:	d103      	bne.n	8008f24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e035      	b.n	8008f94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f30:	d108      	bne.n	8008f44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f32:	897b      	ldrh	r3, [r7, #10]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	461a      	mov	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008f40:	611a      	str	r2, [r3, #16]
 8008f42:	e01b      	b.n	8008f7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008f44:	897b      	ldrh	r3, [r7, #10]
 8008f46:	11db      	asrs	r3, r3, #7
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	f003 0306 	and.w	r3, r3, #6
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f063 030f 	orn	r3, r3, #15
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	490e      	ldr	r1, [pc, #56]	@ (8008f9c <I2C_MasterRequestWrite+0xfc>)
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f9fc 	bl	8009360 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e010      	b.n	8008f94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008f72:	897b      	ldrh	r3, [r7, #10]
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4907      	ldr	r1, [pc, #28]	@ (8008fa0 <I2C_MasterRequestWrite+0x100>)
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f9ec 	bl	8009360 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	00010008 	.word	0x00010008
 8008fa0:	00010002 	.word	0x00010002

08008fa4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b088      	sub	sp, #32
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	d006      	beq.n	8008fde <I2C_MasterRequestRead+0x3a>
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d003      	beq.n	8008fde <I2C_MasterRequestRead+0x3a>
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008fdc:	d108      	bne.n	8008ff0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	e00b      	b.n	8009008 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff4:	2b11      	cmp	r3, #17
 8008ff6:	d107      	bne.n	8009008 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 f929 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00d      	beq.n	800903c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800902a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800902e:	d103      	bne.n	8009038 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009036:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e079      	b.n	8009130 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009044:	d108      	bne.n	8009058 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009046:	897b      	ldrh	r3, [r7, #10]
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f043 0301 	orr.w	r3, r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	611a      	str	r2, [r3, #16]
 8009056:	e05f      	b.n	8009118 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009058:	897b      	ldrh	r3, [r7, #10]
 800905a:	11db      	asrs	r3, r3, #7
 800905c:	b2db      	uxtb	r3, r3
 800905e:	f003 0306 	and.w	r3, r3, #6
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f063 030f 	orn	r3, r3, #15
 8009068:	b2da      	uxtb	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	4930      	ldr	r1, [pc, #192]	@ (8009138 <I2C_MasterRequestRead+0x194>)
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f972 	bl	8009360 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e054      	b.n	8009130 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009086:	897b      	ldrh	r3, [r7, #10]
 8009088:	b2da      	uxtb	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	4929      	ldr	r1, [pc, #164]	@ (800913c <I2C_MasterRequestRead+0x198>)
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 f962 	bl	8009360 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e044      	b.n	8009130 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090a6:	2300      	movs	r3, #0
 80090a8:	613b      	str	r3, [r7, #16]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	613b      	str	r3, [r7, #16]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	613b      	str	r3, [r7, #16]
 80090ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f8c7 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00d      	beq.n	8009100 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090f2:	d103      	bne.n	80090fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090fa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e017      	b.n	8009130 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009100:	897b      	ldrh	r3, [r7, #10]
 8009102:	11db      	asrs	r3, r3, #7
 8009104:	b2db      	uxtb	r3, r3
 8009106:	f003 0306 	and.w	r3, r3, #6
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f063 030e 	orn	r3, r3, #14
 8009110:	b2da      	uxtb	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	4907      	ldr	r1, [pc, #28]	@ (800913c <I2C_MasterRequestRead+0x198>)
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 f91e 	bl	8009360 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	00010008 	.word	0x00010008
 800913c:	00010002 	.word	0x00010002

08009140 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af02      	add	r7, sp, #8
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	4608      	mov	r0, r1
 800914a:	4611      	mov	r1, r2
 800914c:	461a      	mov	r2, r3
 800914e:	4603      	mov	r3, r0
 8009150:	817b      	strh	r3, [r7, #10]
 8009152:	460b      	mov	r3, r1
 8009154:	813b      	strh	r3, [r7, #8]
 8009156:	4613      	mov	r3, r2
 8009158:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009168:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	2200      	movs	r2, #0
 8009172:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f878 	bl	800926c <I2C_WaitOnFlagUntilTimeout>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00d      	beq.n	800919e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800918c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009190:	d103      	bne.n	800919a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009198:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e05f      	b.n	800925e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800919e:	897b      	ldrh	r3, [r7, #10]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80091ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	6a3a      	ldr	r2, [r7, #32]
 80091b2:	492d      	ldr	r1, [pc, #180]	@ (8009268 <I2C_RequestMemoryWrite+0x128>)
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f8d3 	bl	8009360 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e04c      	b.n	800925e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091c4:	2300      	movs	r3, #0
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091dc:	6a39      	ldr	r1, [r7, #32]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 f95e 	bl	80094a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00d      	beq.n	8009206 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d107      	bne.n	8009202 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009200:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e02b      	b.n	800925e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d105      	bne.n	8009218 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800920c:	893b      	ldrh	r3, [r7, #8]
 800920e:	b2da      	uxtb	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	611a      	str	r2, [r3, #16]
 8009216:	e021      	b.n	800925c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009218:	893b      	ldrh	r3, [r7, #8]
 800921a:	0a1b      	lsrs	r3, r3, #8
 800921c:	b29b      	uxth	r3, r3
 800921e:	b2da      	uxtb	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009228:	6a39      	ldr	r1, [r7, #32]
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 f938 	bl	80094a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00d      	beq.n	8009252 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923a:	2b04      	cmp	r3, #4
 800923c:	d107      	bne.n	800924e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800924c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e005      	b.n	800925e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009252:	893b      	ldrh	r3, [r7, #8]
 8009254:	b2da      	uxtb	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	00010002 	.word	0x00010002

0800926c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	4613      	mov	r3, r2
 800927a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800927c:	e048      	b.n	8009310 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009284:	d044      	beq.n	8009310 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009286:	f7fd fd83 	bl	8006d90 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	429a      	cmp	r2, r3
 8009294:	d302      	bcc.n	800929c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d139      	bne.n	8009310 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	0c1b      	lsrs	r3, r3, #16
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d10d      	bne.n	80092c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	43da      	mvns	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4013      	ands	r3, r2
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bf0c      	ite	eq
 80092b8:	2301      	moveq	r3, #1
 80092ba:	2300      	movne	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	461a      	mov	r2, r3
 80092c0:	e00c      	b.n	80092dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	43da      	mvns	r2, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	4013      	ands	r3, r2
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	bf0c      	ite	eq
 80092d4:	2301      	moveq	r3, #1
 80092d6:	2300      	movne	r3, #0
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	461a      	mov	r2, r3
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d116      	bne.n	8009310 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fc:	f043 0220 	orr.w	r2, r3, #32
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e023      	b.n	8009358 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	0c1b      	lsrs	r3, r3, #16
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b01      	cmp	r3, #1
 8009318:	d10d      	bne.n	8009336 <I2C_WaitOnFlagUntilTimeout+0xca>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	43da      	mvns	r2, r3
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	4013      	ands	r3, r2
 8009326:	b29b      	uxth	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	bf0c      	ite	eq
 800932c:	2301      	moveq	r3, #1
 800932e:	2300      	movne	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	461a      	mov	r2, r3
 8009334:	e00c      	b.n	8009350 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	43da      	mvns	r2, r3
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4013      	ands	r3, r2
 8009342:	b29b      	uxth	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	bf0c      	ite	eq
 8009348:	2301      	moveq	r3, #1
 800934a:	2300      	movne	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	461a      	mov	r2, r3
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	429a      	cmp	r2, r3
 8009354:	d093      	beq.n	800927e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800936e:	e071      	b.n	8009454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800937a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800937e:	d123      	bne.n	80093c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800938e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b4:	f043 0204 	orr.w	r2, r3, #4
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e067      	b.n	8009498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ce:	d041      	beq.n	8009454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093d0:	f7fd fcde 	bl	8006d90 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d302      	bcc.n	80093e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d136      	bne.n	8009454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	0c1b      	lsrs	r3, r3, #16
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d10c      	bne.n	800940a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	43da      	mvns	r2, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	4013      	ands	r3, r2
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bf14      	ite	ne
 8009402:	2301      	movne	r3, #1
 8009404:	2300      	moveq	r3, #0
 8009406:	b2db      	uxtb	r3, r3
 8009408:	e00b      	b.n	8009422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	43da      	mvns	r2, r3
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	4013      	ands	r3, r2
 8009416:	b29b      	uxth	r3, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	bf14      	ite	ne
 800941c:	2301      	movne	r3, #1
 800941e:	2300      	moveq	r3, #0
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d016      	beq.n	8009454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2220      	movs	r2, #32
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009440:	f043 0220 	orr.w	r2, r3, #32
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e021      	b.n	8009498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	0c1b      	lsrs	r3, r3, #16
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b01      	cmp	r3, #1
 800945c:	d10c      	bne.n	8009478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	43da      	mvns	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	4013      	ands	r3, r2
 800946a:	b29b      	uxth	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	bf14      	ite	ne
 8009470:	2301      	movne	r3, #1
 8009472:	2300      	moveq	r3, #0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	e00b      	b.n	8009490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	43da      	mvns	r2, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4013      	ands	r3, r2
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	bf14      	ite	ne
 800948a:	2301      	movne	r3, #1
 800948c:	2300      	moveq	r3, #0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	f47f af6d 	bne.w	8009370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094ac:	e034      	b.n	8009518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 f8e3 	bl	800967a <I2C_IsAcknowledgeFailed>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e034      	b.n	8009528 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c4:	d028      	beq.n	8009518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094c6:	f7fd fc63 	bl	8006d90 <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d302      	bcc.n	80094dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d11d      	bne.n	8009518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094e6:	2b80      	cmp	r3, #128	@ 0x80
 80094e8:	d016      	beq.n	8009518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009504:	f043 0220 	orr.w	r2, r3, #32
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e007      	b.n	8009528 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009522:	2b80      	cmp	r3, #128	@ 0x80
 8009524:	d1c3      	bne.n	80094ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800953c:	e034      	b.n	80095a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 f89b 	bl	800967a <I2C_IsAcknowledgeFailed>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e034      	b.n	80095b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009554:	d028      	beq.n	80095a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009556:	f7fd fc1b 	bl	8006d90 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	429a      	cmp	r2, r3
 8009564:	d302      	bcc.n	800956c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d11d      	bne.n	80095a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b04      	cmp	r3, #4
 8009578:	d016      	beq.n	80095a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2220      	movs	r2, #32
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009594:	f043 0220 	orr.w	r2, r3, #32
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e007      	b.n	80095b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	f003 0304 	and.w	r3, r3, #4
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d1c3      	bne.n	800953e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80095cc:	e049      	b.n	8009662 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	f003 0310 	and.w	r3, r3, #16
 80095d8:	2b10      	cmp	r3, #16
 80095da:	d119      	bne.n	8009610 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f06f 0210 	mvn.w	r2, #16
 80095e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e030      	b.n	8009672 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009610:	f7fd fbbe 	bl	8006d90 <HAL_GetTick>
 8009614:	4602      	mov	r2, r0
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	429a      	cmp	r2, r3
 800961e:	d302      	bcc.n	8009626 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d11d      	bne.n	8009662 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009630:	2b40      	cmp	r3, #64	@ 0x40
 8009632:	d016      	beq.n	8009662 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2220      	movs	r2, #32
 800963e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964e:	f043 0220 	orr.w	r2, r3, #32
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e007      	b.n	8009672 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800966c:	2b40      	cmp	r3, #64	@ 0x40
 800966e:	d1ae      	bne.n	80095ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800968c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009690:	d11b      	bne.n	80096ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800969a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b6:	f043 0204 	orr.w	r2, r3, #4
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e036      	b.n	8009758 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80096f2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f245 5255 	movw	r2, #21845	@ 0x5555
 80096fc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	6852      	ldr	r2, [r2, #4]
 8009706:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	6892      	ldr	r2, [r2, #8]
 8009710:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009712:	f7fd fb3d 	bl	8006d90 <HAL_GetTick>
 8009716:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009718:	e011      	b.n	800973e <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800971a:	f7fd fb39 	bl	8006d90 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f641 0201 	movw	r2, #6145	@ 0x1801
 8009728:	4293      	cmp	r3, r2
 800972a:	d908      	bls.n	800973e <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e00c      	b.n	8009758 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	f003 0303 	and.w	r3, r3, #3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e6      	bne.n	800971a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8009754:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8009770:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e267      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d075      	beq.n	800988a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800979e:	4b88      	ldr	r3, [pc, #544]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f003 030c 	and.w	r3, r3, #12
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d00c      	beq.n	80097c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097aa:	4b85      	ldr	r3, [pc, #532]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80097b2:	2b08      	cmp	r3, #8
 80097b4:	d112      	bne.n	80097dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097b6:	4b82      	ldr	r3, [pc, #520]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097c2:	d10b      	bne.n	80097dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097c4:	4b7e      	ldr	r3, [pc, #504]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d05b      	beq.n	8009888 <HAL_RCC_OscConfig+0x108>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d157      	bne.n	8009888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e242      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097e4:	d106      	bne.n	80097f4 <HAL_RCC_OscConfig+0x74>
 80097e6:	4b76      	ldr	r3, [pc, #472]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a75      	ldr	r2, [pc, #468]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80097ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e01d      	b.n	8009830 <HAL_RCC_OscConfig+0xb0>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097fc:	d10c      	bne.n	8009818 <HAL_RCC_OscConfig+0x98>
 80097fe:	4b70      	ldr	r3, [pc, #448]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a6f      	ldr	r2, [pc, #444]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 8009804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	4b6d      	ldr	r3, [pc, #436]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a6c      	ldr	r2, [pc, #432]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 8009810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	e00b      	b.n	8009830 <HAL_RCC_OscConfig+0xb0>
 8009818:	4b69      	ldr	r3, [pc, #420]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a68      	ldr	r2, [pc, #416]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 800981e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	4b66      	ldr	r3, [pc, #408]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a65      	ldr	r2, [pc, #404]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 800982a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800982e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d013      	beq.n	8009860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009838:	f7fd faaa 	bl	8006d90 <HAL_GetTick>
 800983c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800983e:	e008      	b.n	8009852 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009840:	f7fd faa6 	bl	8006d90 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b64      	cmp	r3, #100	@ 0x64
 800984c:	d901      	bls.n	8009852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e207      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009852:	4b5b      	ldr	r3, [pc, #364]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0f0      	beq.n	8009840 <HAL_RCC_OscConfig+0xc0>
 800985e:	e014      	b.n	800988a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009860:	f7fd fa96 	bl	8006d90 <HAL_GetTick>
 8009864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009866:	e008      	b.n	800987a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009868:	f7fd fa92 	bl	8006d90 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	2b64      	cmp	r3, #100	@ 0x64
 8009874:	d901      	bls.n	800987a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e1f3      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800987a:	4b51      	ldr	r3, [pc, #324]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1f0      	bne.n	8009868 <HAL_RCC_OscConfig+0xe8>
 8009886:	e000      	b.n	800988a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d063      	beq.n	800995e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009896:	4b4a      	ldr	r3, [pc, #296]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f003 030c 	and.w	r3, r3, #12
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00b      	beq.n	80098ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098a2:	4b47      	ldr	r3, [pc, #284]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80098aa:	2b08      	cmp	r3, #8
 80098ac:	d11c      	bne.n	80098e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098ae:	4b44      	ldr	r3, [pc, #272]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d116      	bne.n	80098e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098ba:	4b41      	ldr	r3, [pc, #260]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <HAL_RCC_OscConfig+0x152>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d001      	beq.n	80098d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e1c7      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098d2:	4b3b      	ldr	r3, [pc, #236]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	4937      	ldr	r1, [pc, #220]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098e6:	e03a      	b.n	800995e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d020      	beq.n	8009932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098f0:	4b34      	ldr	r3, [pc, #208]	@ (80099c4 <HAL_RCC_OscConfig+0x244>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f6:	f7fd fa4b 	bl	8006d90 <HAL_GetTick>
 80098fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098fc:	e008      	b.n	8009910 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098fe:	f7fd fa47 	bl	8006d90 <HAL_GetTick>
 8009902:	4602      	mov	r2, r0
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	2b02      	cmp	r3, #2
 800990a:	d901      	bls.n	8009910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	e1a8      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009910:	4b2b      	ldr	r3, [pc, #172]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0302 	and.w	r3, r3, #2
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0f0      	beq.n	80098fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800991c:	4b28      	ldr	r3, [pc, #160]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	4925      	ldr	r1, [pc, #148]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 800992c:	4313      	orrs	r3, r2
 800992e:	600b      	str	r3, [r1, #0]
 8009930:	e015      	b.n	800995e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009932:	4b24      	ldr	r3, [pc, #144]	@ (80099c4 <HAL_RCC_OscConfig+0x244>)
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009938:	f7fd fa2a 	bl	8006d90 <HAL_GetTick>
 800993c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800993e:	e008      	b.n	8009952 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009940:	f7fd fa26 	bl	8006d90 <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d901      	bls.n	8009952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e187      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009952:	4b1b      	ldr	r3, [pc, #108]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1f0      	bne.n	8009940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0308 	and.w	r3, r3, #8
 8009966:	2b00      	cmp	r3, #0
 8009968:	d036      	beq.n	80099d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d016      	beq.n	80099a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009972:	4b15      	ldr	r3, [pc, #84]	@ (80099c8 <HAL_RCC_OscConfig+0x248>)
 8009974:	2201      	movs	r2, #1
 8009976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009978:	f7fd fa0a 	bl	8006d90 <HAL_GetTick>
 800997c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800997e:	e008      	b.n	8009992 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009980:	f7fd fa06 	bl	8006d90 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	2b02      	cmp	r3, #2
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e167      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009992:	4b0b      	ldr	r3, [pc, #44]	@ (80099c0 <HAL_RCC_OscConfig+0x240>)
 8009994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0f0      	beq.n	8009980 <HAL_RCC_OscConfig+0x200>
 800999e:	e01b      	b.n	80099d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099a0:	4b09      	ldr	r3, [pc, #36]	@ (80099c8 <HAL_RCC_OscConfig+0x248>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099a6:	f7fd f9f3 	bl	8006d90 <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099ac:	e00e      	b.n	80099cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099ae:	f7fd f9ef 	bl	8006d90 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d907      	bls.n	80099cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e150      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
 80099c0:	40023800 	.word	0x40023800
 80099c4:	42470000 	.word	0x42470000
 80099c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099cc:	4b88      	ldr	r3, [pc, #544]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 80099ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099d0:	f003 0302 	and.w	r3, r3, #2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1ea      	bne.n	80099ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 8097 	beq.w	8009b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099e6:	2300      	movs	r3, #0
 80099e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099ea:	4b81      	ldr	r3, [pc, #516]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 80099ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10f      	bne.n	8009a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099f6:	2300      	movs	r3, #0
 80099f8:	60bb      	str	r3, [r7, #8]
 80099fa:	4b7d      	ldr	r3, [pc, #500]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 80099fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099fe:	4a7c      	ldr	r2, [pc, #496]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a06:	4b7a      	ldr	r3, [pc, #488]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a0e:	60bb      	str	r3, [r7, #8]
 8009a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a12:	2301      	movs	r3, #1
 8009a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a16:	4b77      	ldr	r3, [pc, #476]	@ (8009bf4 <HAL_RCC_OscConfig+0x474>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d118      	bne.n	8009a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a22:	4b74      	ldr	r3, [pc, #464]	@ (8009bf4 <HAL_RCC_OscConfig+0x474>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a73      	ldr	r2, [pc, #460]	@ (8009bf4 <HAL_RCC_OscConfig+0x474>)
 8009a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a2e:	f7fd f9af 	bl	8006d90 <HAL_GetTick>
 8009a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a34:	e008      	b.n	8009a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a36:	f7fd f9ab 	bl	8006d90 <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e10c      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a48:	4b6a      	ldr	r3, [pc, #424]	@ (8009bf4 <HAL_RCC_OscConfig+0x474>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0f0      	beq.n	8009a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d106      	bne.n	8009a6a <HAL_RCC_OscConfig+0x2ea>
 8009a5c:	4b64      	ldr	r3, [pc, #400]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a60:	4a63      	ldr	r2, [pc, #396]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a68:	e01c      	b.n	8009aa4 <HAL_RCC_OscConfig+0x324>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	2b05      	cmp	r3, #5
 8009a70:	d10c      	bne.n	8009a8c <HAL_RCC_OscConfig+0x30c>
 8009a72:	4b5f      	ldr	r3, [pc, #380]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a76:	4a5e      	ldr	r2, [pc, #376]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a78:	f043 0304 	orr.w	r3, r3, #4
 8009a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a82:	4a5b      	ldr	r2, [pc, #364]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a84:	f043 0301 	orr.w	r3, r3, #1
 8009a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a8a:	e00b      	b.n	8009aa4 <HAL_RCC_OscConfig+0x324>
 8009a8c:	4b58      	ldr	r3, [pc, #352]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a90:	4a57      	ldr	r2, [pc, #348]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a92:	f023 0301 	bic.w	r3, r3, #1
 8009a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a98:	4b55      	ldr	r3, [pc, #340]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9c:	4a54      	ldr	r2, [pc, #336]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009a9e:	f023 0304 	bic.w	r3, r3, #4
 8009aa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d015      	beq.n	8009ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aac:	f7fd f970 	bl	8006d90 <HAL_GetTick>
 8009ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ab2:	e00a      	b.n	8009aca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ab4:	f7fd f96c 	bl	8006d90 <HAL_GetTick>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d901      	bls.n	8009aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e0cb      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009aca:	4b49      	ldr	r3, [pc, #292]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0ee      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x334>
 8009ad6:	e014      	b.n	8009b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ad8:	f7fd f95a 	bl	8006d90 <HAL_GetTick>
 8009adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ade:	e00a      	b.n	8009af6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ae0:	f7fd f956 	bl	8006d90 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d901      	bls.n	8009af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e0b5      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009af6:	4b3e      	ldr	r3, [pc, #248]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1ee      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d105      	bne.n	8009b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b08:	4b39      	ldr	r3, [pc, #228]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b0c:	4a38      	ldr	r2, [pc, #224]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 80a1 	beq.w	8009c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b1e:	4b34      	ldr	r3, [pc, #208]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	f003 030c 	and.w	r3, r3, #12
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	d05c      	beq.n	8009be4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d141      	bne.n	8009bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b32:	4b31      	ldr	r3, [pc, #196]	@ (8009bf8 <HAL_RCC_OscConfig+0x478>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b38:	f7fd f92a 	bl	8006d90 <HAL_GetTick>
 8009b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b3e:	e008      	b.n	8009b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b40:	f7fd f926 	bl	8006d90 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d901      	bls.n	8009b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e087      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b52:	4b27      	ldr	r3, [pc, #156]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f0      	bne.n	8009b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	69da      	ldr	r2, [r3, #28]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	431a      	orrs	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6c:	019b      	lsls	r3, r3, #6
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b74:	085b      	lsrs	r3, r3, #1
 8009b76:	3b01      	subs	r3, #1
 8009b78:	041b      	lsls	r3, r3, #16
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b80:	061b      	lsls	r3, r3, #24
 8009b82:	491b      	ldr	r1, [pc, #108]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b88:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf8 <HAL_RCC_OscConfig+0x478>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b8e:	f7fd f8ff 	bl	8006d90 <HAL_GetTick>
 8009b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b94:	e008      	b.n	8009ba8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b96:	f7fd f8fb 	bl	8006d90 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d901      	bls.n	8009ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e05c      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ba8:	4b11      	ldr	r3, [pc, #68]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0f0      	beq.n	8009b96 <HAL_RCC_OscConfig+0x416>
 8009bb4:	e054      	b.n	8009c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bb6:	4b10      	ldr	r3, [pc, #64]	@ (8009bf8 <HAL_RCC_OscConfig+0x478>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bbc:	f7fd f8e8 	bl	8006d90 <HAL_GetTick>
 8009bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bc2:	e008      	b.n	8009bd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bc4:	f7fd f8e4 	bl	8006d90 <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d901      	bls.n	8009bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e045      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bd6:	4b06      	ldr	r3, [pc, #24]	@ (8009bf0 <HAL_RCC_OscConfig+0x470>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1f0      	bne.n	8009bc4 <HAL_RCC_OscConfig+0x444>
 8009be2:	e03d      	b.n	8009c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d107      	bne.n	8009bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e038      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
 8009bf0:	40023800 	.word	0x40023800
 8009bf4:	40007000 	.word	0x40007000
 8009bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8009c6c <HAL_RCC_OscConfig+0x4ec>)
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d028      	beq.n	8009c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d121      	bne.n	8009c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d11a      	bne.n	8009c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d111      	bne.n	8009c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	3b01      	subs	r3, #1
 8009c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d107      	bne.n	8009c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d001      	beq.n	8009c60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	40023800 	.word	0x40023800

08009c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e0cc      	b.n	8009e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c84:	4b68      	ldr	r3, [pc, #416]	@ (8009e28 <HAL_RCC_ClockConfig+0x1b8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0307 	and.w	r3, r3, #7
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d90c      	bls.n	8009cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c92:	4b65      	ldr	r3, [pc, #404]	@ (8009e28 <HAL_RCC_ClockConfig+0x1b8>)
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c9a:	4b63      	ldr	r3, [pc, #396]	@ (8009e28 <HAL_RCC_ClockConfig+0x1b8>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0307 	and.w	r3, r3, #7
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d001      	beq.n	8009cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e0b8      	b.n	8009e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0302 	and.w	r3, r3, #2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d020      	beq.n	8009cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d005      	beq.n	8009cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cc4:	4b59      	ldr	r3, [pc, #356]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	4a58      	ldr	r2, [pc, #352]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009cca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009cce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0308 	and.w	r3, r3, #8
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cdc:	4b53      	ldr	r3, [pc, #332]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	4a52      	ldr	r2, [pc, #328]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009ce2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ce8:	4b50      	ldr	r3, [pc, #320]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	494d      	ldr	r1, [pc, #308]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d044      	beq.n	8009d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d107      	bne.n	8009d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d0e:	4b47      	ldr	r3, [pc, #284]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d119      	bne.n	8009d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e07f      	b.n	8009e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d003      	beq.n	8009d2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d107      	bne.n	8009d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d109      	bne.n	8009d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e06f      	b.n	8009e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e067      	b.n	8009e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d4e:	4b37      	ldr	r3, [pc, #220]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f023 0203 	bic.w	r2, r3, #3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	4934      	ldr	r1, [pc, #208]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d60:	f7fd f816 	bl	8006d90 <HAL_GetTick>
 8009d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d66:	e00a      	b.n	8009d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d68:	f7fd f812 	bl	8006d90 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d901      	bls.n	8009d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e04f      	b.n	8009e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f003 020c 	and.w	r2, r3, #12
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d1eb      	bne.n	8009d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d90:	4b25      	ldr	r3, [pc, #148]	@ (8009e28 <HAL_RCC_ClockConfig+0x1b8>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d20c      	bcs.n	8009db8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d9e:	4b22      	ldr	r3, [pc, #136]	@ (8009e28 <HAL_RCC_ClockConfig+0x1b8>)
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009da6:	4b20      	ldr	r3, [pc, #128]	@ (8009e28 <HAL_RCC_ClockConfig+0x1b8>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d001      	beq.n	8009db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e032      	b.n	8009e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d008      	beq.n	8009dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009dc4:	4b19      	ldr	r3, [pc, #100]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	4916      	ldr	r1, [pc, #88]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0308 	and.w	r3, r3, #8
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d009      	beq.n	8009df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009de2:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	490e      	ldr	r1, [pc, #56]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009df6:	f000 f821 	bl	8009e3c <HAL_RCC_GetSysClockFreq>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8009e2c <HAL_RCC_ClockConfig+0x1bc>)
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	091b      	lsrs	r3, r3, #4
 8009e02:	f003 030f 	and.w	r3, r3, #15
 8009e06:	490a      	ldr	r1, [pc, #40]	@ (8009e30 <HAL_RCC_ClockConfig+0x1c0>)
 8009e08:	5ccb      	ldrb	r3, [r1, r3]
 8009e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e0e:	4a09      	ldr	r2, [pc, #36]	@ (8009e34 <HAL_RCC_ClockConfig+0x1c4>)
 8009e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009e12:	4b09      	ldr	r3, [pc, #36]	@ (8009e38 <HAL_RCC_ClockConfig+0x1c8>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fa f8ce 	bl	8003fb8 <HAL_InitTick>

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	40023c00 	.word	0x40023c00
 8009e2c:	40023800 	.word	0x40023800
 8009e30:	080133ac 	.word	0x080133ac
 8009e34:	2000000c 	.word	0x2000000c
 8009e38:	20000070 	.word	0x20000070

08009e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e40:	b090      	sub	sp, #64	@ 0x40
 8009e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e54:	4b59      	ldr	r3, [pc, #356]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f003 030c 	and.w	r3, r3, #12
 8009e5c:	2b08      	cmp	r3, #8
 8009e5e:	d00d      	beq.n	8009e7c <HAL_RCC_GetSysClockFreq+0x40>
 8009e60:	2b08      	cmp	r3, #8
 8009e62:	f200 80a1 	bhi.w	8009fa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <HAL_RCC_GetSysClockFreq+0x34>
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	d003      	beq.n	8009e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8009e6e:	e09b      	b.n	8009fa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e70:	4b53      	ldr	r3, [pc, #332]	@ (8009fc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009e72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009e74:	e09b      	b.n	8009fae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e76:	4b53      	ldr	r3, [pc, #332]	@ (8009fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009e78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009e7a:	e098      	b.n	8009fae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e86:	4b4d      	ldr	r3, [pc, #308]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d028      	beq.n	8009ee4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e92:	4b4a      	ldr	r3, [pc, #296]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	099b      	lsrs	r3, r3, #6
 8009e98:	2200      	movs	r2, #0
 8009e9a:	623b      	str	r3, [r7, #32]
 8009e9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	4b47      	ldr	r3, [pc, #284]	@ (8009fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009ea8:	fb03 f201 	mul.w	r2, r3, r1
 8009eac:	2300      	movs	r3, #0
 8009eae:	fb00 f303 	mul.w	r3, r0, r3
 8009eb2:	4413      	add	r3, r2
 8009eb4:	4a43      	ldr	r2, [pc, #268]	@ (8009fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009eb6:	fba0 1202 	umull	r1, r2, r0, r2
 8009eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ebc:	460a      	mov	r2, r1
 8009ebe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ec2:	4413      	add	r3, r2
 8009ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec8:	2200      	movs	r2, #0
 8009eca:	61bb      	str	r3, [r7, #24]
 8009ecc:	61fa      	str	r2, [r7, #28]
 8009ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ed2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009ed6:	f7f6 fe6f 	bl	8000bb8 <__aeabi_uldivmod>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4613      	mov	r3, r2
 8009ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ee2:	e053      	b.n	8009f8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ee4:	4b35      	ldr	r3, [pc, #212]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	099b      	lsrs	r3, r3, #6
 8009eea:	2200      	movs	r2, #0
 8009eec:	613b      	str	r3, [r7, #16]
 8009eee:	617a      	str	r2, [r7, #20]
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009ef6:	f04f 0b00 	mov.w	fp, #0
 8009efa:	4652      	mov	r2, sl
 8009efc:	465b      	mov	r3, fp
 8009efe:	f04f 0000 	mov.w	r0, #0
 8009f02:	f04f 0100 	mov.w	r1, #0
 8009f06:	0159      	lsls	r1, r3, #5
 8009f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f0c:	0150      	lsls	r0, r2, #5
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	ebb2 080a 	subs.w	r8, r2, sl
 8009f16:	eb63 090b 	sbc.w	r9, r3, fp
 8009f1a:	f04f 0200 	mov.w	r2, #0
 8009f1e:	f04f 0300 	mov.w	r3, #0
 8009f22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009f26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009f2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009f2e:	ebb2 0408 	subs.w	r4, r2, r8
 8009f32:	eb63 0509 	sbc.w	r5, r3, r9
 8009f36:	f04f 0200 	mov.w	r2, #0
 8009f3a:	f04f 0300 	mov.w	r3, #0
 8009f3e:	00eb      	lsls	r3, r5, #3
 8009f40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f44:	00e2      	lsls	r2, r4, #3
 8009f46:	4614      	mov	r4, r2
 8009f48:	461d      	mov	r5, r3
 8009f4a:	eb14 030a 	adds.w	r3, r4, sl
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	eb45 030b 	adc.w	r3, r5, fp
 8009f54:	607b      	str	r3, [r7, #4]
 8009f56:	f04f 0200 	mov.w	r2, #0
 8009f5a:	f04f 0300 	mov.w	r3, #0
 8009f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f62:	4629      	mov	r1, r5
 8009f64:	028b      	lsls	r3, r1, #10
 8009f66:	4621      	mov	r1, r4
 8009f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	028a      	lsls	r2, r1, #10
 8009f70:	4610      	mov	r0, r2
 8009f72:	4619      	mov	r1, r3
 8009f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f76:	2200      	movs	r2, #0
 8009f78:	60bb      	str	r3, [r7, #8]
 8009f7a:	60fa      	str	r2, [r7, #12]
 8009f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f80:	f7f6 fe1a 	bl	8000bb8 <__aeabi_uldivmod>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4613      	mov	r3, r2
 8009f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	0c1b      	lsrs	r3, r3, #16
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	3301      	adds	r3, #1
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009f9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009fa6:	e002      	b.n	8009fae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fa8:	4b05      	ldr	r3, [pc, #20]	@ (8009fc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009faa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3740      	adds	r7, #64	@ 0x40
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fba:	bf00      	nop
 8009fbc:	40023800 	.word	0x40023800
 8009fc0:	00f42400 	.word	0x00f42400
 8009fc4:	017d7840 	.word	0x017d7840

08009fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fcc:	4b03      	ldr	r3, [pc, #12]	@ (8009fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8009fce:	681b      	ldr	r3, [r3, #0]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	2000000c 	.word	0x2000000c

08009fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009fe4:	f7ff fff0 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	4b05      	ldr	r3, [pc, #20]	@ (800a000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	0a9b      	lsrs	r3, r3, #10
 8009ff0:	f003 0307 	and.w	r3, r3, #7
 8009ff4:	4903      	ldr	r1, [pc, #12]	@ (800a004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ff6:	5ccb      	ldrb	r3, [r1, r3]
 8009ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	40023800 	.word	0x40023800
 800a004:	080133bc 	.word	0x080133bc

0800a008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a00c:	f7ff ffdc 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>
 800a010:	4602      	mov	r2, r0
 800a012:	4b05      	ldr	r3, [pc, #20]	@ (800a028 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	0b5b      	lsrs	r3, r3, #13
 800a018:	f003 0307 	and.w	r3, r3, #7
 800a01c:	4903      	ldr	r1, [pc, #12]	@ (800a02c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a01e:	5ccb      	ldrb	r3, [r1, r3]
 800a020:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a024:	4618      	mov	r0, r3
 800a026:	bd80      	pop	{r7, pc}
 800a028:	40023800 	.word	0x40023800
 800a02c:	080133bc 	.word	0x080133bc

0800a030 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	220f      	movs	r2, #15
 800a03e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a040:	4b12      	ldr	r3, [pc, #72]	@ (800a08c <HAL_RCC_GetClockConfig+0x5c>)
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f003 0203 	and.w	r2, r3, #3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a04c:	4b0f      	ldr	r3, [pc, #60]	@ (800a08c <HAL_RCC_GetClockConfig+0x5c>)
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a058:	4b0c      	ldr	r3, [pc, #48]	@ (800a08c <HAL_RCC_GetClockConfig+0x5c>)
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a064:	4b09      	ldr	r3, [pc, #36]	@ (800a08c <HAL_RCC_GetClockConfig+0x5c>)
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	08db      	lsrs	r3, r3, #3
 800a06a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a072:	4b07      	ldr	r3, [pc, #28]	@ (800a090 <HAL_RCC_GetClockConfig+0x60>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0207 	and.w	r2, r3, #7
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	601a      	str	r2, [r3, #0]
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	40023800 	.word	0x40023800
 800a090:	40023c00 	.word	0x40023c00

0800a094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e041      	b.n	800a12a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f839 	bl	800a132 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f000 fb74 	bl	800a7c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a13a:	bf00      	nop
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
	...

0800a148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d001      	beq.n	800a160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e044      	b.n	800a1ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2202      	movs	r2, #2
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 0201 	orr.w	r2, r2, #1
 800a176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a1e      	ldr	r2, [pc, #120]	@ (800a1f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d018      	beq.n	800a1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a18a:	d013      	beq.n	800a1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a1a      	ldr	r2, [pc, #104]	@ (800a1fc <HAL_TIM_Base_Start_IT+0xb4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d00e      	beq.n	800a1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a19      	ldr	r2, [pc, #100]	@ (800a200 <HAL_TIM_Base_Start_IT+0xb8>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d009      	beq.n	800a1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a17      	ldr	r2, [pc, #92]	@ (800a204 <HAL_TIM_Base_Start_IT+0xbc>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d004      	beq.n	800a1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a16      	ldr	r2, [pc, #88]	@ (800a208 <HAL_TIM_Base_Start_IT+0xc0>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d111      	bne.n	800a1d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b06      	cmp	r3, #6
 800a1c4:	d010      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f042 0201 	orr.w	r2, r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1d6:	e007      	b.n	800a1e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f042 0201 	orr.w	r2, r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	40010000 	.word	0x40010000
 800a1fc:	40000400 	.word	0x40000400
 800a200:	40000800 	.word	0x40000800
 800a204:	40000c00 	.word	0x40000c00
 800a208:	40014000 	.word	0x40014000

0800a20c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e041      	b.n	800a2a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a224:	b2db      	uxtb	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7f9 fd96 	bl	8003d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3304      	adds	r3, #4
 800a248:	4619      	mov	r1, r3
 800a24a:	4610      	mov	r0, r2
 800a24c:	f000 fab8 	bl	800a7c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d109      	bne.n	800a2d0 <HAL_TIM_PWM_Start+0x24>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	bf14      	ite	ne
 800a2c8:	2301      	movne	r3, #1
 800a2ca:	2300      	moveq	r3, #0
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	e022      	b.n	800a316 <HAL_TIM_PWM_Start+0x6a>
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d109      	bne.n	800a2ea <HAL_TIM_PWM_Start+0x3e>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	bf14      	ite	ne
 800a2e2:	2301      	movne	r3, #1
 800a2e4:	2300      	moveq	r3, #0
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	e015      	b.n	800a316 <HAL_TIM_PWM_Start+0x6a>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	d109      	bne.n	800a304 <HAL_TIM_PWM_Start+0x58>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	bf14      	ite	ne
 800a2fc:	2301      	movne	r3, #1
 800a2fe:	2300      	moveq	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	e008      	b.n	800a316 <HAL_TIM_PWM_Start+0x6a>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	bf14      	ite	ne
 800a310:	2301      	movne	r3, #1
 800a312:	2300      	moveq	r3, #0
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e068      	b.n	800a3f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d104      	bne.n	800a32e <HAL_TIM_PWM_Start+0x82>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a32c:	e013      	b.n	800a356 <HAL_TIM_PWM_Start+0xaa>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b04      	cmp	r3, #4
 800a332:	d104      	bne.n	800a33e <HAL_TIM_PWM_Start+0x92>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2202      	movs	r2, #2
 800a338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a33c:	e00b      	b.n	800a356 <HAL_TIM_PWM_Start+0xaa>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b08      	cmp	r3, #8
 800a342:	d104      	bne.n	800a34e <HAL_TIM_PWM_Start+0xa2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a34c:	e003      	b.n	800a356 <HAL_TIM_PWM_Start+0xaa>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2202      	movs	r2, #2
 800a352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2201      	movs	r2, #1
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fc40 	bl	800abe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a23      	ldr	r2, [pc, #140]	@ (800a3f8 <HAL_TIM_PWM_Start+0x14c>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d107      	bne.n	800a37e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a37c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f8 <HAL_TIM_PWM_Start+0x14c>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d018      	beq.n	800a3ba <HAL_TIM_PWM_Start+0x10e>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a390:	d013      	beq.n	800a3ba <HAL_TIM_PWM_Start+0x10e>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a19      	ldr	r2, [pc, #100]	@ (800a3fc <HAL_TIM_PWM_Start+0x150>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d00e      	beq.n	800a3ba <HAL_TIM_PWM_Start+0x10e>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a17      	ldr	r2, [pc, #92]	@ (800a400 <HAL_TIM_PWM_Start+0x154>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d009      	beq.n	800a3ba <HAL_TIM_PWM_Start+0x10e>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a16      	ldr	r2, [pc, #88]	@ (800a404 <HAL_TIM_PWM_Start+0x158>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d004      	beq.n	800a3ba <HAL_TIM_PWM_Start+0x10e>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a14      	ldr	r2, [pc, #80]	@ (800a408 <HAL_TIM_PWM_Start+0x15c>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d111      	bne.n	800a3de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f003 0307 	and.w	r3, r3, #7
 800a3c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2b06      	cmp	r3, #6
 800a3ca:	d010      	beq.n	800a3ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f042 0201 	orr.w	r2, r2, #1
 800a3da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3dc:	e007      	b.n	800a3ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f042 0201 	orr.w	r2, r2, #1
 800a3ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	40010000 	.word	0x40010000
 800a3fc:	40000400 	.word	0x40000400
 800a400:	40000800 	.word	0x40000800
 800a404:	40000c00 	.word	0x40000c00
 800a408:	40014000 	.word	0x40014000

0800a40c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f003 0302 	and.w	r3, r3, #2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d020      	beq.n	800a470 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01b      	beq.n	800a470 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f06f 0202 	mvn.w	r2, #2
 800a440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	f003 0303 	and.w	r3, r3, #3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f994 	bl	800a784 <HAL_TIM_IC_CaptureCallback>
 800a45c:	e005      	b.n	800a46a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f986 	bl	800a770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f997 	bl	800a798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f003 0304 	and.w	r3, r3, #4
 800a476:	2b00      	cmp	r3, #0
 800a478:	d020      	beq.n	800a4bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01b      	beq.n	800a4bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f06f 0204 	mvn.w	r2, #4
 800a48c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2202      	movs	r2, #2
 800a492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f96e 	bl	800a784 <HAL_TIM_IC_CaptureCallback>
 800a4a8:	e005      	b.n	800a4b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f960 	bl	800a770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f971 	bl	800a798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d020      	beq.n	800a508 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01b      	beq.n	800a508 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f06f 0208 	mvn.w	r2, #8
 800a4d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2204      	movs	r2, #4
 800a4de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	f003 0303 	and.w	r3, r3, #3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f948 	bl	800a784 <HAL_TIM_IC_CaptureCallback>
 800a4f4:	e005      	b.n	800a502 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f93a 	bl	800a770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f94b 	bl	800a798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f003 0310 	and.w	r3, r3, #16
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d020      	beq.n	800a554 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d01b      	beq.n	800a554 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0210 	mvn.w	r2, #16
 800a524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2208      	movs	r2, #8
 800a52a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f922 	bl	800a784 <HAL_TIM_IC_CaptureCallback>
 800a540:	e005      	b.n	800a54e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f914 	bl	800a770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f925 	bl	800a798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00c      	beq.n	800a578 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	d007      	beq.n	800a578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0201 	mvn.w	r2, #1
 800a570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7f9 f872 	bl	800365c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00c      	beq.n	800a59c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d007      	beq.n	800a59c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fc14 	bl	800adc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00c      	beq.n	800a5c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d007      	beq.n	800a5c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f8f6 	bl	800a7ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00c      	beq.n	800a5e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f003 0320 	and.w	r3, r3, #32
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f06f 0220 	mvn.w	r2, #32
 800a5dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fbe6 	bl	800adb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5e4:	bf00      	nop
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a602:	2b01      	cmp	r3, #1
 800a604:	d101      	bne.n	800a60a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a606:	2302      	movs	r3, #2
 800a608:	e0ae      	b.n	800a768 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b0c      	cmp	r3, #12
 800a616:	f200 809f 	bhi.w	800a758 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a61a:	a201      	add	r2, pc, #4	@ (adr r2, 800a620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a620:	0800a655 	.word	0x0800a655
 800a624:	0800a759 	.word	0x0800a759
 800a628:	0800a759 	.word	0x0800a759
 800a62c:	0800a759 	.word	0x0800a759
 800a630:	0800a695 	.word	0x0800a695
 800a634:	0800a759 	.word	0x0800a759
 800a638:	0800a759 	.word	0x0800a759
 800a63c:	0800a759 	.word	0x0800a759
 800a640:	0800a6d7 	.word	0x0800a6d7
 800a644:	0800a759 	.word	0x0800a759
 800a648:	0800a759 	.word	0x0800a759
 800a64c:	0800a759 	.word	0x0800a759
 800a650:	0800a717 	.word	0x0800a717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68b9      	ldr	r1, [r7, #8]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 f936 	bl	800a8cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	699a      	ldr	r2, [r3, #24]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f042 0208 	orr.w	r2, r2, #8
 800a66e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	699a      	ldr	r2, [r3, #24]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f022 0204 	bic.w	r2, r2, #4
 800a67e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6999      	ldr	r1, [r3, #24]
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	619a      	str	r2, [r3, #24]
      break;
 800a692:	e064      	b.n	800a75e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 f97c 	bl	800a998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	699a      	ldr	r2, [r3, #24]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6999      	ldr	r1, [r3, #24]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	021a      	lsls	r2, r3, #8
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	619a      	str	r2, [r3, #24]
      break;
 800a6d4:	e043      	b.n	800a75e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 f9c7 	bl	800aa70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	69da      	ldr	r2, [r3, #28]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f042 0208 	orr.w	r2, r2, #8
 800a6f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69da      	ldr	r2, [r3, #28]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 0204 	bic.w	r2, r2, #4
 800a700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	69d9      	ldr	r1, [r3, #28]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	691a      	ldr	r2, [r3, #16]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	61da      	str	r2, [r3, #28]
      break;
 800a714:	e023      	b.n	800a75e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68b9      	ldr	r1, [r7, #8]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 fa11 	bl	800ab44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	69da      	ldr	r2, [r3, #28]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	69da      	ldr	r2, [r3, #28]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	69d9      	ldr	r1, [r3, #28]
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	021a      	lsls	r2, r3, #8
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	61da      	str	r2, [r3, #28]
      break;
 800a756:	e002      	b.n	800a75e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	75fb      	strb	r3, [r7, #23]
      break;
 800a75c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a766:	7dfb      	ldrb	r3, [r7, #23]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3718      	adds	r7, #24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a37      	ldr	r2, [pc, #220]	@ (800a8b0 <TIM_Base_SetConfig+0xf0>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00f      	beq.n	800a7f8 <TIM_Base_SetConfig+0x38>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7de:	d00b      	beq.n	800a7f8 <TIM_Base_SetConfig+0x38>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a34      	ldr	r2, [pc, #208]	@ (800a8b4 <TIM_Base_SetConfig+0xf4>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d007      	beq.n	800a7f8 <TIM_Base_SetConfig+0x38>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a33      	ldr	r2, [pc, #204]	@ (800a8b8 <TIM_Base_SetConfig+0xf8>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d003      	beq.n	800a7f8 <TIM_Base_SetConfig+0x38>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a32      	ldr	r2, [pc, #200]	@ (800a8bc <TIM_Base_SetConfig+0xfc>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d108      	bne.n	800a80a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a28      	ldr	r2, [pc, #160]	@ (800a8b0 <TIM_Base_SetConfig+0xf0>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d01b      	beq.n	800a84a <TIM_Base_SetConfig+0x8a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a818:	d017      	beq.n	800a84a <TIM_Base_SetConfig+0x8a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a25      	ldr	r2, [pc, #148]	@ (800a8b4 <TIM_Base_SetConfig+0xf4>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d013      	beq.n	800a84a <TIM_Base_SetConfig+0x8a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a24      	ldr	r2, [pc, #144]	@ (800a8b8 <TIM_Base_SetConfig+0xf8>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d00f      	beq.n	800a84a <TIM_Base_SetConfig+0x8a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a23      	ldr	r2, [pc, #140]	@ (800a8bc <TIM_Base_SetConfig+0xfc>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00b      	beq.n	800a84a <TIM_Base_SetConfig+0x8a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a22      	ldr	r2, [pc, #136]	@ (800a8c0 <TIM_Base_SetConfig+0x100>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d007      	beq.n	800a84a <TIM_Base_SetConfig+0x8a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a21      	ldr	r2, [pc, #132]	@ (800a8c4 <TIM_Base_SetConfig+0x104>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d003      	beq.n	800a84a <TIM_Base_SetConfig+0x8a>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a20      	ldr	r2, [pc, #128]	@ (800a8c8 <TIM_Base_SetConfig+0x108>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d108      	bne.n	800a85c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	4313      	orrs	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	4313      	orrs	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	689a      	ldr	r2, [r3, #8]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a0c      	ldr	r2, [pc, #48]	@ (800a8b0 <TIM_Base_SetConfig+0xf0>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d103      	bne.n	800a88a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	691a      	ldr	r2, [r3, #16]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f043 0204 	orr.w	r2, r3, #4
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	601a      	str	r2, [r3, #0]
}
 800a8a2:	bf00      	nop
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	40010000 	.word	0x40010000
 800a8b4:	40000400 	.word	0x40000400
 800a8b8:	40000800 	.word	0x40000800
 800a8bc:	40000c00 	.word	0x40000c00
 800a8c0:	40014000 	.word	0x40014000
 800a8c4:	40014400 	.word	0x40014400
 800a8c8:	40014800 	.word	0x40014800

0800a8cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a1b      	ldr	r3, [r3, #32]
 800a8e0:	f023 0201 	bic.w	r2, r3, #1
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f023 0302 	bic.w	r3, r3, #2
 800a914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a1c      	ldr	r2, [pc, #112]	@ (800a994 <TIM_OC1_SetConfig+0xc8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d10c      	bne.n	800a942 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f023 0308 	bic.w	r3, r3, #8
 800a92e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	4313      	orrs	r3, r2
 800a938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f023 0304 	bic.w	r3, r3, #4
 800a940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a13      	ldr	r2, [pc, #76]	@ (800a994 <TIM_OC1_SetConfig+0xc8>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d111      	bne.n	800a96e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	4313      	orrs	r3, r2
 800a962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	621a      	str	r2, [r3, #32]
}
 800a988:	bf00      	nop
 800a98a:	371c      	adds	r7, #28
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	40010000 	.word	0x40010000

0800a998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	f023 0210 	bic.w	r2, r3, #16
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f023 0320 	bic.w	r3, r3, #32
 800a9e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	011b      	lsls	r3, r3, #4
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a1e      	ldr	r2, [pc, #120]	@ (800aa6c <TIM_OC2_SetConfig+0xd4>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d10d      	bne.n	800aa14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	011b      	lsls	r3, r3, #4
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a15      	ldr	r2, [pc, #84]	@ (800aa6c <TIM_OC2_SetConfig+0xd4>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d113      	bne.n	800aa44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	621a      	str	r2, [r3, #32]
}
 800aa5e:	bf00      	nop
 800aa60:	371c      	adds	r7, #28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	40010000 	.word	0x40010000

0800aa70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a1b      	ldr	r3, [r3, #32]
 800aa84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	69db      	ldr	r3, [r3, #28]
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f023 0303 	bic.w	r3, r3, #3
 800aaa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	021b      	lsls	r3, r3, #8
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab40 <TIM_OC3_SetConfig+0xd0>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d10d      	bne.n	800aaea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	021b      	lsls	r3, r3, #8
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	4313      	orrs	r3, r2
 800aae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a14      	ldr	r2, [pc, #80]	@ (800ab40 <TIM_OC3_SetConfig+0xd0>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d113      	bne.n	800ab1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aaf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	011b      	lsls	r3, r3, #4
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	621a      	str	r2, [r3, #32]
}
 800ab34:	bf00      	nop
 800ab36:	371c      	adds	r7, #28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	40010000 	.word	0x40010000

0800ab44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a1b      	ldr	r3, [r3, #32]
 800ab58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	021b      	lsls	r3, r3, #8
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	031b      	lsls	r3, r3, #12
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a10      	ldr	r2, [pc, #64]	@ (800abe0 <TIM_OC4_SetConfig+0x9c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d109      	bne.n	800abb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	019b      	lsls	r3, r3, #6
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	621a      	str	r2, [r3, #32]
}
 800abd2:	bf00      	nop
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	40010000 	.word	0x40010000

0800abe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f003 031f 	and.w	r3, r3, #31
 800abf6:	2201      	movs	r2, #1
 800abf8:	fa02 f303 	lsl.w	r3, r2, r3
 800abfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6a1a      	ldr	r2, [r3, #32]
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	43db      	mvns	r3, r3
 800ac06:	401a      	ands	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a1a      	ldr	r2, [r3, #32]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f003 031f 	and.w	r3, r3, #31
 800ac16:	6879      	ldr	r1, [r7, #4]
 800ac18:	fa01 f303 	lsl.w	r3, r1, r3
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	621a      	str	r2, [r3, #32]
}
 800ac22:	bf00      	nop
 800ac24:	371c      	adds	r7, #28
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
	...

0800ac30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d101      	bne.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac44:	2302      	movs	r3, #2
 800ac46:	e050      	b.n	800acea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a1c      	ldr	r2, [pc, #112]	@ (800acf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d018      	beq.n	800acbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac94:	d013      	beq.n	800acbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a18      	ldr	r2, [pc, #96]	@ (800acfc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d00e      	beq.n	800acbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a16      	ldr	r2, [pc, #88]	@ (800ad00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d009      	beq.n	800acbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a15      	ldr	r2, [pc, #84]	@ (800ad04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d004      	beq.n	800acbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a13      	ldr	r2, [pc, #76]	@ (800ad08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d10c      	bne.n	800acd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	4313      	orrs	r3, r2
 800acce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	40010000 	.word	0x40010000
 800acfc:	40000400 	.word	0x40000400
 800ad00:	40000800 	.word	0x40000800
 800ad04:	40000c00 	.word	0x40000c00
 800ad08:	40014000 	.word	0x40014000

0800ad0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d101      	bne.n	800ad28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad24:	2302      	movs	r3, #2
 800ad26:	e03d      	b.n	800ada4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d101      	bne.n	800adea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e042      	b.n	800ae70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d106      	bne.n	800ae04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7f9 f848 	bl	8003e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2224      	movs	r2, #36	@ 0x24
 800ae08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68da      	ldr	r2, [r3, #12]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 ff23 	bl	800bc68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	691a      	ldr	r2, [r3, #16]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	695a      	ldr	r2, [r3, #20]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68da      	ldr	r2, [r3, #12]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2220      	movs	r2, #32
 800ae64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	4613      	mov	r3, r2
 800ae84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b20      	cmp	r3, #32
 800ae90:	d112      	bne.n	800aeb8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <HAL_UART_Receive_DMA+0x26>
 800ae98:	88fb      	ldrh	r3, [r7, #6]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e00b      	b.n	800aeba <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aea8:	88fb      	ldrh	r3, [r7, #6]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 fc72 	bl	800b798 <UART_Start_Receive_DMA>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	e000      	b.n	800aeba <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800aeb8:	2302      	movs	r3, #2
  }
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b09a      	sub	sp, #104	@ 0x68
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	330c      	adds	r3, #12
 800aed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aed4:	e853 3f00 	ldrex	r3, [r3]
 800aed8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aeda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aedc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aee0:	667b      	str	r3, [r7, #100]	@ 0x64
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	330c      	adds	r3, #12
 800aee8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aeea:	657a      	str	r2, [r7, #84]	@ 0x54
 800aeec:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aef0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aef2:	e841 2300 	strex	r3, r2, [r1]
 800aef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1e5      	bne.n	800aeca <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3314      	adds	r3, #20
 800af04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af08:	e853 3f00 	ldrex	r3, [r3]
 800af0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	f023 0301 	bic.w	r3, r3, #1
 800af14:	663b      	str	r3, [r7, #96]	@ 0x60
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3314      	adds	r3, #20
 800af1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af1e:	643a      	str	r2, [r7, #64]	@ 0x40
 800af20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af26:	e841 2300 	strex	r3, r2, [r1]
 800af2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1e5      	bne.n	800aefe <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af36:	2b01      	cmp	r3, #1
 800af38:	d119      	bne.n	800af6e <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	330c      	adds	r3, #12
 800af40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	e853 3f00 	ldrex	r3, [r3]
 800af48:	61fb      	str	r3, [r7, #28]
   return(result);
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	f023 0310 	bic.w	r3, r3, #16
 800af50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	330c      	adds	r3, #12
 800af58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800af5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af62:	e841 2300 	strex	r3, r2, [r1]
 800af66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1e5      	bne.n	800af3a <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af78:	2b40      	cmp	r3, #64	@ 0x40
 800af7a:	d136      	bne.n	800afea <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3314      	adds	r3, #20
 800af82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	e853 3f00 	ldrex	r3, [r3]
 800af8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af92:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3314      	adds	r3, #20
 800af9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af9c:	61ba      	str	r2, [r7, #24]
 800af9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	6979      	ldr	r1, [r7, #20]
 800afa2:	69ba      	ldr	r2, [r7, #24]
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	613b      	str	r3, [r7, #16]
   return(result);
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e5      	bne.n	800af7c <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d018      	beq.n	800afea <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afbc:	2200      	movs	r2, #0
 800afbe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fc f8fb 	bl	80071c0 <HAL_DMA_Abort>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00c      	beq.n	800afea <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fc fb0f 	bl	80075f8 <HAL_DMA_GetError>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b20      	cmp	r3, #32
 800afde:	d104      	bne.n	800afea <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2210      	movs	r2, #16
 800afe4:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e00a      	b.n	800b000 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2220      	movs	r2, #32
 800aff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3768      	adds	r7, #104	@ 0x68
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b0ba      	sub	sp, #232	@ 0xe8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b02e:	2300      	movs	r3, #0
 800b030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b034:	2300      	movs	r3, #0
 800b036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b03e:	f003 030f 	and.w	r3, r3, #15
 800b042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10f      	bne.n	800b06e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b04e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b052:	f003 0320 	and.w	r3, r3, #32
 800b056:	2b00      	cmp	r3, #0
 800b058:	d009      	beq.n	800b06e <HAL_UART_IRQHandler+0x66>
 800b05a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b05e:	f003 0320 	and.w	r3, r3, #32
 800b062:	2b00      	cmp	r3, #0
 800b064:	d003      	beq.n	800b06e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fd40 	bl	800baec <UART_Receive_IT>
      return;
 800b06c:	e273      	b.n	800b556 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b06e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 80de 	beq.w	800b234 <HAL_UART_IRQHandler+0x22c>
 800b078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	d106      	bne.n	800b092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b088:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 80d1 	beq.w	800b234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00b      	beq.n	800b0b6 <HAL_UART_IRQHandler+0xae>
 800b09e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d005      	beq.n	800b0b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ae:	f043 0201 	orr.w	r2, r3, #1
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0ba:	f003 0304 	and.w	r3, r3, #4
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00b      	beq.n	800b0da <HAL_UART_IRQHandler+0xd2>
 800b0c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0c6:	f003 0301 	and.w	r3, r3, #1
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d005      	beq.n	800b0da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d2:	f043 0202 	orr.w	r2, r3, #2
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0de:	f003 0302 	and.w	r3, r3, #2
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00b      	beq.n	800b0fe <HAL_UART_IRQHandler+0xf6>
 800b0e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d005      	beq.n	800b0fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0f6:	f043 0204 	orr.w	r2, r3, #4
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b102:	f003 0308 	and.w	r3, r3, #8
 800b106:	2b00      	cmp	r3, #0
 800b108:	d011      	beq.n	800b12e <HAL_UART_IRQHandler+0x126>
 800b10a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b10e:	f003 0320 	and.w	r3, r3, #32
 800b112:	2b00      	cmp	r3, #0
 800b114:	d105      	bne.n	800b122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b126:	f043 0208 	orr.w	r2, r3, #8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 820a 	beq.w	800b54c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b13c:	f003 0320 	and.w	r3, r3, #32
 800b140:	2b00      	cmp	r3, #0
 800b142:	d008      	beq.n	800b156 <HAL_UART_IRQHandler+0x14e>
 800b144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b148:	f003 0320 	and.w	r3, r3, #32
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fccb 	bl	800baec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	695b      	ldr	r3, [r3, #20]
 800b15c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b160:	2b40      	cmp	r3, #64	@ 0x40
 800b162:	bf0c      	ite	eq
 800b164:	2301      	moveq	r3, #1
 800b166:	2300      	movne	r3, #0
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b172:	f003 0308 	and.w	r3, r3, #8
 800b176:	2b00      	cmp	r3, #0
 800b178:	d103      	bne.n	800b182 <HAL_UART_IRQHandler+0x17a>
 800b17a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d04f      	beq.n	800b222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fbd6 	bl	800b934 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b192:	2b40      	cmp	r3, #64	@ 0x40
 800b194:	d141      	bne.n	800b21a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3314      	adds	r3, #20
 800b19c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b1ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b1b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3314      	adds	r3, #20
 800b1be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b1c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b1c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b1ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b1d2:	e841 2300 	strex	r3, r2, [r1]
 800b1d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b1da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1d9      	bne.n	800b196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d013      	beq.n	800b212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ee:	4a8a      	ldr	r2, [pc, #552]	@ (800b418 <HAL_UART_IRQHandler+0x410>)
 800b1f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fc f852 	bl	80072a0 <HAL_DMA_Abort_IT>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d016      	beq.n	800b230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b20c:	4610      	mov	r0, r2
 800b20e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b210:	e00e      	b.n	800b230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7f7 fb32 	bl	800287c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b218:	e00a      	b.n	800b230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7f7 fb2e 	bl	800287c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b220:	e006      	b.n	800b230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7f7 fb2a 	bl	800287c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b22e:	e18d      	b.n	800b54c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b230:	bf00      	nop
    return;
 800b232:	e18b      	b.n	800b54c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b238:	2b01      	cmp	r3, #1
 800b23a:	f040 8167 	bne.w	800b50c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b242:	f003 0310 	and.w	r3, r3, #16
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 8160 	beq.w	800b50c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b250:	f003 0310 	and.w	r3, r3, #16
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 8159 	beq.w	800b50c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b25a:	2300      	movs	r3, #0
 800b25c:	60bb      	str	r3, [r7, #8]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	60bb      	str	r3, [r7, #8]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	60bb      	str	r3, [r7, #8]
 800b26e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	695b      	ldr	r3, [r3, #20]
 800b276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b27a:	2b40      	cmp	r3, #64	@ 0x40
 800b27c:	f040 80ce 	bne.w	800b41c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b28c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 80a9 	beq.w	800b3e8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b29a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	f080 80a2 	bcs.w	800b3e8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2b6:	f000 8088 	beq.w	800b3ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	330c      	adds	r3, #12
 800b2c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2c8:	e853 3f00 	ldrex	r3, [r3]
 800b2cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b2d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b2e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b2ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b2f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b2fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1d9      	bne.n	800b2ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3314      	adds	r3, #20
 800b30c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b310:	e853 3f00 	ldrex	r3, [r3]
 800b314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b318:	f023 0301 	bic.w	r3, r3, #1
 800b31c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3314      	adds	r3, #20
 800b326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b32a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b32e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b33c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e1      	bne.n	800b306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3314      	adds	r3, #20
 800b348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b34c:	e853 3f00 	ldrex	r3, [r3]
 800b350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3314      	adds	r3, #20
 800b362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b36c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b36e:	e841 2300 	strex	r3, r2, [r1]
 800b372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1e3      	bne.n	800b342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2220      	movs	r2, #32
 800b37e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	330c      	adds	r3, #12
 800b38e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b392:	e853 3f00 	ldrex	r3, [r3]
 800b396:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b39a:	f023 0310 	bic.w	r3, r3, #16
 800b39e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	330c      	adds	r3, #12
 800b3a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b3ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b3ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3b4:	e841 2300 	strex	r3, r2, [r1]
 800b3b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b3ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e3      	bne.n	800b388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fb fefb 	bl	80071c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f8cf 	bl	800b584 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b3e6:	e0b3      	b.n	800b550 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b3ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	f040 80ad 	bne.w	800b550 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3fa:	69db      	ldr	r3, [r3, #28]
 800b3fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b400:	f040 80a6 	bne.w	800b550 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2202      	movs	r2, #2
 800b408:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f8b7 	bl	800b584 <HAL_UARTEx_RxEventCallback>
      return;
 800b416:	e09b      	b.n	800b550 <HAL_UART_IRQHandler+0x548>
 800b418:	0800b9fb 	.word	0x0800b9fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b424:	b29b      	uxth	r3, r3
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b430:	b29b      	uxth	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 808e 	beq.w	800b554 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 8089 	beq.w	800b554 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	330c      	adds	r3, #12
 800b448:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44c:	e853 3f00 	ldrex	r3, [r3]
 800b450:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b458:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	330c      	adds	r3, #12
 800b462:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b466:	647a      	str	r2, [r7, #68]	@ 0x44
 800b468:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b46c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b46e:	e841 2300 	strex	r3, r2, [r1]
 800b472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1e3      	bne.n	800b442 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3314      	adds	r3, #20
 800b480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	623b      	str	r3, [r7, #32]
   return(result);
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3314      	adds	r3, #20
 800b49a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b49e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e3      	bne.n	800b47a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	e853 3f00 	ldrex	r3, [r3]
 800b4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f023 0310 	bic.w	r3, r3, #16
 800b4d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	330c      	adds	r3, #12
 800b4e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b4e4:	61fa      	str	r2, [r7, #28]
 800b4e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	69b9      	ldr	r1, [r7, #24]
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	e841 2300 	strex	r3, r2, [r1]
 800b4f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e3      	bne.n	800b4c0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f83d 	bl	800b584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b50a:	e023      	b.n	800b554 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b514:	2b00      	cmp	r3, #0
 800b516:	d009      	beq.n	800b52c <HAL_UART_IRQHandler+0x524>
 800b518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b51c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b520:	2b00      	cmp	r3, #0
 800b522:	d003      	beq.n	800b52c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fa79 	bl	800ba1c <UART_Transmit_IT>
    return;
 800b52a:	e014      	b.n	800b556 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00e      	beq.n	800b556 <HAL_UART_IRQHandler+0x54e>
 800b538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b540:	2b00      	cmp	r3, #0
 800b542:	d008      	beq.n	800b556 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fab9 	bl	800babc <UART_EndTransmit_IT>
    return;
 800b54a:	e004      	b.n	800b556 <HAL_UART_IRQHandler+0x54e>
    return;
 800b54c:	bf00      	nop
 800b54e:	e002      	b.n	800b556 <HAL_UART_IRQHandler+0x54e>
      return;
 800b550:	bf00      	nop
 800b552:	e000      	b.n	800b556 <HAL_UART_IRQHandler+0x54e>
      return;
 800b554:	bf00      	nop
  }
}
 800b556:	37e8      	adds	r7, #232	@ 0xe8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b09c      	sub	sp, #112	@ 0x70
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5a8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d172      	bne.n	800b69e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b5b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	330c      	adds	r3, #12
 800b5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	330c      	adds	r3, #12
 800b5dc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b5de:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b5e0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5e6:	e841 2300 	strex	r3, r2, [r1]
 800b5ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e5      	bne.n	800b5be <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3314      	adds	r3, #20
 800b5f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b604:	f023 0301 	bic.w	r3, r3, #1
 800b608:	667b      	str	r3, [r7, #100]	@ 0x64
 800b60a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3314      	adds	r3, #20
 800b610:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b612:	647a      	str	r2, [r7, #68]	@ 0x44
 800b614:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b616:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b61a:	e841 2300 	strex	r3, r2, [r1]
 800b61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e5      	bne.n	800b5f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3314      	adds	r3, #20
 800b62c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b630:	e853 3f00 	ldrex	r3, [r3]
 800b634:	623b      	str	r3, [r7, #32]
   return(result);
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b63c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b63e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3314      	adds	r3, #20
 800b644:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b646:	633a      	str	r2, [r7, #48]	@ 0x30
 800b648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b64c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b64e:	e841 2300 	strex	r3, r2, [r1]
 800b652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1e5      	bne.n	800b626 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b65a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b65c:	2220      	movs	r2, #32
 800b65e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b666:	2b01      	cmp	r3, #1
 800b668:	d119      	bne.n	800b69e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b66a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	330c      	adds	r3, #12
 800b670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	e853 3f00 	ldrex	r3, [r3]
 800b678:	60fb      	str	r3, [r7, #12]
   return(result);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f023 0310 	bic.w	r3, r3, #16
 800b680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	330c      	adds	r3, #12
 800b688:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b68a:	61fa      	str	r2, [r7, #28]
 800b68c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	69b9      	ldr	r1, [r7, #24]
 800b690:	69fa      	ldr	r2, [r7, #28]
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	617b      	str	r3, [r7, #20]
   return(result);
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1e5      	bne.n	800b66a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b69e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d106      	bne.n	800b6ba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6b4:	f7ff ff66 	bl	800b584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6b8:	e002      	b.n	800b6c0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b6ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6bc:	f7f7 f870 	bl	80027a0 <HAL_UART_RxCpltCallback>
}
 800b6c0:	bf00      	nop
 800b6c2:	3770      	adds	r7, #112	@ 0x70
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d108      	bne.n	800b6f6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6e8:	085b      	lsrs	r3, r3, #1
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff ff48 	bl	800b584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6f4:	e002      	b.n	800b6fc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f7ff ff3a 	bl	800b570 <HAL_UART_RxHalfCpltCallback>
}
 800b6fc:	bf00      	nop
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b714:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b720:	2b80      	cmp	r3, #128	@ 0x80
 800b722:	bf0c      	ite	eq
 800b724:	2301      	moveq	r3, #1
 800b726:	2300      	movne	r3, #0
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b21      	cmp	r3, #33	@ 0x21
 800b736:	d108      	bne.n	800b74a <UART_DMAError+0x46>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d005      	beq.n	800b74a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2200      	movs	r2, #0
 800b742:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b744:	68b8      	ldr	r0, [r7, #8]
 800b746:	f000 f8cd 	bl	800b8e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b754:	2b40      	cmp	r3, #64	@ 0x40
 800b756:	bf0c      	ite	eq
 800b758:	2301      	moveq	r3, #1
 800b75a:	2300      	movne	r3, #0
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b766:	b2db      	uxtb	r3, r3
 800b768:	2b22      	cmp	r3, #34	@ 0x22
 800b76a:	d108      	bne.n	800b77e <UART_DMAError+0x7a>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d005      	beq.n	800b77e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2200      	movs	r2, #0
 800b776:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b778:	68b8      	ldr	r0, [r7, #8]
 800b77a:	f000 f8db 	bl	800b934 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b782:	f043 0210 	orr.w	r2, r3, #16
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b78a:	68b8      	ldr	r0, [r7, #8]
 800b78c:	f7f7 f876 	bl	800287c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b790:	bf00      	nop
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b098      	sub	sp, #96	@ 0x60
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	88fa      	ldrh	r2, [r7, #6]
 800b7b0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2222      	movs	r2, #34	@ 0x22
 800b7bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7c4:	4a44      	ldr	r2, [pc, #272]	@ (800b8d8 <UART_Start_Receive_DMA+0x140>)
 800b7c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7cc:	4a43      	ldr	r2, [pc, #268]	@ (800b8dc <UART_Start_Receive_DMA+0x144>)
 800b7ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7d4:	4a42      	ldr	r2, [pc, #264]	@ (800b8e0 <UART_Start_Receive_DMA+0x148>)
 800b7d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7dc:	2200      	movs	r2, #0
 800b7de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b7e0:	f107 0308 	add.w	r3, r7, #8
 800b7e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	88fb      	ldrh	r3, [r7, #6]
 800b7f8:	f7fb fc8a 	bl	8007110 <HAL_DMA_Start_IT>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d008      	beq.n	800b814 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2210      	movs	r2, #16
 800b806:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2220      	movs	r2, #32
 800b80c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	e05d      	b.n	800b8d0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b814:	2300      	movs	r3, #0
 800b816:	613b      	str	r3, [r7, #16]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	613b      	str	r3, [r7, #16]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	613b      	str	r3, [r7, #16]
 800b828:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d019      	beq.n	800b866 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	330c      	adds	r3, #12
 800b838:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b83c:	e853 3f00 	ldrex	r3, [r3]
 800b840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	330c      	adds	r3, #12
 800b850:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b852:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b854:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b858:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e5      	bne.n	800b832 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3314      	adds	r3, #20
 800b86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b878:	f043 0301 	orr.w	r3, r3, #1
 800b87c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3314      	adds	r3, #20
 800b884:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b886:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b888:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b88c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b88e:	e841 2300 	strex	r3, r2, [r1]
 800b892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1e5      	bne.n	800b866 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3314      	adds	r3, #20
 800b8a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	e853 3f00 	ldrex	r3, [r3]
 800b8a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3314      	adds	r3, #20
 800b8b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800b8bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8be:	6a39      	ldr	r1, [r7, #32]
 800b8c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8c2:	e841 2300 	strex	r3, r2, [r1]
 800b8c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e5      	bne.n	800b89a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3760      	adds	r7, #96	@ 0x60
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	0800b59d 	.word	0x0800b59d
 800b8dc:	0800b6c9 	.word	0x0800b6c9
 800b8e0:	0800b705 	.word	0x0800b705

0800b8e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b089      	sub	sp, #36	@ 0x24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	330c      	adds	r3, #12
 800b8f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	e853 3f00 	ldrex	r3, [r3]
 800b8fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b902:	61fb      	str	r3, [r7, #28]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	330c      	adds	r3, #12
 800b90a:	69fa      	ldr	r2, [r7, #28]
 800b90c:	61ba      	str	r2, [r7, #24]
 800b90e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	6979      	ldr	r1, [r7, #20]
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	613b      	str	r3, [r7, #16]
   return(result);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e5      	bne.n	800b8ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2220      	movs	r2, #32
 800b924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b928:	bf00      	nop
 800b92a:	3724      	adds	r7, #36	@ 0x24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b934:	b480      	push	{r7}
 800b936:	b095      	sub	sp, #84	@ 0x54
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	330c      	adds	r3, #12
 800b942:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b946:	e853 3f00 	ldrex	r3, [r3]
 800b94a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	330c      	adds	r3, #12
 800b95a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b95c:	643a      	str	r2, [r7, #64]	@ 0x40
 800b95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b960:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b964:	e841 2300 	strex	r3, r2, [r1]
 800b968:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1e5      	bne.n	800b93c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3314      	adds	r3, #20
 800b976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b978:	6a3b      	ldr	r3, [r7, #32]
 800b97a:	e853 3f00 	ldrex	r3, [r3]
 800b97e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	f023 0301 	bic.w	r3, r3, #1
 800b986:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3314      	adds	r3, #20
 800b98e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b990:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b998:	e841 2300 	strex	r3, r2, [r1]
 800b99c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1e5      	bne.n	800b970 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d119      	bne.n	800b9e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	330c      	adds	r3, #12
 800b9b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f023 0310 	bic.w	r3, r3, #16
 800b9c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	330c      	adds	r3, #12
 800b9ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9cc:	61ba      	str	r2, [r7, #24]
 800b9ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d0:	6979      	ldr	r1, [r7, #20]
 800b9d2:	69ba      	ldr	r2, [r7, #24]
 800b9d4:	e841 2300 	strex	r3, r2, [r1]
 800b9d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1e5      	bne.n	800b9ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b9ee:	bf00      	nop
 800b9f0:	3754      	adds	r7, #84	@ 0x54
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f7f6 ff34 	bl	800287c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba14:	bf00      	nop
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b21      	cmp	r3, #33	@ 0x21
 800ba2e:	d13e      	bne.n	800baae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba38:	d114      	bne.n	800ba64 <UART_Transmit_IT+0x48>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d110      	bne.n	800ba64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a1b      	ldr	r3, [r3, #32]
 800ba5c:	1c9a      	adds	r2, r3, #2
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	621a      	str	r2, [r3, #32]
 800ba62:	e008      	b.n	800ba76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a1b      	ldr	r3, [r3, #32]
 800ba68:	1c59      	adds	r1, r3, #1
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6211      	str	r1, [r2, #32]
 800ba6e:	781a      	ldrb	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	4619      	mov	r1, r3
 800ba84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10f      	bne.n	800baaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	68da      	ldr	r2, [r3, #12]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68da      	ldr	r2, [r3, #12]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800baa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	e000      	b.n	800bab0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800baae:	2302      	movs	r3, #2
  }
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68da      	ldr	r2, [r3, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bad2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2220      	movs	r2, #32
 800bad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff fd3d 	bl	800b55c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08c      	sub	sp, #48	@ 0x30
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800baf4:	2300      	movs	r3, #0
 800baf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800baf8:	2300      	movs	r3, #0
 800bafa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b22      	cmp	r3, #34	@ 0x22
 800bb06:	f040 80aa 	bne.w	800bc5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb12:	d115      	bne.n	800bb40 <UART_Receive_IT+0x54>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d111      	bne.n	800bb40 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb20:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb38:	1c9a      	adds	r2, r3, #2
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	629a      	str	r2, [r3, #40]	@ 0x28
 800bb3e:	e024      	b.n	800bb8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb4e:	d007      	beq.n	800bb60 <UART_Receive_IT+0x74>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10a      	bne.n	800bb6e <UART_Receive_IT+0x82>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d106      	bne.n	800bb6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6a:	701a      	strb	r2, [r3, #0]
 800bb6c:	e008      	b.n	800bb80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb84:	1c5a      	adds	r2, r3, #1
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	3b01      	subs	r3, #1
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	4619      	mov	r1, r3
 800bb98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d15d      	bne.n	800bc5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0220 	bic.w	r2, r2, #32
 800bbac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68da      	ldr	r2, [r3, #12]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bbbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	695a      	ldr	r2, [r3, #20]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f022 0201 	bic.w	r2, r2, #1
 800bbcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d135      	bne.n	800bc50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	330c      	adds	r3, #12
 800bbf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	613b      	str	r3, [r7, #16]
   return(result);
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	f023 0310 	bic.w	r3, r3, #16
 800bc00:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	330c      	adds	r3, #12
 800bc08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc0a:	623a      	str	r2, [r7, #32]
 800bc0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0e:	69f9      	ldr	r1, [r7, #28]
 800bc10:	6a3a      	ldr	r2, [r7, #32]
 800bc12:	e841 2300 	strex	r3, r2, [r1]
 800bc16:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1e5      	bne.n	800bbea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f003 0310 	and.w	r3, r3, #16
 800bc28:	2b10      	cmp	r3, #16
 800bc2a:	d10a      	bne.n	800bc42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	60fb      	str	r3, [r7, #12]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60fb      	str	r3, [r7, #12]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bc46:	4619      	mov	r1, r3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7ff fc9b 	bl	800b584 <HAL_UARTEx_RxEventCallback>
 800bc4e:	e002      	b.n	800bc56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7f6 fda5 	bl	80027a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	e002      	b.n	800bc60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	e000      	b.n	800bc60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bc5e:	2302      	movs	r3, #2
  }
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3730      	adds	r7, #48	@ 0x30
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc6c:	b0c0      	sub	sp, #256	@ 0x100
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bc80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc84:	68d9      	ldr	r1, [r3, #12]
 800bc86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	ea40 0301 	orr.w	r3, r0, r1
 800bc90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bc92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc96:	689a      	ldr	r2, [r3, #8]
 800bc98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	431a      	orrs	r2, r3
 800bca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcac:	69db      	ldr	r3, [r3, #28]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bcb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bcc0:	f021 010c 	bic.w	r1, r1, #12
 800bcc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bcce:	430b      	orrs	r3, r1
 800bcd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bcd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bcde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bce2:	6999      	ldr	r1, [r3, #24]
 800bce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	ea40 0301 	orr.w	r3, r0, r1
 800bcee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bcf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	4b8f      	ldr	r3, [pc, #572]	@ (800bf34 <UART_SetConfig+0x2cc>)
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d005      	beq.n	800bd08 <UART_SetConfig+0xa0>
 800bcfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	4b8d      	ldr	r3, [pc, #564]	@ (800bf38 <UART_SetConfig+0x2d0>)
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d104      	bne.n	800bd12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd08:	f7fe f97e 	bl	800a008 <HAL_RCC_GetPCLK2Freq>
 800bd0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bd10:	e003      	b.n	800bd1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd12:	f7fe f965 	bl	8009fe0 <HAL_RCC_GetPCLK1Freq>
 800bd16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd1e:	69db      	ldr	r3, [r3, #28]
 800bd20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd24:	f040 810c 	bne.w	800bf40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bd32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bd36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bd3a:	4622      	mov	r2, r4
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	1891      	adds	r1, r2, r2
 800bd40:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bd42:	415b      	adcs	r3, r3
 800bd44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	eb12 0801 	adds.w	r8, r2, r1
 800bd50:	4629      	mov	r1, r5
 800bd52:	eb43 0901 	adc.w	r9, r3, r1
 800bd56:	f04f 0200 	mov.w	r2, #0
 800bd5a:	f04f 0300 	mov.w	r3, #0
 800bd5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd6a:	4690      	mov	r8, r2
 800bd6c:	4699      	mov	r9, r3
 800bd6e:	4623      	mov	r3, r4
 800bd70:	eb18 0303 	adds.w	r3, r8, r3
 800bd74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bd78:	462b      	mov	r3, r5
 800bd7a:	eb49 0303 	adc.w	r3, r9, r3
 800bd7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bd8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bd92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bd96:	460b      	mov	r3, r1
 800bd98:	18db      	adds	r3, r3, r3
 800bd9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	eb42 0303 	adc.w	r3, r2, r3
 800bda2:	657b      	str	r3, [r7, #84]	@ 0x54
 800bda4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bda8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bdac:	f7f4 ff04 	bl	8000bb8 <__aeabi_uldivmod>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4b61      	ldr	r3, [pc, #388]	@ (800bf3c <UART_SetConfig+0x2d4>)
 800bdb6:	fba3 2302 	umull	r2, r3, r3, r2
 800bdba:	095b      	lsrs	r3, r3, #5
 800bdbc:	011c      	lsls	r4, r3, #4
 800bdbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bdc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bdcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	464b      	mov	r3, r9
 800bdd4:	1891      	adds	r1, r2, r2
 800bdd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bdd8:	415b      	adcs	r3, r3
 800bdda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bddc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bde0:	4641      	mov	r1, r8
 800bde2:	eb12 0a01 	adds.w	sl, r2, r1
 800bde6:	4649      	mov	r1, r9
 800bde8:	eb43 0b01 	adc.w	fp, r3, r1
 800bdec:	f04f 0200 	mov.w	r2, #0
 800bdf0:	f04f 0300 	mov.w	r3, #0
 800bdf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bdf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bdfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be00:	4692      	mov	sl, r2
 800be02:	469b      	mov	fp, r3
 800be04:	4643      	mov	r3, r8
 800be06:	eb1a 0303 	adds.w	r3, sl, r3
 800be0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be0e:	464b      	mov	r3, r9
 800be10:	eb4b 0303 	adc.w	r3, fp, r3
 800be14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800be18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800be28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800be2c:	460b      	mov	r3, r1
 800be2e:	18db      	adds	r3, r3, r3
 800be30:	643b      	str	r3, [r7, #64]	@ 0x40
 800be32:	4613      	mov	r3, r2
 800be34:	eb42 0303 	adc.w	r3, r2, r3
 800be38:	647b      	str	r3, [r7, #68]	@ 0x44
 800be3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800be3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800be42:	f7f4 feb9 	bl	8000bb8 <__aeabi_uldivmod>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4611      	mov	r1, r2
 800be4c:	4b3b      	ldr	r3, [pc, #236]	@ (800bf3c <UART_SetConfig+0x2d4>)
 800be4e:	fba3 2301 	umull	r2, r3, r3, r1
 800be52:	095b      	lsrs	r3, r3, #5
 800be54:	2264      	movs	r2, #100	@ 0x64
 800be56:	fb02 f303 	mul.w	r3, r2, r3
 800be5a:	1acb      	subs	r3, r1, r3
 800be5c:	00db      	lsls	r3, r3, #3
 800be5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800be62:	4b36      	ldr	r3, [pc, #216]	@ (800bf3c <UART_SetConfig+0x2d4>)
 800be64:	fba3 2302 	umull	r2, r3, r3, r2
 800be68:	095b      	lsrs	r3, r3, #5
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800be70:	441c      	add	r4, r3
 800be72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be76:	2200      	movs	r2, #0
 800be78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800be80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800be84:	4642      	mov	r2, r8
 800be86:	464b      	mov	r3, r9
 800be88:	1891      	adds	r1, r2, r2
 800be8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800be8c:	415b      	adcs	r3, r3
 800be8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800be94:	4641      	mov	r1, r8
 800be96:	1851      	adds	r1, r2, r1
 800be98:	6339      	str	r1, [r7, #48]	@ 0x30
 800be9a:	4649      	mov	r1, r9
 800be9c:	414b      	adcs	r3, r1
 800be9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bea0:	f04f 0200 	mov.w	r2, #0
 800bea4:	f04f 0300 	mov.w	r3, #0
 800bea8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800beac:	4659      	mov	r1, fp
 800beae:	00cb      	lsls	r3, r1, #3
 800beb0:	4651      	mov	r1, sl
 800beb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800beb6:	4651      	mov	r1, sl
 800beb8:	00ca      	lsls	r2, r1, #3
 800beba:	4610      	mov	r0, r2
 800bebc:	4619      	mov	r1, r3
 800bebe:	4603      	mov	r3, r0
 800bec0:	4642      	mov	r2, r8
 800bec2:	189b      	adds	r3, r3, r2
 800bec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bec8:	464b      	mov	r3, r9
 800beca:	460a      	mov	r2, r1
 800becc:	eb42 0303 	adc.w	r3, r2, r3
 800bed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bee0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bee8:	460b      	mov	r3, r1
 800beea:	18db      	adds	r3, r3, r3
 800beec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800beee:	4613      	mov	r3, r2
 800bef0:	eb42 0303 	adc.w	r3, r2, r3
 800bef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800befa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800befe:	f7f4 fe5b 	bl	8000bb8 <__aeabi_uldivmod>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4b0d      	ldr	r3, [pc, #52]	@ (800bf3c <UART_SetConfig+0x2d4>)
 800bf08:	fba3 1302 	umull	r1, r3, r3, r2
 800bf0c:	095b      	lsrs	r3, r3, #5
 800bf0e:	2164      	movs	r1, #100	@ 0x64
 800bf10:	fb01 f303 	mul.w	r3, r1, r3
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	3332      	adds	r3, #50	@ 0x32
 800bf1a:	4a08      	ldr	r2, [pc, #32]	@ (800bf3c <UART_SetConfig+0x2d4>)
 800bf1c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf20:	095b      	lsrs	r3, r3, #5
 800bf22:	f003 0207 	and.w	r2, r3, #7
 800bf26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4422      	add	r2, r4
 800bf2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf30:	e106      	b.n	800c140 <UART_SetConfig+0x4d8>
 800bf32:	bf00      	nop
 800bf34:	40011000 	.word	0x40011000
 800bf38:	40011400 	.word	0x40011400
 800bf3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf44:	2200      	movs	r2, #0
 800bf46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bf4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bf52:	4642      	mov	r2, r8
 800bf54:	464b      	mov	r3, r9
 800bf56:	1891      	adds	r1, r2, r2
 800bf58:	6239      	str	r1, [r7, #32]
 800bf5a:	415b      	adcs	r3, r3
 800bf5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf62:	4641      	mov	r1, r8
 800bf64:	1854      	adds	r4, r2, r1
 800bf66:	4649      	mov	r1, r9
 800bf68:	eb43 0501 	adc.w	r5, r3, r1
 800bf6c:	f04f 0200 	mov.w	r2, #0
 800bf70:	f04f 0300 	mov.w	r3, #0
 800bf74:	00eb      	lsls	r3, r5, #3
 800bf76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf7a:	00e2      	lsls	r2, r4, #3
 800bf7c:	4614      	mov	r4, r2
 800bf7e:	461d      	mov	r5, r3
 800bf80:	4643      	mov	r3, r8
 800bf82:	18e3      	adds	r3, r4, r3
 800bf84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf88:	464b      	mov	r3, r9
 800bf8a:	eb45 0303 	adc.w	r3, r5, r3
 800bf8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bf9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	f04f 0300 	mov.w	r3, #0
 800bfaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bfae:	4629      	mov	r1, r5
 800bfb0:	008b      	lsls	r3, r1, #2
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfb8:	4621      	mov	r1, r4
 800bfba:	008a      	lsls	r2, r1, #2
 800bfbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bfc0:	f7f4 fdfa 	bl	8000bb8 <__aeabi_uldivmod>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4b60      	ldr	r3, [pc, #384]	@ (800c14c <UART_SetConfig+0x4e4>)
 800bfca:	fba3 2302 	umull	r2, r3, r3, r2
 800bfce:	095b      	lsrs	r3, r3, #5
 800bfd0:	011c      	lsls	r4, r3, #4
 800bfd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bfdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bfe0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bfe4:	4642      	mov	r2, r8
 800bfe6:	464b      	mov	r3, r9
 800bfe8:	1891      	adds	r1, r2, r2
 800bfea:	61b9      	str	r1, [r7, #24]
 800bfec:	415b      	adcs	r3, r3
 800bfee:	61fb      	str	r3, [r7, #28]
 800bff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bff4:	4641      	mov	r1, r8
 800bff6:	1851      	adds	r1, r2, r1
 800bff8:	6139      	str	r1, [r7, #16]
 800bffa:	4649      	mov	r1, r9
 800bffc:	414b      	adcs	r3, r1
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	f04f 0200 	mov.w	r2, #0
 800c004:	f04f 0300 	mov.w	r3, #0
 800c008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c00c:	4659      	mov	r1, fp
 800c00e:	00cb      	lsls	r3, r1, #3
 800c010:	4651      	mov	r1, sl
 800c012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c016:	4651      	mov	r1, sl
 800c018:	00ca      	lsls	r2, r1, #3
 800c01a:	4610      	mov	r0, r2
 800c01c:	4619      	mov	r1, r3
 800c01e:	4603      	mov	r3, r0
 800c020:	4642      	mov	r2, r8
 800c022:	189b      	adds	r3, r3, r2
 800c024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c028:	464b      	mov	r3, r9
 800c02a:	460a      	mov	r2, r1
 800c02c:	eb42 0303 	adc.w	r3, r2, r3
 800c030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c03e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c040:	f04f 0200 	mov.w	r2, #0
 800c044:	f04f 0300 	mov.w	r3, #0
 800c048:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c04c:	4649      	mov	r1, r9
 800c04e:	008b      	lsls	r3, r1, #2
 800c050:	4641      	mov	r1, r8
 800c052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c056:	4641      	mov	r1, r8
 800c058:	008a      	lsls	r2, r1, #2
 800c05a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c05e:	f7f4 fdab 	bl	8000bb8 <__aeabi_uldivmod>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	4611      	mov	r1, r2
 800c068:	4b38      	ldr	r3, [pc, #224]	@ (800c14c <UART_SetConfig+0x4e4>)
 800c06a:	fba3 2301 	umull	r2, r3, r3, r1
 800c06e:	095b      	lsrs	r3, r3, #5
 800c070:	2264      	movs	r2, #100	@ 0x64
 800c072:	fb02 f303 	mul.w	r3, r2, r3
 800c076:	1acb      	subs	r3, r1, r3
 800c078:	011b      	lsls	r3, r3, #4
 800c07a:	3332      	adds	r3, #50	@ 0x32
 800c07c:	4a33      	ldr	r2, [pc, #204]	@ (800c14c <UART_SetConfig+0x4e4>)
 800c07e:	fba2 2303 	umull	r2, r3, r2, r3
 800c082:	095b      	lsrs	r3, r3, #5
 800c084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c088:	441c      	add	r4, r3
 800c08a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c08e:	2200      	movs	r2, #0
 800c090:	673b      	str	r3, [r7, #112]	@ 0x70
 800c092:	677a      	str	r2, [r7, #116]	@ 0x74
 800c094:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c098:	4642      	mov	r2, r8
 800c09a:	464b      	mov	r3, r9
 800c09c:	1891      	adds	r1, r2, r2
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	415b      	adcs	r3, r3
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0a8:	4641      	mov	r1, r8
 800c0aa:	1851      	adds	r1, r2, r1
 800c0ac:	6039      	str	r1, [r7, #0]
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	414b      	adcs	r3, r1
 800c0b2:	607b      	str	r3, [r7, #4]
 800c0b4:	f04f 0200 	mov.w	r2, #0
 800c0b8:	f04f 0300 	mov.w	r3, #0
 800c0bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c0c0:	4659      	mov	r1, fp
 800c0c2:	00cb      	lsls	r3, r1, #3
 800c0c4:	4651      	mov	r1, sl
 800c0c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0ca:	4651      	mov	r1, sl
 800c0cc:	00ca      	lsls	r2, r1, #3
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	4642      	mov	r2, r8
 800c0d6:	189b      	adds	r3, r3, r2
 800c0d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0da:	464b      	mov	r3, r9
 800c0dc:	460a      	mov	r2, r1
 800c0de:	eb42 0303 	adc.w	r3, r2, r3
 800c0e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800c0ee:	667a      	str	r2, [r7, #100]	@ 0x64
 800c0f0:	f04f 0200 	mov.w	r2, #0
 800c0f4:	f04f 0300 	mov.w	r3, #0
 800c0f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	008b      	lsls	r3, r1, #2
 800c100:	4641      	mov	r1, r8
 800c102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c106:	4641      	mov	r1, r8
 800c108:	008a      	lsls	r2, r1, #2
 800c10a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c10e:	f7f4 fd53 	bl	8000bb8 <__aeabi_uldivmod>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4b0d      	ldr	r3, [pc, #52]	@ (800c14c <UART_SetConfig+0x4e4>)
 800c118:	fba3 1302 	umull	r1, r3, r3, r2
 800c11c:	095b      	lsrs	r3, r3, #5
 800c11e:	2164      	movs	r1, #100	@ 0x64
 800c120:	fb01 f303 	mul.w	r3, r1, r3
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	011b      	lsls	r3, r3, #4
 800c128:	3332      	adds	r3, #50	@ 0x32
 800c12a:	4a08      	ldr	r2, [pc, #32]	@ (800c14c <UART_SetConfig+0x4e4>)
 800c12c:	fba2 2303 	umull	r2, r3, r2, r3
 800c130:	095b      	lsrs	r3, r3, #5
 800c132:	f003 020f 	and.w	r2, r3, #15
 800c136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4422      	add	r2, r4
 800c13e:	609a      	str	r2, [r3, #8]
}
 800c140:	bf00      	nop
 800c142:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c146:	46bd      	mov	sp, r7
 800c148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c14c:	51eb851f 	.word	0x51eb851f

0800c150 <__NVIC_SetPriority>:
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	4603      	mov	r3, r0
 800c158:	6039      	str	r1, [r7, #0]
 800c15a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c15c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c160:	2b00      	cmp	r3, #0
 800c162:	db0a      	blt.n	800c17a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	b2da      	uxtb	r2, r3
 800c168:	490c      	ldr	r1, [pc, #48]	@ (800c19c <__NVIC_SetPriority+0x4c>)
 800c16a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c16e:	0112      	lsls	r2, r2, #4
 800c170:	b2d2      	uxtb	r2, r2
 800c172:	440b      	add	r3, r1
 800c174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c178:	e00a      	b.n	800c190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	4908      	ldr	r1, [pc, #32]	@ (800c1a0 <__NVIC_SetPriority+0x50>)
 800c180:	79fb      	ldrb	r3, [r7, #7]
 800c182:	f003 030f 	and.w	r3, r3, #15
 800c186:	3b04      	subs	r3, #4
 800c188:	0112      	lsls	r2, r2, #4
 800c18a:	b2d2      	uxtb	r2, r2
 800c18c:	440b      	add	r3, r1
 800c18e:	761a      	strb	r2, [r3, #24]
}
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	e000e100 	.word	0xe000e100
 800c1a0:	e000ed00 	.word	0xe000ed00

0800c1a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c1a8:	4b05      	ldr	r3, [pc, #20]	@ (800c1c0 <SysTick_Handler+0x1c>)
 800c1aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c1ac:	f002 f880 	bl	800e2b0 <xTaskGetSchedulerState>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d001      	beq.n	800c1ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c1b6:	f002 ff77 	bl	800f0a8 <xPortSysTickHandler>
  }
}
 800c1ba:	bf00      	nop
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	e000e010 	.word	0xe000e010

0800c1c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	f06f 0004 	mvn.w	r0, #4
 800c1ce:	f7ff ffbf 	bl	800c150 <__NVIC_SetPriority>
#endif
}
 800c1d2:	bf00      	nop
 800c1d4:	bd80      	pop	{r7, pc}
	...

0800c1d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1de:	f3ef 8305 	mrs	r3, IPSR
 800c1e2:	603b      	str	r3, [r7, #0]
  return(result);
 800c1e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d003      	beq.n	800c1f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c1ea:	f06f 0305 	mvn.w	r3, #5
 800c1ee:	607b      	str	r3, [r7, #4]
 800c1f0:	e00c      	b.n	800c20c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c21c <osKernelInitialize+0x44>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d105      	bne.n	800c206 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c1fa:	4b08      	ldr	r3, [pc, #32]	@ (800c21c <osKernelInitialize+0x44>)
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c200:	2300      	movs	r3, #0
 800c202:	607b      	str	r3, [r7, #4]
 800c204:	e002      	b.n	800c20c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c206:	f04f 33ff 	mov.w	r3, #4294967295
 800c20a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c20c:	687b      	ldr	r3, [r7, #4]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	2000145c 	.word	0x2000145c

0800c220 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c226:	f3ef 8305 	mrs	r3, IPSR
 800c22a:	603b      	str	r3, [r7, #0]
  return(result);
 800c22c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c232:	f06f 0305 	mvn.w	r3, #5
 800c236:	607b      	str	r3, [r7, #4]
 800c238:	e010      	b.n	800c25c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c23a:	4b0b      	ldr	r3, [pc, #44]	@ (800c268 <osKernelStart+0x48>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d109      	bne.n	800c256 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c242:	f7ff ffbf 	bl	800c1c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c246:	4b08      	ldr	r3, [pc, #32]	@ (800c268 <osKernelStart+0x48>)
 800c248:	2202      	movs	r2, #2
 800c24a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c24c:	f001 fbbc 	bl	800d9c8 <vTaskStartScheduler>
      stat = osOK;
 800c250:	2300      	movs	r3, #0
 800c252:	607b      	str	r3, [r7, #4]
 800c254:	e002      	b.n	800c25c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c256:	f04f 33ff 	mov.w	r3, #4294967295
 800c25a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c25c:	687b      	ldr	r3, [r7, #4]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	2000145c 	.word	0x2000145c

0800c26c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b08e      	sub	sp, #56	@ 0x38
 800c270:	af04      	add	r7, sp, #16
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c278:	2300      	movs	r3, #0
 800c27a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c27c:	f3ef 8305 	mrs	r3, IPSR
 800c280:	617b      	str	r3, [r7, #20]
  return(result);
 800c282:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c284:	2b00      	cmp	r3, #0
 800c286:	d17e      	bne.n	800c386 <osThreadNew+0x11a>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d07b      	beq.n	800c386 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c28e:	2380      	movs	r3, #128	@ 0x80
 800c290:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c292:	2318      	movs	r3, #24
 800c294:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c296:	2300      	movs	r3, #0
 800c298:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c29a:	f04f 33ff 	mov.w	r3, #4294967295
 800c29e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d045      	beq.n	800c332 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <osThreadNew+0x48>
        name = attr->name;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	699b      	ldr	r3, [r3, #24]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d008      	beq.n	800c2da <osThreadNew+0x6e>
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	2b38      	cmp	r3, #56	@ 0x38
 800c2cc:	d805      	bhi.n	800c2da <osThreadNew+0x6e>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <osThreadNew+0x72>
        return (NULL);
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e054      	b.n	800c388 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d003      	beq.n	800c2ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	089b      	lsrs	r3, r3, #2
 800c2ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00e      	beq.n	800c314 <osThreadNew+0xa8>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	2ba7      	cmp	r3, #167	@ 0xa7
 800c2fc:	d90a      	bls.n	800c314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c302:	2b00      	cmp	r3, #0
 800c304:	d006      	beq.n	800c314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d002      	beq.n	800c314 <osThreadNew+0xa8>
        mem = 1;
 800c30e:	2301      	movs	r3, #1
 800c310:	61bb      	str	r3, [r7, #24]
 800c312:	e010      	b.n	800c336 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10c      	bne.n	800c336 <osThreadNew+0xca>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d108      	bne.n	800c336 <osThreadNew+0xca>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d104      	bne.n	800c336 <osThreadNew+0xca>
          mem = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	61bb      	str	r3, [r7, #24]
 800c330:	e001      	b.n	800c336 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d110      	bne.n	800c35e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c344:	9202      	str	r2, [sp, #8]
 800c346:	9301      	str	r3, [sp, #4]
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	6a3a      	ldr	r2, [r7, #32]
 800c350:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f001 f944 	bl	800d5e0 <xTaskCreateStatic>
 800c358:	4603      	mov	r3, r0
 800c35a:	613b      	str	r3, [r7, #16]
 800c35c:	e013      	b.n	800c386 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d110      	bne.n	800c386 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	b29a      	uxth	r2, r3
 800c368:	f107 0310 	add.w	r3, r7, #16
 800c36c:	9301      	str	r3, [sp, #4]
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f001 f992 	bl	800d6a0 <xTaskCreate>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d001      	beq.n	800c386 <osThreadNew+0x11a>
            hTask = NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c386:	693b      	ldr	r3, [r7, #16]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3728      	adds	r7, #40	@ 0x28
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c398:	f3ef 8305 	mrs	r3, IPSR
 800c39c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c39e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d003      	beq.n	800c3ac <osDelay+0x1c>
    stat = osErrorISR;
 800c3a4:	f06f 0305 	mvn.w	r3, #5
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	e007      	b.n	800c3bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d002      	beq.n	800c3bc <osDelay+0x2c>
      vTaskDelay(ticks);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f001 fad0 	bl	800d95c <vTaskDelay>
    }
  }

  return (stat);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b088      	sub	sp, #32
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3d2:	f3ef 8305 	mrs	r3, IPSR
 800c3d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c3d8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d174      	bne.n	800c4c8 <osMutexNew+0x102>
    if (attr != NULL) {
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d003      	beq.n	800c3ec <osMutexNew+0x26>
      type = attr->attr_bits;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	61bb      	str	r3, [r7, #24]
 800c3ea:	e001      	b.n	800c3f0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d002      	beq.n	800c400 <osMutexNew+0x3a>
      rmtx = 1U;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	e001      	b.n	800c404 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	f003 0308 	and.w	r3, r3, #8
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d15c      	bne.n	800c4c8 <osMutexNew+0x102>
      mem = -1;
 800c40e:	f04f 33ff 	mov.w	r3, #4294967295
 800c412:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d015      	beq.n	800c446 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d006      	beq.n	800c430 <osMutexNew+0x6a>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	2b4f      	cmp	r3, #79	@ 0x4f
 800c428:	d902      	bls.n	800c430 <osMutexNew+0x6a>
          mem = 1;
 800c42a:	2301      	movs	r3, #1
 800c42c:	613b      	str	r3, [r7, #16]
 800c42e:	e00c      	b.n	800c44a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d108      	bne.n	800c44a <osMutexNew+0x84>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d104      	bne.n	800c44a <osMutexNew+0x84>
            mem = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	613b      	str	r3, [r7, #16]
 800c444:	e001      	b.n	800c44a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d112      	bne.n	800c476 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d007      	beq.n	800c466 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	4619      	mov	r1, r3
 800c45c:	2004      	movs	r0, #4
 800c45e:	f000 fb20 	bl	800caa2 <xQueueCreateMutexStatic>
 800c462:	61f8      	str	r0, [r7, #28]
 800c464:	e016      	b.n	800c494 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	4619      	mov	r1, r3
 800c46c:	2001      	movs	r0, #1
 800c46e:	f000 fb18 	bl	800caa2 <xQueueCreateMutexStatic>
 800c472:	61f8      	str	r0, [r7, #28]
 800c474:	e00e      	b.n	800c494 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10b      	bne.n	800c494 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d004      	beq.n	800c48c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c482:	2004      	movs	r0, #4
 800c484:	f000 faf5 	bl	800ca72 <xQueueCreateMutex>
 800c488:	61f8      	str	r0, [r7, #28]
 800c48a:	e003      	b.n	800c494 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c48c:	2001      	movs	r0, #1
 800c48e:	f000 faf0 	bl	800ca72 <xQueueCreateMutex>
 800c492:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00c      	beq.n	800c4b4 <osMutexNew+0xee>
        if (attr != NULL) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d003      	beq.n	800c4a8 <osMutexNew+0xe2>
          name = attr->name;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	e001      	b.n	800c4ac <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c4ac:	68f9      	ldr	r1, [r7, #12]
 800c4ae:	69f8      	ldr	r0, [r7, #28]
 800c4b0:	f001 f838 	bl	800d524 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d006      	beq.n	800c4c8 <osMutexNew+0x102>
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d003      	beq.n	800c4c8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	f043 0301 	orr.w	r3, r3, #1
 800c4c6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c4c8:	69fb      	ldr	r3, [r7, #28]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3720      	adds	r7, #32
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f023 0301 	bic.w	r3, r3, #1
 800c4e2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4f0:	f3ef 8305 	mrs	r3, IPSR
 800c4f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c4f6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c4fc:	f06f 0305 	mvn.w	r3, #5
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	e02c      	b.n	800c55e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d103      	bne.n	800c512 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c50a:	f06f 0303 	mvn.w	r3, #3
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	e025      	b.n	800c55e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d011      	beq.n	800c53c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6938      	ldr	r0, [r7, #16]
 800c51c:	f000 fb11 	bl	800cb42 <xQueueTakeMutexRecursive>
 800c520:	4603      	mov	r3, r0
 800c522:	2b01      	cmp	r3, #1
 800c524:	d01b      	beq.n	800c55e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c52c:	f06f 0301 	mvn.w	r3, #1
 800c530:	617b      	str	r3, [r7, #20]
 800c532:	e014      	b.n	800c55e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c534:	f06f 0302 	mvn.w	r3, #2
 800c538:	617b      	str	r3, [r7, #20]
 800c53a:	e010      	b.n	800c55e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6938      	ldr	r0, [r7, #16]
 800c540:	f000 fdb8 	bl	800d0b4 <xQueueSemaphoreTake>
 800c544:	4603      	mov	r3, r0
 800c546:	2b01      	cmp	r3, #1
 800c548:	d009      	beq.n	800c55e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d003      	beq.n	800c558 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c550:	f06f 0301 	mvn.w	r3, #1
 800c554:	617b      	str	r3, [r7, #20]
 800c556:	e002      	b.n	800c55e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c558:	f06f 0302 	mvn.w	r3, #2
 800c55c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c55e:	697b      	ldr	r3, [r7, #20]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f023 0301 	bic.w	r3, r3, #1
 800c576:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c580:	2300      	movs	r3, #0
 800c582:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c584:	f3ef 8305 	mrs	r3, IPSR
 800c588:	60bb      	str	r3, [r7, #8]
  return(result);
 800c58a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c590:	f06f 0305 	mvn.w	r3, #5
 800c594:	617b      	str	r3, [r7, #20]
 800c596:	e01f      	b.n	800c5d8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d103      	bne.n	800c5a6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c59e:	f06f 0303 	mvn.w	r3, #3
 800c5a2:	617b      	str	r3, [r7, #20]
 800c5a4:	e018      	b.n	800c5d8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d009      	beq.n	800c5c0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c5ac:	6938      	ldr	r0, [r7, #16]
 800c5ae:	f000 fa93 	bl	800cad8 <xQueueGiveMutexRecursive>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d00f      	beq.n	800c5d8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c5b8:	f06f 0302 	mvn.w	r3, #2
 800c5bc:	617b      	str	r3, [r7, #20]
 800c5be:	e00b      	b.n	800c5d8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6938      	ldr	r0, [r7, #16]
 800c5c8:	f000 faf2 	bl	800cbb0 <xQueueGenericSend>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d002      	beq.n	800c5d8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c5d2:	f06f 0302 	mvn.w	r3, #2
 800c5d6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c5d8:	697b      	ldr	r3, [r7, #20]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3718      	adds	r7, #24
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	4a07      	ldr	r2, [pc, #28]	@ (800c610 <vApplicationGetIdleTaskMemory+0x2c>)
 800c5f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	4a06      	ldr	r2, [pc, #24]	@ (800c614 <vApplicationGetIdleTaskMemory+0x30>)
 800c5fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2280      	movs	r2, #128	@ 0x80
 800c600:	601a      	str	r2, [r3, #0]
}
 800c602:	bf00      	nop
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	20001460 	.word	0x20001460
 800c614:	20001508 	.word	0x20001508

0800c618 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	4a07      	ldr	r2, [pc, #28]	@ (800c644 <vApplicationGetTimerTaskMemory+0x2c>)
 800c628:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	4a06      	ldr	r2, [pc, #24]	@ (800c648 <vApplicationGetTimerTaskMemory+0x30>)
 800c62e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c636:	601a      	str	r2, [r3, #0]
}
 800c638:	bf00      	nop
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	20001708 	.word	0x20001708
 800c648:	200017b0 	.word	0x200017b0

0800c64c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f103 0208 	add.w	r2, r3, #8
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f04f 32ff 	mov.w	r2, #4294967295
 800c664:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f103 0208 	add.w	r2, r3, #8
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f103 0208 	add.w	r2, r3, #8
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c69a:	bf00      	nop
 800c69c:	370c      	adds	r7, #12
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b085      	sub	sp, #20
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	689a      	ldr	r2, [r3, #8]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	1c5a      	adds	r2, r3, #1
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	601a      	str	r2, [r3, #0]
}
 800c6e2:	bf00      	nop
 800c6e4:	3714      	adds	r7, #20
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr

0800c6ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6ee:	b480      	push	{r7}
 800c6f0:	b085      	sub	sp, #20
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c704:	d103      	bne.n	800c70e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	60fb      	str	r3, [r7, #12]
 800c70c:	e00c      	b.n	800c728 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	3308      	adds	r3, #8
 800c712:	60fb      	str	r3, [r7, #12]
 800c714:	e002      	b.n	800c71c <vListInsert+0x2e>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	60fb      	str	r3, [r7, #12]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	429a      	cmp	r2, r3
 800c726:	d2f6      	bcs.n	800c716 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	683a      	ldr	r2, [r7, #0]
 800c736:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	1c5a      	adds	r2, r3, #1
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	601a      	str	r2, [r3, #0]
}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	6892      	ldr	r2, [r2, #8]
 800c776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6852      	ldr	r2, [r2, #4]
 800c780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d103      	bne.n	800c794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	689a      	ldr	r2, [r3, #8]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	1e5a      	subs	r2, r3, #1
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10b      	bne.n	800c7e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c7da:	bf00      	nop
 800c7dc:	bf00      	nop
 800c7de:	e7fd      	b.n	800c7dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c7e0:	f002 fbd2 	bl	800ef88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ec:	68f9      	ldr	r1, [r7, #12]
 800c7ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c7f0:	fb01 f303 	mul.w	r3, r1, r3
 800c7f4:	441a      	add	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c810:	3b01      	subs	r3, #1
 800c812:	68f9      	ldr	r1, [r7, #12]
 800c814:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c816:	fb01 f303 	mul.w	r3, r1, r3
 800c81a:	441a      	add	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	22ff      	movs	r2, #255	@ 0xff
 800c824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	22ff      	movs	r2, #255	@ 0xff
 800c82c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d114      	bne.n	800c860 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d01a      	beq.n	800c874 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3310      	adds	r3, #16
 800c842:	4618      	mov	r0, r3
 800c844:	f001 fb5e 	bl	800df04 <xTaskRemoveFromEventList>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d012      	beq.n	800c874 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c84e:	4b0d      	ldr	r3, [pc, #52]	@ (800c884 <xQueueGenericReset+0xd0>)
 800c850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	e009      	b.n	800c874 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3310      	adds	r3, #16
 800c864:	4618      	mov	r0, r3
 800c866:	f7ff fef1 	bl	800c64c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3324      	adds	r3, #36	@ 0x24
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff feec 	bl	800c64c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c874:	f002 fbba 	bl	800efec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c878:	2301      	movs	r3, #1
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	e000ed04 	.word	0xe000ed04

0800c888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b08e      	sub	sp, #56	@ 0x38
 800c88c:	af02      	add	r7, sp, #8
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10b      	bne.n	800c8b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c8ae:	bf00      	nop
 800c8b0:	bf00      	nop
 800c8b2:	e7fd      	b.n	800c8b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10b      	bne.n	800c8d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c8cc:	bf00      	nop
 800c8ce:	bf00      	nop
 800c8d0:	e7fd      	b.n	800c8ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d002      	beq.n	800c8de <xQueueGenericCreateStatic+0x56>
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <xQueueGenericCreateStatic+0x5a>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e000      	b.n	800c8e4 <xQueueGenericCreateStatic+0x5c>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10b      	bne.n	800c900 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ec:	f383 8811 	msr	BASEPRI, r3
 800c8f0:	f3bf 8f6f 	isb	sy
 800c8f4:	f3bf 8f4f 	dsb	sy
 800c8f8:	623b      	str	r3, [r7, #32]
}
 800c8fa:	bf00      	nop
 800c8fc:	bf00      	nop
 800c8fe:	e7fd      	b.n	800c8fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d102      	bne.n	800c90c <xQueueGenericCreateStatic+0x84>
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d101      	bne.n	800c910 <xQueueGenericCreateStatic+0x88>
 800c90c:	2301      	movs	r3, #1
 800c90e:	e000      	b.n	800c912 <xQueueGenericCreateStatic+0x8a>
 800c910:	2300      	movs	r3, #0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10b      	bne.n	800c92e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	61fb      	str	r3, [r7, #28]
}
 800c928:	bf00      	nop
 800c92a:	bf00      	nop
 800c92c:	e7fd      	b.n	800c92a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c92e:	2350      	movs	r3, #80	@ 0x50
 800c930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	2b50      	cmp	r3, #80	@ 0x50
 800c936:	d00b      	beq.n	800c950 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93c:	f383 8811 	msr	BASEPRI, r3
 800c940:	f3bf 8f6f 	isb	sy
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	61bb      	str	r3, [r7, #24]
}
 800c94a:	bf00      	nop
 800c94c:	bf00      	nop
 800c94e:	e7fd      	b.n	800c94c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c950:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00d      	beq.n	800c978 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c95e:	2201      	movs	r2, #1
 800c960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c964:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	4613      	mov	r3, r2
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	68b9      	ldr	r1, [r7, #8]
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f000 f840 	bl	800c9f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3730      	adds	r7, #48	@ 0x30
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c982:	b580      	push	{r7, lr}
 800c984:	b08a      	sub	sp, #40	@ 0x28
 800c986:	af02      	add	r7, sp, #8
 800c988:	60f8      	str	r0, [r7, #12]
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	4613      	mov	r3, r2
 800c98e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10b      	bne.n	800c9ae <xQueueGenericCreate+0x2c>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	613b      	str	r3, [r7, #16]
}
 800c9a8:	bf00      	nop
 800c9aa:	bf00      	nop
 800c9ac:	e7fd      	b.n	800c9aa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	fb02 f303 	mul.w	r3, r2, r3
 800c9b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	3350      	adds	r3, #80	@ 0x50
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f002 fc05 	bl	800f1cc <pvPortMalloc>
 800c9c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d011      	beq.n	800c9ee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	3350      	adds	r3, #80	@ 0x50
 800c9d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9dc:	79fa      	ldrb	r2, [r7, #7]
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	697a      	ldr	r2, [r7, #20]
 800c9e6:	68b9      	ldr	r1, [r7, #8]
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f000 f805 	bl	800c9f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c9ee:	69bb      	ldr	r3, [r7, #24]
	}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3720      	adds	r7, #32
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
 800ca04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d103      	bne.n	800ca14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	69ba      	ldr	r2, [r7, #24]
 800ca10:	601a      	str	r2, [r3, #0]
 800ca12:	e002      	b.n	800ca1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca26:	2101      	movs	r1, #1
 800ca28:	69b8      	ldr	r0, [r7, #24]
 800ca2a:	f7ff fec3 	bl	800c7b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	78fa      	ldrb	r2, [r7, #3]
 800ca32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca36:	bf00      	nop
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00e      	beq.n	800ca6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ca5e:	2300      	movs	r3, #0
 800ca60:	2200      	movs	r2, #0
 800ca62:	2100      	movs	r1, #0
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f8a3 	bl	800cbb0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ca6a:	bf00      	nop
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b086      	sub	sp, #24
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	4603      	mov	r3, r0
 800ca7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	617b      	str	r3, [r7, #20]
 800ca80:	2300      	movs	r3, #0
 800ca82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	461a      	mov	r2, r3
 800ca88:	6939      	ldr	r1, [r7, #16]
 800ca8a:	6978      	ldr	r0, [r7, #20]
 800ca8c:	f7ff ff79 	bl	800c982 <xQueueGenericCreate>
 800ca90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f7ff ffd3 	bl	800ca3e <prvInitialiseMutex>

		return xNewQueue;
 800ca98:	68fb      	ldr	r3, [r7, #12]
	}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b088      	sub	sp, #32
 800caa6:	af02      	add	r7, sp, #8
 800caa8:	4603      	mov	r3, r0
 800caaa:	6039      	str	r1, [r7, #0]
 800caac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800caae:	2301      	movs	r3, #1
 800cab0:	617b      	str	r3, [r7, #20]
 800cab2:	2300      	movs	r3, #0
 800cab4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cab6:	79fb      	ldrb	r3, [r7, #7]
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	2200      	movs	r2, #0
 800cabe:	6939      	ldr	r1, [r7, #16]
 800cac0:	6978      	ldr	r0, [r7, #20]
 800cac2:	f7ff fee1 	bl	800c888 <xQueueGenericCreateStatic>
 800cac6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f7ff ffb8 	bl	800ca3e <prvInitialiseMutex>

		return xNewQueue;
 800cace:	68fb      	ldr	r3, [r7, #12]
	}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3718      	adds	r7, #24
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cad8:	b590      	push	{r4, r7, lr}
 800cada:	b087      	sub	sp, #28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10b      	bne.n	800cb02 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800caea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	60fb      	str	r3, [r7, #12]
}
 800cafc:	bf00      	nop
 800cafe:	bf00      	nop
 800cb00:	e7fd      	b.n	800cafe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	689c      	ldr	r4, [r3, #8]
 800cb06:	f001 fbc3 	bl	800e290 <xTaskGetCurrentTaskHandle>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	429c      	cmp	r4, r3
 800cb0e:	d111      	bne.n	800cb34 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	1e5a      	subs	r2, r3, #1
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d105      	bne.n	800cb2e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cb22:	2300      	movs	r3, #0
 800cb24:	2200      	movs	r2, #0
 800cb26:	2100      	movs	r1, #0
 800cb28:	6938      	ldr	r0, [r7, #16]
 800cb2a:	f000 f841 	bl	800cbb0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	617b      	str	r3, [r7, #20]
 800cb32:	e001      	b.n	800cb38 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cb34:	2300      	movs	r3, #0
 800cb36:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cb38:	697b      	ldr	r3, [r7, #20]
	}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	371c      	adds	r7, #28
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd90      	pop	{r4, r7, pc}

0800cb42 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cb42:	b590      	push	{r4, r7, lr}
 800cb44:	b087      	sub	sp, #28
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
 800cb4a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10b      	bne.n	800cb6e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	60fb      	str	r3, [r7, #12]
}
 800cb68:	bf00      	nop
 800cb6a:	bf00      	nop
 800cb6c:	e7fd      	b.n	800cb6a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	689c      	ldr	r4, [r3, #8]
 800cb72:	f001 fb8d 	bl	800e290 <xTaskGetCurrentTaskHandle>
 800cb76:	4603      	mov	r3, r0
 800cb78:	429c      	cmp	r4, r3
 800cb7a:	d107      	bne.n	800cb8c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cb86:	2301      	movs	r3, #1
 800cb88:	617b      	str	r3, [r7, #20]
 800cb8a:	e00c      	b.n	800cba6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	6938      	ldr	r0, [r7, #16]
 800cb90:	f000 fa90 	bl	800d0b4 <xQueueSemaphoreTake>
 800cb94:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d004      	beq.n	800cba6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	1c5a      	adds	r2, r3, #1
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cba6:	697b      	ldr	r3, [r7, #20]
	}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	371c      	adds	r7, #28
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd90      	pop	{r4, r7, pc}

0800cbb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b08e      	sub	sp, #56	@ 0x38
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
 800cbbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10b      	bne.n	800cbe4 <xQueueGenericSend+0x34>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cbde:	bf00      	nop
 800cbe0:	bf00      	nop
 800cbe2:	e7fd      	b.n	800cbe0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d103      	bne.n	800cbf2 <xQueueGenericSend+0x42>
 800cbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <xQueueGenericSend+0x46>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e000      	b.n	800cbf8 <xQueueGenericSend+0x48>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10b      	bne.n	800cc14 <xQueueGenericSend+0x64>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cc0e:	bf00      	nop
 800cc10:	bf00      	nop
 800cc12:	e7fd      	b.n	800cc10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d103      	bne.n	800cc22 <xQueueGenericSend+0x72>
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d101      	bne.n	800cc26 <xQueueGenericSend+0x76>
 800cc22:	2301      	movs	r3, #1
 800cc24:	e000      	b.n	800cc28 <xQueueGenericSend+0x78>
 800cc26:	2300      	movs	r3, #0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10b      	bne.n	800cc44 <xQueueGenericSend+0x94>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	623b      	str	r3, [r7, #32]
}
 800cc3e:	bf00      	nop
 800cc40:	bf00      	nop
 800cc42:	e7fd      	b.n	800cc40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc44:	f001 fb34 	bl	800e2b0 <xTaskGetSchedulerState>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <xQueueGenericSend+0xa4>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <xQueueGenericSend+0xa8>
 800cc54:	2301      	movs	r3, #1
 800cc56:	e000      	b.n	800cc5a <xQueueGenericSend+0xaa>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10b      	bne.n	800cc76 <xQueueGenericSend+0xc6>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	61fb      	str	r3, [r7, #28]
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	e7fd      	b.n	800cc72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc76:	f002 f987 	bl	800ef88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d302      	bcc.n	800cc8c <xQueueGenericSend+0xdc>
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	2b02      	cmp	r3, #2
 800cc8a:	d129      	bne.n	800cce0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	68b9      	ldr	r1, [r7, #8]
 800cc90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc92:	f000 fb37 	bl	800d304 <prvCopyDataToQueue>
 800cc96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d010      	beq.n	800ccc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca2:	3324      	adds	r3, #36	@ 0x24
 800cca4:	4618      	mov	r0, r3
 800cca6:	f001 f92d 	bl	800df04 <xTaskRemoveFromEventList>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d013      	beq.n	800ccd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ccb0:	4b3f      	ldr	r3, [pc, #252]	@ (800cdb0 <xQueueGenericSend+0x200>)
 800ccb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccb6:	601a      	str	r2, [r3, #0]
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	e00a      	b.n	800ccd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ccc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d007      	beq.n	800ccd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ccc8:	4b39      	ldr	r3, [pc, #228]	@ (800cdb0 <xQueueGenericSend+0x200>)
 800ccca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ccd8:	f002 f988 	bl	800efec <vPortExitCritical>
				return pdPASS;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e063      	b.n	800cda8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d103      	bne.n	800ccee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cce6:	f002 f981 	bl	800efec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	e05c      	b.n	800cda8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ccee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d106      	bne.n	800cd02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccf4:	f107 0314 	add.w	r3, r7, #20
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f001 f967 	bl	800dfcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd02:	f002 f973 	bl	800efec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd06:	f000 fecf 	bl	800daa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd0a:	f002 f93d 	bl	800ef88 <vPortEnterCritical>
 800cd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd14:	b25b      	sxtb	r3, r3
 800cd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd1a:	d103      	bne.n	800cd24 <xQueueGenericSend+0x174>
 800cd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd2a:	b25b      	sxtb	r3, r3
 800cd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd30:	d103      	bne.n	800cd3a <xQueueGenericSend+0x18a>
 800cd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd3a:	f002 f957 	bl	800efec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd3e:	1d3a      	adds	r2, r7, #4
 800cd40:	f107 0314 	add.w	r3, r7, #20
 800cd44:	4611      	mov	r1, r2
 800cd46:	4618      	mov	r0, r3
 800cd48:	f001 f956 	bl	800dff8 <xTaskCheckForTimeOut>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d124      	bne.n	800cd9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd54:	f000 fbce 	bl	800d4f4 <prvIsQueueFull>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d018      	beq.n	800cd90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd60:	3310      	adds	r3, #16
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	4611      	mov	r1, r2
 800cd66:	4618      	mov	r0, r3
 800cd68:	f001 f87a 	bl	800de60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd6e:	f000 fb59 	bl	800d424 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd72:	f000 fea7 	bl	800dac4 <xTaskResumeAll>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f47f af7c 	bne.w	800cc76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cd7e:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb0 <xQueueGenericSend+0x200>)
 800cd80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	e772      	b.n	800cc76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd92:	f000 fb47 	bl	800d424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd96:	f000 fe95 	bl	800dac4 <xTaskResumeAll>
 800cd9a:	e76c      	b.n	800cc76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd9e:	f000 fb41 	bl	800d424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cda2:	f000 fe8f 	bl	800dac4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cda6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3738      	adds	r7, #56	@ 0x38
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	e000ed04 	.word	0xe000ed04

0800cdb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b090      	sub	sp, #64	@ 0x40
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10b      	bne.n	800cde4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cdde:	bf00      	nop
 800cde0:	bf00      	nop
 800cde2:	e7fd      	b.n	800cde0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d103      	bne.n	800cdf2 <xQueueGenericSendFromISR+0x3e>
 800cdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <xQueueGenericSendFromISR+0x42>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e000      	b.n	800cdf8 <xQueueGenericSendFromISR+0x44>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10b      	bne.n	800ce14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ce0e:	bf00      	nop
 800ce10:	bf00      	nop
 800ce12:	e7fd      	b.n	800ce10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d103      	bne.n	800ce22 <xQueueGenericSendFromISR+0x6e>
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d101      	bne.n	800ce26 <xQueueGenericSendFromISR+0x72>
 800ce22:	2301      	movs	r3, #1
 800ce24:	e000      	b.n	800ce28 <xQueueGenericSendFromISR+0x74>
 800ce26:	2300      	movs	r3, #0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10b      	bne.n	800ce44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	623b      	str	r3, [r7, #32]
}
 800ce3e:	bf00      	nop
 800ce40:	bf00      	nop
 800ce42:	e7fd      	b.n	800ce40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce44:	f002 f980 	bl	800f148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ce48:	f3ef 8211 	mrs	r2, BASEPRI
 800ce4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce50:	f383 8811 	msr	BASEPRI, r3
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	61fa      	str	r2, [r7, #28]
 800ce5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ce60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d302      	bcc.n	800ce76 <xQueueGenericSendFromISR+0xc2>
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	d12f      	bne.n	800ced6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	68b9      	ldr	r1, [r7, #8]
 800ce8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce8c:	f000 fa3a 	bl	800d304 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ce94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce98:	d112      	bne.n	800cec0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d016      	beq.n	800ced0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea4:	3324      	adds	r3, #36	@ 0x24
 800cea6:	4618      	mov	r0, r3
 800cea8:	f001 f82c 	bl	800df04 <xTaskRemoveFromEventList>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00e      	beq.n	800ced0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00b      	beq.n	800ced0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	e007      	b.n	800ced0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cec0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cec4:	3301      	adds	r3, #1
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	b25a      	sxtb	r2, r3
 800ceca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ced0:	2301      	movs	r3, #1
 800ced2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ced4:	e001      	b.n	800ceda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ced6:	2300      	movs	r3, #0
 800ced8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cedc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cee4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3740      	adds	r7, #64	@ 0x40
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08c      	sub	sp, #48	@ 0x30
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cefc:	2300      	movs	r3, #0
 800cefe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d10b      	bne.n	800cf22 <xQueueReceive+0x32>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	623b      	str	r3, [r7, #32]
}
 800cf1c:	bf00      	nop
 800cf1e:	bf00      	nop
 800cf20:	e7fd      	b.n	800cf1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d103      	bne.n	800cf30 <xQueueReceive+0x40>
 800cf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <xQueueReceive+0x44>
 800cf30:	2301      	movs	r3, #1
 800cf32:	e000      	b.n	800cf36 <xQueueReceive+0x46>
 800cf34:	2300      	movs	r3, #0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d10b      	bne.n	800cf52 <xQueueReceive+0x62>
	__asm volatile
 800cf3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3e:	f383 8811 	msr	BASEPRI, r3
 800cf42:	f3bf 8f6f 	isb	sy
 800cf46:	f3bf 8f4f 	dsb	sy
 800cf4a:	61fb      	str	r3, [r7, #28]
}
 800cf4c:	bf00      	nop
 800cf4e:	bf00      	nop
 800cf50:	e7fd      	b.n	800cf4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf52:	f001 f9ad 	bl	800e2b0 <xTaskGetSchedulerState>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d102      	bne.n	800cf62 <xQueueReceive+0x72>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <xQueueReceive+0x76>
 800cf62:	2301      	movs	r3, #1
 800cf64:	e000      	b.n	800cf68 <xQueueReceive+0x78>
 800cf66:	2300      	movs	r3, #0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10b      	bne.n	800cf84 <xQueueReceive+0x94>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	61bb      	str	r3, [r7, #24]
}
 800cf7e:	bf00      	nop
 800cf80:	bf00      	nop
 800cf82:	e7fd      	b.n	800cf80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf84:	f002 f800 	bl	800ef88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d01f      	beq.n	800cfd4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf94:	68b9      	ldr	r1, [r7, #8]
 800cf96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf98:	f000 fa1e 	bl	800d3d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9e:	1e5a      	subs	r2, r3, #1
 800cfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00f      	beq.n	800cfcc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfae:	3310      	adds	r3, #16
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 ffa7 	bl	800df04 <xTaskRemoveFromEventList>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d007      	beq.n	800cfcc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfbc:	4b3c      	ldr	r3, [pc, #240]	@ (800d0b0 <xQueueReceive+0x1c0>)
 800cfbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfcc:	f002 f80e 	bl	800efec <vPortExitCritical>
				return pdPASS;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e069      	b.n	800d0a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d103      	bne.n	800cfe2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfda:	f002 f807 	bl	800efec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e062      	b.n	800d0a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d106      	bne.n	800cff6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfe8:	f107 0310 	add.w	r3, r7, #16
 800cfec:	4618      	mov	r0, r3
 800cfee:	f000 ffed 	bl	800dfcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cff2:	2301      	movs	r3, #1
 800cff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cff6:	f001 fff9 	bl	800efec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cffa:	f000 fd55 	bl	800daa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cffe:	f001 ffc3 	bl	800ef88 <vPortEnterCritical>
 800d002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d004:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d008:	b25b      	sxtb	r3, r3
 800d00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00e:	d103      	bne.n	800d018 <xQueueReceive+0x128>
 800d010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d012:	2200      	movs	r2, #0
 800d014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d01e:	b25b      	sxtb	r3, r3
 800d020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d024:	d103      	bne.n	800d02e <xQueueReceive+0x13e>
 800d026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d02e:	f001 ffdd 	bl	800efec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d032:	1d3a      	adds	r2, r7, #4
 800d034:	f107 0310 	add.w	r3, r7, #16
 800d038:	4611      	mov	r1, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f000 ffdc 	bl	800dff8 <xTaskCheckForTimeOut>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d123      	bne.n	800d08e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d048:	f000 fa3e 	bl	800d4c8 <prvIsQueueEmpty>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d017      	beq.n	800d082 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d054:	3324      	adds	r3, #36	@ 0x24
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	4611      	mov	r1, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 ff00 	bl	800de60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d062:	f000 f9df 	bl	800d424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d066:	f000 fd2d 	bl	800dac4 <xTaskResumeAll>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d189      	bne.n	800cf84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d070:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b0 <xQueueReceive+0x1c0>)
 800d072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	e780      	b.n	800cf84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d084:	f000 f9ce 	bl	800d424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d088:	f000 fd1c 	bl	800dac4 <xTaskResumeAll>
 800d08c:	e77a      	b.n	800cf84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d08e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d090:	f000 f9c8 	bl	800d424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d094:	f000 fd16 	bl	800dac4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d09a:	f000 fa15 	bl	800d4c8 <prvIsQueueEmpty>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f43f af6f 	beq.w	800cf84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d0a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3730      	adds	r7, #48	@ 0x30
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	e000ed04 	.word	0xe000ed04

0800d0b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b08e      	sub	sp, #56	@ 0x38
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d10b      	bne.n	800d0e8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d4:	f383 8811 	msr	BASEPRI, r3
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	623b      	str	r3, [r7, #32]
}
 800d0e2:	bf00      	nop
 800d0e4:	bf00      	nop
 800d0e6:	e7fd      	b.n	800d0e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	61fb      	str	r3, [r7, #28]
}
 800d102:	bf00      	nop
 800d104:	bf00      	nop
 800d106:	e7fd      	b.n	800d104 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d108:	f001 f8d2 	bl	800e2b0 <xTaskGetSchedulerState>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d102      	bne.n	800d118 <xQueueSemaphoreTake+0x64>
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <xQueueSemaphoreTake+0x68>
 800d118:	2301      	movs	r3, #1
 800d11a:	e000      	b.n	800d11e <xQueueSemaphoreTake+0x6a>
 800d11c:	2300      	movs	r3, #0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10b      	bne.n	800d13a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	61bb      	str	r3, [r7, #24]
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop
 800d138:	e7fd      	b.n	800d136 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d13a:	f001 ff25 	bl	800ef88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d142:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d146:	2b00      	cmp	r3, #0
 800d148:	d024      	beq.n	800d194 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14c:	1e5a      	subs	r2, r3, #1
 800d14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d150:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d104      	bne.n	800d164 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d15a:	f001 fa23 	bl	800e5a4 <pvTaskIncrementMutexHeldCount>
 800d15e:	4602      	mov	r2, r0
 800d160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d162:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00f      	beq.n	800d18c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16e:	3310      	adds	r3, #16
 800d170:	4618      	mov	r0, r3
 800d172:	f000 fec7 	bl	800df04 <xTaskRemoveFromEventList>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d007      	beq.n	800d18c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d17c:	4b54      	ldr	r3, [pc, #336]	@ (800d2d0 <xQueueSemaphoreTake+0x21c>)
 800d17e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d18c:	f001 ff2e 	bl	800efec <vPortExitCritical>
				return pdPASS;
 800d190:	2301      	movs	r3, #1
 800d192:	e098      	b.n	800d2c6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d112      	bne.n	800d1c0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00b      	beq.n	800d1b8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	617b      	str	r3, [r7, #20]
}
 800d1b2:	bf00      	nop
 800d1b4:	bf00      	nop
 800d1b6:	e7fd      	b.n	800d1b4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d1b8:	f001 ff18 	bl	800efec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e082      	b.n	800d2c6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d106      	bne.n	800d1d4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1c6:	f107 030c 	add.w	r3, r7, #12
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 fefe 	bl	800dfcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1d4:	f001 ff0a 	bl	800efec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1d8:	f000 fc66 	bl	800daa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1dc:	f001 fed4 	bl	800ef88 <vPortEnterCritical>
 800d1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1e6:	b25b      	sxtb	r3, r3
 800d1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ec:	d103      	bne.n	800d1f6 <xQueueSemaphoreTake+0x142>
 800d1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1fc:	b25b      	sxtb	r3, r3
 800d1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d202:	d103      	bne.n	800d20c <xQueueSemaphoreTake+0x158>
 800d204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d206:	2200      	movs	r2, #0
 800d208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d20c:	f001 feee 	bl	800efec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d210:	463a      	mov	r2, r7
 800d212:	f107 030c 	add.w	r3, r7, #12
 800d216:	4611      	mov	r1, r2
 800d218:	4618      	mov	r0, r3
 800d21a:	f000 feed 	bl	800dff8 <xTaskCheckForTimeOut>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d132      	bne.n	800d28a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d224:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d226:	f000 f94f 	bl	800d4c8 <prvIsQueueEmpty>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d026      	beq.n	800d27e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d109      	bne.n	800d24c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d238:	f001 fea6 	bl	800ef88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	4618      	mov	r0, r3
 800d242:	f001 f853 	bl	800e2ec <xTaskPriorityInherit>
 800d246:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d248:	f001 fed0 	bl	800efec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24e:	3324      	adds	r3, #36	@ 0x24
 800d250:	683a      	ldr	r2, [r7, #0]
 800d252:	4611      	mov	r1, r2
 800d254:	4618      	mov	r0, r3
 800d256:	f000 fe03 	bl	800de60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d25a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d25c:	f000 f8e2 	bl	800d424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d260:	f000 fc30 	bl	800dac4 <xTaskResumeAll>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	f47f af67 	bne.w	800d13a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d26c:	4b18      	ldr	r3, [pc, #96]	@ (800d2d0 <xQueueSemaphoreTake+0x21c>)
 800d26e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d272:	601a      	str	r2, [r3, #0]
 800d274:	f3bf 8f4f 	dsb	sy
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	e75d      	b.n	800d13a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d27e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d280:	f000 f8d0 	bl	800d424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d284:	f000 fc1e 	bl	800dac4 <xTaskResumeAll>
 800d288:	e757      	b.n	800d13a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d28a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d28c:	f000 f8ca 	bl	800d424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d290:	f000 fc18 	bl	800dac4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d294:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d296:	f000 f917 	bl	800d4c8 <prvIsQueueEmpty>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f43f af4c 	beq.w	800d13a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00d      	beq.n	800d2c4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d2a8:	f001 fe6e 	bl	800ef88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d2ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2ae:	f000 f811 	bl	800d2d4 <prvGetDisinheritPriorityAfterTimeout>
 800d2b2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f001 f8ee 	bl	800e49c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d2c0:	f001 fe94 	bl	800efec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d2c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3738      	adds	r7, #56	@ 0x38
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	e000ed04 	.word	0xe000ed04

0800d2d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d006      	beq.n	800d2f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	e001      	b.n	800d2f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d310:	2300      	movs	r3, #0
 800d312:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d318:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d10d      	bne.n	800d33e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d14d      	bne.n	800d3c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	689b      	ldr	r3, [r3, #8]
 800d32e:	4618      	mov	r0, r3
 800d330:	f001 f844 	bl	800e3bc <xTaskPriorityDisinherit>
 800d334:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	609a      	str	r2, [r3, #8]
 800d33c:	e043      	b.n	800d3c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d119      	bne.n	800d378 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6858      	ldr	r0, [r3, #4]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d34c:	461a      	mov	r2, r3
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	f003 f8a1 	bl	8010496 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	685a      	ldr	r2, [r3, #4]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d35c:	441a      	add	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	685a      	ldr	r2, [r3, #4]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	689b      	ldr	r3, [r3, #8]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d32b      	bcc.n	800d3c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	605a      	str	r2, [r3, #4]
 800d376:	e026      	b.n	800d3c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	68d8      	ldr	r0, [r3, #12]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d380:	461a      	mov	r2, r3
 800d382:	68b9      	ldr	r1, [r7, #8]
 800d384:	f003 f887 	bl	8010496 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	68da      	ldr	r2, [r3, #12]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d390:	425b      	negs	r3, r3
 800d392:	441a      	add	r2, r3
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	68da      	ldr	r2, [r3, #12]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d207      	bcs.n	800d3b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	689a      	ldr	r2, [r3, #8]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ac:	425b      	negs	r3, r3
 800d3ae:	441a      	add	r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	d105      	bne.n	800d3c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d3ce:	697b      	ldr	r3, [r7, #20]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d018      	beq.n	800d41c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68da      	ldr	r2, [r3, #12]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f2:	441a      	add	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	68da      	ldr	r2, [r3, #12]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	429a      	cmp	r2, r3
 800d402:	d303      	bcc.n	800d40c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	68d9      	ldr	r1, [r3, #12]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d414:	461a      	mov	r2, r3
 800d416:	6838      	ldr	r0, [r7, #0]
 800d418:	f003 f83d 	bl	8010496 <memcpy>
	}
}
 800d41c:	bf00      	nop
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d42c:	f001 fdac 	bl	800ef88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d436:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d438:	e011      	b.n	800d45e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d012      	beq.n	800d468 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3324      	adds	r3, #36	@ 0x24
 800d446:	4618      	mov	r0, r3
 800d448:	f000 fd5c 	bl	800df04 <xTaskRemoveFromEventList>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d452:	f000 fe35 	bl	800e0c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d456:	7bfb      	ldrb	r3, [r7, #15]
 800d458:	3b01      	subs	r3, #1
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d45e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d462:	2b00      	cmp	r3, #0
 800d464:	dce9      	bgt.n	800d43a <prvUnlockQueue+0x16>
 800d466:	e000      	b.n	800d46a <prvUnlockQueue+0x46>
					break;
 800d468:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	22ff      	movs	r2, #255	@ 0xff
 800d46e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d472:	f001 fdbb 	bl	800efec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d476:	f001 fd87 	bl	800ef88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d480:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d482:	e011      	b.n	800d4a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	691b      	ldr	r3, [r3, #16]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d012      	beq.n	800d4b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3310      	adds	r3, #16
 800d490:	4618      	mov	r0, r3
 800d492:	f000 fd37 	bl	800df04 <xTaskRemoveFromEventList>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d49c:	f000 fe10 	bl	800e0c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d4a0:	7bbb      	ldrb	r3, [r7, #14]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	dce9      	bgt.n	800d484 <prvUnlockQueue+0x60>
 800d4b0:	e000      	b.n	800d4b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d4b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	22ff      	movs	r2, #255	@ 0xff
 800d4b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d4bc:	f001 fd96 	bl	800efec <vPortExitCritical>
}
 800d4c0:	bf00      	nop
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4d0:	f001 fd5a 	bl	800ef88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d102      	bne.n	800d4e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	60fb      	str	r3, [r7, #12]
 800d4e0:	e001      	b.n	800d4e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4e6:	f001 fd81 	bl	800efec <vPortExitCritical>

	return xReturn;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4fc:	f001 fd44 	bl	800ef88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d508:	429a      	cmp	r2, r3
 800d50a:	d102      	bne.n	800d512 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d50c:	2301      	movs	r3, #1
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	e001      	b.n	800d516 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d512:	2300      	movs	r3, #0
 800d514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d516:	f001 fd69 	bl	800efec <vPortExitCritical>

	return xReturn;
 800d51a:	68fb      	ldr	r3, [r7, #12]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3710      	adds	r7, #16
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d524:	b480      	push	{r7}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d52e:	2300      	movs	r3, #0
 800d530:	60fb      	str	r3, [r7, #12]
 800d532:	e014      	b.n	800d55e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d534:	4a0f      	ldr	r2, [pc, #60]	@ (800d574 <vQueueAddToRegistry+0x50>)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10b      	bne.n	800d558 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d540:	490c      	ldr	r1, [pc, #48]	@ (800d574 <vQueueAddToRegistry+0x50>)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d54a:	4a0a      	ldr	r2, [pc, #40]	@ (800d574 <vQueueAddToRegistry+0x50>)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	00db      	lsls	r3, r3, #3
 800d550:	4413      	add	r3, r2
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d556:	e006      	b.n	800d566 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	3301      	adds	r3, #1
 800d55c:	60fb      	str	r3, [r7, #12]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2b07      	cmp	r3, #7
 800d562:	d9e7      	bls.n	800d534 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d564:	bf00      	nop
 800d566:	bf00      	nop
 800d568:	3714      	adds	r7, #20
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	20001bb0 	.word	0x20001bb0

0800d578 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d588:	f001 fcfe 	bl	800ef88 <vPortEnterCritical>
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d592:	b25b      	sxtb	r3, r3
 800d594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d598:	d103      	bne.n	800d5a2 <vQueueWaitForMessageRestricted+0x2a>
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5a8:	b25b      	sxtb	r3, r3
 800d5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ae:	d103      	bne.n	800d5b8 <vQueueWaitForMessageRestricted+0x40>
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5b8:	f001 fd18 	bl	800efec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d106      	bne.n	800d5d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	3324      	adds	r3, #36	@ 0x24
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	68b9      	ldr	r1, [r7, #8]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f000 fc6d 	bl	800deac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d5d2:	6978      	ldr	r0, [r7, #20]
 800d5d4:	f7ff ff26 	bl	800d424 <prvUnlockQueue>
	}
 800d5d8:	bf00      	nop
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08e      	sub	sp, #56	@ 0x38
 800d5e4:	af04      	add	r7, sp, #16
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
 800d5ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d5ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10b      	bne.n	800d60c <xTaskCreateStatic+0x2c>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	623b      	str	r3, [r7, #32]
}
 800d606:	bf00      	nop
 800d608:	bf00      	nop
 800d60a:	e7fd      	b.n	800d608 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10b      	bne.n	800d62a <xTaskCreateStatic+0x4a>
	__asm volatile
 800d612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d616:	f383 8811 	msr	BASEPRI, r3
 800d61a:	f3bf 8f6f 	isb	sy
 800d61e:	f3bf 8f4f 	dsb	sy
 800d622:	61fb      	str	r3, [r7, #28]
}
 800d624:	bf00      	nop
 800d626:	bf00      	nop
 800d628:	e7fd      	b.n	800d626 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d62a:	23a8      	movs	r3, #168	@ 0xa8
 800d62c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	2ba8      	cmp	r3, #168	@ 0xa8
 800d632:	d00b      	beq.n	800d64c <xTaskCreateStatic+0x6c>
	__asm volatile
 800d634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d638:	f383 8811 	msr	BASEPRI, r3
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	61bb      	str	r3, [r7, #24]
}
 800d646:	bf00      	nop
 800d648:	bf00      	nop
 800d64a:	e7fd      	b.n	800d648 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d64c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d650:	2b00      	cmp	r3, #0
 800d652:	d01e      	beq.n	800d692 <xTaskCreateStatic+0xb2>
 800d654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d656:	2b00      	cmp	r3, #0
 800d658:	d01b      	beq.n	800d692 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d662:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d666:	2202      	movs	r2, #2
 800d668:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d66c:	2300      	movs	r3, #0
 800d66e:	9303      	str	r3, [sp, #12]
 800d670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d672:	9302      	str	r3, [sp, #8]
 800d674:	f107 0314 	add.w	r3, r7, #20
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	68b9      	ldr	r1, [r7, #8]
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f000 f851 	bl	800d72c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d68a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d68c:	f000 f8f6 	bl	800d87c <prvAddNewTaskToReadyList>
 800d690:	e001      	b.n	800d696 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d692:	2300      	movs	r3, #0
 800d694:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d696:	697b      	ldr	r3, [r7, #20]
	}
 800d698:	4618      	mov	r0, r3
 800d69a:	3728      	adds	r7, #40	@ 0x28
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b08c      	sub	sp, #48	@ 0x30
 800d6a4:	af04      	add	r7, sp, #16
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	603b      	str	r3, [r7, #0]
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d6b0:	88fb      	ldrh	r3, [r7, #6]
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f001 fd89 	bl	800f1cc <pvPortMalloc>
 800d6ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00e      	beq.n	800d6e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d6c2:	20a8      	movs	r0, #168	@ 0xa8
 800d6c4:	f001 fd82 	bl	800f1cc <pvPortMalloc>
 800d6c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d003      	beq.n	800d6d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800d6d6:	e005      	b.n	800d6e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6d8:	6978      	ldr	r0, [r7, #20]
 800d6da:	f001 fe45 	bl	800f368 <vPortFree>
 800d6de:	e001      	b.n	800d6e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d017      	beq.n	800d71a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6f2:	88fa      	ldrh	r2, [r7, #6]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	9303      	str	r3, [sp, #12]
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	9302      	str	r3, [sp, #8]
 800d6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fe:	9301      	str	r3, [sp, #4]
 800d700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	68b9      	ldr	r1, [r7, #8]
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f000 f80f 	bl	800d72c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d70e:	69f8      	ldr	r0, [r7, #28]
 800d710:	f000 f8b4 	bl	800d87c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d714:	2301      	movs	r3, #1
 800d716:	61bb      	str	r3, [r7, #24]
 800d718:	e002      	b.n	800d720 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d71a:	f04f 33ff 	mov.w	r3, #4294967295
 800d71e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d720:	69bb      	ldr	r3, [r7, #24]
	}
 800d722:	4618      	mov	r0, r3
 800d724:	3720      	adds	r7, #32
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
	...

0800d72c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
 800d738:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	461a      	mov	r2, r3
 800d744:	21a5      	movs	r1, #165	@ 0xa5
 800d746:	f002 fdb6 	bl	80102b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d754:	3b01      	subs	r3, #1
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	f023 0307 	bic.w	r3, r3, #7
 800d762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00b      	beq.n	800d786 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	617b      	str	r3, [r7, #20]
}
 800d780:	bf00      	nop
 800d782:	bf00      	nop
 800d784:	e7fd      	b.n	800d782 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d01f      	beq.n	800d7cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d78c:	2300      	movs	r3, #0
 800d78e:	61fb      	str	r3, [r7, #28]
 800d790:	e012      	b.n	800d7b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	4413      	add	r3, r2
 800d798:	7819      	ldrb	r1, [r3, #0]
 800d79a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	4413      	add	r3, r2
 800d7a0:	3334      	adds	r3, #52	@ 0x34
 800d7a2:	460a      	mov	r2, r1
 800d7a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d006      	beq.n	800d7c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	61fb      	str	r3, [r7, #28]
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	2b0f      	cmp	r3, #15
 800d7bc:	d9e9      	bls.n	800d792 <prvInitialiseNewTask+0x66>
 800d7be:	e000      	b.n	800d7c2 <prvInitialiseNewTask+0x96>
			{
				break;
 800d7c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d7ca:	e003      	b.n	800d7d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d6:	2b37      	cmp	r3, #55	@ 0x37
 800d7d8:	d901      	bls.n	800d7de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7da:	2337      	movs	r3, #55	@ 0x37
 800d7dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fe ff49 	bl	800c68c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7fc:	3318      	adds	r3, #24
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fe ff44 	bl	800c68c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d808:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d80c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d812:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d818:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81c:	2200      	movs	r2, #0
 800d81e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d824:	2200      	movs	r2, #0
 800d826:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82c:	3354      	adds	r3, #84	@ 0x54
 800d82e:	224c      	movs	r2, #76	@ 0x4c
 800d830:	2100      	movs	r1, #0
 800d832:	4618      	mov	r0, r3
 800d834:	f002 fd3f 	bl	80102b6 <memset>
 800d838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83a:	4a0d      	ldr	r2, [pc, #52]	@ (800d870 <prvInitialiseNewTask+0x144>)
 800d83c:	659a      	str	r2, [r3, #88]	@ 0x58
 800d83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d840:	4a0c      	ldr	r2, [pc, #48]	@ (800d874 <prvInitialiseNewTask+0x148>)
 800d842:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d846:	4a0c      	ldr	r2, [pc, #48]	@ (800d878 <prvInitialiseNewTask+0x14c>)
 800d848:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	68f9      	ldr	r1, [r7, #12]
 800d84e:	69b8      	ldr	r0, [r7, #24]
 800d850:	f001 fa6a 	bl	800ed28 <pxPortInitialiseStack>
 800d854:	4602      	mov	r2, r0
 800d856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d858:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d002      	beq.n	800d866 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d866:	bf00      	nop
 800d868:	3720      	adds	r7, #32
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	20005e58 	.word	0x20005e58
 800d874:	20005ec0 	.word	0x20005ec0
 800d878:	20005f28 	.word	0x20005f28

0800d87c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d884:	f001 fb80 	bl	800ef88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d888:	4b2d      	ldr	r3, [pc, #180]	@ (800d940 <prvAddNewTaskToReadyList+0xc4>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	3301      	adds	r3, #1
 800d88e:	4a2c      	ldr	r2, [pc, #176]	@ (800d940 <prvAddNewTaskToReadyList+0xc4>)
 800d890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d892:	4b2c      	ldr	r3, [pc, #176]	@ (800d944 <prvAddNewTaskToReadyList+0xc8>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d109      	bne.n	800d8ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d89a:	4a2a      	ldr	r2, [pc, #168]	@ (800d944 <prvAddNewTaskToReadyList+0xc8>)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8a0:	4b27      	ldr	r3, [pc, #156]	@ (800d940 <prvAddNewTaskToReadyList+0xc4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d110      	bne.n	800d8ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d8a8:	f000 fc2e 	bl	800e108 <prvInitialiseTaskLists>
 800d8ac:	e00d      	b.n	800d8ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d8ae:	4b26      	ldr	r3, [pc, #152]	@ (800d948 <prvAddNewTaskToReadyList+0xcc>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d109      	bne.n	800d8ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d8b6:	4b23      	ldr	r3, [pc, #140]	@ (800d944 <prvAddNewTaskToReadyList+0xc8>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d802      	bhi.n	800d8ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d8c4:	4a1f      	ldr	r2, [pc, #124]	@ (800d944 <prvAddNewTaskToReadyList+0xc8>)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d8ca:	4b20      	ldr	r3, [pc, #128]	@ (800d94c <prvAddNewTaskToReadyList+0xd0>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	4a1e      	ldr	r2, [pc, #120]	@ (800d94c <prvAddNewTaskToReadyList+0xd0>)
 800d8d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d8d4:	4b1d      	ldr	r3, [pc, #116]	@ (800d94c <prvAddNewTaskToReadyList+0xd0>)
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8e0:	4b1b      	ldr	r3, [pc, #108]	@ (800d950 <prvAddNewTaskToReadyList+0xd4>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d903      	bls.n	800d8f0 <prvAddNewTaskToReadyList+0x74>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ec:	4a18      	ldr	r2, [pc, #96]	@ (800d950 <prvAddNewTaskToReadyList+0xd4>)
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4a15      	ldr	r2, [pc, #84]	@ (800d954 <prvAddNewTaskToReadyList+0xd8>)
 800d8fe:	441a      	add	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	3304      	adds	r3, #4
 800d904:	4619      	mov	r1, r3
 800d906:	4610      	mov	r0, r2
 800d908:	f7fe fecd 	bl	800c6a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d90c:	f001 fb6e 	bl	800efec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d910:	4b0d      	ldr	r3, [pc, #52]	@ (800d948 <prvAddNewTaskToReadyList+0xcc>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00e      	beq.n	800d936 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d918:	4b0a      	ldr	r3, [pc, #40]	@ (800d944 <prvAddNewTaskToReadyList+0xc8>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d922:	429a      	cmp	r2, r3
 800d924:	d207      	bcs.n	800d936 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d926:	4b0c      	ldr	r3, [pc, #48]	@ (800d958 <prvAddNewTaskToReadyList+0xdc>)
 800d928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d936:	bf00      	nop
 800d938:	3708      	adds	r7, #8
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	200020c4 	.word	0x200020c4
 800d944:	20001bf0 	.word	0x20001bf0
 800d948:	200020d0 	.word	0x200020d0
 800d94c:	200020e0 	.word	0x200020e0
 800d950:	200020cc 	.word	0x200020cc
 800d954:	20001bf4 	.word	0x20001bf4
 800d958:	e000ed04 	.word	0xe000ed04

0800d95c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d964:	2300      	movs	r3, #0
 800d966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d018      	beq.n	800d9a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d96e:	4b14      	ldr	r3, [pc, #80]	@ (800d9c0 <vTaskDelay+0x64>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00b      	beq.n	800d98e <vTaskDelay+0x32>
	__asm volatile
 800d976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	60bb      	str	r3, [r7, #8]
}
 800d988:	bf00      	nop
 800d98a:	bf00      	nop
 800d98c:	e7fd      	b.n	800d98a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d98e:	f000 f88b 	bl	800daa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d992:	2100      	movs	r1, #0
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 fe19 	bl	800e5cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d99a:	f000 f893 	bl	800dac4 <xTaskResumeAll>
 800d99e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d107      	bne.n	800d9b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d9a6:	4b07      	ldr	r3, [pc, #28]	@ (800d9c4 <vTaskDelay+0x68>)
 800d9a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9b6:	bf00      	nop
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	200020ec 	.word	0x200020ec
 800d9c4:	e000ed04 	.word	0xe000ed04

0800d9c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b08a      	sub	sp, #40	@ 0x28
 800d9cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d9d6:	463a      	mov	r2, r7
 800d9d8:	1d39      	adds	r1, r7, #4
 800d9da:	f107 0308 	add.w	r3, r7, #8
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7fe fe00 	bl	800c5e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d9e4:	6839      	ldr	r1, [r7, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	9202      	str	r2, [sp, #8]
 800d9ec:	9301      	str	r3, [sp, #4]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	460a      	mov	r2, r1
 800d9f6:	4924      	ldr	r1, [pc, #144]	@ (800da88 <vTaskStartScheduler+0xc0>)
 800d9f8:	4824      	ldr	r0, [pc, #144]	@ (800da8c <vTaskStartScheduler+0xc4>)
 800d9fa:	f7ff fdf1 	bl	800d5e0 <xTaskCreateStatic>
 800d9fe:	4603      	mov	r3, r0
 800da00:	4a23      	ldr	r2, [pc, #140]	@ (800da90 <vTaskStartScheduler+0xc8>)
 800da02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da04:	4b22      	ldr	r3, [pc, #136]	@ (800da90 <vTaskStartScheduler+0xc8>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da0c:	2301      	movs	r3, #1
 800da0e:	617b      	str	r3, [r7, #20]
 800da10:	e001      	b.n	800da16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da12:	2300      	movs	r3, #0
 800da14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d102      	bne.n	800da22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800da1c:	f000 fe2a 	bl	800e674 <xTimerCreateTimerTask>
 800da20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d11b      	bne.n	800da60 <vTaskStartScheduler+0x98>
	__asm volatile
 800da28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2c:	f383 8811 	msr	BASEPRI, r3
 800da30:	f3bf 8f6f 	isb	sy
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	613b      	str	r3, [r7, #16]
}
 800da3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800da3c:	4b15      	ldr	r3, [pc, #84]	@ (800da94 <vTaskStartScheduler+0xcc>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	3354      	adds	r3, #84	@ 0x54
 800da42:	4a15      	ldr	r2, [pc, #84]	@ (800da98 <vTaskStartScheduler+0xd0>)
 800da44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da46:	4b15      	ldr	r3, [pc, #84]	@ (800da9c <vTaskStartScheduler+0xd4>)
 800da48:	f04f 32ff 	mov.w	r2, #4294967295
 800da4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da4e:	4b14      	ldr	r3, [pc, #80]	@ (800daa0 <vTaskStartScheduler+0xd8>)
 800da50:	2201      	movs	r2, #1
 800da52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da54:	4b13      	ldr	r3, [pc, #76]	@ (800daa4 <vTaskStartScheduler+0xdc>)
 800da56:	2200      	movs	r2, #0
 800da58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da5a:	f001 f9f1 	bl	800ee40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da5e:	e00f      	b.n	800da80 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da66:	d10b      	bne.n	800da80 <vTaskStartScheduler+0xb8>
	__asm volatile
 800da68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6c:	f383 8811 	msr	BASEPRI, r3
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	f3bf 8f4f 	dsb	sy
 800da78:	60fb      	str	r3, [r7, #12]
}
 800da7a:	bf00      	nop
 800da7c:	bf00      	nop
 800da7e:	e7fd      	b.n	800da7c <vTaskStartScheduler+0xb4>
}
 800da80:	bf00      	nop
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	08012b38 	.word	0x08012b38
 800da8c:	0800e0d9 	.word	0x0800e0d9
 800da90:	200020e8 	.word	0x200020e8
 800da94:	20001bf0 	.word	0x20001bf0
 800da98:	20000088 	.word	0x20000088
 800da9c:	200020e4 	.word	0x200020e4
 800daa0:	200020d0 	.word	0x200020d0
 800daa4:	200020c8 	.word	0x200020c8

0800daa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800daa8:	b480      	push	{r7}
 800daaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800daac:	4b04      	ldr	r3, [pc, #16]	@ (800dac0 <vTaskSuspendAll+0x18>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	3301      	adds	r3, #1
 800dab2:	4a03      	ldr	r2, [pc, #12]	@ (800dac0 <vTaskSuspendAll+0x18>)
 800dab4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dab6:	bf00      	nop
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr
 800dac0:	200020ec 	.word	0x200020ec

0800dac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800daca:	2300      	movs	r3, #0
 800dacc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dace:	2300      	movs	r3, #0
 800dad0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dad2:	4b42      	ldr	r3, [pc, #264]	@ (800dbdc <xTaskResumeAll+0x118>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d10b      	bne.n	800daf2 <xTaskResumeAll+0x2e>
	__asm volatile
 800dada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	603b      	str	r3, [r7, #0]
}
 800daec:	bf00      	nop
 800daee:	bf00      	nop
 800daf0:	e7fd      	b.n	800daee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800daf2:	f001 fa49 	bl	800ef88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800daf6:	4b39      	ldr	r3, [pc, #228]	@ (800dbdc <xTaskResumeAll+0x118>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	3b01      	subs	r3, #1
 800dafc:	4a37      	ldr	r2, [pc, #220]	@ (800dbdc <xTaskResumeAll+0x118>)
 800dafe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db00:	4b36      	ldr	r3, [pc, #216]	@ (800dbdc <xTaskResumeAll+0x118>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d162      	bne.n	800dbce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db08:	4b35      	ldr	r3, [pc, #212]	@ (800dbe0 <xTaskResumeAll+0x11c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d05e      	beq.n	800dbce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db10:	e02f      	b.n	800db72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db12:	4b34      	ldr	r3, [pc, #208]	@ (800dbe4 <xTaskResumeAll+0x120>)
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3318      	adds	r3, #24
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe fe1e 	bl	800c760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	3304      	adds	r3, #4
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fe fe19 	bl	800c760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db32:	4b2d      	ldr	r3, [pc, #180]	@ (800dbe8 <xTaskResumeAll+0x124>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	429a      	cmp	r2, r3
 800db38:	d903      	bls.n	800db42 <xTaskResumeAll+0x7e>
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db3e:	4a2a      	ldr	r2, [pc, #168]	@ (800dbe8 <xTaskResumeAll+0x124>)
 800db40:	6013      	str	r3, [r2, #0]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db46:	4613      	mov	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	4413      	add	r3, r2
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	4a27      	ldr	r2, [pc, #156]	@ (800dbec <xTaskResumeAll+0x128>)
 800db50:	441a      	add	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	3304      	adds	r3, #4
 800db56:	4619      	mov	r1, r3
 800db58:	4610      	mov	r0, r2
 800db5a:	f7fe fda4 	bl	800c6a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db62:	4b23      	ldr	r3, [pc, #140]	@ (800dbf0 <xTaskResumeAll+0x12c>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db68:	429a      	cmp	r2, r3
 800db6a:	d302      	bcc.n	800db72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800db6c:	4b21      	ldr	r3, [pc, #132]	@ (800dbf4 <xTaskResumeAll+0x130>)
 800db6e:	2201      	movs	r2, #1
 800db70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db72:	4b1c      	ldr	r3, [pc, #112]	@ (800dbe4 <xTaskResumeAll+0x120>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1cb      	bne.n	800db12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db80:	f000 fb66 	bl	800e250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db84:	4b1c      	ldr	r3, [pc, #112]	@ (800dbf8 <xTaskResumeAll+0x134>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d010      	beq.n	800dbb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db90:	f000 f846 	bl	800dc20 <xTaskIncrementTick>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d002      	beq.n	800dba0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800db9a:	4b16      	ldr	r3, [pc, #88]	@ (800dbf4 <xTaskResumeAll+0x130>)
 800db9c:	2201      	movs	r2, #1
 800db9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	3b01      	subs	r3, #1
 800dba4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1f1      	bne.n	800db90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dbac:	4b12      	ldr	r3, [pc, #72]	@ (800dbf8 <xTaskResumeAll+0x134>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dbb2:	4b10      	ldr	r3, [pc, #64]	@ (800dbf4 <xTaskResumeAll+0x130>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d009      	beq.n	800dbce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dbbe:	4b0f      	ldr	r3, [pc, #60]	@ (800dbfc <xTaskResumeAll+0x138>)
 800dbc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dbce:	f001 fa0d 	bl	800efec <vPortExitCritical>

	return xAlreadyYielded;
 800dbd2:	68bb      	ldr	r3, [r7, #8]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	200020ec 	.word	0x200020ec
 800dbe0:	200020c4 	.word	0x200020c4
 800dbe4:	20002084 	.word	0x20002084
 800dbe8:	200020cc 	.word	0x200020cc
 800dbec:	20001bf4 	.word	0x20001bf4
 800dbf0:	20001bf0 	.word	0x20001bf0
 800dbf4:	200020d8 	.word	0x200020d8
 800dbf8:	200020d4 	.word	0x200020d4
 800dbfc:	e000ed04 	.word	0xe000ed04

0800dc00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc06:	4b05      	ldr	r3, [pc, #20]	@ (800dc1c <xTaskGetTickCount+0x1c>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc0c:	687b      	ldr	r3, [r7, #4]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	200020c8 	.word	0x200020c8

0800dc20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc26:	2300      	movs	r3, #0
 800dc28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc2a:	4b4f      	ldr	r3, [pc, #316]	@ (800dd68 <xTaskIncrementTick+0x148>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f040 8090 	bne.w	800dd54 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc34:	4b4d      	ldr	r3, [pc, #308]	@ (800dd6c <xTaskIncrementTick+0x14c>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc3c:	4a4b      	ldr	r2, [pc, #300]	@ (800dd6c <xTaskIncrementTick+0x14c>)
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d121      	bne.n	800dc8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc48:	4b49      	ldr	r3, [pc, #292]	@ (800dd70 <xTaskIncrementTick+0x150>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00b      	beq.n	800dc6a <xTaskIncrementTick+0x4a>
	__asm volatile
 800dc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	603b      	str	r3, [r7, #0]
}
 800dc64:	bf00      	nop
 800dc66:	bf00      	nop
 800dc68:	e7fd      	b.n	800dc66 <xTaskIncrementTick+0x46>
 800dc6a:	4b41      	ldr	r3, [pc, #260]	@ (800dd70 <xTaskIncrementTick+0x150>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	60fb      	str	r3, [r7, #12]
 800dc70:	4b40      	ldr	r3, [pc, #256]	@ (800dd74 <xTaskIncrementTick+0x154>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a3e      	ldr	r2, [pc, #248]	@ (800dd70 <xTaskIncrementTick+0x150>)
 800dc76:	6013      	str	r3, [r2, #0]
 800dc78:	4a3e      	ldr	r2, [pc, #248]	@ (800dd74 <xTaskIncrementTick+0x154>)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6013      	str	r3, [r2, #0]
 800dc7e:	4b3e      	ldr	r3, [pc, #248]	@ (800dd78 <xTaskIncrementTick+0x158>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	3301      	adds	r3, #1
 800dc84:	4a3c      	ldr	r2, [pc, #240]	@ (800dd78 <xTaskIncrementTick+0x158>)
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	f000 fae2 	bl	800e250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc8c:	4b3b      	ldr	r3, [pc, #236]	@ (800dd7c <xTaskIncrementTick+0x15c>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	693a      	ldr	r2, [r7, #16]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d349      	bcc.n	800dd2a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc96:	4b36      	ldr	r3, [pc, #216]	@ (800dd70 <xTaskIncrementTick+0x150>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d104      	bne.n	800dcaa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dca0:	4b36      	ldr	r3, [pc, #216]	@ (800dd7c <xTaskIncrementTick+0x15c>)
 800dca2:	f04f 32ff 	mov.w	r2, #4294967295
 800dca6:	601a      	str	r2, [r3, #0]
					break;
 800dca8:	e03f      	b.n	800dd2a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcaa:	4b31      	ldr	r3, [pc, #196]	@ (800dd70 <xTaskIncrementTick+0x150>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dcba:	693a      	ldr	r2, [r7, #16]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d203      	bcs.n	800dcca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dcc2:	4a2e      	ldr	r2, [pc, #184]	@ (800dd7c <xTaskIncrementTick+0x15c>)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dcc8:	e02f      	b.n	800dd2a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	3304      	adds	r3, #4
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fe fd46 	bl	800c760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d004      	beq.n	800dce6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	3318      	adds	r3, #24
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe fd3d 	bl	800c760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcea:	4b25      	ldr	r3, [pc, #148]	@ (800dd80 <xTaskIncrementTick+0x160>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d903      	bls.n	800dcfa <xTaskIncrementTick+0xda>
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf6:	4a22      	ldr	r2, [pc, #136]	@ (800dd80 <xTaskIncrementTick+0x160>)
 800dcf8:	6013      	str	r3, [r2, #0]
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcfe:	4613      	mov	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4a1f      	ldr	r2, [pc, #124]	@ (800dd84 <xTaskIncrementTick+0x164>)
 800dd08:	441a      	add	r2, r3
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4610      	mov	r0, r2
 800dd12:	f7fe fcc8 	bl	800c6a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd1a:	4b1b      	ldr	r3, [pc, #108]	@ (800dd88 <xTaskIncrementTick+0x168>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d3b8      	bcc.n	800dc96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dd24:	2301      	movs	r3, #1
 800dd26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd28:	e7b5      	b.n	800dc96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd2a:	4b17      	ldr	r3, [pc, #92]	@ (800dd88 <xTaskIncrementTick+0x168>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd30:	4914      	ldr	r1, [pc, #80]	@ (800dd84 <xTaskIncrementTick+0x164>)
 800dd32:	4613      	mov	r3, r2
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	4413      	add	r3, r2
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	440b      	add	r3, r1
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d901      	bls.n	800dd46 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dd42:	2301      	movs	r3, #1
 800dd44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd46:	4b11      	ldr	r3, [pc, #68]	@ (800dd8c <xTaskIncrementTick+0x16c>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d007      	beq.n	800dd5e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	617b      	str	r3, [r7, #20]
 800dd52:	e004      	b.n	800dd5e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dd54:	4b0e      	ldr	r3, [pc, #56]	@ (800dd90 <xTaskIncrementTick+0x170>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	4a0d      	ldr	r2, [pc, #52]	@ (800dd90 <xTaskIncrementTick+0x170>)
 800dd5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dd5e:	697b      	ldr	r3, [r7, #20]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3718      	adds	r7, #24
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	200020ec 	.word	0x200020ec
 800dd6c:	200020c8 	.word	0x200020c8
 800dd70:	2000207c 	.word	0x2000207c
 800dd74:	20002080 	.word	0x20002080
 800dd78:	200020dc 	.word	0x200020dc
 800dd7c:	200020e4 	.word	0x200020e4
 800dd80:	200020cc 	.word	0x200020cc
 800dd84:	20001bf4 	.word	0x20001bf4
 800dd88:	20001bf0 	.word	0x20001bf0
 800dd8c:	200020d8 	.word	0x200020d8
 800dd90:	200020d4 	.word	0x200020d4

0800dd94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd9a:	4b2b      	ldr	r3, [pc, #172]	@ (800de48 <vTaskSwitchContext+0xb4>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d003      	beq.n	800ddaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dda2:	4b2a      	ldr	r3, [pc, #168]	@ (800de4c <vTaskSwitchContext+0xb8>)
 800dda4:	2201      	movs	r2, #1
 800dda6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dda8:	e047      	b.n	800de3a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ddaa:	4b28      	ldr	r3, [pc, #160]	@ (800de4c <vTaskSwitchContext+0xb8>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddb0:	4b27      	ldr	r3, [pc, #156]	@ (800de50 <vTaskSwitchContext+0xbc>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	60fb      	str	r3, [r7, #12]
 800ddb6:	e011      	b.n	800dddc <vTaskSwitchContext+0x48>
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d10b      	bne.n	800ddd6 <vTaskSwitchContext+0x42>
	__asm volatile
 800ddbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	607b      	str	r3, [r7, #4]
}
 800ddd0:	bf00      	nop
 800ddd2:	bf00      	nop
 800ddd4:	e7fd      	b.n	800ddd2 <vTaskSwitchContext+0x3e>
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	60fb      	str	r3, [r7, #12]
 800dddc:	491d      	ldr	r1, [pc, #116]	@ (800de54 <vTaskSwitchContext+0xc0>)
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	4613      	mov	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	4413      	add	r3, r2
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	440b      	add	r3, r1
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d0e3      	beq.n	800ddb8 <vTaskSwitchContext+0x24>
 800ddf0:	68fa      	ldr	r2, [r7, #12]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	4413      	add	r3, r2
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4a16      	ldr	r2, [pc, #88]	@ (800de54 <vTaskSwitchContext+0xc0>)
 800ddfc:	4413      	add	r3, r2
 800ddfe:	60bb      	str	r3, [r7, #8]
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	685a      	ldr	r2, [r3, #4]
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	605a      	str	r2, [r3, #4]
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	685a      	ldr	r2, [r3, #4]
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	3308      	adds	r3, #8
 800de12:	429a      	cmp	r2, r3
 800de14:	d104      	bne.n	800de20 <vTaskSwitchContext+0x8c>
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	605a      	str	r2, [r3, #4]
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	4a0c      	ldr	r2, [pc, #48]	@ (800de58 <vTaskSwitchContext+0xc4>)
 800de28:	6013      	str	r3, [r2, #0]
 800de2a:	4a09      	ldr	r2, [pc, #36]	@ (800de50 <vTaskSwitchContext+0xbc>)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de30:	4b09      	ldr	r3, [pc, #36]	@ (800de58 <vTaskSwitchContext+0xc4>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3354      	adds	r3, #84	@ 0x54
 800de36:	4a09      	ldr	r2, [pc, #36]	@ (800de5c <vTaskSwitchContext+0xc8>)
 800de38:	6013      	str	r3, [r2, #0]
}
 800de3a:	bf00      	nop
 800de3c:	3714      	adds	r7, #20
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	200020ec 	.word	0x200020ec
 800de4c:	200020d8 	.word	0x200020d8
 800de50:	200020cc 	.word	0x200020cc
 800de54:	20001bf4 	.word	0x20001bf4
 800de58:	20001bf0 	.word	0x20001bf0
 800de5c:	20000088 	.word	0x20000088

0800de60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d10b      	bne.n	800de88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800de70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	60fb      	str	r3, [r7, #12]
}
 800de82:	bf00      	nop
 800de84:	bf00      	nop
 800de86:	e7fd      	b.n	800de84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de88:	4b07      	ldr	r3, [pc, #28]	@ (800dea8 <vTaskPlaceOnEventList+0x48>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3318      	adds	r3, #24
 800de8e:	4619      	mov	r1, r3
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7fe fc2c 	bl	800c6ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de96:	2101      	movs	r1, #1
 800de98:	6838      	ldr	r0, [r7, #0]
 800de9a:	f000 fb97 	bl	800e5cc <prvAddCurrentTaskToDelayedList>
}
 800de9e:	bf00      	nop
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	20001bf0 	.word	0x20001bf0

0800deac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10b      	bne.n	800ded6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	617b      	str	r3, [r7, #20]
}
 800ded0:	bf00      	nop
 800ded2:	bf00      	nop
 800ded4:	e7fd      	b.n	800ded2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ded6:	4b0a      	ldr	r3, [pc, #40]	@ (800df00 <vTaskPlaceOnEventListRestricted+0x54>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	3318      	adds	r3, #24
 800dedc:	4619      	mov	r1, r3
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f7fe fbe1 	bl	800c6a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d002      	beq.n	800def0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800deea:	f04f 33ff 	mov.w	r3, #4294967295
 800deee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800def0:	6879      	ldr	r1, [r7, #4]
 800def2:	68b8      	ldr	r0, [r7, #8]
 800def4:	f000 fb6a 	bl	800e5cc <prvAddCurrentTaskToDelayedList>
	}
 800def8:	bf00      	nop
 800defa:	3718      	adds	r7, #24
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	20001bf0 	.word	0x20001bf0

0800df04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10b      	bne.n	800df32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	60fb      	str	r3, [r7, #12]
}
 800df2c:	bf00      	nop
 800df2e:	bf00      	nop
 800df30:	e7fd      	b.n	800df2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	3318      	adds	r3, #24
 800df36:	4618      	mov	r0, r3
 800df38:	f7fe fc12 	bl	800c760 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df3c:	4b1d      	ldr	r3, [pc, #116]	@ (800dfb4 <xTaskRemoveFromEventList+0xb0>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d11d      	bne.n	800df80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	3304      	adds	r3, #4
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fe fc09 	bl	800c760 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df52:	4b19      	ldr	r3, [pc, #100]	@ (800dfb8 <xTaskRemoveFromEventList+0xb4>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	429a      	cmp	r2, r3
 800df58:	d903      	bls.n	800df62 <xTaskRemoveFromEventList+0x5e>
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df5e:	4a16      	ldr	r2, [pc, #88]	@ (800dfb8 <xTaskRemoveFromEventList+0xb4>)
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df66:	4613      	mov	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	4a13      	ldr	r2, [pc, #76]	@ (800dfbc <xTaskRemoveFromEventList+0xb8>)
 800df70:	441a      	add	r2, r3
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	3304      	adds	r3, #4
 800df76:	4619      	mov	r1, r3
 800df78:	4610      	mov	r0, r2
 800df7a:	f7fe fb94 	bl	800c6a6 <vListInsertEnd>
 800df7e:	e005      	b.n	800df8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	3318      	adds	r3, #24
 800df84:	4619      	mov	r1, r3
 800df86:	480e      	ldr	r0, [pc, #56]	@ (800dfc0 <xTaskRemoveFromEventList+0xbc>)
 800df88:	f7fe fb8d 	bl	800c6a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df90:	4b0c      	ldr	r3, [pc, #48]	@ (800dfc4 <xTaskRemoveFromEventList+0xc0>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df96:	429a      	cmp	r2, r3
 800df98:	d905      	bls.n	800dfa6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800df9a:	2301      	movs	r3, #1
 800df9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800df9e:	4b0a      	ldr	r3, [pc, #40]	@ (800dfc8 <xTaskRemoveFromEventList+0xc4>)
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	601a      	str	r2, [r3, #0]
 800dfa4:	e001      	b.n	800dfaa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dfaa:	697b      	ldr	r3, [r7, #20]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3718      	adds	r7, #24
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	200020ec 	.word	0x200020ec
 800dfb8:	200020cc 	.word	0x200020cc
 800dfbc:	20001bf4 	.word	0x20001bf4
 800dfc0:	20002084 	.word	0x20002084
 800dfc4:	20001bf0 	.word	0x20001bf0
 800dfc8:	200020d8 	.word	0x200020d8

0800dfcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dfd4:	4b06      	ldr	r3, [pc, #24]	@ (800dff0 <vTaskInternalSetTimeOutState+0x24>)
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dfdc:	4b05      	ldr	r3, [pc, #20]	@ (800dff4 <vTaskInternalSetTimeOutState+0x28>)
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	605a      	str	r2, [r3, #4]
}
 800dfe4:	bf00      	nop
 800dfe6:	370c      	adds	r7, #12
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr
 800dff0:	200020dc 	.word	0x200020dc
 800dff4:	200020c8 	.word	0x200020c8

0800dff8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b088      	sub	sp, #32
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10b      	bne.n	800e020 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	613b      	str	r3, [r7, #16]
}
 800e01a:	bf00      	nop
 800e01c:	bf00      	nop
 800e01e:	e7fd      	b.n	800e01c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d10b      	bne.n	800e03e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	60fb      	str	r3, [r7, #12]
}
 800e038:	bf00      	nop
 800e03a:	bf00      	nop
 800e03c:	e7fd      	b.n	800e03a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e03e:	f000 ffa3 	bl	800ef88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e042:	4b1d      	ldr	r3, [pc, #116]	@ (800e0b8 <xTaskCheckForTimeOut+0xc0>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	69ba      	ldr	r2, [r7, #24]
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e05a:	d102      	bne.n	800e062 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e05c:	2300      	movs	r3, #0
 800e05e:	61fb      	str	r3, [r7, #28]
 800e060:	e023      	b.n	800e0aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	4b15      	ldr	r3, [pc, #84]	@ (800e0bc <xTaskCheckForTimeOut+0xc4>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d007      	beq.n	800e07e <xTaskCheckForTimeOut+0x86>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	69ba      	ldr	r2, [r7, #24]
 800e074:	429a      	cmp	r2, r3
 800e076:	d302      	bcc.n	800e07e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e078:	2301      	movs	r3, #1
 800e07a:	61fb      	str	r3, [r7, #28]
 800e07c:	e015      	b.n	800e0aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	697a      	ldr	r2, [r7, #20]
 800e084:	429a      	cmp	r2, r3
 800e086:	d20b      	bcs.n	800e0a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	1ad2      	subs	r2, r2, r3
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7ff ff99 	bl	800dfcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e09a:	2300      	movs	r3, #0
 800e09c:	61fb      	str	r3, [r7, #28]
 800e09e:	e004      	b.n	800e0aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e0aa:	f000 ff9f 	bl	800efec <vPortExitCritical>

	return xReturn;
 800e0ae:	69fb      	ldr	r3, [r7, #28]
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3720      	adds	r7, #32
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	200020c8 	.word	0x200020c8
 800e0bc:	200020dc 	.word	0x200020dc

0800e0c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e0c4:	4b03      	ldr	r3, [pc, #12]	@ (800e0d4 <vTaskMissedYield+0x14>)
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	601a      	str	r2, [r3, #0]
}
 800e0ca:	bf00      	nop
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	200020d8 	.word	0x200020d8

0800e0d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e0e0:	f000 f852 	bl	800e188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e0e4:	4b06      	ldr	r3, [pc, #24]	@ (800e100 <prvIdleTask+0x28>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d9f9      	bls.n	800e0e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e0ec:	4b05      	ldr	r3, [pc, #20]	@ (800e104 <prvIdleTask+0x2c>)
 800e0ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0f2:	601a      	str	r2, [r3, #0]
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e0fc:	e7f0      	b.n	800e0e0 <prvIdleTask+0x8>
 800e0fe:	bf00      	nop
 800e100:	20001bf4 	.word	0x20001bf4
 800e104:	e000ed04 	.word	0xe000ed04

0800e108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e10e:	2300      	movs	r3, #0
 800e110:	607b      	str	r3, [r7, #4]
 800e112:	e00c      	b.n	800e12e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	4613      	mov	r3, r2
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	4413      	add	r3, r2
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	4a12      	ldr	r2, [pc, #72]	@ (800e168 <prvInitialiseTaskLists+0x60>)
 800e120:	4413      	add	r3, r2
 800e122:	4618      	mov	r0, r3
 800e124:	f7fe fa92 	bl	800c64c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	3301      	adds	r3, #1
 800e12c:	607b      	str	r3, [r7, #4]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2b37      	cmp	r3, #55	@ 0x37
 800e132:	d9ef      	bls.n	800e114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e134:	480d      	ldr	r0, [pc, #52]	@ (800e16c <prvInitialiseTaskLists+0x64>)
 800e136:	f7fe fa89 	bl	800c64c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e13a:	480d      	ldr	r0, [pc, #52]	@ (800e170 <prvInitialiseTaskLists+0x68>)
 800e13c:	f7fe fa86 	bl	800c64c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e140:	480c      	ldr	r0, [pc, #48]	@ (800e174 <prvInitialiseTaskLists+0x6c>)
 800e142:	f7fe fa83 	bl	800c64c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e146:	480c      	ldr	r0, [pc, #48]	@ (800e178 <prvInitialiseTaskLists+0x70>)
 800e148:	f7fe fa80 	bl	800c64c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e14c:	480b      	ldr	r0, [pc, #44]	@ (800e17c <prvInitialiseTaskLists+0x74>)
 800e14e:	f7fe fa7d 	bl	800c64c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e152:	4b0b      	ldr	r3, [pc, #44]	@ (800e180 <prvInitialiseTaskLists+0x78>)
 800e154:	4a05      	ldr	r2, [pc, #20]	@ (800e16c <prvInitialiseTaskLists+0x64>)
 800e156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e158:	4b0a      	ldr	r3, [pc, #40]	@ (800e184 <prvInitialiseTaskLists+0x7c>)
 800e15a:	4a05      	ldr	r2, [pc, #20]	@ (800e170 <prvInitialiseTaskLists+0x68>)
 800e15c:	601a      	str	r2, [r3, #0]
}
 800e15e:	bf00      	nop
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	20001bf4 	.word	0x20001bf4
 800e16c:	20002054 	.word	0x20002054
 800e170:	20002068 	.word	0x20002068
 800e174:	20002084 	.word	0x20002084
 800e178:	20002098 	.word	0x20002098
 800e17c:	200020b0 	.word	0x200020b0
 800e180:	2000207c 	.word	0x2000207c
 800e184:	20002080 	.word	0x20002080

0800e188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e18e:	e019      	b.n	800e1c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e190:	f000 fefa 	bl	800ef88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e194:	4b10      	ldr	r3, [pc, #64]	@ (800e1d8 <prvCheckTasksWaitingTermination+0x50>)
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	3304      	adds	r3, #4
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fe fadd 	bl	800c760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e1dc <prvCheckTasksWaitingTermination+0x54>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	4a0b      	ldr	r2, [pc, #44]	@ (800e1dc <prvCheckTasksWaitingTermination+0x54>)
 800e1ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e1b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e1e0 <prvCheckTasksWaitingTermination+0x58>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	4a0a      	ldr	r2, [pc, #40]	@ (800e1e0 <prvCheckTasksWaitingTermination+0x58>)
 800e1b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e1ba:	f000 ff17 	bl	800efec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 f810 	bl	800e1e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1c4:	4b06      	ldr	r3, [pc, #24]	@ (800e1e0 <prvCheckTasksWaitingTermination+0x58>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1e1      	bne.n	800e190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e1cc:	bf00      	nop
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	20002098 	.word	0x20002098
 800e1dc:	200020c4 	.word	0x200020c4
 800e1e0:	200020ac 	.word	0x200020ac

0800e1e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3354      	adds	r3, #84	@ 0x54
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f002 f88f 	bl	8010314 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d108      	bne.n	800e212 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e204:	4618      	mov	r0, r3
 800e206:	f001 f8af 	bl	800f368 <vPortFree>
				vPortFree( pxTCB );
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f001 f8ac 	bl	800f368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e210:	e019      	b.n	800e246 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d103      	bne.n	800e224 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f001 f8a3 	bl	800f368 <vPortFree>
	}
 800e222:	e010      	b.n	800e246 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e22a:	2b02      	cmp	r3, #2
 800e22c:	d00b      	beq.n	800e246 <prvDeleteTCB+0x62>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	60fb      	str	r3, [r7, #12]
}
 800e240:	bf00      	nop
 800e242:	bf00      	nop
 800e244:	e7fd      	b.n	800e242 <prvDeleteTCB+0x5e>
	}
 800e246:	bf00      	nop
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
	...

0800e250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e250:	b480      	push	{r7}
 800e252:	b083      	sub	sp, #12
 800e254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e256:	4b0c      	ldr	r3, [pc, #48]	@ (800e288 <prvResetNextTaskUnblockTime+0x38>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d104      	bne.n	800e26a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e260:	4b0a      	ldr	r3, [pc, #40]	@ (800e28c <prvResetNextTaskUnblockTime+0x3c>)
 800e262:	f04f 32ff 	mov.w	r2, #4294967295
 800e266:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e268:	e008      	b.n	800e27c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e26a:	4b07      	ldr	r3, [pc, #28]	@ (800e288 <prvResetNextTaskUnblockTime+0x38>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	4a04      	ldr	r2, [pc, #16]	@ (800e28c <prvResetNextTaskUnblockTime+0x3c>)
 800e27a:	6013      	str	r3, [r2, #0]
}
 800e27c:	bf00      	nop
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	2000207c 	.word	0x2000207c
 800e28c:	200020e4 	.word	0x200020e4

0800e290 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e296:	4b05      	ldr	r3, [pc, #20]	@ (800e2ac <xTaskGetCurrentTaskHandle+0x1c>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e29c:	687b      	ldr	r3, [r7, #4]
	}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	370c      	adds	r7, #12
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	20001bf0 	.word	0x20001bf0

0800e2b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e2e4 <xTaskGetSchedulerState+0x34>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d102      	bne.n	800e2c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	607b      	str	r3, [r7, #4]
 800e2c2:	e008      	b.n	800e2d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2c4:	4b08      	ldr	r3, [pc, #32]	@ (800e2e8 <xTaskGetSchedulerState+0x38>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d102      	bne.n	800e2d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e2cc:	2302      	movs	r3, #2
 800e2ce:	607b      	str	r3, [r7, #4]
 800e2d0:	e001      	b.n	800e2d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e2d6:	687b      	ldr	r3, [r7, #4]
	}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	200020d0 	.word	0x200020d0
 800e2e8:	200020ec 	.word	0x200020ec

0800e2ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d051      	beq.n	800e3a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e306:	4b2a      	ldr	r3, [pc, #168]	@ (800e3b0 <xTaskPriorityInherit+0xc4>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d241      	bcs.n	800e394 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	699b      	ldr	r3, [r3, #24]
 800e314:	2b00      	cmp	r3, #0
 800e316:	db06      	blt.n	800e326 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e318:	4b25      	ldr	r3, [pc, #148]	@ (800e3b0 <xTaskPriorityInherit+0xc4>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e31e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	6959      	ldr	r1, [r3, #20]
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e32e:	4613      	mov	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4a1f      	ldr	r2, [pc, #124]	@ (800e3b4 <xTaskPriorityInherit+0xc8>)
 800e338:	4413      	add	r3, r2
 800e33a:	4299      	cmp	r1, r3
 800e33c:	d122      	bne.n	800e384 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	3304      	adds	r3, #4
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe fa0c 	bl	800c760 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e348:	4b19      	ldr	r3, [pc, #100]	@ (800e3b0 <xTaskPriorityInherit+0xc4>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e356:	4b18      	ldr	r3, [pc, #96]	@ (800e3b8 <xTaskPriorityInherit+0xcc>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d903      	bls.n	800e366 <xTaskPriorityInherit+0x7a>
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e362:	4a15      	ldr	r2, [pc, #84]	@ (800e3b8 <xTaskPriorityInherit+0xcc>)
 800e364:	6013      	str	r3, [r2, #0]
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e36a:	4613      	mov	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4a10      	ldr	r2, [pc, #64]	@ (800e3b4 <xTaskPriorityInherit+0xc8>)
 800e374:	441a      	add	r2, r3
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	3304      	adds	r3, #4
 800e37a:	4619      	mov	r1, r3
 800e37c:	4610      	mov	r0, r2
 800e37e:	f7fe f992 	bl	800c6a6 <vListInsertEnd>
 800e382:	e004      	b.n	800e38e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e384:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b0 <xTaskPriorityInherit+0xc4>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e38e:	2301      	movs	r3, #1
 800e390:	60fb      	str	r3, [r7, #12]
 800e392:	e008      	b.n	800e3a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e398:	4b05      	ldr	r3, [pc, #20]	@ (800e3b0 <xTaskPriorityInherit+0xc4>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d201      	bcs.n	800e3a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
	}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	20001bf0 	.word	0x20001bf0
 800e3b4:	20001bf4 	.word	0x20001bf4
 800e3b8:	200020cc 	.word	0x200020cc

0800e3bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b086      	sub	sp, #24
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d058      	beq.n	800e484 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e3d2:	4b2f      	ldr	r3, [pc, #188]	@ (800e490 <xTaskPriorityDisinherit+0xd4>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	693a      	ldr	r2, [r7, #16]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d00b      	beq.n	800e3f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	60fb      	str	r3, [r7, #12]
}
 800e3ee:	bf00      	nop
 800e3f0:	bf00      	nop
 800e3f2:	e7fd      	b.n	800e3f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10b      	bne.n	800e414 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	60bb      	str	r3, [r7, #8]
}
 800e40e:	bf00      	nop
 800e410:	bf00      	nop
 800e412:	e7fd      	b.n	800e410 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e418:	1e5a      	subs	r2, r3, #1
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e426:	429a      	cmp	r2, r3
 800e428:	d02c      	beq.n	800e484 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d128      	bne.n	800e484 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	3304      	adds	r3, #4
 800e436:	4618      	mov	r0, r3
 800e438:	f7fe f992 	bl	800c760 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e448:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e454:	4b0f      	ldr	r3, [pc, #60]	@ (800e494 <xTaskPriorityDisinherit+0xd8>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d903      	bls.n	800e464 <xTaskPriorityDisinherit+0xa8>
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e460:	4a0c      	ldr	r2, [pc, #48]	@ (800e494 <xTaskPriorityDisinherit+0xd8>)
 800e462:	6013      	str	r3, [r2, #0]
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e468:	4613      	mov	r3, r2
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4413      	add	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4a09      	ldr	r2, [pc, #36]	@ (800e498 <xTaskPriorityDisinherit+0xdc>)
 800e472:	441a      	add	r2, r3
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	3304      	adds	r3, #4
 800e478:	4619      	mov	r1, r3
 800e47a:	4610      	mov	r0, r2
 800e47c:	f7fe f913 	bl	800c6a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e480:	2301      	movs	r3, #1
 800e482:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e484:	697b      	ldr	r3, [r7, #20]
	}
 800e486:	4618      	mov	r0, r3
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	20001bf0 	.word	0x20001bf0
 800e494:	200020cc 	.word	0x200020cc
 800e498:	20001bf4 	.word	0x20001bf4

0800e49c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d06c      	beq.n	800e58e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e4b4:	69bb      	ldr	r3, [r7, #24]
 800e4b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10b      	bne.n	800e4d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	60fb      	str	r3, [r7, #12]
}
 800e4ce:	bf00      	nop
 800e4d0:	bf00      	nop
 800e4d2:	e7fd      	b.n	800e4d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4d8:	683a      	ldr	r2, [r7, #0]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d902      	bls.n	800e4e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	61fb      	str	r3, [r7, #28]
 800e4e2:	e002      	b.n	800e4ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ee:	69fa      	ldr	r2, [r7, #28]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d04c      	beq.n	800e58e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4f8:	697a      	ldr	r2, [r7, #20]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d147      	bne.n	800e58e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e4fe:	4b26      	ldr	r3, [pc, #152]	@ (800e598 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	69ba      	ldr	r2, [r7, #24]
 800e504:	429a      	cmp	r2, r3
 800e506:	d10b      	bne.n	800e520 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	60bb      	str	r3, [r7, #8]
}
 800e51a:	bf00      	nop
 800e51c:	bf00      	nop
 800e51e:	e7fd      	b.n	800e51c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e524:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	69fa      	ldr	r2, [r7, #28]
 800e52a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e52c:	69bb      	ldr	r3, [r7, #24]
 800e52e:	699b      	ldr	r3, [r3, #24]
 800e530:	2b00      	cmp	r3, #0
 800e532:	db04      	blt.n	800e53e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	6959      	ldr	r1, [r3, #20]
 800e542:	693a      	ldr	r2, [r7, #16]
 800e544:	4613      	mov	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4413      	add	r3, r2
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	4a13      	ldr	r2, [pc, #76]	@ (800e59c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e54e:	4413      	add	r3, r2
 800e550:	4299      	cmp	r1, r3
 800e552:	d11c      	bne.n	800e58e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	3304      	adds	r3, #4
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fe f901 	bl	800c760 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e562:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	429a      	cmp	r2, r3
 800e568:	d903      	bls.n	800e572 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e56a:	69bb      	ldr	r3, [r7, #24]
 800e56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e56e:	4a0c      	ldr	r2, [pc, #48]	@ (800e5a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e570:	6013      	str	r3, [r2, #0]
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e576:	4613      	mov	r3, r2
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	4413      	add	r3, r2
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	4a07      	ldr	r2, [pc, #28]	@ (800e59c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e580:	441a      	add	r2, r3
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	3304      	adds	r3, #4
 800e586:	4619      	mov	r1, r3
 800e588:	4610      	mov	r0, r2
 800e58a:	f7fe f88c 	bl	800c6a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e58e:	bf00      	nop
 800e590:	3720      	adds	r7, #32
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	20001bf0 	.word	0x20001bf0
 800e59c:	20001bf4 	.word	0x20001bf4
 800e5a0:	200020cc 	.word	0x200020cc

0800e5a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e5a4:	b480      	push	{r7}
 800e5a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e5a8:	4b07      	ldr	r3, [pc, #28]	@ (800e5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d004      	beq.n	800e5ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e5b0:	4b05      	ldr	r3, [pc, #20]	@ (800e5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5b6:	3201      	adds	r2, #1
 800e5b8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e5ba:	4b03      	ldr	r3, [pc, #12]	@ (800e5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
	}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr
 800e5c8:	20001bf0 	.word	0x20001bf0

0800e5cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e5d6:	4b21      	ldr	r3, [pc, #132]	@ (800e65c <prvAddCurrentTaskToDelayedList+0x90>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5dc:	4b20      	ldr	r3, [pc, #128]	@ (800e660 <prvAddCurrentTaskToDelayedList+0x94>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fe f8bc 	bl	800c760 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ee:	d10a      	bne.n	800e606 <prvAddCurrentTaskToDelayedList+0x3a>
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d007      	beq.n	800e606 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5f6:	4b1a      	ldr	r3, [pc, #104]	@ (800e660 <prvAddCurrentTaskToDelayedList+0x94>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3304      	adds	r3, #4
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4819      	ldr	r0, [pc, #100]	@ (800e664 <prvAddCurrentTaskToDelayedList+0x98>)
 800e600:	f7fe f851 	bl	800c6a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e604:	e026      	b.n	800e654 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4413      	add	r3, r2
 800e60c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e60e:	4b14      	ldr	r3, [pc, #80]	@ (800e660 <prvAddCurrentTaskToDelayedList+0x94>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	68ba      	ldr	r2, [r7, #8]
 800e614:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d209      	bcs.n	800e632 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e61e:	4b12      	ldr	r3, [pc, #72]	@ (800e668 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	4b0f      	ldr	r3, [pc, #60]	@ (800e660 <prvAddCurrentTaskToDelayedList+0x94>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	3304      	adds	r3, #4
 800e628:	4619      	mov	r1, r3
 800e62a:	4610      	mov	r0, r2
 800e62c:	f7fe f85f 	bl	800c6ee <vListInsert>
}
 800e630:	e010      	b.n	800e654 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e632:	4b0e      	ldr	r3, [pc, #56]	@ (800e66c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	4b0a      	ldr	r3, [pc, #40]	@ (800e660 <prvAddCurrentTaskToDelayedList+0x94>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	3304      	adds	r3, #4
 800e63c:	4619      	mov	r1, r3
 800e63e:	4610      	mov	r0, r2
 800e640:	f7fe f855 	bl	800c6ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e644:	4b0a      	ldr	r3, [pc, #40]	@ (800e670 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	68ba      	ldr	r2, [r7, #8]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d202      	bcs.n	800e654 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e64e:	4a08      	ldr	r2, [pc, #32]	@ (800e670 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	6013      	str	r3, [r2, #0]
}
 800e654:	bf00      	nop
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	200020c8 	.word	0x200020c8
 800e660:	20001bf0 	.word	0x20001bf0
 800e664:	200020b0 	.word	0x200020b0
 800e668:	20002080 	.word	0x20002080
 800e66c:	2000207c 	.word	0x2000207c
 800e670:	200020e4 	.word	0x200020e4

0800e674 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b08a      	sub	sp, #40	@ 0x28
 800e678:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e67a:	2300      	movs	r3, #0
 800e67c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e67e:	f000 fb13 	bl	800eca8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e682:	4b1d      	ldr	r3, [pc, #116]	@ (800e6f8 <xTimerCreateTimerTask+0x84>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d021      	beq.n	800e6ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e68a:	2300      	movs	r3, #0
 800e68c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e68e:	2300      	movs	r3, #0
 800e690:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e692:	1d3a      	adds	r2, r7, #4
 800e694:	f107 0108 	add.w	r1, r7, #8
 800e698:	f107 030c 	add.w	r3, r7, #12
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fd ffbb 	bl	800c618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e6a2:	6879      	ldr	r1, [r7, #4]
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	9202      	str	r2, [sp, #8]
 800e6aa:	9301      	str	r3, [sp, #4]
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	9300      	str	r3, [sp, #0]
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	460a      	mov	r2, r1
 800e6b4:	4911      	ldr	r1, [pc, #68]	@ (800e6fc <xTimerCreateTimerTask+0x88>)
 800e6b6:	4812      	ldr	r0, [pc, #72]	@ (800e700 <xTimerCreateTimerTask+0x8c>)
 800e6b8:	f7fe ff92 	bl	800d5e0 <xTaskCreateStatic>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	4a11      	ldr	r2, [pc, #68]	@ (800e704 <xTimerCreateTimerTask+0x90>)
 800e6c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e6c2:	4b10      	ldr	r3, [pc, #64]	@ (800e704 <xTimerCreateTimerTask+0x90>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d001      	beq.n	800e6ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d10b      	bne.n	800e6ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d8:	f383 8811 	msr	BASEPRI, r3
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	613b      	str	r3, [r7, #16]
}
 800e6e6:	bf00      	nop
 800e6e8:	bf00      	nop
 800e6ea:	e7fd      	b.n	800e6e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e6ec:	697b      	ldr	r3, [r7, #20]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3718      	adds	r7, #24
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	20002120 	.word	0x20002120
 800e6fc:	08012b40 	.word	0x08012b40
 800e700:	0800e841 	.word	0x0800e841
 800e704:	20002124 	.word	0x20002124

0800e708 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b08a      	sub	sp, #40	@ 0x28
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	607a      	str	r2, [r7, #4]
 800e714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e716:	2300      	movs	r3, #0
 800e718:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10b      	bne.n	800e738 <xTimerGenericCommand+0x30>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	623b      	str	r3, [r7, #32]
}
 800e732:	bf00      	nop
 800e734:	bf00      	nop
 800e736:	e7fd      	b.n	800e734 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e738:	4b19      	ldr	r3, [pc, #100]	@ (800e7a0 <xTimerGenericCommand+0x98>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d02a      	beq.n	800e796 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b05      	cmp	r3, #5
 800e750:	dc18      	bgt.n	800e784 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e752:	f7ff fdad 	bl	800e2b0 <xTaskGetSchedulerState>
 800e756:	4603      	mov	r3, r0
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d109      	bne.n	800e770 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e75c:	4b10      	ldr	r3, [pc, #64]	@ (800e7a0 <xTimerGenericCommand+0x98>)
 800e75e:	6818      	ldr	r0, [r3, #0]
 800e760:	f107 0110 	add.w	r1, r7, #16
 800e764:	2300      	movs	r3, #0
 800e766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e768:	f7fe fa22 	bl	800cbb0 <xQueueGenericSend>
 800e76c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e76e:	e012      	b.n	800e796 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e770:	4b0b      	ldr	r3, [pc, #44]	@ (800e7a0 <xTimerGenericCommand+0x98>)
 800e772:	6818      	ldr	r0, [r3, #0]
 800e774:	f107 0110 	add.w	r1, r7, #16
 800e778:	2300      	movs	r3, #0
 800e77a:	2200      	movs	r2, #0
 800e77c:	f7fe fa18 	bl	800cbb0 <xQueueGenericSend>
 800e780:	6278      	str	r0, [r7, #36]	@ 0x24
 800e782:	e008      	b.n	800e796 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e784:	4b06      	ldr	r3, [pc, #24]	@ (800e7a0 <xTimerGenericCommand+0x98>)
 800e786:	6818      	ldr	r0, [r3, #0]
 800e788:	f107 0110 	add.w	r1, r7, #16
 800e78c:	2300      	movs	r3, #0
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	f7fe fb10 	bl	800cdb4 <xQueueGenericSendFromISR>
 800e794:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3728      	adds	r7, #40	@ 0x28
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20002120 	.word	0x20002120

0800e7a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af02      	add	r7, sp, #8
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ae:	4b23      	ldr	r3, [pc, #140]	@ (800e83c <prvProcessExpiredTimer+0x98>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	3304      	adds	r3, #4
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7fd ffcf 	bl	800c760 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7c8:	f003 0304 	and.w	r3, r3, #4
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d023      	beq.n	800e818 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	699a      	ldr	r2, [r3, #24]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	18d1      	adds	r1, r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	683a      	ldr	r2, [r7, #0]
 800e7dc:	6978      	ldr	r0, [r7, #20]
 800e7de:	f000 f8d5 	bl	800e98c <prvInsertTimerInActiveList>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d020      	beq.n	800e82a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	6978      	ldr	r0, [r7, #20]
 800e7f4:	f7ff ff88 	bl	800e708 <xTimerGenericCommand>
 800e7f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d114      	bne.n	800e82a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	60fb      	str	r3, [r7, #12]
}
 800e812:	bf00      	nop
 800e814:	bf00      	nop
 800e816:	e7fd      	b.n	800e814 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e81e:	f023 0301 	bic.w	r3, r3, #1
 800e822:	b2da      	uxtb	r2, r3
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	6a1b      	ldr	r3, [r3, #32]
 800e82e:	6978      	ldr	r0, [r7, #20]
 800e830:	4798      	blx	r3
}
 800e832:	bf00      	nop
 800e834:	3718      	adds	r7, #24
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	20002118 	.word	0x20002118

0800e840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e848:	f107 0308 	add.w	r3, r7, #8
 800e84c:	4618      	mov	r0, r3
 800e84e:	f000 f859 	bl	800e904 <prvGetNextExpireTime>
 800e852:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	4619      	mov	r1, r3
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f000 f805 	bl	800e868 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e85e:	f000 f8d7 	bl	800ea10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e862:	bf00      	nop
 800e864:	e7f0      	b.n	800e848 <prvTimerTask+0x8>
	...

0800e868 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e872:	f7ff f919 	bl	800daa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e876:	f107 0308 	add.w	r3, r7, #8
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 f866 	bl	800e94c <prvSampleTimeNow>
 800e880:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d130      	bne.n	800e8ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d10a      	bne.n	800e8a4 <prvProcessTimerOrBlockTask+0x3c>
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	429a      	cmp	r2, r3
 800e894:	d806      	bhi.n	800e8a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e896:	f7ff f915 	bl	800dac4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e89a:	68f9      	ldr	r1, [r7, #12]
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7ff ff81 	bl	800e7a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e8a2:	e024      	b.n	800e8ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d008      	beq.n	800e8bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e8aa:	4b13      	ldr	r3, [pc, #76]	@ (800e8f8 <prvProcessTimerOrBlockTask+0x90>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <prvProcessTimerOrBlockTask+0x50>
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e000      	b.n	800e8ba <prvProcessTimerOrBlockTask+0x52>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e8bc:	4b0f      	ldr	r3, [pc, #60]	@ (800e8fc <prvProcessTimerOrBlockTask+0x94>)
 800e8be:	6818      	ldr	r0, [r3, #0]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	1ad3      	subs	r3, r2, r3
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	f7fe fe55 	bl	800d578 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e8ce:	f7ff f8f9 	bl	800dac4 <xTaskResumeAll>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d10a      	bne.n	800e8ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e8d8:	4b09      	ldr	r3, [pc, #36]	@ (800e900 <prvProcessTimerOrBlockTask+0x98>)
 800e8da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8de:	601a      	str	r2, [r3, #0]
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	f3bf 8f6f 	isb	sy
}
 800e8e8:	e001      	b.n	800e8ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e8ea:	f7ff f8eb 	bl	800dac4 <xTaskResumeAll>
}
 800e8ee:	bf00      	nop
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	2000211c 	.word	0x2000211c
 800e8fc:	20002120 	.word	0x20002120
 800e900:	e000ed04 	.word	0xe000ed04

0800e904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e90c:	4b0e      	ldr	r3, [pc, #56]	@ (800e948 <prvGetNextExpireTime+0x44>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d101      	bne.n	800e91a <prvGetNextExpireTime+0x16>
 800e916:	2201      	movs	r2, #1
 800e918:	e000      	b.n	800e91c <prvGetNextExpireTime+0x18>
 800e91a:	2200      	movs	r2, #0
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d105      	bne.n	800e934 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e928:	4b07      	ldr	r3, [pc, #28]	@ (800e948 <prvGetNextExpireTime+0x44>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	60fb      	str	r3, [r7, #12]
 800e932:	e001      	b.n	800e938 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e934:	2300      	movs	r3, #0
 800e936:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e938:	68fb      	ldr	r3, [r7, #12]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3714      	adds	r7, #20
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	20002118 	.word	0x20002118

0800e94c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e954:	f7ff f954 	bl	800dc00 <xTaskGetTickCount>
 800e958:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e95a:	4b0b      	ldr	r3, [pc, #44]	@ (800e988 <prvSampleTimeNow+0x3c>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	429a      	cmp	r2, r3
 800e962:	d205      	bcs.n	800e970 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e964:	f000 f93a 	bl	800ebdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	601a      	str	r2, [r3, #0]
 800e96e:	e002      	b.n	800e976 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e976:	4a04      	ldr	r2, [pc, #16]	@ (800e988 <prvSampleTimeNow+0x3c>)
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e97c:	68fb      	ldr	r3, [r7, #12]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20002128 	.word	0x20002128

0800e98c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b086      	sub	sp, #24
 800e990:	af00      	add	r7, sp, #0
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	607a      	str	r2, [r7, #4]
 800e998:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e99a:	2300      	movs	r3, #0
 800e99c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e9aa:	68ba      	ldr	r2, [r7, #8]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d812      	bhi.n	800e9d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	1ad2      	subs	r2, r2, r3
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	699b      	ldr	r3, [r3, #24]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d302      	bcc.n	800e9c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	617b      	str	r3, [r7, #20]
 800e9c4:	e01b      	b.n	800e9fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e9c6:	4b10      	ldr	r3, [pc, #64]	@ (800ea08 <prvInsertTimerInActiveList+0x7c>)
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	3304      	adds	r3, #4
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	4610      	mov	r0, r2
 800e9d2:	f7fd fe8c 	bl	800c6ee <vListInsert>
 800e9d6:	e012      	b.n	800e9fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d206      	bcs.n	800e9ee <prvInsertTimerInActiveList+0x62>
 800e9e0:	68ba      	ldr	r2, [r7, #8]
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d302      	bcc.n	800e9ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	617b      	str	r3, [r7, #20]
 800e9ec:	e007      	b.n	800e9fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9ee:	4b07      	ldr	r3, [pc, #28]	@ (800ea0c <prvInsertTimerInActiveList+0x80>)
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3304      	adds	r3, #4
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	f7fd fe78 	bl	800c6ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e9fe:	697b      	ldr	r3, [r7, #20]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3718      	adds	r7, #24
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	2000211c 	.word	0x2000211c
 800ea0c:	20002118 	.word	0x20002118

0800ea10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b08e      	sub	sp, #56	@ 0x38
 800ea14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea16:	e0ce      	b.n	800ebb6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	da19      	bge.n	800ea52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ea1e:	1d3b      	adds	r3, r7, #4
 800ea20:	3304      	adds	r3, #4
 800ea22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ea24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10b      	bne.n	800ea42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ea2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea2e:	f383 8811 	msr	BASEPRI, r3
 800ea32:	f3bf 8f6f 	isb	sy
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	61fb      	str	r3, [r7, #28]
}
 800ea3c:	bf00      	nop
 800ea3e:	bf00      	nop
 800ea40:	e7fd      	b.n	800ea3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ea42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea48:	6850      	ldr	r0, [r2, #4]
 800ea4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea4c:	6892      	ldr	r2, [r2, #8]
 800ea4e:	4611      	mov	r1, r2
 800ea50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f2c0 80ae 	blt.w	800ebb6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ea5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea60:	695b      	ldr	r3, [r3, #20]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d004      	beq.n	800ea70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea68:	3304      	adds	r3, #4
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7fd fe78 	bl	800c760 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea70:	463b      	mov	r3, r7
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff ff6a 	bl	800e94c <prvSampleTimeNow>
 800ea78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2b09      	cmp	r3, #9
 800ea7e:	f200 8097 	bhi.w	800ebb0 <prvProcessReceivedCommands+0x1a0>
 800ea82:	a201      	add	r2, pc, #4	@ (adr r2, 800ea88 <prvProcessReceivedCommands+0x78>)
 800ea84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea88:	0800eab1 	.word	0x0800eab1
 800ea8c:	0800eab1 	.word	0x0800eab1
 800ea90:	0800eab1 	.word	0x0800eab1
 800ea94:	0800eb27 	.word	0x0800eb27
 800ea98:	0800eb3b 	.word	0x0800eb3b
 800ea9c:	0800eb87 	.word	0x0800eb87
 800eaa0:	0800eab1 	.word	0x0800eab1
 800eaa4:	0800eab1 	.word	0x0800eab1
 800eaa8:	0800eb27 	.word	0x0800eb27
 800eaac:	0800eb3b 	.word	0x0800eb3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eab6:	f043 0301 	orr.w	r3, r3, #1
 800eaba:	b2da      	uxtb	r2, r3
 800eabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eabe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eac2:	68ba      	ldr	r2, [r7, #8]
 800eac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac6:	699b      	ldr	r3, [r3, #24]
 800eac8:	18d1      	adds	r1, r2, r3
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ead0:	f7ff ff5c 	bl	800e98c <prvInsertTimerInActiveList>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d06c      	beq.n	800ebb4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eadc:	6a1b      	ldr	r3, [r3, #32]
 800eade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eae0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eae8:	f003 0304 	and.w	r3, r3, #4
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d061      	beq.n	800ebb4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf4:	699b      	ldr	r3, [r3, #24]
 800eaf6:	441a      	add	r2, r3
 800eaf8:	2300      	movs	r3, #0
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	2300      	movs	r3, #0
 800eafe:	2100      	movs	r1, #0
 800eb00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb02:	f7ff fe01 	bl	800e708 <xTimerGenericCommand>
 800eb06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eb08:	6a3b      	ldr	r3, [r7, #32]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d152      	bne.n	800ebb4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	61bb      	str	r3, [r7, #24]
}
 800eb20:	bf00      	nop
 800eb22:	bf00      	nop
 800eb24:	e7fd      	b.n	800eb22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb2c:	f023 0301 	bic.w	r3, r3, #1
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eb38:	e03d      	b.n	800ebb6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb40:	f043 0301 	orr.w	r3, r3, #1
 800eb44:	b2da      	uxtb	r2, r3
 800eb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb54:	699b      	ldr	r3, [r3, #24]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10b      	bne.n	800eb72 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800eb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb5e:	f383 8811 	msr	BASEPRI, r3
 800eb62:	f3bf 8f6f 	isb	sy
 800eb66:	f3bf 8f4f 	dsb	sy
 800eb6a:	617b      	str	r3, [r7, #20]
}
 800eb6c:	bf00      	nop
 800eb6e:	bf00      	nop
 800eb70:	e7fd      	b.n	800eb6e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb74:	699a      	ldr	r2, [r3, #24]
 800eb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb78:	18d1      	adds	r1, r2, r3
 800eb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb80:	f7ff ff04 	bl	800e98c <prvInsertTimerInActiveList>
					break;
 800eb84:	e017      	b.n	800ebb6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb8c:	f003 0302 	and.w	r3, r3, #2
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d103      	bne.n	800eb9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800eb94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb96:	f000 fbe7 	bl	800f368 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eb9a:	e00c      	b.n	800ebb6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eba2:	f023 0301 	bic.w	r3, r3, #1
 800eba6:	b2da      	uxtb	r2, r3
 800eba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ebae:	e002      	b.n	800ebb6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ebb0:	bf00      	nop
 800ebb2:	e000      	b.n	800ebb6 <prvProcessReceivedCommands+0x1a6>
					break;
 800ebb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ebb6:	4b08      	ldr	r3, [pc, #32]	@ (800ebd8 <prvProcessReceivedCommands+0x1c8>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	1d39      	adds	r1, r7, #4
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fe f996 	bl	800cef0 <xQueueReceive>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f47f af26 	bne.w	800ea18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ebcc:	bf00      	nop
 800ebce:	bf00      	nop
 800ebd0:	3730      	adds	r7, #48	@ 0x30
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	20002120 	.word	0x20002120

0800ebdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b088      	sub	sp, #32
 800ebe0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebe2:	e049      	b.n	800ec78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebe4:	4b2e      	ldr	r3, [pc, #184]	@ (800eca0 <prvSwitchTimerLists+0xc4>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebee:	4b2c      	ldr	r3, [pc, #176]	@ (800eca0 <prvSwitchTimerLists+0xc4>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	3304      	adds	r3, #4
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7fd fdaf 	bl	800c760 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6a1b      	ldr	r3, [r3, #32]
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec10:	f003 0304 	and.w	r3, r3, #4
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d02f      	beq.n	800ec78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	699b      	ldr	r3, [r3, #24]
 800ec1c:	693a      	ldr	r2, [r7, #16]
 800ec1e:	4413      	add	r3, r2
 800ec20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ec22:	68ba      	ldr	r2, [r7, #8]
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d90e      	bls.n	800ec48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	68ba      	ldr	r2, [r7, #8]
 800ec2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec36:	4b1a      	ldr	r3, [pc, #104]	@ (800eca0 <prvSwitchTimerLists+0xc4>)
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3304      	adds	r3, #4
 800ec3e:	4619      	mov	r1, r3
 800ec40:	4610      	mov	r0, r2
 800ec42:	f7fd fd54 	bl	800c6ee <vListInsert>
 800ec46:	e017      	b.n	800ec78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec48:	2300      	movs	r3, #0
 800ec4a:	9300      	str	r3, [sp, #0]
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	693a      	ldr	r2, [r7, #16]
 800ec50:	2100      	movs	r1, #0
 800ec52:	68f8      	ldr	r0, [r7, #12]
 800ec54:	f7ff fd58 	bl	800e708 <xTimerGenericCommand>
 800ec58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10b      	bne.n	800ec78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ec60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec64:	f383 8811 	msr	BASEPRI, r3
 800ec68:	f3bf 8f6f 	isb	sy
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	603b      	str	r3, [r7, #0]
}
 800ec72:	bf00      	nop
 800ec74:	bf00      	nop
 800ec76:	e7fd      	b.n	800ec74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec78:	4b09      	ldr	r3, [pc, #36]	@ (800eca0 <prvSwitchTimerLists+0xc4>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1b0      	bne.n	800ebe4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ec82:	4b07      	ldr	r3, [pc, #28]	@ (800eca0 <prvSwitchTimerLists+0xc4>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ec88:	4b06      	ldr	r3, [pc, #24]	@ (800eca4 <prvSwitchTimerLists+0xc8>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4a04      	ldr	r2, [pc, #16]	@ (800eca0 <prvSwitchTimerLists+0xc4>)
 800ec8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ec90:	4a04      	ldr	r2, [pc, #16]	@ (800eca4 <prvSwitchTimerLists+0xc8>)
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	6013      	str	r3, [r2, #0]
}
 800ec96:	bf00      	nop
 800ec98:	3718      	adds	r7, #24
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	20002118 	.word	0x20002118
 800eca4:	2000211c 	.word	0x2000211c

0800eca8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ecae:	f000 f96b 	bl	800ef88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ecb2:	4b15      	ldr	r3, [pc, #84]	@ (800ed08 <prvCheckForValidListAndQueue+0x60>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d120      	bne.n	800ecfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ecba:	4814      	ldr	r0, [pc, #80]	@ (800ed0c <prvCheckForValidListAndQueue+0x64>)
 800ecbc:	f7fd fcc6 	bl	800c64c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ecc0:	4813      	ldr	r0, [pc, #76]	@ (800ed10 <prvCheckForValidListAndQueue+0x68>)
 800ecc2:	f7fd fcc3 	bl	800c64c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ecc6:	4b13      	ldr	r3, [pc, #76]	@ (800ed14 <prvCheckForValidListAndQueue+0x6c>)
 800ecc8:	4a10      	ldr	r2, [pc, #64]	@ (800ed0c <prvCheckForValidListAndQueue+0x64>)
 800ecca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eccc:	4b12      	ldr	r3, [pc, #72]	@ (800ed18 <prvCheckForValidListAndQueue+0x70>)
 800ecce:	4a10      	ldr	r2, [pc, #64]	@ (800ed10 <prvCheckForValidListAndQueue+0x68>)
 800ecd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	4b11      	ldr	r3, [pc, #68]	@ (800ed1c <prvCheckForValidListAndQueue+0x74>)
 800ecd8:	4a11      	ldr	r2, [pc, #68]	@ (800ed20 <prvCheckForValidListAndQueue+0x78>)
 800ecda:	2110      	movs	r1, #16
 800ecdc:	200a      	movs	r0, #10
 800ecde:	f7fd fdd3 	bl	800c888 <xQueueGenericCreateStatic>
 800ece2:	4603      	mov	r3, r0
 800ece4:	4a08      	ldr	r2, [pc, #32]	@ (800ed08 <prvCheckForValidListAndQueue+0x60>)
 800ece6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ece8:	4b07      	ldr	r3, [pc, #28]	@ (800ed08 <prvCheckForValidListAndQueue+0x60>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d005      	beq.n	800ecfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ecf0:	4b05      	ldr	r3, [pc, #20]	@ (800ed08 <prvCheckForValidListAndQueue+0x60>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	490b      	ldr	r1, [pc, #44]	@ (800ed24 <prvCheckForValidListAndQueue+0x7c>)
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fe fc14 	bl	800d524 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ecfc:	f000 f976 	bl	800efec <vPortExitCritical>
}
 800ed00:	bf00      	nop
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	20002120 	.word	0x20002120
 800ed0c:	200020f0 	.word	0x200020f0
 800ed10:	20002104 	.word	0x20002104
 800ed14:	20002118 	.word	0x20002118
 800ed18:	2000211c 	.word	0x2000211c
 800ed1c:	200021cc 	.word	0x200021cc
 800ed20:	2000212c 	.word	0x2000212c
 800ed24:	08012b48 	.word	0x08012b48

0800ed28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b085      	sub	sp, #20
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	3b04      	subs	r3, #4
 800ed38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ed40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	3b04      	subs	r3, #4
 800ed46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	f023 0201 	bic.w	r2, r3, #1
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	3b04      	subs	r3, #4
 800ed56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ed58:	4a0c      	ldr	r2, [pc, #48]	@ (800ed8c <pxPortInitialiseStack+0x64>)
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	3b14      	subs	r3, #20
 800ed62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	3b04      	subs	r3, #4
 800ed6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f06f 0202 	mvn.w	r2, #2
 800ed76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	3b20      	subs	r3, #32
 800ed7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3714      	adds	r7, #20
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr
 800ed8c:	0800ed91 	.word	0x0800ed91

0800ed90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed90:	b480      	push	{r7}
 800ed92:	b085      	sub	sp, #20
 800ed94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed96:	2300      	movs	r3, #0
 800ed98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed9a:	4b13      	ldr	r3, [pc, #76]	@ (800ede8 <prvTaskExitError+0x58>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda2:	d00b      	beq.n	800edbc <prvTaskExitError+0x2c>
	__asm volatile
 800eda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	60fb      	str	r3, [r7, #12]
}
 800edb6:	bf00      	nop
 800edb8:	bf00      	nop
 800edba:	e7fd      	b.n	800edb8 <prvTaskExitError+0x28>
	__asm volatile
 800edbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc0:	f383 8811 	msr	BASEPRI, r3
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	f3bf 8f4f 	dsb	sy
 800edcc:	60bb      	str	r3, [r7, #8]
}
 800edce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800edd0:	bf00      	nop
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d0fc      	beq.n	800edd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800edd8:	bf00      	nop
 800edda:	bf00      	nop
 800eddc:	3714      	adds	r7, #20
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	20000078 	.word	0x20000078
 800edec:	00000000 	.word	0x00000000

0800edf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800edf0:	4b07      	ldr	r3, [pc, #28]	@ (800ee10 <pxCurrentTCBConst2>)
 800edf2:	6819      	ldr	r1, [r3, #0]
 800edf4:	6808      	ldr	r0, [r1, #0]
 800edf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfa:	f380 8809 	msr	PSP, r0
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f04f 0000 	mov.w	r0, #0
 800ee06:	f380 8811 	msr	BASEPRI, r0
 800ee0a:	4770      	bx	lr
 800ee0c:	f3af 8000 	nop.w

0800ee10 <pxCurrentTCBConst2>:
 800ee10:	20001bf0 	.word	0x20001bf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop

0800ee18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ee18:	4808      	ldr	r0, [pc, #32]	@ (800ee3c <prvPortStartFirstTask+0x24>)
 800ee1a:	6800      	ldr	r0, [r0, #0]
 800ee1c:	6800      	ldr	r0, [r0, #0]
 800ee1e:	f380 8808 	msr	MSP, r0
 800ee22:	f04f 0000 	mov.w	r0, #0
 800ee26:	f380 8814 	msr	CONTROL, r0
 800ee2a:	b662      	cpsie	i
 800ee2c:	b661      	cpsie	f
 800ee2e:	f3bf 8f4f 	dsb	sy
 800ee32:	f3bf 8f6f 	isb	sy
 800ee36:	df00      	svc	0
 800ee38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ee3a:	bf00      	nop
 800ee3c:	e000ed08 	.word	0xe000ed08

0800ee40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b086      	sub	sp, #24
 800ee44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ee46:	4b47      	ldr	r3, [pc, #284]	@ (800ef64 <xPortStartScheduler+0x124>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a47      	ldr	r2, [pc, #284]	@ (800ef68 <xPortStartScheduler+0x128>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d10b      	bne.n	800ee68 <xPortStartScheduler+0x28>
	__asm volatile
 800ee50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee54:	f383 8811 	msr	BASEPRI, r3
 800ee58:	f3bf 8f6f 	isb	sy
 800ee5c:	f3bf 8f4f 	dsb	sy
 800ee60:	60fb      	str	r3, [r7, #12]
}
 800ee62:	bf00      	nop
 800ee64:	bf00      	nop
 800ee66:	e7fd      	b.n	800ee64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ee68:	4b3e      	ldr	r3, [pc, #248]	@ (800ef64 <xPortStartScheduler+0x124>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a3f      	ldr	r2, [pc, #252]	@ (800ef6c <xPortStartScheduler+0x12c>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d10b      	bne.n	800ee8a <xPortStartScheduler+0x4a>
	__asm volatile
 800ee72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee76:	f383 8811 	msr	BASEPRI, r3
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	f3bf 8f4f 	dsb	sy
 800ee82:	613b      	str	r3, [r7, #16]
}
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop
 800ee88:	e7fd      	b.n	800ee86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ee8a:	4b39      	ldr	r3, [pc, #228]	@ (800ef70 <xPortStartScheduler+0x130>)
 800ee8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	22ff      	movs	r2, #255	@ 0xff
 800ee9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	4b31      	ldr	r3, [pc, #196]	@ (800ef74 <xPortStartScheduler+0x134>)
 800eeb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eeb2:	4b31      	ldr	r3, [pc, #196]	@ (800ef78 <xPortStartScheduler+0x138>)
 800eeb4:	2207      	movs	r2, #7
 800eeb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eeb8:	e009      	b.n	800eece <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800eeba:	4b2f      	ldr	r3, [pc, #188]	@ (800ef78 <xPortStartScheduler+0x138>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	4a2d      	ldr	r2, [pc, #180]	@ (800ef78 <xPortStartScheduler+0x138>)
 800eec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eec4:	78fb      	ldrb	r3, [r7, #3]
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	005b      	lsls	r3, r3, #1
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eece:	78fb      	ldrb	r3, [r7, #3]
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eed6:	2b80      	cmp	r3, #128	@ 0x80
 800eed8:	d0ef      	beq.n	800eeba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eeda:	4b27      	ldr	r3, [pc, #156]	@ (800ef78 <xPortStartScheduler+0x138>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f1c3 0307 	rsb	r3, r3, #7
 800eee2:	2b04      	cmp	r3, #4
 800eee4:	d00b      	beq.n	800eefe <xPortStartScheduler+0xbe>
	__asm volatile
 800eee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeea:	f383 8811 	msr	BASEPRI, r3
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	f3bf 8f4f 	dsb	sy
 800eef6:	60bb      	str	r3, [r7, #8]
}
 800eef8:	bf00      	nop
 800eefa:	bf00      	nop
 800eefc:	e7fd      	b.n	800eefa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eefe:	4b1e      	ldr	r3, [pc, #120]	@ (800ef78 <xPortStartScheduler+0x138>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	021b      	lsls	r3, r3, #8
 800ef04:	4a1c      	ldr	r2, [pc, #112]	@ (800ef78 <xPortStartScheduler+0x138>)
 800ef06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ef08:	4b1b      	ldr	r3, [pc, #108]	@ (800ef78 <xPortStartScheduler+0x138>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ef10:	4a19      	ldr	r2, [pc, #100]	@ (800ef78 <xPortStartScheduler+0x138>)
 800ef12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ef1c:	4b17      	ldr	r3, [pc, #92]	@ (800ef7c <xPortStartScheduler+0x13c>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a16      	ldr	r2, [pc, #88]	@ (800ef7c <xPortStartScheduler+0x13c>)
 800ef22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ef26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ef28:	4b14      	ldr	r3, [pc, #80]	@ (800ef7c <xPortStartScheduler+0x13c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a13      	ldr	r2, [pc, #76]	@ (800ef7c <xPortStartScheduler+0x13c>)
 800ef2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ef32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ef34:	f000 f8da 	bl	800f0ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ef38:	4b11      	ldr	r3, [pc, #68]	@ (800ef80 <xPortStartScheduler+0x140>)
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ef3e:	f000 f8f9 	bl	800f134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ef42:	4b10      	ldr	r3, [pc, #64]	@ (800ef84 <xPortStartScheduler+0x144>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a0f      	ldr	r2, [pc, #60]	@ (800ef84 <xPortStartScheduler+0x144>)
 800ef48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ef4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ef4e:	f7ff ff63 	bl	800ee18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ef52:	f7fe ff1f 	bl	800dd94 <vTaskSwitchContext>
	prvTaskExitError();
 800ef56:	f7ff ff1b 	bl	800ed90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ef5a:	2300      	movs	r3, #0
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3718      	adds	r7, #24
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	e000ed00 	.word	0xe000ed00
 800ef68:	410fc271 	.word	0x410fc271
 800ef6c:	410fc270 	.word	0x410fc270
 800ef70:	e000e400 	.word	0xe000e400
 800ef74:	2000221c 	.word	0x2000221c
 800ef78:	20002220 	.word	0x20002220
 800ef7c:	e000ed20 	.word	0xe000ed20
 800ef80:	20000078 	.word	0x20000078
 800ef84:	e000ef34 	.word	0xe000ef34

0800ef88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef92:	f383 8811 	msr	BASEPRI, r3
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	607b      	str	r3, [r7, #4]
}
 800efa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800efa2:	4b10      	ldr	r3, [pc, #64]	@ (800efe4 <vPortEnterCritical+0x5c>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	3301      	adds	r3, #1
 800efa8:	4a0e      	ldr	r2, [pc, #56]	@ (800efe4 <vPortEnterCritical+0x5c>)
 800efaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800efac:	4b0d      	ldr	r3, [pc, #52]	@ (800efe4 <vPortEnterCritical+0x5c>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d110      	bne.n	800efd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800efb4:	4b0c      	ldr	r3, [pc, #48]	@ (800efe8 <vPortEnterCritical+0x60>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00b      	beq.n	800efd6 <vPortEnterCritical+0x4e>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	603b      	str	r3, [r7, #0]
}
 800efd0:	bf00      	nop
 800efd2:	bf00      	nop
 800efd4:	e7fd      	b.n	800efd2 <vPortEnterCritical+0x4a>
	}
}
 800efd6:	bf00      	nop
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	20000078 	.word	0x20000078
 800efe8:	e000ed04 	.word	0xe000ed04

0800efec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eff2:	4b12      	ldr	r3, [pc, #72]	@ (800f03c <vPortExitCritical+0x50>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d10b      	bne.n	800f012 <vPortExitCritical+0x26>
	__asm volatile
 800effa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800effe:	f383 8811 	msr	BASEPRI, r3
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	607b      	str	r3, [r7, #4]
}
 800f00c:	bf00      	nop
 800f00e:	bf00      	nop
 800f010:	e7fd      	b.n	800f00e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f012:	4b0a      	ldr	r3, [pc, #40]	@ (800f03c <vPortExitCritical+0x50>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3b01      	subs	r3, #1
 800f018:	4a08      	ldr	r2, [pc, #32]	@ (800f03c <vPortExitCritical+0x50>)
 800f01a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f01c:	4b07      	ldr	r3, [pc, #28]	@ (800f03c <vPortExitCritical+0x50>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d105      	bne.n	800f030 <vPortExitCritical+0x44>
 800f024:	2300      	movs	r3, #0
 800f026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	f383 8811 	msr	BASEPRI, r3
}
 800f02e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f030:	bf00      	nop
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	20000078 	.word	0x20000078

0800f040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f040:	f3ef 8009 	mrs	r0, PSP
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	4b15      	ldr	r3, [pc, #84]	@ (800f0a0 <pxCurrentTCBConst>)
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	f01e 0f10 	tst.w	lr, #16
 800f050:	bf08      	it	eq
 800f052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05a:	6010      	str	r0, [r2, #0]
 800f05c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f064:	f380 8811 	msr	BASEPRI, r0
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	f3bf 8f6f 	isb	sy
 800f070:	f7fe fe90 	bl	800dd94 <vTaskSwitchContext>
 800f074:	f04f 0000 	mov.w	r0, #0
 800f078:	f380 8811 	msr	BASEPRI, r0
 800f07c:	bc09      	pop	{r0, r3}
 800f07e:	6819      	ldr	r1, [r3, #0]
 800f080:	6808      	ldr	r0, [r1, #0]
 800f082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f086:	f01e 0f10 	tst.w	lr, #16
 800f08a:	bf08      	it	eq
 800f08c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f090:	f380 8809 	msr	PSP, r0
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	f3af 8000 	nop.w

0800f0a0 <pxCurrentTCBConst>:
 800f0a0:	20001bf0 	.word	0x20001bf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f0a4:	bf00      	nop
 800f0a6:	bf00      	nop

0800f0a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
	__asm volatile
 800f0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b2:	f383 8811 	msr	BASEPRI, r3
 800f0b6:	f3bf 8f6f 	isb	sy
 800f0ba:	f3bf 8f4f 	dsb	sy
 800f0be:	607b      	str	r3, [r7, #4]
}
 800f0c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f0c2:	f7fe fdad 	bl	800dc20 <xTaskIncrementTick>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d003      	beq.n	800f0d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f0cc:	4b06      	ldr	r3, [pc, #24]	@ (800f0e8 <xPortSysTickHandler+0x40>)
 800f0ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0d2:	601a      	str	r2, [r3, #0]
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	f383 8811 	msr	BASEPRI, r3
}
 800f0de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f0e0:	bf00      	nop
 800f0e2:	3708      	adds	r7, #8
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	e000ed04 	.word	0xe000ed04

0800f0ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f0f0:	4b0b      	ldr	r3, [pc, #44]	@ (800f120 <vPortSetupTimerInterrupt+0x34>)
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f124 <vPortSetupTimerInterrupt+0x38>)
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f128 <vPortSetupTimerInterrupt+0x3c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a0a      	ldr	r2, [pc, #40]	@ (800f12c <vPortSetupTimerInterrupt+0x40>)
 800f102:	fba2 2303 	umull	r2, r3, r2, r3
 800f106:	099b      	lsrs	r3, r3, #6
 800f108:	4a09      	ldr	r2, [pc, #36]	@ (800f130 <vPortSetupTimerInterrupt+0x44>)
 800f10a:	3b01      	subs	r3, #1
 800f10c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f10e:	4b04      	ldr	r3, [pc, #16]	@ (800f120 <vPortSetupTimerInterrupt+0x34>)
 800f110:	2207      	movs	r2, #7
 800f112:	601a      	str	r2, [r3, #0]
}
 800f114:	bf00      	nop
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop
 800f120:	e000e010 	.word	0xe000e010
 800f124:	e000e018 	.word	0xe000e018
 800f128:	2000000c 	.word	0x2000000c
 800f12c:	10624dd3 	.word	0x10624dd3
 800f130:	e000e014 	.word	0xe000e014

0800f134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f144 <vPortEnableVFP+0x10>
 800f138:	6801      	ldr	r1, [r0, #0]
 800f13a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f13e:	6001      	str	r1, [r0, #0]
 800f140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f142:	bf00      	nop
 800f144:	e000ed88 	.word	0xe000ed88

0800f148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f14e:	f3ef 8305 	mrs	r3, IPSR
 800f152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2b0f      	cmp	r3, #15
 800f158:	d915      	bls.n	800f186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f15a:	4a18      	ldr	r2, [pc, #96]	@ (800f1bc <vPortValidateInterruptPriority+0x74>)
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	4413      	add	r3, r2
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f164:	4b16      	ldr	r3, [pc, #88]	@ (800f1c0 <vPortValidateInterruptPriority+0x78>)
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	7afa      	ldrb	r2, [r7, #11]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d20b      	bcs.n	800f186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f172:	f383 8811 	msr	BASEPRI, r3
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	607b      	str	r3, [r7, #4]
}
 800f180:	bf00      	nop
 800f182:	bf00      	nop
 800f184:	e7fd      	b.n	800f182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f186:	4b0f      	ldr	r3, [pc, #60]	@ (800f1c4 <vPortValidateInterruptPriority+0x7c>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f18e:	4b0e      	ldr	r3, [pc, #56]	@ (800f1c8 <vPortValidateInterruptPriority+0x80>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	429a      	cmp	r2, r3
 800f194:	d90b      	bls.n	800f1ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f19a:	f383 8811 	msr	BASEPRI, r3
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	f3bf 8f4f 	dsb	sy
 800f1a6:	603b      	str	r3, [r7, #0]
}
 800f1a8:	bf00      	nop
 800f1aa:	bf00      	nop
 800f1ac:	e7fd      	b.n	800f1aa <vPortValidateInterruptPriority+0x62>
	}
 800f1ae:	bf00      	nop
 800f1b0:	3714      	adds	r7, #20
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr
 800f1ba:	bf00      	nop
 800f1bc:	e000e3f0 	.word	0xe000e3f0
 800f1c0:	2000221c 	.word	0x2000221c
 800f1c4:	e000ed0c 	.word	0xe000ed0c
 800f1c8:	20002220 	.word	0x20002220

0800f1cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b08a      	sub	sp, #40	@ 0x28
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f1d8:	f7fe fc66 	bl	800daa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f1dc:	4b5c      	ldr	r3, [pc, #368]	@ (800f350 <pvPortMalloc+0x184>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f1e4:	f000 f924 	bl	800f430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f1e8:	4b5a      	ldr	r3, [pc, #360]	@ (800f354 <pvPortMalloc+0x188>)
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	4013      	ands	r3, r2
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f040 8095 	bne.w	800f320 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d01e      	beq.n	800f23a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f1fc:	2208      	movs	r2, #8
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4413      	add	r3, r2
 800f202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f003 0307 	and.w	r3, r3, #7
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d015      	beq.n	800f23a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f023 0307 	bic.w	r3, r3, #7
 800f214:	3308      	adds	r3, #8
 800f216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f003 0307 	and.w	r3, r3, #7
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00b      	beq.n	800f23a <pvPortMalloc+0x6e>
	__asm volatile
 800f222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f226:	f383 8811 	msr	BASEPRI, r3
 800f22a:	f3bf 8f6f 	isb	sy
 800f22e:	f3bf 8f4f 	dsb	sy
 800f232:	617b      	str	r3, [r7, #20]
}
 800f234:	bf00      	nop
 800f236:	bf00      	nop
 800f238:	e7fd      	b.n	800f236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d06f      	beq.n	800f320 <pvPortMalloc+0x154>
 800f240:	4b45      	ldr	r3, [pc, #276]	@ (800f358 <pvPortMalloc+0x18c>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	429a      	cmp	r2, r3
 800f248:	d86a      	bhi.n	800f320 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f24a:	4b44      	ldr	r3, [pc, #272]	@ (800f35c <pvPortMalloc+0x190>)
 800f24c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f24e:	4b43      	ldr	r3, [pc, #268]	@ (800f35c <pvPortMalloc+0x190>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f254:	e004      	b.n	800f260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	429a      	cmp	r2, r3
 800f268:	d903      	bls.n	800f272 <pvPortMalloc+0xa6>
 800f26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d1f1      	bne.n	800f256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f272:	4b37      	ldr	r3, [pc, #220]	@ (800f350 <pvPortMalloc+0x184>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f278:	429a      	cmp	r2, r3
 800f27a:	d051      	beq.n	800f320 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f27c:	6a3b      	ldr	r3, [r7, #32]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2208      	movs	r2, #8
 800f282:	4413      	add	r3, r2
 800f284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f290:	685a      	ldr	r2, [r3, #4]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	1ad2      	subs	r2, r2, r3
 800f296:	2308      	movs	r3, #8
 800f298:	005b      	lsls	r3, r3, #1
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d920      	bls.n	800f2e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f29e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	f003 0307 	and.w	r3, r3, #7
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00b      	beq.n	800f2c8 <pvPortMalloc+0xfc>
	__asm volatile
 800f2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b4:	f383 8811 	msr	BASEPRI, r3
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	613b      	str	r3, [r7, #16]
}
 800f2c2:	bf00      	nop
 800f2c4:	bf00      	nop
 800f2c6:	e7fd      	b.n	800f2c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ca:	685a      	ldr	r2, [r3, #4]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	1ad2      	subs	r2, r2, r3
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f2da:	69b8      	ldr	r0, [r7, #24]
 800f2dc:	f000 f90a 	bl	800f4f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800f358 <pvPortMalloc+0x18c>)
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	1ad3      	subs	r3, r2, r3
 800f2ea:	4a1b      	ldr	r2, [pc, #108]	@ (800f358 <pvPortMalloc+0x18c>)
 800f2ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2ee:	4b1a      	ldr	r3, [pc, #104]	@ (800f358 <pvPortMalloc+0x18c>)
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	4b1b      	ldr	r3, [pc, #108]	@ (800f360 <pvPortMalloc+0x194>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d203      	bcs.n	800f302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f2fa:	4b17      	ldr	r3, [pc, #92]	@ (800f358 <pvPortMalloc+0x18c>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	4a18      	ldr	r2, [pc, #96]	@ (800f360 <pvPortMalloc+0x194>)
 800f300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f304:	685a      	ldr	r2, [r3, #4]
 800f306:	4b13      	ldr	r3, [pc, #76]	@ (800f354 <pvPortMalloc+0x188>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	431a      	orrs	r2, r3
 800f30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f312:	2200      	movs	r2, #0
 800f314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f316:	4b13      	ldr	r3, [pc, #76]	@ (800f364 <pvPortMalloc+0x198>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	3301      	adds	r3, #1
 800f31c:	4a11      	ldr	r2, [pc, #68]	@ (800f364 <pvPortMalloc+0x198>)
 800f31e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f320:	f7fe fbd0 	bl	800dac4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	f003 0307 	and.w	r3, r3, #7
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00b      	beq.n	800f346 <pvPortMalloc+0x17a>
	__asm volatile
 800f32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f332:	f383 8811 	msr	BASEPRI, r3
 800f336:	f3bf 8f6f 	isb	sy
 800f33a:	f3bf 8f4f 	dsb	sy
 800f33e:	60fb      	str	r3, [r7, #12]
}
 800f340:	bf00      	nop
 800f342:	bf00      	nop
 800f344:	e7fd      	b.n	800f342 <pvPortMalloc+0x176>
	return pvReturn;
 800f346:	69fb      	ldr	r3, [r7, #28]
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3728      	adds	r7, #40	@ 0x28
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}
 800f350:	20005e2c 	.word	0x20005e2c
 800f354:	20005e40 	.word	0x20005e40
 800f358:	20005e30 	.word	0x20005e30
 800f35c:	20005e24 	.word	0x20005e24
 800f360:	20005e34 	.word	0x20005e34
 800f364:	20005e38 	.word	0x20005e38

0800f368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b086      	sub	sp, #24
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d04f      	beq.n	800f41a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f37a:	2308      	movs	r3, #8
 800f37c:	425b      	negs	r3, r3
 800f37e:	697a      	ldr	r2, [r7, #20]
 800f380:	4413      	add	r3, r2
 800f382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	685a      	ldr	r2, [r3, #4]
 800f38c:	4b25      	ldr	r3, [pc, #148]	@ (800f424 <vPortFree+0xbc>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4013      	ands	r3, r2
 800f392:	2b00      	cmp	r3, #0
 800f394:	d10b      	bne.n	800f3ae <vPortFree+0x46>
	__asm volatile
 800f396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f39a:	f383 8811 	msr	BASEPRI, r3
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	f3bf 8f4f 	dsb	sy
 800f3a6:	60fb      	str	r3, [r7, #12]
}
 800f3a8:	bf00      	nop
 800f3aa:	bf00      	nop
 800f3ac:	e7fd      	b.n	800f3aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00b      	beq.n	800f3ce <vPortFree+0x66>
	__asm volatile
 800f3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ba:	f383 8811 	msr	BASEPRI, r3
 800f3be:	f3bf 8f6f 	isb	sy
 800f3c2:	f3bf 8f4f 	dsb	sy
 800f3c6:	60bb      	str	r3, [r7, #8]
}
 800f3c8:	bf00      	nop
 800f3ca:	bf00      	nop
 800f3cc:	e7fd      	b.n	800f3ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	685a      	ldr	r2, [r3, #4]
 800f3d2:	4b14      	ldr	r3, [pc, #80]	@ (800f424 <vPortFree+0xbc>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4013      	ands	r3, r2
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d01e      	beq.n	800f41a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d11a      	bne.n	800f41a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	685a      	ldr	r2, [r3, #4]
 800f3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800f424 <vPortFree+0xbc>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	43db      	mvns	r3, r3
 800f3ee:	401a      	ands	r2, r3
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f3f4:	f7fe fb58 	bl	800daa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	685a      	ldr	r2, [r3, #4]
 800f3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f428 <vPortFree+0xc0>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4413      	add	r3, r2
 800f402:	4a09      	ldr	r2, [pc, #36]	@ (800f428 <vPortFree+0xc0>)
 800f404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f406:	6938      	ldr	r0, [r7, #16]
 800f408:	f000 f874 	bl	800f4f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f40c:	4b07      	ldr	r3, [pc, #28]	@ (800f42c <vPortFree+0xc4>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	3301      	adds	r3, #1
 800f412:	4a06      	ldr	r2, [pc, #24]	@ (800f42c <vPortFree+0xc4>)
 800f414:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f416:	f7fe fb55 	bl	800dac4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f41a:	bf00      	nop
 800f41c:	3718      	adds	r7, #24
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	20005e40 	.word	0x20005e40
 800f428:	20005e30 	.word	0x20005e30
 800f42c:	20005e3c 	.word	0x20005e3c

0800f430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f430:	b480      	push	{r7}
 800f432:	b085      	sub	sp, #20
 800f434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f436:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f43a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f43c:	4b27      	ldr	r3, [pc, #156]	@ (800f4dc <prvHeapInit+0xac>)
 800f43e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f003 0307 	and.w	r3, r3, #7
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00c      	beq.n	800f464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	3307      	adds	r3, #7
 800f44e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f023 0307 	bic.w	r3, r3, #7
 800f456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	1ad3      	subs	r3, r2, r3
 800f45e:	4a1f      	ldr	r2, [pc, #124]	@ (800f4dc <prvHeapInit+0xac>)
 800f460:	4413      	add	r3, r2
 800f462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f468:	4a1d      	ldr	r2, [pc, #116]	@ (800f4e0 <prvHeapInit+0xb0>)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f46e:	4b1c      	ldr	r3, [pc, #112]	@ (800f4e0 <prvHeapInit+0xb0>)
 800f470:	2200      	movs	r2, #0
 800f472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	68ba      	ldr	r2, [r7, #8]
 800f478:	4413      	add	r3, r2
 800f47a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f47c:	2208      	movs	r2, #8
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	1a9b      	subs	r3, r3, r2
 800f482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f023 0307 	bic.w	r3, r3, #7
 800f48a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	4a15      	ldr	r2, [pc, #84]	@ (800f4e4 <prvHeapInit+0xb4>)
 800f490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f492:	4b14      	ldr	r3, [pc, #80]	@ (800f4e4 <prvHeapInit+0xb4>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2200      	movs	r2, #0
 800f498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f49a:	4b12      	ldr	r3, [pc, #72]	@ (800f4e4 <prvHeapInit+0xb4>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	68fa      	ldr	r2, [r7, #12]
 800f4aa:	1ad2      	subs	r2, r2, r3
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800f4e4 <prvHeapInit+0xb4>)
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	4a0a      	ldr	r2, [pc, #40]	@ (800f4e8 <prvHeapInit+0xb8>)
 800f4be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	4a09      	ldr	r2, [pc, #36]	@ (800f4ec <prvHeapInit+0xbc>)
 800f4c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f4c8:	4b09      	ldr	r3, [pc, #36]	@ (800f4f0 <prvHeapInit+0xc0>)
 800f4ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f4ce:	601a      	str	r2, [r3, #0]
}
 800f4d0:	bf00      	nop
 800f4d2:	3714      	adds	r7, #20
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr
 800f4dc:	20002224 	.word	0x20002224
 800f4e0:	20005e24 	.word	0x20005e24
 800f4e4:	20005e2c 	.word	0x20005e2c
 800f4e8:	20005e34 	.word	0x20005e34
 800f4ec:	20005e30 	.word	0x20005e30
 800f4f0:	20005e40 	.word	0x20005e40

0800f4f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b085      	sub	sp, #20
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f4fc:	4b28      	ldr	r3, [pc, #160]	@ (800f5a0 <prvInsertBlockIntoFreeList+0xac>)
 800f4fe:	60fb      	str	r3, [r7, #12]
 800f500:	e002      	b.n	800f508 <prvInsertBlockIntoFreeList+0x14>
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	60fb      	str	r3, [r7, #12]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d8f7      	bhi.n	800f502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	4413      	add	r3, r2
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	429a      	cmp	r2, r3
 800f522:	d108      	bne.n	800f536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	685a      	ldr	r2, [r3, #4]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	441a      	add	r2, r3
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	68ba      	ldr	r2, [r7, #8]
 800f540:	441a      	add	r2, r3
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	429a      	cmp	r2, r3
 800f548:	d118      	bne.n	800f57c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	4b15      	ldr	r3, [pc, #84]	@ (800f5a4 <prvInsertBlockIntoFreeList+0xb0>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	429a      	cmp	r2, r3
 800f554:	d00d      	beq.n	800f572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	685a      	ldr	r2, [r3, #4]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	441a      	add	r2, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	601a      	str	r2, [r3, #0]
 800f570:	e008      	b.n	800f584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f572:	4b0c      	ldr	r3, [pc, #48]	@ (800f5a4 <prvInsertBlockIntoFreeList+0xb0>)
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	601a      	str	r2, [r3, #0]
 800f57a:	e003      	b.n	800f584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	429a      	cmp	r2, r3
 800f58a:	d002      	beq.n	800f592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f592:	bf00      	nop
 800f594:	3714      	adds	r7, #20
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr
 800f59e:	bf00      	nop
 800f5a0:	20005e24 	.word	0x20005e24
 800f5a4:	20005e2c 	.word	0x20005e2c

0800f5a8 <EE_Init>:
  * @return Boolean value indicating the success of the initialization:
  *       - true: Initialization successful.
  *       - false: Initialization failed.
  */
bool EE_Init(void *pData, uint32_t Size)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b085      	sub	sp, #20
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	73fb      	strb	r3, [r7, #15]
  do
  {
    if ((pData == NULL) || (Size == 0))
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d023      	beq.n	800f604 <EE_Init+0x5c>
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d020      	beq.n	800f604 <EE_Init+0x5c>
    eeHandle.PageSectorNumber = ((FLASH_SIZE / eeHandle.PageSectorSize) - 1);
    eeHandle.Address = (FLASH_BASE + eeHandle.PageSectorSize * eeHandle.PageSectorNumber);
#endif
#else // manual
#if (defined FLASH_BANK_1) || (defined FLASH_BANK_2)
    eeHandle.BankNumber = EE_SELECTED_BANK;
 800f5c2:	4b14      	ldr	r3, [pc, #80]	@ (800f614 <EE_Init+0x6c>)
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	745a      	strb	r2, [r3, #17]
#endif
    eeHandle.PageSectorNumber = EE_SELECTED_PAGE_SECTOR_NUMBER;
 800f5c8:	4b12      	ldr	r3, [pc, #72]	@ (800f614 <EE_Init+0x6c>)
 800f5ca:	2207      	movs	r2, #7
 800f5cc:	741a      	strb	r2, [r3, #16]
    eeHandle.PageSectorSize = EE_SELECTED_PAGE_SECTOR_SIZE;
 800f5ce:	4b11      	ldr	r3, [pc, #68]	@ (800f614 <EE_Init+0x6c>)
 800f5d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f5d4:	609a      	str	r2, [r3, #8]
    eeHandle.Address = EE_SELECTED_ADDRESS;
 800f5d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f614 <EE_Init+0x6c>)
 800f5d8:	4a0f      	ldr	r2, [pc, #60]	@ (800f618 <EE_Init+0x70>)
 800f5da:	60da      	str	r2, [r3, #12]
#endif
    /* checking size of eeprom area*/
    if (Size > eeHandle.PageSectorSize)
 800f5dc:	4b0d      	ldr	r3, [pc, #52]	@ (800f614 <EE_Init+0x6c>)
 800f5de:	689b      	ldr	r3, [r3, #8]
 800f5e0:	683a      	ldr	r2, [r7, #0]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d906      	bls.n	800f5f4 <EE_Init+0x4c>
    {
      eeHandle.Size = 0;
 800f5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f614 <EE_Init+0x6c>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	605a      	str	r2, [r3, #4]
      eeHandle.pData = NULL;
 800f5ec:	4b09      	ldr	r3, [pc, #36]	@ (800f614 <EE_Init+0x6c>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	601a      	str	r2, [r3, #0]
      break;
 800f5f2:	e007      	b.n	800f604 <EE_Init+0x5c>
    }
    eeHandle.Size = Size;
 800f5f4:	4a07      	ldr	r2, [pc, #28]	@ (800f614 <EE_Init+0x6c>)
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	6053      	str	r3, [r2, #4]
    eeHandle.pData = (uint8_t*)pData;
 800f5fa:	4a06      	ldr	r2, [pc, #24]	@ (800f614 <EE_Init+0x6c>)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6013      	str	r3, [r2, #0]
    answer = true;
 800f600:	2301      	movs	r3, #1
 800f602:	73fb      	strb	r3, [r7, #15]

  } while (0);

  return answer;
 800f604:	7bfb      	ldrb	r3, [r7, #15]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3714      	adds	r7, #20
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	20005e44 	.word	0x20005e44
 800f618:	08070000 	.word	0x08070000

0800f61c <EE_Format>:
  * @return bool Boolean value indicating the success of the operation:
  *     - true: Formatting successful.
  *     - false: Formatting failed.
  */
bool EE_Format(void)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b088      	sub	sp, #32
 800f620:	af00      	add	r7, sp, #0
  bool answer = false;
 800f622:	2300      	movs	r3, #0
 800f624:	77fb      	strb	r3, [r7, #31]
  uint32_t error;
  FLASH_EraseInitTypeDef flashErase;
  do
  {
    HAL_FLASH_Unlock();
 800f626:	f7f8 f925 	bl	8007874 <HAL_FLASH_Unlock>
#elif EE_ERASE == EE_ERASE_PAGE_NUMBER
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
    flashErase.Page = eeHandle.PageSectorNumber;
    flashErase.NbPages = 1;
#else
    flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800f62a:	2300      	movs	r3, #0
 800f62c:	607b      	str	r3, [r7, #4]
    flashErase.Sector = eeHandle.PageSectorNumber;
 800f62e:	4b12      	ldr	r3, [pc, #72]	@ (800f678 <EE_Format+0x5c>)
 800f630:	7c1b      	ldrb	r3, [r3, #16]
 800f632:	60fb      	str	r3, [r7, #12]
    flashErase.NbSectors = 1;
 800f634:	2301      	movs	r3, #1
 800f636:	613b      	str	r3, [r7, #16]
#endif
#if (defined FLASH_BANK_1) || (defined FLASH_BANK_2)
    flashErase.Banks = eeHandle.BankNumber;
 800f638:	4b0f      	ldr	r3, [pc, #60]	@ (800f678 <EE_Format+0x5c>)
 800f63a:	7c5b      	ldrb	r3, [r3, #17]
 800f63c:	60bb      	str	r3, [r7, #8]
#endif
#ifdef FLASH_VOLTAGE_RANGE_3
    flashErase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800f63e:	2302      	movs	r3, #2
 800f640:	617b      	str	r3, [r7, #20]
#endif
    /* erasing page/sector */
    if (HAL_FLASHEx_Erase(&flashErase, &error) != HAL_OK)
 800f642:	f107 0218 	add.w	r2, r7, #24
 800f646:	1d3b      	adds	r3, r7, #4
 800f648:	4611      	mov	r1, r2
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7f8 fa84 	bl	8007b58 <HAL_FLASHEx_Erase>
 800f650:	4603      	mov	r3, r0
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <EE_Format+0x48>
    {
      break;
    }
    /* checking result */
    if (error != 0xFFFFFFFF)
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f65c:	d104      	bne.n	800f668 <EE_Format+0x4c>
    {
      break;
    }
    answer = true;
 800f65e:	2301      	movs	r3, #1
 800f660:	77fb      	strb	r3, [r7, #31]
 800f662:	e002      	b.n	800f66a <EE_Format+0x4e>
      break;
 800f664:	bf00      	nop
 800f666:	e000      	b.n	800f66a <EE_Format+0x4e>
      break;
 800f668:	bf00      	nop

  } while (0);

  HAL_FLASH_Lock();
 800f66a:	f7f8 f925 	bl	80078b8 <HAL_FLASH_Lock>
#ifdef HAL_ICACHE_MODULE_ENABLED
  HAL_ICACHE_Enable();
#endif
  return answer;
 800f66e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3720      	adds	r7, #32
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	20005e44 	.word	0x20005e44

0800f67c <EE_Read>:
  * @brief Reads data from the EEPROM emulation area.
  * @note This function reads data from the EEPROM emulation area
  *  and loads it into the specified storage pointer.
  */
void EE_Read(void)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
  uint8_t *data = eeHandle.pData;
 800f682:	4b11      	ldr	r3, [pc, #68]	@ (800f6c8 <EE_Read+0x4c>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	607b      	str	r3, [r7, #4]
#ifdef HAL_ICACHE_MODULE_ENABLED
    /* disabling ICACHE if enabled*/
    HAL_ICACHE_Disable();
#endif
  if (data != NULL)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d015      	beq.n	800f6ba <EE_Read+0x3e>
  {
    /* reading flash */
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 800f68e:	2300      	movs	r3, #0
 800f690:	603b      	str	r3, [r7, #0]
 800f692:	e00d      	b.n	800f6b0 <EE_Read+0x34>
    {
      *data = (*(__IO uint8_t*) (eeHandle.Address + i));
 800f694:	4b0c      	ldr	r3, [pc, #48]	@ (800f6c8 <EE_Read+0x4c>)
 800f696:	68da      	ldr	r2, [r3, #12]
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	4413      	add	r3, r2
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	b2da      	uxtb	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	701a      	strb	r2, [r3, #0]
      data++;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	607b      	str	r3, [r7, #4]
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	603b      	str	r3, [r7, #0]
 800f6b0:	4b05      	ldr	r3, [pc, #20]	@ (800f6c8 <EE_Read+0x4c>)
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	683a      	ldr	r2, [r7, #0]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d3ec      	bcc.n	800f694 <EE_Read+0x18>
  }
#ifdef HAL_ICACHE_MODULE_ENABLED
    /* disabling ICACHE if enabled*/
    HAL_ICACHE_Enable();
#endif
}
 800f6ba:	bf00      	nop
 800f6bc:	370c      	adds	r7, #12
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop
 800f6c8:	20005e44 	.word	0x20005e44

0800f6cc <EE_Write>:
  * @brief Writes data to the EEPROM emulation area.
  * @note This function writes data to the EEPROM emulation area.
  * @retval true if the write operation is successful, false otherwise.
  */
bool EE_Write(void)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af00      	add	r7, sp, #0
  bool answer = true;
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *data = eeHandle.pData;
 800f6d6:	4b2e      	ldr	r3, [pc, #184]	@ (800f790 <EE_Write+0xc4>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	613b      	str	r3, [r7, #16]
  do
  {
    /* checking eeprom is initialize correctly */
    if (data == NULL)
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d102      	bne.n	800f6e8 <EE_Write+0x1c>
    {
      answer = false;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	75fb      	strb	r3, [r7, #23]
      break;
 800f6e6:	e04b      	b.n	800f780 <EE_Write+0xb4>
    }
    /* formating flash area before writing */
    if (EE_Format() == false)
 800f6e8:	f7ff ff98 	bl	800f61c <EE_Format>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	f083 0301 	eor.w	r3, r3, #1
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d002      	beq.n	800f6fe <EE_Write+0x32>
    {
      answer = false;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	75fb      	strb	r3, [r7, #23]
      break;
 800f6fc:	e040      	b.n	800f780 <EE_Write+0xb4>
    }
    HAL_FLASH_Unlock();
 800f6fe:	f7f8 f8b9 	bl	8007874 <HAL_FLASH_Unlock>
    /* disabling ICACHE if enabled*/
    HAL_ICACHE_Disable();
#endif
#if (defined FLASH_TYPEPROGRAM_HALFWORD)
    /* writing buffer to flash */
    for (uint32_t i = 0; i < eeHandle.Size ; i += 2)
 800f702:	2300      	movs	r3, #0
 800f704:	60fb      	str	r3, [r7, #12]
 800f706:	e018      	b.n	800f73a <EE_Write+0x6e>
    {
      uint64_t halfWord;
      memcpy((uint8_t*)&halfWord, data, 2);
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	803b      	strh	r3, [r7, #0]
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, eeHandle.Address + i, halfWord) != HAL_OK)
 800f710:	4b1f      	ldr	r3, [pc, #124]	@ (800f790 <EE_Write+0xc4>)
 800f712:	68da      	ldr	r2, [r3, #12]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	18d1      	adds	r1, r2, r3
 800f718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f71c:	2001      	movs	r0, #1
 800f71e:	f7f8 f857 	bl	80077d0 <HAL_FLASH_Program>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d002      	beq.n	800f72e <EE_Write+0x62>
      {
        answer = false;
 800f728:	2300      	movs	r3, #0
 800f72a:	75fb      	strb	r3, [r7, #23]
 800f72c:	e00a      	b.n	800f744 <EE_Write+0x78>
        break;
      }
      data += 2;
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	3302      	adds	r3, #2
 800f732:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < eeHandle.Size ; i += 2)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	3302      	adds	r3, #2
 800f738:	60fb      	str	r3, [r7, #12]
 800f73a:	4b15      	ldr	r3, [pc, #84]	@ (800f790 <EE_Write+0xc4>)
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	68fa      	ldr	r2, [r7, #12]
 800f740:	429a      	cmp	r2, r3
 800f742:	d3e1      	bcc.n	800f708 <EE_Write+0x3c>
      }
      data += FLASH_NB_32BITWORD_IN_FLASHWORD * 4;
    }
#endif
    /* verifying Flash content */
    data = eeHandle.pData;
 800f744:	4b12      	ldr	r3, [pc, #72]	@ (800f790 <EE_Write+0xc4>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 800f74a:	2300      	movs	r3, #0
 800f74c:	60bb      	str	r3, [r7, #8]
 800f74e:	e012      	b.n	800f776 <EE_Write+0xaa>
    {
      if (*data != (*(__IO uint8_t*) (eeHandle.Address + i)))
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	781a      	ldrb	r2, [r3, #0]
 800f754:	4b0e      	ldr	r3, [pc, #56]	@ (800f790 <EE_Write+0xc4>)
 800f756:	68d9      	ldr	r1, [r3, #12]
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	440b      	add	r3, r1
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	429a      	cmp	r2, r3
 800f762:	d002      	beq.n	800f76a <EE_Write+0x9e>
      {
        answer = false;
 800f764:	2300      	movs	r3, #0
 800f766:	75fb      	strb	r3, [r7, #23]
        break;
 800f768:	e00a      	b.n	800f780 <EE_Write+0xb4>
      }
      data++;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	3301      	adds	r3, #1
 800f76e:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	3301      	adds	r3, #1
 800f774:	60bb      	str	r3, [r7, #8]
 800f776:	4b06      	ldr	r3, [pc, #24]	@ (800f790 <EE_Write+0xc4>)
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	68ba      	ldr	r2, [r7, #8]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d3e7      	bcc.n	800f750 <EE_Write+0x84>
    }

  } while (0);

  HAL_FLASH_Lock();
 800f780:	f7f8 f89a 	bl	80078b8 <HAL_FLASH_Lock>
#ifdef HAL_ICACHE_MODULE_ENABLED
  HAL_ICACHE_Enable();
#endif
  return answer;
 800f784:	7dfb      	ldrb	r3, [r7, #23]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	20005e44 	.word	0x20005e44

0800f794 <__cvt>:
 800f794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f798:	ec57 6b10 	vmov	r6, r7, d0
 800f79c:	2f00      	cmp	r7, #0
 800f79e:	460c      	mov	r4, r1
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	463b      	mov	r3, r7
 800f7a4:	bfbb      	ittet	lt
 800f7a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f7aa:	461f      	movlt	r7, r3
 800f7ac:	2300      	movge	r3, #0
 800f7ae:	232d      	movlt	r3, #45	@ 0x2d
 800f7b0:	700b      	strb	r3, [r1, #0]
 800f7b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f7b8:	4691      	mov	r9, r2
 800f7ba:	f023 0820 	bic.w	r8, r3, #32
 800f7be:	bfbc      	itt	lt
 800f7c0:	4632      	movlt	r2, r6
 800f7c2:	4616      	movlt	r6, r2
 800f7c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f7c8:	d005      	beq.n	800f7d6 <__cvt+0x42>
 800f7ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f7ce:	d100      	bne.n	800f7d2 <__cvt+0x3e>
 800f7d0:	3401      	adds	r4, #1
 800f7d2:	2102      	movs	r1, #2
 800f7d4:	e000      	b.n	800f7d8 <__cvt+0x44>
 800f7d6:	2103      	movs	r1, #3
 800f7d8:	ab03      	add	r3, sp, #12
 800f7da:	9301      	str	r3, [sp, #4]
 800f7dc:	ab02      	add	r3, sp, #8
 800f7de:	9300      	str	r3, [sp, #0]
 800f7e0:	ec47 6b10 	vmov	d0, r6, r7
 800f7e4:	4653      	mov	r3, sl
 800f7e6:	4622      	mov	r2, r4
 800f7e8:	f000 feee 	bl	80105c8 <_dtoa_r>
 800f7ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f7f0:	4605      	mov	r5, r0
 800f7f2:	d119      	bne.n	800f828 <__cvt+0x94>
 800f7f4:	f019 0f01 	tst.w	r9, #1
 800f7f8:	d00e      	beq.n	800f818 <__cvt+0x84>
 800f7fa:	eb00 0904 	add.w	r9, r0, r4
 800f7fe:	2200      	movs	r2, #0
 800f800:	2300      	movs	r3, #0
 800f802:	4630      	mov	r0, r6
 800f804:	4639      	mov	r1, r7
 800f806:	f7f1 f967 	bl	8000ad8 <__aeabi_dcmpeq>
 800f80a:	b108      	cbz	r0, 800f810 <__cvt+0x7c>
 800f80c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f810:	2230      	movs	r2, #48	@ 0x30
 800f812:	9b03      	ldr	r3, [sp, #12]
 800f814:	454b      	cmp	r3, r9
 800f816:	d31e      	bcc.n	800f856 <__cvt+0xc2>
 800f818:	9b03      	ldr	r3, [sp, #12]
 800f81a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f81c:	1b5b      	subs	r3, r3, r5
 800f81e:	4628      	mov	r0, r5
 800f820:	6013      	str	r3, [r2, #0]
 800f822:	b004      	add	sp, #16
 800f824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f828:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f82c:	eb00 0904 	add.w	r9, r0, r4
 800f830:	d1e5      	bne.n	800f7fe <__cvt+0x6a>
 800f832:	7803      	ldrb	r3, [r0, #0]
 800f834:	2b30      	cmp	r3, #48	@ 0x30
 800f836:	d10a      	bne.n	800f84e <__cvt+0xba>
 800f838:	2200      	movs	r2, #0
 800f83a:	2300      	movs	r3, #0
 800f83c:	4630      	mov	r0, r6
 800f83e:	4639      	mov	r1, r7
 800f840:	f7f1 f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 800f844:	b918      	cbnz	r0, 800f84e <__cvt+0xba>
 800f846:	f1c4 0401 	rsb	r4, r4, #1
 800f84a:	f8ca 4000 	str.w	r4, [sl]
 800f84e:	f8da 3000 	ldr.w	r3, [sl]
 800f852:	4499      	add	r9, r3
 800f854:	e7d3      	b.n	800f7fe <__cvt+0x6a>
 800f856:	1c59      	adds	r1, r3, #1
 800f858:	9103      	str	r1, [sp, #12]
 800f85a:	701a      	strb	r2, [r3, #0]
 800f85c:	e7d9      	b.n	800f812 <__cvt+0x7e>

0800f85e <__exponent>:
 800f85e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f860:	2900      	cmp	r1, #0
 800f862:	bfba      	itte	lt
 800f864:	4249      	neglt	r1, r1
 800f866:	232d      	movlt	r3, #45	@ 0x2d
 800f868:	232b      	movge	r3, #43	@ 0x2b
 800f86a:	2909      	cmp	r1, #9
 800f86c:	7002      	strb	r2, [r0, #0]
 800f86e:	7043      	strb	r3, [r0, #1]
 800f870:	dd29      	ble.n	800f8c6 <__exponent+0x68>
 800f872:	f10d 0307 	add.w	r3, sp, #7
 800f876:	461d      	mov	r5, r3
 800f878:	270a      	movs	r7, #10
 800f87a:	461a      	mov	r2, r3
 800f87c:	fbb1 f6f7 	udiv	r6, r1, r7
 800f880:	fb07 1416 	mls	r4, r7, r6, r1
 800f884:	3430      	adds	r4, #48	@ 0x30
 800f886:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f88a:	460c      	mov	r4, r1
 800f88c:	2c63      	cmp	r4, #99	@ 0x63
 800f88e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f892:	4631      	mov	r1, r6
 800f894:	dcf1      	bgt.n	800f87a <__exponent+0x1c>
 800f896:	3130      	adds	r1, #48	@ 0x30
 800f898:	1e94      	subs	r4, r2, #2
 800f89a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f89e:	1c41      	adds	r1, r0, #1
 800f8a0:	4623      	mov	r3, r4
 800f8a2:	42ab      	cmp	r3, r5
 800f8a4:	d30a      	bcc.n	800f8bc <__exponent+0x5e>
 800f8a6:	f10d 0309 	add.w	r3, sp, #9
 800f8aa:	1a9b      	subs	r3, r3, r2
 800f8ac:	42ac      	cmp	r4, r5
 800f8ae:	bf88      	it	hi
 800f8b0:	2300      	movhi	r3, #0
 800f8b2:	3302      	adds	r3, #2
 800f8b4:	4403      	add	r3, r0
 800f8b6:	1a18      	subs	r0, r3, r0
 800f8b8:	b003      	add	sp, #12
 800f8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f8c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f8c4:	e7ed      	b.n	800f8a2 <__exponent+0x44>
 800f8c6:	2330      	movs	r3, #48	@ 0x30
 800f8c8:	3130      	adds	r1, #48	@ 0x30
 800f8ca:	7083      	strb	r3, [r0, #2]
 800f8cc:	70c1      	strb	r1, [r0, #3]
 800f8ce:	1d03      	adds	r3, r0, #4
 800f8d0:	e7f1      	b.n	800f8b6 <__exponent+0x58>
	...

0800f8d4 <_printf_float>:
 800f8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d8:	b08d      	sub	sp, #52	@ 0x34
 800f8da:	460c      	mov	r4, r1
 800f8dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f8e0:	4616      	mov	r6, r2
 800f8e2:	461f      	mov	r7, r3
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	f000 fd01 	bl	80102ec <_localeconv_r>
 800f8ea:	6803      	ldr	r3, [r0, #0]
 800f8ec:	9304      	str	r3, [sp, #16]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7f0 fcc6 	bl	8000280 <strlen>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8f8:	f8d8 3000 	ldr.w	r3, [r8]
 800f8fc:	9005      	str	r0, [sp, #20]
 800f8fe:	3307      	adds	r3, #7
 800f900:	f023 0307 	bic.w	r3, r3, #7
 800f904:	f103 0208 	add.w	r2, r3, #8
 800f908:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f90c:	f8d4 b000 	ldr.w	fp, [r4]
 800f910:	f8c8 2000 	str.w	r2, [r8]
 800f914:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f918:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f91c:	9307      	str	r3, [sp, #28]
 800f91e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f922:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f92a:	4b9c      	ldr	r3, [pc, #624]	@ (800fb9c <_printf_float+0x2c8>)
 800f92c:	f04f 32ff 	mov.w	r2, #4294967295
 800f930:	f7f1 f904 	bl	8000b3c <__aeabi_dcmpun>
 800f934:	bb70      	cbnz	r0, 800f994 <_printf_float+0xc0>
 800f936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f93a:	4b98      	ldr	r3, [pc, #608]	@ (800fb9c <_printf_float+0x2c8>)
 800f93c:	f04f 32ff 	mov.w	r2, #4294967295
 800f940:	f7f1 f8de 	bl	8000b00 <__aeabi_dcmple>
 800f944:	bb30      	cbnz	r0, 800f994 <_printf_float+0xc0>
 800f946:	2200      	movs	r2, #0
 800f948:	2300      	movs	r3, #0
 800f94a:	4640      	mov	r0, r8
 800f94c:	4649      	mov	r1, r9
 800f94e:	f7f1 f8cd 	bl	8000aec <__aeabi_dcmplt>
 800f952:	b110      	cbz	r0, 800f95a <_printf_float+0x86>
 800f954:	232d      	movs	r3, #45	@ 0x2d
 800f956:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f95a:	4a91      	ldr	r2, [pc, #580]	@ (800fba0 <_printf_float+0x2cc>)
 800f95c:	4b91      	ldr	r3, [pc, #580]	@ (800fba4 <_printf_float+0x2d0>)
 800f95e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f962:	bf8c      	ite	hi
 800f964:	4690      	movhi	r8, r2
 800f966:	4698      	movls	r8, r3
 800f968:	2303      	movs	r3, #3
 800f96a:	6123      	str	r3, [r4, #16]
 800f96c:	f02b 0304 	bic.w	r3, fp, #4
 800f970:	6023      	str	r3, [r4, #0]
 800f972:	f04f 0900 	mov.w	r9, #0
 800f976:	9700      	str	r7, [sp, #0]
 800f978:	4633      	mov	r3, r6
 800f97a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f97c:	4621      	mov	r1, r4
 800f97e:	4628      	mov	r0, r5
 800f980:	f000 f9d2 	bl	800fd28 <_printf_common>
 800f984:	3001      	adds	r0, #1
 800f986:	f040 808d 	bne.w	800faa4 <_printf_float+0x1d0>
 800f98a:	f04f 30ff 	mov.w	r0, #4294967295
 800f98e:	b00d      	add	sp, #52	@ 0x34
 800f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f994:	4642      	mov	r2, r8
 800f996:	464b      	mov	r3, r9
 800f998:	4640      	mov	r0, r8
 800f99a:	4649      	mov	r1, r9
 800f99c:	f7f1 f8ce 	bl	8000b3c <__aeabi_dcmpun>
 800f9a0:	b140      	cbz	r0, 800f9b4 <_printf_float+0xe0>
 800f9a2:	464b      	mov	r3, r9
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	bfbc      	itt	lt
 800f9a8:	232d      	movlt	r3, #45	@ 0x2d
 800f9aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f9ae:	4a7e      	ldr	r2, [pc, #504]	@ (800fba8 <_printf_float+0x2d4>)
 800f9b0:	4b7e      	ldr	r3, [pc, #504]	@ (800fbac <_printf_float+0x2d8>)
 800f9b2:	e7d4      	b.n	800f95e <_printf_float+0x8a>
 800f9b4:	6863      	ldr	r3, [r4, #4]
 800f9b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f9ba:	9206      	str	r2, [sp, #24]
 800f9bc:	1c5a      	adds	r2, r3, #1
 800f9be:	d13b      	bne.n	800fa38 <_printf_float+0x164>
 800f9c0:	2306      	movs	r3, #6
 800f9c2:	6063      	str	r3, [r4, #4]
 800f9c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	6022      	str	r2, [r4, #0]
 800f9cc:	9303      	str	r3, [sp, #12]
 800f9ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800f9d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f9d4:	ab09      	add	r3, sp, #36	@ 0x24
 800f9d6:	9300      	str	r3, [sp, #0]
 800f9d8:	6861      	ldr	r1, [r4, #4]
 800f9da:	ec49 8b10 	vmov	d0, r8, r9
 800f9de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	f7ff fed6 	bl	800f794 <__cvt>
 800f9e8:	9b06      	ldr	r3, [sp, #24]
 800f9ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9ec:	2b47      	cmp	r3, #71	@ 0x47
 800f9ee:	4680      	mov	r8, r0
 800f9f0:	d129      	bne.n	800fa46 <_printf_float+0x172>
 800f9f2:	1cc8      	adds	r0, r1, #3
 800f9f4:	db02      	blt.n	800f9fc <_printf_float+0x128>
 800f9f6:	6863      	ldr	r3, [r4, #4]
 800f9f8:	4299      	cmp	r1, r3
 800f9fa:	dd41      	ble.n	800fa80 <_printf_float+0x1ac>
 800f9fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800fa00:	fa5f fa8a 	uxtb.w	sl, sl
 800fa04:	3901      	subs	r1, #1
 800fa06:	4652      	mov	r2, sl
 800fa08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fa0c:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa0e:	f7ff ff26 	bl	800f85e <__exponent>
 800fa12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa14:	1813      	adds	r3, r2, r0
 800fa16:	2a01      	cmp	r2, #1
 800fa18:	4681      	mov	r9, r0
 800fa1a:	6123      	str	r3, [r4, #16]
 800fa1c:	dc02      	bgt.n	800fa24 <_printf_float+0x150>
 800fa1e:	6822      	ldr	r2, [r4, #0]
 800fa20:	07d2      	lsls	r2, r2, #31
 800fa22:	d501      	bpl.n	800fa28 <_printf_float+0x154>
 800fa24:	3301      	adds	r3, #1
 800fa26:	6123      	str	r3, [r4, #16]
 800fa28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d0a2      	beq.n	800f976 <_printf_float+0xa2>
 800fa30:	232d      	movs	r3, #45	@ 0x2d
 800fa32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa36:	e79e      	b.n	800f976 <_printf_float+0xa2>
 800fa38:	9a06      	ldr	r2, [sp, #24]
 800fa3a:	2a47      	cmp	r2, #71	@ 0x47
 800fa3c:	d1c2      	bne.n	800f9c4 <_printf_float+0xf0>
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d1c0      	bne.n	800f9c4 <_printf_float+0xf0>
 800fa42:	2301      	movs	r3, #1
 800fa44:	e7bd      	b.n	800f9c2 <_printf_float+0xee>
 800fa46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa4a:	d9db      	bls.n	800fa04 <_printf_float+0x130>
 800fa4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fa50:	d118      	bne.n	800fa84 <_printf_float+0x1b0>
 800fa52:	2900      	cmp	r1, #0
 800fa54:	6863      	ldr	r3, [r4, #4]
 800fa56:	dd0b      	ble.n	800fa70 <_printf_float+0x19c>
 800fa58:	6121      	str	r1, [r4, #16]
 800fa5a:	b913      	cbnz	r3, 800fa62 <_printf_float+0x18e>
 800fa5c:	6822      	ldr	r2, [r4, #0]
 800fa5e:	07d0      	lsls	r0, r2, #31
 800fa60:	d502      	bpl.n	800fa68 <_printf_float+0x194>
 800fa62:	3301      	adds	r3, #1
 800fa64:	440b      	add	r3, r1
 800fa66:	6123      	str	r3, [r4, #16]
 800fa68:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa6a:	f04f 0900 	mov.w	r9, #0
 800fa6e:	e7db      	b.n	800fa28 <_printf_float+0x154>
 800fa70:	b913      	cbnz	r3, 800fa78 <_printf_float+0x1a4>
 800fa72:	6822      	ldr	r2, [r4, #0]
 800fa74:	07d2      	lsls	r2, r2, #31
 800fa76:	d501      	bpl.n	800fa7c <_printf_float+0x1a8>
 800fa78:	3302      	adds	r3, #2
 800fa7a:	e7f4      	b.n	800fa66 <_printf_float+0x192>
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	e7f2      	b.n	800fa66 <_printf_float+0x192>
 800fa80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fa84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa86:	4299      	cmp	r1, r3
 800fa88:	db05      	blt.n	800fa96 <_printf_float+0x1c2>
 800fa8a:	6823      	ldr	r3, [r4, #0]
 800fa8c:	6121      	str	r1, [r4, #16]
 800fa8e:	07d8      	lsls	r0, r3, #31
 800fa90:	d5ea      	bpl.n	800fa68 <_printf_float+0x194>
 800fa92:	1c4b      	adds	r3, r1, #1
 800fa94:	e7e7      	b.n	800fa66 <_printf_float+0x192>
 800fa96:	2900      	cmp	r1, #0
 800fa98:	bfd4      	ite	le
 800fa9a:	f1c1 0202 	rsble	r2, r1, #2
 800fa9e:	2201      	movgt	r2, #1
 800faa0:	4413      	add	r3, r2
 800faa2:	e7e0      	b.n	800fa66 <_printf_float+0x192>
 800faa4:	6823      	ldr	r3, [r4, #0]
 800faa6:	055a      	lsls	r2, r3, #21
 800faa8:	d407      	bmi.n	800faba <_printf_float+0x1e6>
 800faaa:	6923      	ldr	r3, [r4, #16]
 800faac:	4642      	mov	r2, r8
 800faae:	4631      	mov	r1, r6
 800fab0:	4628      	mov	r0, r5
 800fab2:	47b8      	blx	r7
 800fab4:	3001      	adds	r0, #1
 800fab6:	d12b      	bne.n	800fb10 <_printf_float+0x23c>
 800fab8:	e767      	b.n	800f98a <_printf_float+0xb6>
 800faba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fabe:	f240 80dd 	bls.w	800fc7c <_printf_float+0x3a8>
 800fac2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fac6:	2200      	movs	r2, #0
 800fac8:	2300      	movs	r3, #0
 800faca:	f7f1 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 800face:	2800      	cmp	r0, #0
 800fad0:	d033      	beq.n	800fb3a <_printf_float+0x266>
 800fad2:	4a37      	ldr	r2, [pc, #220]	@ (800fbb0 <_printf_float+0x2dc>)
 800fad4:	2301      	movs	r3, #1
 800fad6:	4631      	mov	r1, r6
 800fad8:	4628      	mov	r0, r5
 800fada:	47b8      	blx	r7
 800fadc:	3001      	adds	r0, #1
 800fade:	f43f af54 	beq.w	800f98a <_printf_float+0xb6>
 800fae2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fae6:	4543      	cmp	r3, r8
 800fae8:	db02      	blt.n	800faf0 <_printf_float+0x21c>
 800faea:	6823      	ldr	r3, [r4, #0]
 800faec:	07d8      	lsls	r0, r3, #31
 800faee:	d50f      	bpl.n	800fb10 <_printf_float+0x23c>
 800faf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800faf4:	4631      	mov	r1, r6
 800faf6:	4628      	mov	r0, r5
 800faf8:	47b8      	blx	r7
 800fafa:	3001      	adds	r0, #1
 800fafc:	f43f af45 	beq.w	800f98a <_printf_float+0xb6>
 800fb00:	f04f 0900 	mov.w	r9, #0
 800fb04:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb08:	f104 0a1a 	add.w	sl, r4, #26
 800fb0c:	45c8      	cmp	r8, r9
 800fb0e:	dc09      	bgt.n	800fb24 <_printf_float+0x250>
 800fb10:	6823      	ldr	r3, [r4, #0]
 800fb12:	079b      	lsls	r3, r3, #30
 800fb14:	f100 8103 	bmi.w	800fd1e <_printf_float+0x44a>
 800fb18:	68e0      	ldr	r0, [r4, #12]
 800fb1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb1c:	4298      	cmp	r0, r3
 800fb1e:	bfb8      	it	lt
 800fb20:	4618      	movlt	r0, r3
 800fb22:	e734      	b.n	800f98e <_printf_float+0xba>
 800fb24:	2301      	movs	r3, #1
 800fb26:	4652      	mov	r2, sl
 800fb28:	4631      	mov	r1, r6
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	47b8      	blx	r7
 800fb2e:	3001      	adds	r0, #1
 800fb30:	f43f af2b 	beq.w	800f98a <_printf_float+0xb6>
 800fb34:	f109 0901 	add.w	r9, r9, #1
 800fb38:	e7e8      	b.n	800fb0c <_printf_float+0x238>
 800fb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	dc39      	bgt.n	800fbb4 <_printf_float+0x2e0>
 800fb40:	4a1b      	ldr	r2, [pc, #108]	@ (800fbb0 <_printf_float+0x2dc>)
 800fb42:	2301      	movs	r3, #1
 800fb44:	4631      	mov	r1, r6
 800fb46:	4628      	mov	r0, r5
 800fb48:	47b8      	blx	r7
 800fb4a:	3001      	adds	r0, #1
 800fb4c:	f43f af1d 	beq.w	800f98a <_printf_float+0xb6>
 800fb50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb54:	ea59 0303 	orrs.w	r3, r9, r3
 800fb58:	d102      	bne.n	800fb60 <_printf_float+0x28c>
 800fb5a:	6823      	ldr	r3, [r4, #0]
 800fb5c:	07d9      	lsls	r1, r3, #31
 800fb5e:	d5d7      	bpl.n	800fb10 <_printf_float+0x23c>
 800fb60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb64:	4631      	mov	r1, r6
 800fb66:	4628      	mov	r0, r5
 800fb68:	47b8      	blx	r7
 800fb6a:	3001      	adds	r0, #1
 800fb6c:	f43f af0d 	beq.w	800f98a <_printf_float+0xb6>
 800fb70:	f04f 0a00 	mov.w	sl, #0
 800fb74:	f104 0b1a 	add.w	fp, r4, #26
 800fb78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb7a:	425b      	negs	r3, r3
 800fb7c:	4553      	cmp	r3, sl
 800fb7e:	dc01      	bgt.n	800fb84 <_printf_float+0x2b0>
 800fb80:	464b      	mov	r3, r9
 800fb82:	e793      	b.n	800faac <_printf_float+0x1d8>
 800fb84:	2301      	movs	r3, #1
 800fb86:	465a      	mov	r2, fp
 800fb88:	4631      	mov	r1, r6
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	47b8      	blx	r7
 800fb8e:	3001      	adds	r0, #1
 800fb90:	f43f aefb 	beq.w	800f98a <_printf_float+0xb6>
 800fb94:	f10a 0a01 	add.w	sl, sl, #1
 800fb98:	e7ee      	b.n	800fb78 <_printf_float+0x2a4>
 800fb9a:	bf00      	nop
 800fb9c:	7fefffff 	.word	0x7fefffff
 800fba0:	08013450 	.word	0x08013450
 800fba4:	0801344c 	.word	0x0801344c
 800fba8:	08013458 	.word	0x08013458
 800fbac:	08013454 	.word	0x08013454
 800fbb0:	0801345c 	.word	0x0801345c
 800fbb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fbba:	4553      	cmp	r3, sl
 800fbbc:	bfa8      	it	ge
 800fbbe:	4653      	movge	r3, sl
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	4699      	mov	r9, r3
 800fbc4:	dc36      	bgt.n	800fc34 <_printf_float+0x360>
 800fbc6:	f04f 0b00 	mov.w	fp, #0
 800fbca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbce:	f104 021a 	add.w	r2, r4, #26
 800fbd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbd4:	9306      	str	r3, [sp, #24]
 800fbd6:	eba3 0309 	sub.w	r3, r3, r9
 800fbda:	455b      	cmp	r3, fp
 800fbdc:	dc31      	bgt.n	800fc42 <_printf_float+0x36e>
 800fbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe0:	459a      	cmp	sl, r3
 800fbe2:	dc3a      	bgt.n	800fc5a <_printf_float+0x386>
 800fbe4:	6823      	ldr	r3, [r4, #0]
 800fbe6:	07da      	lsls	r2, r3, #31
 800fbe8:	d437      	bmi.n	800fc5a <_printf_float+0x386>
 800fbea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbec:	ebaa 0903 	sub.w	r9, sl, r3
 800fbf0:	9b06      	ldr	r3, [sp, #24]
 800fbf2:	ebaa 0303 	sub.w	r3, sl, r3
 800fbf6:	4599      	cmp	r9, r3
 800fbf8:	bfa8      	it	ge
 800fbfa:	4699      	movge	r9, r3
 800fbfc:	f1b9 0f00 	cmp.w	r9, #0
 800fc00:	dc33      	bgt.n	800fc6a <_printf_float+0x396>
 800fc02:	f04f 0800 	mov.w	r8, #0
 800fc06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc0a:	f104 0b1a 	add.w	fp, r4, #26
 800fc0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc10:	ebaa 0303 	sub.w	r3, sl, r3
 800fc14:	eba3 0309 	sub.w	r3, r3, r9
 800fc18:	4543      	cmp	r3, r8
 800fc1a:	f77f af79 	ble.w	800fb10 <_printf_float+0x23c>
 800fc1e:	2301      	movs	r3, #1
 800fc20:	465a      	mov	r2, fp
 800fc22:	4631      	mov	r1, r6
 800fc24:	4628      	mov	r0, r5
 800fc26:	47b8      	blx	r7
 800fc28:	3001      	adds	r0, #1
 800fc2a:	f43f aeae 	beq.w	800f98a <_printf_float+0xb6>
 800fc2e:	f108 0801 	add.w	r8, r8, #1
 800fc32:	e7ec      	b.n	800fc0e <_printf_float+0x33a>
 800fc34:	4642      	mov	r2, r8
 800fc36:	4631      	mov	r1, r6
 800fc38:	4628      	mov	r0, r5
 800fc3a:	47b8      	blx	r7
 800fc3c:	3001      	adds	r0, #1
 800fc3e:	d1c2      	bne.n	800fbc6 <_printf_float+0x2f2>
 800fc40:	e6a3      	b.n	800f98a <_printf_float+0xb6>
 800fc42:	2301      	movs	r3, #1
 800fc44:	4631      	mov	r1, r6
 800fc46:	4628      	mov	r0, r5
 800fc48:	9206      	str	r2, [sp, #24]
 800fc4a:	47b8      	blx	r7
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	f43f ae9c 	beq.w	800f98a <_printf_float+0xb6>
 800fc52:	9a06      	ldr	r2, [sp, #24]
 800fc54:	f10b 0b01 	add.w	fp, fp, #1
 800fc58:	e7bb      	b.n	800fbd2 <_printf_float+0x2fe>
 800fc5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc5e:	4631      	mov	r1, r6
 800fc60:	4628      	mov	r0, r5
 800fc62:	47b8      	blx	r7
 800fc64:	3001      	adds	r0, #1
 800fc66:	d1c0      	bne.n	800fbea <_printf_float+0x316>
 800fc68:	e68f      	b.n	800f98a <_printf_float+0xb6>
 800fc6a:	9a06      	ldr	r2, [sp, #24]
 800fc6c:	464b      	mov	r3, r9
 800fc6e:	4442      	add	r2, r8
 800fc70:	4631      	mov	r1, r6
 800fc72:	4628      	mov	r0, r5
 800fc74:	47b8      	blx	r7
 800fc76:	3001      	adds	r0, #1
 800fc78:	d1c3      	bne.n	800fc02 <_printf_float+0x32e>
 800fc7a:	e686      	b.n	800f98a <_printf_float+0xb6>
 800fc7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc80:	f1ba 0f01 	cmp.w	sl, #1
 800fc84:	dc01      	bgt.n	800fc8a <_printf_float+0x3b6>
 800fc86:	07db      	lsls	r3, r3, #31
 800fc88:	d536      	bpl.n	800fcf8 <_printf_float+0x424>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	4642      	mov	r2, r8
 800fc8e:	4631      	mov	r1, r6
 800fc90:	4628      	mov	r0, r5
 800fc92:	47b8      	blx	r7
 800fc94:	3001      	adds	r0, #1
 800fc96:	f43f ae78 	beq.w	800f98a <_printf_float+0xb6>
 800fc9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc9e:	4631      	mov	r1, r6
 800fca0:	4628      	mov	r0, r5
 800fca2:	47b8      	blx	r7
 800fca4:	3001      	adds	r0, #1
 800fca6:	f43f ae70 	beq.w	800f98a <_printf_float+0xb6>
 800fcaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fcae:	2200      	movs	r2, #0
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcb6:	f7f0 ff0f 	bl	8000ad8 <__aeabi_dcmpeq>
 800fcba:	b9c0      	cbnz	r0, 800fcee <_printf_float+0x41a>
 800fcbc:	4653      	mov	r3, sl
 800fcbe:	f108 0201 	add.w	r2, r8, #1
 800fcc2:	4631      	mov	r1, r6
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	47b8      	blx	r7
 800fcc8:	3001      	adds	r0, #1
 800fcca:	d10c      	bne.n	800fce6 <_printf_float+0x412>
 800fccc:	e65d      	b.n	800f98a <_printf_float+0xb6>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	465a      	mov	r2, fp
 800fcd2:	4631      	mov	r1, r6
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	47b8      	blx	r7
 800fcd8:	3001      	adds	r0, #1
 800fcda:	f43f ae56 	beq.w	800f98a <_printf_float+0xb6>
 800fcde:	f108 0801 	add.w	r8, r8, #1
 800fce2:	45d0      	cmp	r8, sl
 800fce4:	dbf3      	blt.n	800fcce <_printf_float+0x3fa>
 800fce6:	464b      	mov	r3, r9
 800fce8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fcec:	e6df      	b.n	800faae <_printf_float+0x1da>
 800fcee:	f04f 0800 	mov.w	r8, #0
 800fcf2:	f104 0b1a 	add.w	fp, r4, #26
 800fcf6:	e7f4      	b.n	800fce2 <_printf_float+0x40e>
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	4642      	mov	r2, r8
 800fcfc:	e7e1      	b.n	800fcc2 <_printf_float+0x3ee>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	464a      	mov	r2, r9
 800fd02:	4631      	mov	r1, r6
 800fd04:	4628      	mov	r0, r5
 800fd06:	47b8      	blx	r7
 800fd08:	3001      	adds	r0, #1
 800fd0a:	f43f ae3e 	beq.w	800f98a <_printf_float+0xb6>
 800fd0e:	f108 0801 	add.w	r8, r8, #1
 800fd12:	68e3      	ldr	r3, [r4, #12]
 800fd14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fd16:	1a5b      	subs	r3, r3, r1
 800fd18:	4543      	cmp	r3, r8
 800fd1a:	dcf0      	bgt.n	800fcfe <_printf_float+0x42a>
 800fd1c:	e6fc      	b.n	800fb18 <_printf_float+0x244>
 800fd1e:	f04f 0800 	mov.w	r8, #0
 800fd22:	f104 0919 	add.w	r9, r4, #25
 800fd26:	e7f4      	b.n	800fd12 <_printf_float+0x43e>

0800fd28 <_printf_common>:
 800fd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd2c:	4616      	mov	r6, r2
 800fd2e:	4698      	mov	r8, r3
 800fd30:	688a      	ldr	r2, [r1, #8]
 800fd32:	690b      	ldr	r3, [r1, #16]
 800fd34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	bfb8      	it	lt
 800fd3c:	4613      	movlt	r3, r2
 800fd3e:	6033      	str	r3, [r6, #0]
 800fd40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd44:	4607      	mov	r7, r0
 800fd46:	460c      	mov	r4, r1
 800fd48:	b10a      	cbz	r2, 800fd4e <_printf_common+0x26>
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	6033      	str	r3, [r6, #0]
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	0699      	lsls	r1, r3, #26
 800fd52:	bf42      	ittt	mi
 800fd54:	6833      	ldrmi	r3, [r6, #0]
 800fd56:	3302      	addmi	r3, #2
 800fd58:	6033      	strmi	r3, [r6, #0]
 800fd5a:	6825      	ldr	r5, [r4, #0]
 800fd5c:	f015 0506 	ands.w	r5, r5, #6
 800fd60:	d106      	bne.n	800fd70 <_printf_common+0x48>
 800fd62:	f104 0a19 	add.w	sl, r4, #25
 800fd66:	68e3      	ldr	r3, [r4, #12]
 800fd68:	6832      	ldr	r2, [r6, #0]
 800fd6a:	1a9b      	subs	r3, r3, r2
 800fd6c:	42ab      	cmp	r3, r5
 800fd6e:	dc26      	bgt.n	800fdbe <_printf_common+0x96>
 800fd70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd74:	6822      	ldr	r2, [r4, #0]
 800fd76:	3b00      	subs	r3, #0
 800fd78:	bf18      	it	ne
 800fd7a:	2301      	movne	r3, #1
 800fd7c:	0692      	lsls	r2, r2, #26
 800fd7e:	d42b      	bmi.n	800fdd8 <_printf_common+0xb0>
 800fd80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fd84:	4641      	mov	r1, r8
 800fd86:	4638      	mov	r0, r7
 800fd88:	47c8      	blx	r9
 800fd8a:	3001      	adds	r0, #1
 800fd8c:	d01e      	beq.n	800fdcc <_printf_common+0xa4>
 800fd8e:	6823      	ldr	r3, [r4, #0]
 800fd90:	6922      	ldr	r2, [r4, #16]
 800fd92:	f003 0306 	and.w	r3, r3, #6
 800fd96:	2b04      	cmp	r3, #4
 800fd98:	bf02      	ittt	eq
 800fd9a:	68e5      	ldreq	r5, [r4, #12]
 800fd9c:	6833      	ldreq	r3, [r6, #0]
 800fd9e:	1aed      	subeq	r5, r5, r3
 800fda0:	68a3      	ldr	r3, [r4, #8]
 800fda2:	bf0c      	ite	eq
 800fda4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fda8:	2500      	movne	r5, #0
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	bfc4      	itt	gt
 800fdae:	1a9b      	subgt	r3, r3, r2
 800fdb0:	18ed      	addgt	r5, r5, r3
 800fdb2:	2600      	movs	r6, #0
 800fdb4:	341a      	adds	r4, #26
 800fdb6:	42b5      	cmp	r5, r6
 800fdb8:	d11a      	bne.n	800fdf0 <_printf_common+0xc8>
 800fdba:	2000      	movs	r0, #0
 800fdbc:	e008      	b.n	800fdd0 <_printf_common+0xa8>
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	4652      	mov	r2, sl
 800fdc2:	4641      	mov	r1, r8
 800fdc4:	4638      	mov	r0, r7
 800fdc6:	47c8      	blx	r9
 800fdc8:	3001      	adds	r0, #1
 800fdca:	d103      	bne.n	800fdd4 <_printf_common+0xac>
 800fdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdd4:	3501      	adds	r5, #1
 800fdd6:	e7c6      	b.n	800fd66 <_printf_common+0x3e>
 800fdd8:	18e1      	adds	r1, r4, r3
 800fdda:	1c5a      	adds	r2, r3, #1
 800fddc:	2030      	movs	r0, #48	@ 0x30
 800fdde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fde2:	4422      	add	r2, r4
 800fde4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fde8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fdec:	3302      	adds	r3, #2
 800fdee:	e7c7      	b.n	800fd80 <_printf_common+0x58>
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	4622      	mov	r2, r4
 800fdf4:	4641      	mov	r1, r8
 800fdf6:	4638      	mov	r0, r7
 800fdf8:	47c8      	blx	r9
 800fdfa:	3001      	adds	r0, #1
 800fdfc:	d0e6      	beq.n	800fdcc <_printf_common+0xa4>
 800fdfe:	3601      	adds	r6, #1
 800fe00:	e7d9      	b.n	800fdb6 <_printf_common+0x8e>
	...

0800fe04 <_printf_i>:
 800fe04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe08:	7e0f      	ldrb	r7, [r1, #24]
 800fe0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe0c:	2f78      	cmp	r7, #120	@ 0x78
 800fe0e:	4691      	mov	r9, r2
 800fe10:	4680      	mov	r8, r0
 800fe12:	460c      	mov	r4, r1
 800fe14:	469a      	mov	sl, r3
 800fe16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe1a:	d807      	bhi.n	800fe2c <_printf_i+0x28>
 800fe1c:	2f62      	cmp	r7, #98	@ 0x62
 800fe1e:	d80a      	bhi.n	800fe36 <_printf_i+0x32>
 800fe20:	2f00      	cmp	r7, #0
 800fe22:	f000 80d1 	beq.w	800ffc8 <_printf_i+0x1c4>
 800fe26:	2f58      	cmp	r7, #88	@ 0x58
 800fe28:	f000 80b8 	beq.w	800ff9c <_printf_i+0x198>
 800fe2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe34:	e03a      	b.n	800feac <_printf_i+0xa8>
 800fe36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe3a:	2b15      	cmp	r3, #21
 800fe3c:	d8f6      	bhi.n	800fe2c <_printf_i+0x28>
 800fe3e:	a101      	add	r1, pc, #4	@ (adr r1, 800fe44 <_printf_i+0x40>)
 800fe40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe44:	0800fe9d 	.word	0x0800fe9d
 800fe48:	0800feb1 	.word	0x0800feb1
 800fe4c:	0800fe2d 	.word	0x0800fe2d
 800fe50:	0800fe2d 	.word	0x0800fe2d
 800fe54:	0800fe2d 	.word	0x0800fe2d
 800fe58:	0800fe2d 	.word	0x0800fe2d
 800fe5c:	0800feb1 	.word	0x0800feb1
 800fe60:	0800fe2d 	.word	0x0800fe2d
 800fe64:	0800fe2d 	.word	0x0800fe2d
 800fe68:	0800fe2d 	.word	0x0800fe2d
 800fe6c:	0800fe2d 	.word	0x0800fe2d
 800fe70:	0800ffaf 	.word	0x0800ffaf
 800fe74:	0800fedb 	.word	0x0800fedb
 800fe78:	0800ff69 	.word	0x0800ff69
 800fe7c:	0800fe2d 	.word	0x0800fe2d
 800fe80:	0800fe2d 	.word	0x0800fe2d
 800fe84:	0800ffd1 	.word	0x0800ffd1
 800fe88:	0800fe2d 	.word	0x0800fe2d
 800fe8c:	0800fedb 	.word	0x0800fedb
 800fe90:	0800fe2d 	.word	0x0800fe2d
 800fe94:	0800fe2d 	.word	0x0800fe2d
 800fe98:	0800ff71 	.word	0x0800ff71
 800fe9c:	6833      	ldr	r3, [r6, #0]
 800fe9e:	1d1a      	adds	r2, r3, #4
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	6032      	str	r2, [r6, #0]
 800fea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800feac:	2301      	movs	r3, #1
 800feae:	e09c      	b.n	800ffea <_printf_i+0x1e6>
 800feb0:	6833      	ldr	r3, [r6, #0]
 800feb2:	6820      	ldr	r0, [r4, #0]
 800feb4:	1d19      	adds	r1, r3, #4
 800feb6:	6031      	str	r1, [r6, #0]
 800feb8:	0606      	lsls	r6, r0, #24
 800feba:	d501      	bpl.n	800fec0 <_printf_i+0xbc>
 800febc:	681d      	ldr	r5, [r3, #0]
 800febe:	e003      	b.n	800fec8 <_printf_i+0xc4>
 800fec0:	0645      	lsls	r5, r0, #25
 800fec2:	d5fb      	bpl.n	800febc <_printf_i+0xb8>
 800fec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fec8:	2d00      	cmp	r5, #0
 800feca:	da03      	bge.n	800fed4 <_printf_i+0xd0>
 800fecc:	232d      	movs	r3, #45	@ 0x2d
 800fece:	426d      	negs	r5, r5
 800fed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fed4:	4858      	ldr	r0, [pc, #352]	@ (8010038 <_printf_i+0x234>)
 800fed6:	230a      	movs	r3, #10
 800fed8:	e011      	b.n	800fefe <_printf_i+0xfa>
 800feda:	6821      	ldr	r1, [r4, #0]
 800fedc:	6833      	ldr	r3, [r6, #0]
 800fede:	0608      	lsls	r0, r1, #24
 800fee0:	f853 5b04 	ldr.w	r5, [r3], #4
 800fee4:	d402      	bmi.n	800feec <_printf_i+0xe8>
 800fee6:	0649      	lsls	r1, r1, #25
 800fee8:	bf48      	it	mi
 800feea:	b2ad      	uxthmi	r5, r5
 800feec:	2f6f      	cmp	r7, #111	@ 0x6f
 800feee:	4852      	ldr	r0, [pc, #328]	@ (8010038 <_printf_i+0x234>)
 800fef0:	6033      	str	r3, [r6, #0]
 800fef2:	bf14      	ite	ne
 800fef4:	230a      	movne	r3, #10
 800fef6:	2308      	moveq	r3, #8
 800fef8:	2100      	movs	r1, #0
 800fefa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fefe:	6866      	ldr	r6, [r4, #4]
 800ff00:	60a6      	str	r6, [r4, #8]
 800ff02:	2e00      	cmp	r6, #0
 800ff04:	db05      	blt.n	800ff12 <_printf_i+0x10e>
 800ff06:	6821      	ldr	r1, [r4, #0]
 800ff08:	432e      	orrs	r6, r5
 800ff0a:	f021 0104 	bic.w	r1, r1, #4
 800ff0e:	6021      	str	r1, [r4, #0]
 800ff10:	d04b      	beq.n	800ffaa <_printf_i+0x1a6>
 800ff12:	4616      	mov	r6, r2
 800ff14:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff18:	fb03 5711 	mls	r7, r3, r1, r5
 800ff1c:	5dc7      	ldrb	r7, [r0, r7]
 800ff1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff22:	462f      	mov	r7, r5
 800ff24:	42bb      	cmp	r3, r7
 800ff26:	460d      	mov	r5, r1
 800ff28:	d9f4      	bls.n	800ff14 <_printf_i+0x110>
 800ff2a:	2b08      	cmp	r3, #8
 800ff2c:	d10b      	bne.n	800ff46 <_printf_i+0x142>
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	07df      	lsls	r7, r3, #31
 800ff32:	d508      	bpl.n	800ff46 <_printf_i+0x142>
 800ff34:	6923      	ldr	r3, [r4, #16]
 800ff36:	6861      	ldr	r1, [r4, #4]
 800ff38:	4299      	cmp	r1, r3
 800ff3a:	bfde      	ittt	le
 800ff3c:	2330      	movle	r3, #48	@ 0x30
 800ff3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff42:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff46:	1b92      	subs	r2, r2, r6
 800ff48:	6122      	str	r2, [r4, #16]
 800ff4a:	f8cd a000 	str.w	sl, [sp]
 800ff4e:	464b      	mov	r3, r9
 800ff50:	aa03      	add	r2, sp, #12
 800ff52:	4621      	mov	r1, r4
 800ff54:	4640      	mov	r0, r8
 800ff56:	f7ff fee7 	bl	800fd28 <_printf_common>
 800ff5a:	3001      	adds	r0, #1
 800ff5c:	d14a      	bne.n	800fff4 <_printf_i+0x1f0>
 800ff5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff62:	b004      	add	sp, #16
 800ff64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff68:	6823      	ldr	r3, [r4, #0]
 800ff6a:	f043 0320 	orr.w	r3, r3, #32
 800ff6e:	6023      	str	r3, [r4, #0]
 800ff70:	4832      	ldr	r0, [pc, #200]	@ (801003c <_printf_i+0x238>)
 800ff72:	2778      	movs	r7, #120	@ 0x78
 800ff74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ff78:	6823      	ldr	r3, [r4, #0]
 800ff7a:	6831      	ldr	r1, [r6, #0]
 800ff7c:	061f      	lsls	r7, r3, #24
 800ff7e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ff82:	d402      	bmi.n	800ff8a <_printf_i+0x186>
 800ff84:	065f      	lsls	r7, r3, #25
 800ff86:	bf48      	it	mi
 800ff88:	b2ad      	uxthmi	r5, r5
 800ff8a:	6031      	str	r1, [r6, #0]
 800ff8c:	07d9      	lsls	r1, r3, #31
 800ff8e:	bf44      	itt	mi
 800ff90:	f043 0320 	orrmi.w	r3, r3, #32
 800ff94:	6023      	strmi	r3, [r4, #0]
 800ff96:	b11d      	cbz	r5, 800ffa0 <_printf_i+0x19c>
 800ff98:	2310      	movs	r3, #16
 800ff9a:	e7ad      	b.n	800fef8 <_printf_i+0xf4>
 800ff9c:	4826      	ldr	r0, [pc, #152]	@ (8010038 <_printf_i+0x234>)
 800ff9e:	e7e9      	b.n	800ff74 <_printf_i+0x170>
 800ffa0:	6823      	ldr	r3, [r4, #0]
 800ffa2:	f023 0320 	bic.w	r3, r3, #32
 800ffa6:	6023      	str	r3, [r4, #0]
 800ffa8:	e7f6      	b.n	800ff98 <_printf_i+0x194>
 800ffaa:	4616      	mov	r6, r2
 800ffac:	e7bd      	b.n	800ff2a <_printf_i+0x126>
 800ffae:	6833      	ldr	r3, [r6, #0]
 800ffb0:	6825      	ldr	r5, [r4, #0]
 800ffb2:	6961      	ldr	r1, [r4, #20]
 800ffb4:	1d18      	adds	r0, r3, #4
 800ffb6:	6030      	str	r0, [r6, #0]
 800ffb8:	062e      	lsls	r6, r5, #24
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	d501      	bpl.n	800ffc2 <_printf_i+0x1be>
 800ffbe:	6019      	str	r1, [r3, #0]
 800ffc0:	e002      	b.n	800ffc8 <_printf_i+0x1c4>
 800ffc2:	0668      	lsls	r0, r5, #25
 800ffc4:	d5fb      	bpl.n	800ffbe <_printf_i+0x1ba>
 800ffc6:	8019      	strh	r1, [r3, #0]
 800ffc8:	2300      	movs	r3, #0
 800ffca:	6123      	str	r3, [r4, #16]
 800ffcc:	4616      	mov	r6, r2
 800ffce:	e7bc      	b.n	800ff4a <_printf_i+0x146>
 800ffd0:	6833      	ldr	r3, [r6, #0]
 800ffd2:	1d1a      	adds	r2, r3, #4
 800ffd4:	6032      	str	r2, [r6, #0]
 800ffd6:	681e      	ldr	r6, [r3, #0]
 800ffd8:	6862      	ldr	r2, [r4, #4]
 800ffda:	2100      	movs	r1, #0
 800ffdc:	4630      	mov	r0, r6
 800ffde:	f7f0 f8ff 	bl	80001e0 <memchr>
 800ffe2:	b108      	cbz	r0, 800ffe8 <_printf_i+0x1e4>
 800ffe4:	1b80      	subs	r0, r0, r6
 800ffe6:	6060      	str	r0, [r4, #4]
 800ffe8:	6863      	ldr	r3, [r4, #4]
 800ffea:	6123      	str	r3, [r4, #16]
 800ffec:	2300      	movs	r3, #0
 800ffee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fff2:	e7aa      	b.n	800ff4a <_printf_i+0x146>
 800fff4:	6923      	ldr	r3, [r4, #16]
 800fff6:	4632      	mov	r2, r6
 800fff8:	4649      	mov	r1, r9
 800fffa:	4640      	mov	r0, r8
 800fffc:	47d0      	blx	sl
 800fffe:	3001      	adds	r0, #1
 8010000:	d0ad      	beq.n	800ff5e <_printf_i+0x15a>
 8010002:	6823      	ldr	r3, [r4, #0]
 8010004:	079b      	lsls	r3, r3, #30
 8010006:	d413      	bmi.n	8010030 <_printf_i+0x22c>
 8010008:	68e0      	ldr	r0, [r4, #12]
 801000a:	9b03      	ldr	r3, [sp, #12]
 801000c:	4298      	cmp	r0, r3
 801000e:	bfb8      	it	lt
 8010010:	4618      	movlt	r0, r3
 8010012:	e7a6      	b.n	800ff62 <_printf_i+0x15e>
 8010014:	2301      	movs	r3, #1
 8010016:	4632      	mov	r2, r6
 8010018:	4649      	mov	r1, r9
 801001a:	4640      	mov	r0, r8
 801001c:	47d0      	blx	sl
 801001e:	3001      	adds	r0, #1
 8010020:	d09d      	beq.n	800ff5e <_printf_i+0x15a>
 8010022:	3501      	adds	r5, #1
 8010024:	68e3      	ldr	r3, [r4, #12]
 8010026:	9903      	ldr	r1, [sp, #12]
 8010028:	1a5b      	subs	r3, r3, r1
 801002a:	42ab      	cmp	r3, r5
 801002c:	dcf2      	bgt.n	8010014 <_printf_i+0x210>
 801002e:	e7eb      	b.n	8010008 <_printf_i+0x204>
 8010030:	2500      	movs	r5, #0
 8010032:	f104 0619 	add.w	r6, r4, #25
 8010036:	e7f5      	b.n	8010024 <_printf_i+0x220>
 8010038:	0801345e 	.word	0x0801345e
 801003c:	0801346f 	.word	0x0801346f

08010040 <std>:
 8010040:	2300      	movs	r3, #0
 8010042:	b510      	push	{r4, lr}
 8010044:	4604      	mov	r4, r0
 8010046:	e9c0 3300 	strd	r3, r3, [r0]
 801004a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801004e:	6083      	str	r3, [r0, #8]
 8010050:	8181      	strh	r1, [r0, #12]
 8010052:	6643      	str	r3, [r0, #100]	@ 0x64
 8010054:	81c2      	strh	r2, [r0, #14]
 8010056:	6183      	str	r3, [r0, #24]
 8010058:	4619      	mov	r1, r3
 801005a:	2208      	movs	r2, #8
 801005c:	305c      	adds	r0, #92	@ 0x5c
 801005e:	f000 f92a 	bl	80102b6 <memset>
 8010062:	4b0d      	ldr	r3, [pc, #52]	@ (8010098 <std+0x58>)
 8010064:	6263      	str	r3, [r4, #36]	@ 0x24
 8010066:	4b0d      	ldr	r3, [pc, #52]	@ (801009c <std+0x5c>)
 8010068:	62a3      	str	r3, [r4, #40]	@ 0x28
 801006a:	4b0d      	ldr	r3, [pc, #52]	@ (80100a0 <std+0x60>)
 801006c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801006e:	4b0d      	ldr	r3, [pc, #52]	@ (80100a4 <std+0x64>)
 8010070:	6323      	str	r3, [r4, #48]	@ 0x30
 8010072:	4b0d      	ldr	r3, [pc, #52]	@ (80100a8 <std+0x68>)
 8010074:	6224      	str	r4, [r4, #32]
 8010076:	429c      	cmp	r4, r3
 8010078:	d006      	beq.n	8010088 <std+0x48>
 801007a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801007e:	4294      	cmp	r4, r2
 8010080:	d002      	beq.n	8010088 <std+0x48>
 8010082:	33d0      	adds	r3, #208	@ 0xd0
 8010084:	429c      	cmp	r4, r3
 8010086:	d105      	bne.n	8010094 <std+0x54>
 8010088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801008c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010090:	f000 b9fe 	b.w	8010490 <__retarget_lock_init_recursive>
 8010094:	bd10      	pop	{r4, pc}
 8010096:	bf00      	nop
 8010098:	08010231 	.word	0x08010231
 801009c:	08010253 	.word	0x08010253
 80100a0:	0801028b 	.word	0x0801028b
 80100a4:	080102af 	.word	0x080102af
 80100a8:	20005e58 	.word	0x20005e58

080100ac <stdio_exit_handler>:
 80100ac:	4a02      	ldr	r2, [pc, #8]	@ (80100b8 <stdio_exit_handler+0xc>)
 80100ae:	4903      	ldr	r1, [pc, #12]	@ (80100bc <stdio_exit_handler+0x10>)
 80100b0:	4803      	ldr	r0, [pc, #12]	@ (80100c0 <stdio_exit_handler+0x14>)
 80100b2:	f000 b869 	b.w	8010188 <_fwalk_sglue>
 80100b6:	bf00      	nop
 80100b8:	2000007c 	.word	0x2000007c
 80100bc:	08011e15 	.word	0x08011e15
 80100c0:	2000008c 	.word	0x2000008c

080100c4 <cleanup_stdio>:
 80100c4:	6841      	ldr	r1, [r0, #4]
 80100c6:	4b0c      	ldr	r3, [pc, #48]	@ (80100f8 <cleanup_stdio+0x34>)
 80100c8:	4299      	cmp	r1, r3
 80100ca:	b510      	push	{r4, lr}
 80100cc:	4604      	mov	r4, r0
 80100ce:	d001      	beq.n	80100d4 <cleanup_stdio+0x10>
 80100d0:	f001 fea0 	bl	8011e14 <_fflush_r>
 80100d4:	68a1      	ldr	r1, [r4, #8]
 80100d6:	4b09      	ldr	r3, [pc, #36]	@ (80100fc <cleanup_stdio+0x38>)
 80100d8:	4299      	cmp	r1, r3
 80100da:	d002      	beq.n	80100e2 <cleanup_stdio+0x1e>
 80100dc:	4620      	mov	r0, r4
 80100de:	f001 fe99 	bl	8011e14 <_fflush_r>
 80100e2:	68e1      	ldr	r1, [r4, #12]
 80100e4:	4b06      	ldr	r3, [pc, #24]	@ (8010100 <cleanup_stdio+0x3c>)
 80100e6:	4299      	cmp	r1, r3
 80100e8:	d004      	beq.n	80100f4 <cleanup_stdio+0x30>
 80100ea:	4620      	mov	r0, r4
 80100ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100f0:	f001 be90 	b.w	8011e14 <_fflush_r>
 80100f4:	bd10      	pop	{r4, pc}
 80100f6:	bf00      	nop
 80100f8:	20005e58 	.word	0x20005e58
 80100fc:	20005ec0 	.word	0x20005ec0
 8010100:	20005f28 	.word	0x20005f28

08010104 <global_stdio_init.part.0>:
 8010104:	b510      	push	{r4, lr}
 8010106:	4b0b      	ldr	r3, [pc, #44]	@ (8010134 <global_stdio_init.part.0+0x30>)
 8010108:	4c0b      	ldr	r4, [pc, #44]	@ (8010138 <global_stdio_init.part.0+0x34>)
 801010a:	4a0c      	ldr	r2, [pc, #48]	@ (801013c <global_stdio_init.part.0+0x38>)
 801010c:	601a      	str	r2, [r3, #0]
 801010e:	4620      	mov	r0, r4
 8010110:	2200      	movs	r2, #0
 8010112:	2104      	movs	r1, #4
 8010114:	f7ff ff94 	bl	8010040 <std>
 8010118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801011c:	2201      	movs	r2, #1
 801011e:	2109      	movs	r1, #9
 8010120:	f7ff ff8e 	bl	8010040 <std>
 8010124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010128:	2202      	movs	r2, #2
 801012a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801012e:	2112      	movs	r1, #18
 8010130:	f7ff bf86 	b.w	8010040 <std>
 8010134:	20005f90 	.word	0x20005f90
 8010138:	20005e58 	.word	0x20005e58
 801013c:	080100ad 	.word	0x080100ad

08010140 <__sfp_lock_acquire>:
 8010140:	4801      	ldr	r0, [pc, #4]	@ (8010148 <__sfp_lock_acquire+0x8>)
 8010142:	f000 b9a6 	b.w	8010492 <__retarget_lock_acquire_recursive>
 8010146:	bf00      	nop
 8010148:	20005f99 	.word	0x20005f99

0801014c <__sfp_lock_release>:
 801014c:	4801      	ldr	r0, [pc, #4]	@ (8010154 <__sfp_lock_release+0x8>)
 801014e:	f000 b9a1 	b.w	8010494 <__retarget_lock_release_recursive>
 8010152:	bf00      	nop
 8010154:	20005f99 	.word	0x20005f99

08010158 <__sinit>:
 8010158:	b510      	push	{r4, lr}
 801015a:	4604      	mov	r4, r0
 801015c:	f7ff fff0 	bl	8010140 <__sfp_lock_acquire>
 8010160:	6a23      	ldr	r3, [r4, #32]
 8010162:	b11b      	cbz	r3, 801016c <__sinit+0x14>
 8010164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010168:	f7ff bff0 	b.w	801014c <__sfp_lock_release>
 801016c:	4b04      	ldr	r3, [pc, #16]	@ (8010180 <__sinit+0x28>)
 801016e:	6223      	str	r3, [r4, #32]
 8010170:	4b04      	ldr	r3, [pc, #16]	@ (8010184 <__sinit+0x2c>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d1f5      	bne.n	8010164 <__sinit+0xc>
 8010178:	f7ff ffc4 	bl	8010104 <global_stdio_init.part.0>
 801017c:	e7f2      	b.n	8010164 <__sinit+0xc>
 801017e:	bf00      	nop
 8010180:	080100c5 	.word	0x080100c5
 8010184:	20005f90 	.word	0x20005f90

08010188 <_fwalk_sglue>:
 8010188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801018c:	4607      	mov	r7, r0
 801018e:	4688      	mov	r8, r1
 8010190:	4614      	mov	r4, r2
 8010192:	2600      	movs	r6, #0
 8010194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010198:	f1b9 0901 	subs.w	r9, r9, #1
 801019c:	d505      	bpl.n	80101aa <_fwalk_sglue+0x22>
 801019e:	6824      	ldr	r4, [r4, #0]
 80101a0:	2c00      	cmp	r4, #0
 80101a2:	d1f7      	bne.n	8010194 <_fwalk_sglue+0xc>
 80101a4:	4630      	mov	r0, r6
 80101a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101aa:	89ab      	ldrh	r3, [r5, #12]
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d907      	bls.n	80101c0 <_fwalk_sglue+0x38>
 80101b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101b4:	3301      	adds	r3, #1
 80101b6:	d003      	beq.n	80101c0 <_fwalk_sglue+0x38>
 80101b8:	4629      	mov	r1, r5
 80101ba:	4638      	mov	r0, r7
 80101bc:	47c0      	blx	r8
 80101be:	4306      	orrs	r6, r0
 80101c0:	3568      	adds	r5, #104	@ 0x68
 80101c2:	e7e9      	b.n	8010198 <_fwalk_sglue+0x10>

080101c4 <sniprintf>:
 80101c4:	b40c      	push	{r2, r3}
 80101c6:	b530      	push	{r4, r5, lr}
 80101c8:	4b18      	ldr	r3, [pc, #96]	@ (801022c <sniprintf+0x68>)
 80101ca:	1e0c      	subs	r4, r1, #0
 80101cc:	681d      	ldr	r5, [r3, #0]
 80101ce:	b09d      	sub	sp, #116	@ 0x74
 80101d0:	da08      	bge.n	80101e4 <sniprintf+0x20>
 80101d2:	238b      	movs	r3, #139	@ 0x8b
 80101d4:	602b      	str	r3, [r5, #0]
 80101d6:	f04f 30ff 	mov.w	r0, #4294967295
 80101da:	b01d      	add	sp, #116	@ 0x74
 80101dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101e0:	b002      	add	sp, #8
 80101e2:	4770      	bx	lr
 80101e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80101e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80101ec:	f04f 0300 	mov.w	r3, #0
 80101f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80101f2:	bf14      	ite	ne
 80101f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80101f8:	4623      	moveq	r3, r4
 80101fa:	9304      	str	r3, [sp, #16]
 80101fc:	9307      	str	r3, [sp, #28]
 80101fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010202:	9002      	str	r0, [sp, #8]
 8010204:	9006      	str	r0, [sp, #24]
 8010206:	f8ad 3016 	strh.w	r3, [sp, #22]
 801020a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801020c:	ab21      	add	r3, sp, #132	@ 0x84
 801020e:	a902      	add	r1, sp, #8
 8010210:	4628      	mov	r0, r5
 8010212:	9301      	str	r3, [sp, #4]
 8010214:	f001 fc7e 	bl	8011b14 <_svfiprintf_r>
 8010218:	1c43      	adds	r3, r0, #1
 801021a:	bfbc      	itt	lt
 801021c:	238b      	movlt	r3, #139	@ 0x8b
 801021e:	602b      	strlt	r3, [r5, #0]
 8010220:	2c00      	cmp	r4, #0
 8010222:	d0da      	beq.n	80101da <sniprintf+0x16>
 8010224:	9b02      	ldr	r3, [sp, #8]
 8010226:	2200      	movs	r2, #0
 8010228:	701a      	strb	r2, [r3, #0]
 801022a:	e7d6      	b.n	80101da <sniprintf+0x16>
 801022c:	20000088 	.word	0x20000088

08010230 <__sread>:
 8010230:	b510      	push	{r4, lr}
 8010232:	460c      	mov	r4, r1
 8010234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010238:	f000 f8dc 	bl	80103f4 <_read_r>
 801023c:	2800      	cmp	r0, #0
 801023e:	bfab      	itete	ge
 8010240:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010242:	89a3      	ldrhlt	r3, [r4, #12]
 8010244:	181b      	addge	r3, r3, r0
 8010246:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801024a:	bfac      	ite	ge
 801024c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801024e:	81a3      	strhlt	r3, [r4, #12]
 8010250:	bd10      	pop	{r4, pc}

08010252 <__swrite>:
 8010252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010256:	461f      	mov	r7, r3
 8010258:	898b      	ldrh	r3, [r1, #12]
 801025a:	05db      	lsls	r3, r3, #23
 801025c:	4605      	mov	r5, r0
 801025e:	460c      	mov	r4, r1
 8010260:	4616      	mov	r6, r2
 8010262:	d505      	bpl.n	8010270 <__swrite+0x1e>
 8010264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010268:	2302      	movs	r3, #2
 801026a:	2200      	movs	r2, #0
 801026c:	f000 f8b0 	bl	80103d0 <_lseek_r>
 8010270:	89a3      	ldrh	r3, [r4, #12]
 8010272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801027a:	81a3      	strh	r3, [r4, #12]
 801027c:	4632      	mov	r2, r6
 801027e:	463b      	mov	r3, r7
 8010280:	4628      	mov	r0, r5
 8010282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010286:	f000 b8c7 	b.w	8010418 <_write_r>

0801028a <__sseek>:
 801028a:	b510      	push	{r4, lr}
 801028c:	460c      	mov	r4, r1
 801028e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010292:	f000 f89d 	bl	80103d0 <_lseek_r>
 8010296:	1c43      	adds	r3, r0, #1
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	bf15      	itete	ne
 801029c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801029e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80102a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80102a6:	81a3      	strheq	r3, [r4, #12]
 80102a8:	bf18      	it	ne
 80102aa:	81a3      	strhne	r3, [r4, #12]
 80102ac:	bd10      	pop	{r4, pc}

080102ae <__sclose>:
 80102ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b2:	f000 b81f 	b.w	80102f4 <_close_r>

080102b6 <memset>:
 80102b6:	4402      	add	r2, r0
 80102b8:	4603      	mov	r3, r0
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d100      	bne.n	80102c0 <memset+0xa>
 80102be:	4770      	bx	lr
 80102c0:	f803 1b01 	strb.w	r1, [r3], #1
 80102c4:	e7f9      	b.n	80102ba <memset+0x4>

080102c6 <strncat>:
 80102c6:	b530      	push	{r4, r5, lr}
 80102c8:	4604      	mov	r4, r0
 80102ca:	7825      	ldrb	r5, [r4, #0]
 80102cc:	4623      	mov	r3, r4
 80102ce:	3401      	adds	r4, #1
 80102d0:	2d00      	cmp	r5, #0
 80102d2:	d1fa      	bne.n	80102ca <strncat+0x4>
 80102d4:	3a01      	subs	r2, #1
 80102d6:	d304      	bcc.n	80102e2 <strncat+0x1c>
 80102d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102dc:	f803 4b01 	strb.w	r4, [r3], #1
 80102e0:	b904      	cbnz	r4, 80102e4 <strncat+0x1e>
 80102e2:	bd30      	pop	{r4, r5, pc}
 80102e4:	2a00      	cmp	r2, #0
 80102e6:	d1f5      	bne.n	80102d4 <strncat+0xe>
 80102e8:	701a      	strb	r2, [r3, #0]
 80102ea:	e7f3      	b.n	80102d4 <strncat+0xe>

080102ec <_localeconv_r>:
 80102ec:	4800      	ldr	r0, [pc, #0]	@ (80102f0 <_localeconv_r+0x4>)
 80102ee:	4770      	bx	lr
 80102f0:	200001c8 	.word	0x200001c8

080102f4 <_close_r>:
 80102f4:	b538      	push	{r3, r4, r5, lr}
 80102f6:	4d06      	ldr	r5, [pc, #24]	@ (8010310 <_close_r+0x1c>)
 80102f8:	2300      	movs	r3, #0
 80102fa:	4604      	mov	r4, r0
 80102fc:	4608      	mov	r0, r1
 80102fe:	602b      	str	r3, [r5, #0]
 8010300:	f7f3 ff7e 	bl	8004200 <_close>
 8010304:	1c43      	adds	r3, r0, #1
 8010306:	d102      	bne.n	801030e <_close_r+0x1a>
 8010308:	682b      	ldr	r3, [r5, #0]
 801030a:	b103      	cbz	r3, 801030e <_close_r+0x1a>
 801030c:	6023      	str	r3, [r4, #0]
 801030e:	bd38      	pop	{r3, r4, r5, pc}
 8010310:	20005f94 	.word	0x20005f94

08010314 <_reclaim_reent>:
 8010314:	4b2d      	ldr	r3, [pc, #180]	@ (80103cc <_reclaim_reent+0xb8>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4283      	cmp	r3, r0
 801031a:	b570      	push	{r4, r5, r6, lr}
 801031c:	4604      	mov	r4, r0
 801031e:	d053      	beq.n	80103c8 <_reclaim_reent+0xb4>
 8010320:	69c3      	ldr	r3, [r0, #28]
 8010322:	b31b      	cbz	r3, 801036c <_reclaim_reent+0x58>
 8010324:	68db      	ldr	r3, [r3, #12]
 8010326:	b163      	cbz	r3, 8010342 <_reclaim_reent+0x2e>
 8010328:	2500      	movs	r5, #0
 801032a:	69e3      	ldr	r3, [r4, #28]
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	5959      	ldr	r1, [r3, r5]
 8010330:	b9b1      	cbnz	r1, 8010360 <_reclaim_reent+0x4c>
 8010332:	3504      	adds	r5, #4
 8010334:	2d80      	cmp	r5, #128	@ 0x80
 8010336:	d1f8      	bne.n	801032a <_reclaim_reent+0x16>
 8010338:	69e3      	ldr	r3, [r4, #28]
 801033a:	4620      	mov	r0, r4
 801033c:	68d9      	ldr	r1, [r3, #12]
 801033e:	f000 ff13 	bl	8011168 <_free_r>
 8010342:	69e3      	ldr	r3, [r4, #28]
 8010344:	6819      	ldr	r1, [r3, #0]
 8010346:	b111      	cbz	r1, 801034e <_reclaim_reent+0x3a>
 8010348:	4620      	mov	r0, r4
 801034a:	f000 ff0d 	bl	8011168 <_free_r>
 801034e:	69e3      	ldr	r3, [r4, #28]
 8010350:	689d      	ldr	r5, [r3, #8]
 8010352:	b15d      	cbz	r5, 801036c <_reclaim_reent+0x58>
 8010354:	4629      	mov	r1, r5
 8010356:	4620      	mov	r0, r4
 8010358:	682d      	ldr	r5, [r5, #0]
 801035a:	f000 ff05 	bl	8011168 <_free_r>
 801035e:	e7f8      	b.n	8010352 <_reclaim_reent+0x3e>
 8010360:	680e      	ldr	r6, [r1, #0]
 8010362:	4620      	mov	r0, r4
 8010364:	f000 ff00 	bl	8011168 <_free_r>
 8010368:	4631      	mov	r1, r6
 801036a:	e7e1      	b.n	8010330 <_reclaim_reent+0x1c>
 801036c:	6961      	ldr	r1, [r4, #20]
 801036e:	b111      	cbz	r1, 8010376 <_reclaim_reent+0x62>
 8010370:	4620      	mov	r0, r4
 8010372:	f000 fef9 	bl	8011168 <_free_r>
 8010376:	69e1      	ldr	r1, [r4, #28]
 8010378:	b111      	cbz	r1, 8010380 <_reclaim_reent+0x6c>
 801037a:	4620      	mov	r0, r4
 801037c:	f000 fef4 	bl	8011168 <_free_r>
 8010380:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010382:	b111      	cbz	r1, 801038a <_reclaim_reent+0x76>
 8010384:	4620      	mov	r0, r4
 8010386:	f000 feef 	bl	8011168 <_free_r>
 801038a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801038c:	b111      	cbz	r1, 8010394 <_reclaim_reent+0x80>
 801038e:	4620      	mov	r0, r4
 8010390:	f000 feea 	bl	8011168 <_free_r>
 8010394:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010396:	b111      	cbz	r1, 801039e <_reclaim_reent+0x8a>
 8010398:	4620      	mov	r0, r4
 801039a:	f000 fee5 	bl	8011168 <_free_r>
 801039e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80103a0:	b111      	cbz	r1, 80103a8 <_reclaim_reent+0x94>
 80103a2:	4620      	mov	r0, r4
 80103a4:	f000 fee0 	bl	8011168 <_free_r>
 80103a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80103aa:	b111      	cbz	r1, 80103b2 <_reclaim_reent+0x9e>
 80103ac:	4620      	mov	r0, r4
 80103ae:	f000 fedb 	bl	8011168 <_free_r>
 80103b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80103b4:	b111      	cbz	r1, 80103bc <_reclaim_reent+0xa8>
 80103b6:	4620      	mov	r0, r4
 80103b8:	f000 fed6 	bl	8011168 <_free_r>
 80103bc:	6a23      	ldr	r3, [r4, #32]
 80103be:	b11b      	cbz	r3, 80103c8 <_reclaim_reent+0xb4>
 80103c0:	4620      	mov	r0, r4
 80103c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103c6:	4718      	bx	r3
 80103c8:	bd70      	pop	{r4, r5, r6, pc}
 80103ca:	bf00      	nop
 80103cc:	20000088 	.word	0x20000088

080103d0 <_lseek_r>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	4d07      	ldr	r5, [pc, #28]	@ (80103f0 <_lseek_r+0x20>)
 80103d4:	4604      	mov	r4, r0
 80103d6:	4608      	mov	r0, r1
 80103d8:	4611      	mov	r1, r2
 80103da:	2200      	movs	r2, #0
 80103dc:	602a      	str	r2, [r5, #0]
 80103de:	461a      	mov	r2, r3
 80103e0:	f7f3 ff35 	bl	800424e <_lseek>
 80103e4:	1c43      	adds	r3, r0, #1
 80103e6:	d102      	bne.n	80103ee <_lseek_r+0x1e>
 80103e8:	682b      	ldr	r3, [r5, #0]
 80103ea:	b103      	cbz	r3, 80103ee <_lseek_r+0x1e>
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	bd38      	pop	{r3, r4, r5, pc}
 80103f0:	20005f94 	.word	0x20005f94

080103f4 <_read_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4d07      	ldr	r5, [pc, #28]	@ (8010414 <_read_r+0x20>)
 80103f8:	4604      	mov	r4, r0
 80103fa:	4608      	mov	r0, r1
 80103fc:	4611      	mov	r1, r2
 80103fe:	2200      	movs	r2, #0
 8010400:	602a      	str	r2, [r5, #0]
 8010402:	461a      	mov	r2, r3
 8010404:	f7f3 fec3 	bl	800418e <_read>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d102      	bne.n	8010412 <_read_r+0x1e>
 801040c:	682b      	ldr	r3, [r5, #0]
 801040e:	b103      	cbz	r3, 8010412 <_read_r+0x1e>
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	20005f94 	.word	0x20005f94

08010418 <_write_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	4d07      	ldr	r5, [pc, #28]	@ (8010438 <_write_r+0x20>)
 801041c:	4604      	mov	r4, r0
 801041e:	4608      	mov	r0, r1
 8010420:	4611      	mov	r1, r2
 8010422:	2200      	movs	r2, #0
 8010424:	602a      	str	r2, [r5, #0]
 8010426:	461a      	mov	r2, r3
 8010428:	f7f3 fece 	bl	80041c8 <_write>
 801042c:	1c43      	adds	r3, r0, #1
 801042e:	d102      	bne.n	8010436 <_write_r+0x1e>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	b103      	cbz	r3, 8010436 <_write_r+0x1e>
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	bd38      	pop	{r3, r4, r5, pc}
 8010438:	20005f94 	.word	0x20005f94

0801043c <__errno>:
 801043c:	4b01      	ldr	r3, [pc, #4]	@ (8010444 <__errno+0x8>)
 801043e:	6818      	ldr	r0, [r3, #0]
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	20000088 	.word	0x20000088

08010448 <__libc_init_array>:
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	4d0d      	ldr	r5, [pc, #52]	@ (8010480 <__libc_init_array+0x38>)
 801044c:	4c0d      	ldr	r4, [pc, #52]	@ (8010484 <__libc_init_array+0x3c>)
 801044e:	1b64      	subs	r4, r4, r5
 8010450:	10a4      	asrs	r4, r4, #2
 8010452:	2600      	movs	r6, #0
 8010454:	42a6      	cmp	r6, r4
 8010456:	d109      	bne.n	801046c <__libc_init_array+0x24>
 8010458:	4d0b      	ldr	r5, [pc, #44]	@ (8010488 <__libc_init_array+0x40>)
 801045a:	4c0c      	ldr	r4, [pc, #48]	@ (801048c <__libc_init_array+0x44>)
 801045c:	f002 fa3e 	bl	80128dc <_init>
 8010460:	1b64      	subs	r4, r4, r5
 8010462:	10a4      	asrs	r4, r4, #2
 8010464:	2600      	movs	r6, #0
 8010466:	42a6      	cmp	r6, r4
 8010468:	d105      	bne.n	8010476 <__libc_init_array+0x2e>
 801046a:	bd70      	pop	{r4, r5, r6, pc}
 801046c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010470:	4798      	blx	r3
 8010472:	3601      	adds	r6, #1
 8010474:	e7ee      	b.n	8010454 <__libc_init_array+0xc>
 8010476:	f855 3b04 	ldr.w	r3, [r5], #4
 801047a:	4798      	blx	r3
 801047c:	3601      	adds	r6, #1
 801047e:	e7f2      	b.n	8010466 <__libc_init_array+0x1e>
 8010480:	08013804 	.word	0x08013804
 8010484:	08013804 	.word	0x08013804
 8010488:	08013804 	.word	0x08013804
 801048c:	08013808 	.word	0x08013808

08010490 <__retarget_lock_init_recursive>:
 8010490:	4770      	bx	lr

08010492 <__retarget_lock_acquire_recursive>:
 8010492:	4770      	bx	lr

08010494 <__retarget_lock_release_recursive>:
 8010494:	4770      	bx	lr

08010496 <memcpy>:
 8010496:	440a      	add	r2, r1
 8010498:	4291      	cmp	r1, r2
 801049a:	f100 33ff 	add.w	r3, r0, #4294967295
 801049e:	d100      	bne.n	80104a2 <memcpy+0xc>
 80104a0:	4770      	bx	lr
 80104a2:	b510      	push	{r4, lr}
 80104a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104ac:	4291      	cmp	r1, r2
 80104ae:	d1f9      	bne.n	80104a4 <memcpy+0xe>
 80104b0:	bd10      	pop	{r4, pc}

080104b2 <quorem>:
 80104b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b6:	6903      	ldr	r3, [r0, #16]
 80104b8:	690c      	ldr	r4, [r1, #16]
 80104ba:	42a3      	cmp	r3, r4
 80104bc:	4607      	mov	r7, r0
 80104be:	db7e      	blt.n	80105be <quorem+0x10c>
 80104c0:	3c01      	subs	r4, #1
 80104c2:	f101 0814 	add.w	r8, r1, #20
 80104c6:	00a3      	lsls	r3, r4, #2
 80104c8:	f100 0514 	add.w	r5, r0, #20
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104d2:	9301      	str	r3, [sp, #4]
 80104d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80104d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104dc:	3301      	adds	r3, #1
 80104de:	429a      	cmp	r2, r3
 80104e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80104e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80104e8:	d32e      	bcc.n	8010548 <quorem+0x96>
 80104ea:	f04f 0a00 	mov.w	sl, #0
 80104ee:	46c4      	mov	ip, r8
 80104f0:	46ae      	mov	lr, r5
 80104f2:	46d3      	mov	fp, sl
 80104f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80104f8:	b298      	uxth	r0, r3
 80104fa:	fb06 a000 	mla	r0, r6, r0, sl
 80104fe:	0c02      	lsrs	r2, r0, #16
 8010500:	0c1b      	lsrs	r3, r3, #16
 8010502:	fb06 2303 	mla	r3, r6, r3, r2
 8010506:	f8de 2000 	ldr.w	r2, [lr]
 801050a:	b280      	uxth	r0, r0
 801050c:	b292      	uxth	r2, r2
 801050e:	1a12      	subs	r2, r2, r0
 8010510:	445a      	add	r2, fp
 8010512:	f8de 0000 	ldr.w	r0, [lr]
 8010516:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801051a:	b29b      	uxth	r3, r3
 801051c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010520:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010524:	b292      	uxth	r2, r2
 8010526:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801052a:	45e1      	cmp	r9, ip
 801052c:	f84e 2b04 	str.w	r2, [lr], #4
 8010530:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010534:	d2de      	bcs.n	80104f4 <quorem+0x42>
 8010536:	9b00      	ldr	r3, [sp, #0]
 8010538:	58eb      	ldr	r3, [r5, r3]
 801053a:	b92b      	cbnz	r3, 8010548 <quorem+0x96>
 801053c:	9b01      	ldr	r3, [sp, #4]
 801053e:	3b04      	subs	r3, #4
 8010540:	429d      	cmp	r5, r3
 8010542:	461a      	mov	r2, r3
 8010544:	d32f      	bcc.n	80105a6 <quorem+0xf4>
 8010546:	613c      	str	r4, [r7, #16]
 8010548:	4638      	mov	r0, r7
 801054a:	f001 f97f 	bl	801184c <__mcmp>
 801054e:	2800      	cmp	r0, #0
 8010550:	db25      	blt.n	801059e <quorem+0xec>
 8010552:	4629      	mov	r1, r5
 8010554:	2000      	movs	r0, #0
 8010556:	f858 2b04 	ldr.w	r2, [r8], #4
 801055a:	f8d1 c000 	ldr.w	ip, [r1]
 801055e:	fa1f fe82 	uxth.w	lr, r2
 8010562:	fa1f f38c 	uxth.w	r3, ip
 8010566:	eba3 030e 	sub.w	r3, r3, lr
 801056a:	4403      	add	r3, r0
 801056c:	0c12      	lsrs	r2, r2, #16
 801056e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010572:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010576:	b29b      	uxth	r3, r3
 8010578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801057c:	45c1      	cmp	r9, r8
 801057e:	f841 3b04 	str.w	r3, [r1], #4
 8010582:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010586:	d2e6      	bcs.n	8010556 <quorem+0xa4>
 8010588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801058c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010590:	b922      	cbnz	r2, 801059c <quorem+0xea>
 8010592:	3b04      	subs	r3, #4
 8010594:	429d      	cmp	r5, r3
 8010596:	461a      	mov	r2, r3
 8010598:	d30b      	bcc.n	80105b2 <quorem+0x100>
 801059a:	613c      	str	r4, [r7, #16]
 801059c:	3601      	adds	r6, #1
 801059e:	4630      	mov	r0, r6
 80105a0:	b003      	add	sp, #12
 80105a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a6:	6812      	ldr	r2, [r2, #0]
 80105a8:	3b04      	subs	r3, #4
 80105aa:	2a00      	cmp	r2, #0
 80105ac:	d1cb      	bne.n	8010546 <quorem+0x94>
 80105ae:	3c01      	subs	r4, #1
 80105b0:	e7c6      	b.n	8010540 <quorem+0x8e>
 80105b2:	6812      	ldr	r2, [r2, #0]
 80105b4:	3b04      	subs	r3, #4
 80105b6:	2a00      	cmp	r2, #0
 80105b8:	d1ef      	bne.n	801059a <quorem+0xe8>
 80105ba:	3c01      	subs	r4, #1
 80105bc:	e7ea      	b.n	8010594 <quorem+0xe2>
 80105be:	2000      	movs	r0, #0
 80105c0:	e7ee      	b.n	80105a0 <quorem+0xee>
 80105c2:	0000      	movs	r0, r0
 80105c4:	0000      	movs	r0, r0
	...

080105c8 <_dtoa_r>:
 80105c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105cc:	69c7      	ldr	r7, [r0, #28]
 80105ce:	b097      	sub	sp, #92	@ 0x5c
 80105d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80105d4:	ec55 4b10 	vmov	r4, r5, d0
 80105d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80105da:	9107      	str	r1, [sp, #28]
 80105dc:	4681      	mov	r9, r0
 80105de:	920c      	str	r2, [sp, #48]	@ 0x30
 80105e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80105e2:	b97f      	cbnz	r7, 8010604 <_dtoa_r+0x3c>
 80105e4:	2010      	movs	r0, #16
 80105e6:	f000 fe09 	bl	80111fc <malloc>
 80105ea:	4602      	mov	r2, r0
 80105ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80105f0:	b920      	cbnz	r0, 80105fc <_dtoa_r+0x34>
 80105f2:	4ba9      	ldr	r3, [pc, #676]	@ (8010898 <_dtoa_r+0x2d0>)
 80105f4:	21ef      	movs	r1, #239	@ 0xef
 80105f6:	48a9      	ldr	r0, [pc, #676]	@ (801089c <_dtoa_r+0x2d4>)
 80105f8:	f001 fc5e 	bl	8011eb8 <__assert_func>
 80105fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010600:	6007      	str	r7, [r0, #0]
 8010602:	60c7      	str	r7, [r0, #12]
 8010604:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010608:	6819      	ldr	r1, [r3, #0]
 801060a:	b159      	cbz	r1, 8010624 <_dtoa_r+0x5c>
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	604a      	str	r2, [r1, #4]
 8010610:	2301      	movs	r3, #1
 8010612:	4093      	lsls	r3, r2
 8010614:	608b      	str	r3, [r1, #8]
 8010616:	4648      	mov	r0, r9
 8010618:	f000 fee6 	bl	80113e8 <_Bfree>
 801061c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010620:	2200      	movs	r2, #0
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	1e2b      	subs	r3, r5, #0
 8010626:	bfb9      	ittee	lt
 8010628:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801062c:	9305      	strlt	r3, [sp, #20]
 801062e:	2300      	movge	r3, #0
 8010630:	6033      	strge	r3, [r6, #0]
 8010632:	9f05      	ldr	r7, [sp, #20]
 8010634:	4b9a      	ldr	r3, [pc, #616]	@ (80108a0 <_dtoa_r+0x2d8>)
 8010636:	bfbc      	itt	lt
 8010638:	2201      	movlt	r2, #1
 801063a:	6032      	strlt	r2, [r6, #0]
 801063c:	43bb      	bics	r3, r7
 801063e:	d112      	bne.n	8010666 <_dtoa_r+0x9e>
 8010640:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010642:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010646:	6013      	str	r3, [r2, #0]
 8010648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801064c:	4323      	orrs	r3, r4
 801064e:	f000 855a 	beq.w	8011106 <_dtoa_r+0xb3e>
 8010652:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010654:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80108b4 <_dtoa_r+0x2ec>
 8010658:	2b00      	cmp	r3, #0
 801065a:	f000 855c 	beq.w	8011116 <_dtoa_r+0xb4e>
 801065e:	f10a 0303 	add.w	r3, sl, #3
 8010662:	f000 bd56 	b.w	8011112 <_dtoa_r+0xb4a>
 8010666:	ed9d 7b04 	vldr	d7, [sp, #16]
 801066a:	2200      	movs	r2, #0
 801066c:	ec51 0b17 	vmov	r0, r1, d7
 8010670:	2300      	movs	r3, #0
 8010672:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010676:	f7f0 fa2f 	bl	8000ad8 <__aeabi_dcmpeq>
 801067a:	4680      	mov	r8, r0
 801067c:	b158      	cbz	r0, 8010696 <_dtoa_r+0xce>
 801067e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010680:	2301      	movs	r3, #1
 8010682:	6013      	str	r3, [r2, #0]
 8010684:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010686:	b113      	cbz	r3, 801068e <_dtoa_r+0xc6>
 8010688:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801068a:	4b86      	ldr	r3, [pc, #536]	@ (80108a4 <_dtoa_r+0x2dc>)
 801068c:	6013      	str	r3, [r2, #0]
 801068e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80108b8 <_dtoa_r+0x2f0>
 8010692:	f000 bd40 	b.w	8011116 <_dtoa_r+0xb4e>
 8010696:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801069a:	aa14      	add	r2, sp, #80	@ 0x50
 801069c:	a915      	add	r1, sp, #84	@ 0x54
 801069e:	4648      	mov	r0, r9
 80106a0:	f001 f984 	bl	80119ac <__d2b>
 80106a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80106a8:	9002      	str	r0, [sp, #8]
 80106aa:	2e00      	cmp	r6, #0
 80106ac:	d078      	beq.n	80107a0 <_dtoa_r+0x1d8>
 80106ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80106b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80106bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80106c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80106c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80106c8:	4619      	mov	r1, r3
 80106ca:	2200      	movs	r2, #0
 80106cc:	4b76      	ldr	r3, [pc, #472]	@ (80108a8 <_dtoa_r+0x2e0>)
 80106ce:	f7ef fde3 	bl	8000298 <__aeabi_dsub>
 80106d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010880 <_dtoa_r+0x2b8>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	f7ef ff96 	bl	8000608 <__aeabi_dmul>
 80106dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8010888 <_dtoa_r+0x2c0>)
 80106de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e2:	f7ef fddb 	bl	800029c <__adddf3>
 80106e6:	4604      	mov	r4, r0
 80106e8:	4630      	mov	r0, r6
 80106ea:	460d      	mov	r5, r1
 80106ec:	f7ef ff22 	bl	8000534 <__aeabi_i2d>
 80106f0:	a367      	add	r3, pc, #412	@ (adr r3, 8010890 <_dtoa_r+0x2c8>)
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	f7ef ff87 	bl	8000608 <__aeabi_dmul>
 80106fa:	4602      	mov	r2, r0
 80106fc:	460b      	mov	r3, r1
 80106fe:	4620      	mov	r0, r4
 8010700:	4629      	mov	r1, r5
 8010702:	f7ef fdcb 	bl	800029c <__adddf3>
 8010706:	4604      	mov	r4, r0
 8010708:	460d      	mov	r5, r1
 801070a:	f7f0 fa2d 	bl	8000b68 <__aeabi_d2iz>
 801070e:	2200      	movs	r2, #0
 8010710:	4607      	mov	r7, r0
 8010712:	2300      	movs	r3, #0
 8010714:	4620      	mov	r0, r4
 8010716:	4629      	mov	r1, r5
 8010718:	f7f0 f9e8 	bl	8000aec <__aeabi_dcmplt>
 801071c:	b140      	cbz	r0, 8010730 <_dtoa_r+0x168>
 801071e:	4638      	mov	r0, r7
 8010720:	f7ef ff08 	bl	8000534 <__aeabi_i2d>
 8010724:	4622      	mov	r2, r4
 8010726:	462b      	mov	r3, r5
 8010728:	f7f0 f9d6 	bl	8000ad8 <__aeabi_dcmpeq>
 801072c:	b900      	cbnz	r0, 8010730 <_dtoa_r+0x168>
 801072e:	3f01      	subs	r7, #1
 8010730:	2f16      	cmp	r7, #22
 8010732:	d852      	bhi.n	80107da <_dtoa_r+0x212>
 8010734:	4b5d      	ldr	r3, [pc, #372]	@ (80108ac <_dtoa_r+0x2e4>)
 8010736:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010742:	f7f0 f9d3 	bl	8000aec <__aeabi_dcmplt>
 8010746:	2800      	cmp	r0, #0
 8010748:	d049      	beq.n	80107de <_dtoa_r+0x216>
 801074a:	3f01      	subs	r7, #1
 801074c:	2300      	movs	r3, #0
 801074e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010750:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010752:	1b9b      	subs	r3, r3, r6
 8010754:	1e5a      	subs	r2, r3, #1
 8010756:	bf45      	ittet	mi
 8010758:	f1c3 0301 	rsbmi	r3, r3, #1
 801075c:	9300      	strmi	r3, [sp, #0]
 801075e:	2300      	movpl	r3, #0
 8010760:	2300      	movmi	r3, #0
 8010762:	9206      	str	r2, [sp, #24]
 8010764:	bf54      	ite	pl
 8010766:	9300      	strpl	r3, [sp, #0]
 8010768:	9306      	strmi	r3, [sp, #24]
 801076a:	2f00      	cmp	r7, #0
 801076c:	db39      	blt.n	80107e2 <_dtoa_r+0x21a>
 801076e:	9b06      	ldr	r3, [sp, #24]
 8010770:	970d      	str	r7, [sp, #52]	@ 0x34
 8010772:	443b      	add	r3, r7
 8010774:	9306      	str	r3, [sp, #24]
 8010776:	2300      	movs	r3, #0
 8010778:	9308      	str	r3, [sp, #32]
 801077a:	9b07      	ldr	r3, [sp, #28]
 801077c:	2b09      	cmp	r3, #9
 801077e:	d863      	bhi.n	8010848 <_dtoa_r+0x280>
 8010780:	2b05      	cmp	r3, #5
 8010782:	bfc4      	itt	gt
 8010784:	3b04      	subgt	r3, #4
 8010786:	9307      	strgt	r3, [sp, #28]
 8010788:	9b07      	ldr	r3, [sp, #28]
 801078a:	f1a3 0302 	sub.w	r3, r3, #2
 801078e:	bfcc      	ite	gt
 8010790:	2400      	movgt	r4, #0
 8010792:	2401      	movle	r4, #1
 8010794:	2b03      	cmp	r3, #3
 8010796:	d863      	bhi.n	8010860 <_dtoa_r+0x298>
 8010798:	e8df f003 	tbb	[pc, r3]
 801079c:	2b375452 	.word	0x2b375452
 80107a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80107a4:	441e      	add	r6, r3
 80107a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80107aa:	2b20      	cmp	r3, #32
 80107ac:	bfc1      	itttt	gt
 80107ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80107b2:	409f      	lslgt	r7, r3
 80107b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80107b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80107bc:	bfd6      	itet	le
 80107be:	f1c3 0320 	rsble	r3, r3, #32
 80107c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80107c6:	fa04 f003 	lslle.w	r0, r4, r3
 80107ca:	f7ef fea3 	bl	8000514 <__aeabi_ui2d>
 80107ce:	2201      	movs	r2, #1
 80107d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80107d4:	3e01      	subs	r6, #1
 80107d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80107d8:	e776      	b.n	80106c8 <_dtoa_r+0x100>
 80107da:	2301      	movs	r3, #1
 80107dc:	e7b7      	b.n	801074e <_dtoa_r+0x186>
 80107de:	9010      	str	r0, [sp, #64]	@ 0x40
 80107e0:	e7b6      	b.n	8010750 <_dtoa_r+0x188>
 80107e2:	9b00      	ldr	r3, [sp, #0]
 80107e4:	1bdb      	subs	r3, r3, r7
 80107e6:	9300      	str	r3, [sp, #0]
 80107e8:	427b      	negs	r3, r7
 80107ea:	9308      	str	r3, [sp, #32]
 80107ec:	2300      	movs	r3, #0
 80107ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80107f0:	e7c3      	b.n	801077a <_dtoa_r+0x1b2>
 80107f2:	2301      	movs	r3, #1
 80107f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80107f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107f8:	eb07 0b03 	add.w	fp, r7, r3
 80107fc:	f10b 0301 	add.w	r3, fp, #1
 8010800:	2b01      	cmp	r3, #1
 8010802:	9303      	str	r3, [sp, #12]
 8010804:	bfb8      	it	lt
 8010806:	2301      	movlt	r3, #1
 8010808:	e006      	b.n	8010818 <_dtoa_r+0x250>
 801080a:	2301      	movs	r3, #1
 801080c:	9309      	str	r3, [sp, #36]	@ 0x24
 801080e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010810:	2b00      	cmp	r3, #0
 8010812:	dd28      	ble.n	8010866 <_dtoa_r+0x29e>
 8010814:	469b      	mov	fp, r3
 8010816:	9303      	str	r3, [sp, #12]
 8010818:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801081c:	2100      	movs	r1, #0
 801081e:	2204      	movs	r2, #4
 8010820:	f102 0514 	add.w	r5, r2, #20
 8010824:	429d      	cmp	r5, r3
 8010826:	d926      	bls.n	8010876 <_dtoa_r+0x2ae>
 8010828:	6041      	str	r1, [r0, #4]
 801082a:	4648      	mov	r0, r9
 801082c:	f000 fd9c 	bl	8011368 <_Balloc>
 8010830:	4682      	mov	sl, r0
 8010832:	2800      	cmp	r0, #0
 8010834:	d142      	bne.n	80108bc <_dtoa_r+0x2f4>
 8010836:	4b1e      	ldr	r3, [pc, #120]	@ (80108b0 <_dtoa_r+0x2e8>)
 8010838:	4602      	mov	r2, r0
 801083a:	f240 11af 	movw	r1, #431	@ 0x1af
 801083e:	e6da      	b.n	80105f6 <_dtoa_r+0x2e>
 8010840:	2300      	movs	r3, #0
 8010842:	e7e3      	b.n	801080c <_dtoa_r+0x244>
 8010844:	2300      	movs	r3, #0
 8010846:	e7d5      	b.n	80107f4 <_dtoa_r+0x22c>
 8010848:	2401      	movs	r4, #1
 801084a:	2300      	movs	r3, #0
 801084c:	9307      	str	r3, [sp, #28]
 801084e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010850:	f04f 3bff 	mov.w	fp, #4294967295
 8010854:	2200      	movs	r2, #0
 8010856:	f8cd b00c 	str.w	fp, [sp, #12]
 801085a:	2312      	movs	r3, #18
 801085c:	920c      	str	r2, [sp, #48]	@ 0x30
 801085e:	e7db      	b.n	8010818 <_dtoa_r+0x250>
 8010860:	2301      	movs	r3, #1
 8010862:	9309      	str	r3, [sp, #36]	@ 0x24
 8010864:	e7f4      	b.n	8010850 <_dtoa_r+0x288>
 8010866:	f04f 0b01 	mov.w	fp, #1
 801086a:	f8cd b00c 	str.w	fp, [sp, #12]
 801086e:	465b      	mov	r3, fp
 8010870:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010874:	e7d0      	b.n	8010818 <_dtoa_r+0x250>
 8010876:	3101      	adds	r1, #1
 8010878:	0052      	lsls	r2, r2, #1
 801087a:	e7d1      	b.n	8010820 <_dtoa_r+0x258>
 801087c:	f3af 8000 	nop.w
 8010880:	636f4361 	.word	0x636f4361
 8010884:	3fd287a7 	.word	0x3fd287a7
 8010888:	8b60c8b3 	.word	0x8b60c8b3
 801088c:	3fc68a28 	.word	0x3fc68a28
 8010890:	509f79fb 	.word	0x509f79fb
 8010894:	3fd34413 	.word	0x3fd34413
 8010898:	0801348d 	.word	0x0801348d
 801089c:	080134a4 	.word	0x080134a4
 80108a0:	7ff00000 	.word	0x7ff00000
 80108a4:	0801345d 	.word	0x0801345d
 80108a8:	3ff80000 	.word	0x3ff80000
 80108ac:	080135f8 	.word	0x080135f8
 80108b0:	080134fc 	.word	0x080134fc
 80108b4:	08013489 	.word	0x08013489
 80108b8:	0801345c 	.word	0x0801345c
 80108bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80108c0:	6018      	str	r0, [r3, #0]
 80108c2:	9b03      	ldr	r3, [sp, #12]
 80108c4:	2b0e      	cmp	r3, #14
 80108c6:	f200 80a1 	bhi.w	8010a0c <_dtoa_r+0x444>
 80108ca:	2c00      	cmp	r4, #0
 80108cc:	f000 809e 	beq.w	8010a0c <_dtoa_r+0x444>
 80108d0:	2f00      	cmp	r7, #0
 80108d2:	dd33      	ble.n	801093c <_dtoa_r+0x374>
 80108d4:	4b9c      	ldr	r3, [pc, #624]	@ (8010b48 <_dtoa_r+0x580>)
 80108d6:	f007 020f 	and.w	r2, r7, #15
 80108da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108de:	ed93 7b00 	vldr	d7, [r3]
 80108e2:	05f8      	lsls	r0, r7, #23
 80108e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80108e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80108ec:	d516      	bpl.n	801091c <_dtoa_r+0x354>
 80108ee:	4b97      	ldr	r3, [pc, #604]	@ (8010b4c <_dtoa_r+0x584>)
 80108f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80108f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108f8:	f7ef ffb0 	bl	800085c <__aeabi_ddiv>
 80108fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010900:	f004 040f 	and.w	r4, r4, #15
 8010904:	2603      	movs	r6, #3
 8010906:	4d91      	ldr	r5, [pc, #580]	@ (8010b4c <_dtoa_r+0x584>)
 8010908:	b954      	cbnz	r4, 8010920 <_dtoa_r+0x358>
 801090a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801090e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010912:	f7ef ffa3 	bl	800085c <__aeabi_ddiv>
 8010916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801091a:	e028      	b.n	801096e <_dtoa_r+0x3a6>
 801091c:	2602      	movs	r6, #2
 801091e:	e7f2      	b.n	8010906 <_dtoa_r+0x33e>
 8010920:	07e1      	lsls	r1, r4, #31
 8010922:	d508      	bpl.n	8010936 <_dtoa_r+0x36e>
 8010924:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010928:	e9d5 2300 	ldrd	r2, r3, [r5]
 801092c:	f7ef fe6c 	bl	8000608 <__aeabi_dmul>
 8010930:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010934:	3601      	adds	r6, #1
 8010936:	1064      	asrs	r4, r4, #1
 8010938:	3508      	adds	r5, #8
 801093a:	e7e5      	b.n	8010908 <_dtoa_r+0x340>
 801093c:	f000 80af 	beq.w	8010a9e <_dtoa_r+0x4d6>
 8010940:	427c      	negs	r4, r7
 8010942:	4b81      	ldr	r3, [pc, #516]	@ (8010b48 <_dtoa_r+0x580>)
 8010944:	4d81      	ldr	r5, [pc, #516]	@ (8010b4c <_dtoa_r+0x584>)
 8010946:	f004 020f 	and.w	r2, r4, #15
 801094a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010952:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010956:	f7ef fe57 	bl	8000608 <__aeabi_dmul>
 801095a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801095e:	1124      	asrs	r4, r4, #4
 8010960:	2300      	movs	r3, #0
 8010962:	2602      	movs	r6, #2
 8010964:	2c00      	cmp	r4, #0
 8010966:	f040 808f 	bne.w	8010a88 <_dtoa_r+0x4c0>
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1d3      	bne.n	8010916 <_dtoa_r+0x34e>
 801096e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010970:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010974:	2b00      	cmp	r3, #0
 8010976:	f000 8094 	beq.w	8010aa2 <_dtoa_r+0x4da>
 801097a:	4b75      	ldr	r3, [pc, #468]	@ (8010b50 <_dtoa_r+0x588>)
 801097c:	2200      	movs	r2, #0
 801097e:	4620      	mov	r0, r4
 8010980:	4629      	mov	r1, r5
 8010982:	f7f0 f8b3 	bl	8000aec <__aeabi_dcmplt>
 8010986:	2800      	cmp	r0, #0
 8010988:	f000 808b 	beq.w	8010aa2 <_dtoa_r+0x4da>
 801098c:	9b03      	ldr	r3, [sp, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	f000 8087 	beq.w	8010aa2 <_dtoa_r+0x4da>
 8010994:	f1bb 0f00 	cmp.w	fp, #0
 8010998:	dd34      	ble.n	8010a04 <_dtoa_r+0x43c>
 801099a:	4620      	mov	r0, r4
 801099c:	4b6d      	ldr	r3, [pc, #436]	@ (8010b54 <_dtoa_r+0x58c>)
 801099e:	2200      	movs	r2, #0
 80109a0:	4629      	mov	r1, r5
 80109a2:	f7ef fe31 	bl	8000608 <__aeabi_dmul>
 80109a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80109ae:	3601      	adds	r6, #1
 80109b0:	465c      	mov	r4, fp
 80109b2:	4630      	mov	r0, r6
 80109b4:	f7ef fdbe 	bl	8000534 <__aeabi_i2d>
 80109b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109bc:	f7ef fe24 	bl	8000608 <__aeabi_dmul>
 80109c0:	4b65      	ldr	r3, [pc, #404]	@ (8010b58 <_dtoa_r+0x590>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	f7ef fc6a 	bl	800029c <__adddf3>
 80109c8:	4605      	mov	r5, r0
 80109ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80109ce:	2c00      	cmp	r4, #0
 80109d0:	d16a      	bne.n	8010aa8 <_dtoa_r+0x4e0>
 80109d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109d6:	4b61      	ldr	r3, [pc, #388]	@ (8010b5c <_dtoa_r+0x594>)
 80109d8:	2200      	movs	r2, #0
 80109da:	f7ef fc5d 	bl	8000298 <__aeabi_dsub>
 80109de:	4602      	mov	r2, r0
 80109e0:	460b      	mov	r3, r1
 80109e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80109e6:	462a      	mov	r2, r5
 80109e8:	4633      	mov	r3, r6
 80109ea:	f7f0 f89d 	bl	8000b28 <__aeabi_dcmpgt>
 80109ee:	2800      	cmp	r0, #0
 80109f0:	f040 8298 	bne.w	8010f24 <_dtoa_r+0x95c>
 80109f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109f8:	462a      	mov	r2, r5
 80109fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80109fe:	f7f0 f875 	bl	8000aec <__aeabi_dcmplt>
 8010a02:	bb38      	cbnz	r0, 8010a54 <_dtoa_r+0x48c>
 8010a04:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010a08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010a0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f2c0 8157 	blt.w	8010cc2 <_dtoa_r+0x6fa>
 8010a14:	2f0e      	cmp	r7, #14
 8010a16:	f300 8154 	bgt.w	8010cc2 <_dtoa_r+0x6fa>
 8010a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8010b48 <_dtoa_r+0x580>)
 8010a1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010a20:	ed93 7b00 	vldr	d7, [r3]
 8010a24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	ed8d 7b00 	vstr	d7, [sp]
 8010a2c:	f280 80e5 	bge.w	8010bfa <_dtoa_r+0x632>
 8010a30:	9b03      	ldr	r3, [sp, #12]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f300 80e1 	bgt.w	8010bfa <_dtoa_r+0x632>
 8010a38:	d10c      	bne.n	8010a54 <_dtoa_r+0x48c>
 8010a3a:	4b48      	ldr	r3, [pc, #288]	@ (8010b5c <_dtoa_r+0x594>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	ec51 0b17 	vmov	r0, r1, d7
 8010a42:	f7ef fde1 	bl	8000608 <__aeabi_dmul>
 8010a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a4a:	f7f0 f863 	bl	8000b14 <__aeabi_dcmpge>
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	f000 8266 	beq.w	8010f20 <_dtoa_r+0x958>
 8010a54:	2400      	movs	r4, #0
 8010a56:	4625      	mov	r5, r4
 8010a58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a5a:	4656      	mov	r6, sl
 8010a5c:	ea6f 0803 	mvn.w	r8, r3
 8010a60:	2700      	movs	r7, #0
 8010a62:	4621      	mov	r1, r4
 8010a64:	4648      	mov	r0, r9
 8010a66:	f000 fcbf 	bl	80113e8 <_Bfree>
 8010a6a:	2d00      	cmp	r5, #0
 8010a6c:	f000 80bd 	beq.w	8010bea <_dtoa_r+0x622>
 8010a70:	b12f      	cbz	r7, 8010a7e <_dtoa_r+0x4b6>
 8010a72:	42af      	cmp	r7, r5
 8010a74:	d003      	beq.n	8010a7e <_dtoa_r+0x4b6>
 8010a76:	4639      	mov	r1, r7
 8010a78:	4648      	mov	r0, r9
 8010a7a:	f000 fcb5 	bl	80113e8 <_Bfree>
 8010a7e:	4629      	mov	r1, r5
 8010a80:	4648      	mov	r0, r9
 8010a82:	f000 fcb1 	bl	80113e8 <_Bfree>
 8010a86:	e0b0      	b.n	8010bea <_dtoa_r+0x622>
 8010a88:	07e2      	lsls	r2, r4, #31
 8010a8a:	d505      	bpl.n	8010a98 <_dtoa_r+0x4d0>
 8010a8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a90:	f7ef fdba 	bl	8000608 <__aeabi_dmul>
 8010a94:	3601      	adds	r6, #1
 8010a96:	2301      	movs	r3, #1
 8010a98:	1064      	asrs	r4, r4, #1
 8010a9a:	3508      	adds	r5, #8
 8010a9c:	e762      	b.n	8010964 <_dtoa_r+0x39c>
 8010a9e:	2602      	movs	r6, #2
 8010aa0:	e765      	b.n	801096e <_dtoa_r+0x3a6>
 8010aa2:	9c03      	ldr	r4, [sp, #12]
 8010aa4:	46b8      	mov	r8, r7
 8010aa6:	e784      	b.n	80109b2 <_dtoa_r+0x3ea>
 8010aa8:	4b27      	ldr	r3, [pc, #156]	@ (8010b48 <_dtoa_r+0x580>)
 8010aaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010aac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ab0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ab4:	4454      	add	r4, sl
 8010ab6:	2900      	cmp	r1, #0
 8010ab8:	d054      	beq.n	8010b64 <_dtoa_r+0x59c>
 8010aba:	4929      	ldr	r1, [pc, #164]	@ (8010b60 <_dtoa_r+0x598>)
 8010abc:	2000      	movs	r0, #0
 8010abe:	f7ef fecd 	bl	800085c <__aeabi_ddiv>
 8010ac2:	4633      	mov	r3, r6
 8010ac4:	462a      	mov	r2, r5
 8010ac6:	f7ef fbe7 	bl	8000298 <__aeabi_dsub>
 8010aca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010ace:	4656      	mov	r6, sl
 8010ad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ad4:	f7f0 f848 	bl	8000b68 <__aeabi_d2iz>
 8010ad8:	4605      	mov	r5, r0
 8010ada:	f7ef fd2b 	bl	8000534 <__aeabi_i2d>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ae6:	f7ef fbd7 	bl	8000298 <__aeabi_dsub>
 8010aea:	3530      	adds	r5, #48	@ 0x30
 8010aec:	4602      	mov	r2, r0
 8010aee:	460b      	mov	r3, r1
 8010af0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010af4:	f806 5b01 	strb.w	r5, [r6], #1
 8010af8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010afc:	f7ef fff6 	bl	8000aec <__aeabi_dcmplt>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d172      	bne.n	8010bea <_dtoa_r+0x622>
 8010b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b08:	4911      	ldr	r1, [pc, #68]	@ (8010b50 <_dtoa_r+0x588>)
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	f7ef fbc4 	bl	8000298 <__aeabi_dsub>
 8010b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b14:	f7ef ffea 	bl	8000aec <__aeabi_dcmplt>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	f040 80b4 	bne.w	8010c86 <_dtoa_r+0x6be>
 8010b1e:	42a6      	cmp	r6, r4
 8010b20:	f43f af70 	beq.w	8010a04 <_dtoa_r+0x43c>
 8010b24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010b28:	4b0a      	ldr	r3, [pc, #40]	@ (8010b54 <_dtoa_r+0x58c>)
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	f7ef fd6c 	bl	8000608 <__aeabi_dmul>
 8010b30:	4b08      	ldr	r3, [pc, #32]	@ (8010b54 <_dtoa_r+0x58c>)
 8010b32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b36:	2200      	movs	r2, #0
 8010b38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b3c:	f7ef fd64 	bl	8000608 <__aeabi_dmul>
 8010b40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b44:	e7c4      	b.n	8010ad0 <_dtoa_r+0x508>
 8010b46:	bf00      	nop
 8010b48:	080135f8 	.word	0x080135f8
 8010b4c:	080135d0 	.word	0x080135d0
 8010b50:	3ff00000 	.word	0x3ff00000
 8010b54:	40240000 	.word	0x40240000
 8010b58:	401c0000 	.word	0x401c0000
 8010b5c:	40140000 	.word	0x40140000
 8010b60:	3fe00000 	.word	0x3fe00000
 8010b64:	4631      	mov	r1, r6
 8010b66:	4628      	mov	r0, r5
 8010b68:	f7ef fd4e 	bl	8000608 <__aeabi_dmul>
 8010b6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b70:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010b72:	4656      	mov	r6, sl
 8010b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b78:	f7ef fff6 	bl	8000b68 <__aeabi_d2iz>
 8010b7c:	4605      	mov	r5, r0
 8010b7e:	f7ef fcd9 	bl	8000534 <__aeabi_i2d>
 8010b82:	4602      	mov	r2, r0
 8010b84:	460b      	mov	r3, r1
 8010b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b8a:	f7ef fb85 	bl	8000298 <__aeabi_dsub>
 8010b8e:	3530      	adds	r5, #48	@ 0x30
 8010b90:	f806 5b01 	strb.w	r5, [r6], #1
 8010b94:	4602      	mov	r2, r0
 8010b96:	460b      	mov	r3, r1
 8010b98:	42a6      	cmp	r6, r4
 8010b9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b9e:	f04f 0200 	mov.w	r2, #0
 8010ba2:	d124      	bne.n	8010bee <_dtoa_r+0x626>
 8010ba4:	4baf      	ldr	r3, [pc, #700]	@ (8010e64 <_dtoa_r+0x89c>)
 8010ba6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010baa:	f7ef fb77 	bl	800029c <__adddf3>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	460b      	mov	r3, r1
 8010bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bb6:	f7ef ffb7 	bl	8000b28 <__aeabi_dcmpgt>
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	d163      	bne.n	8010c86 <_dtoa_r+0x6be>
 8010bbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010bc2:	49a8      	ldr	r1, [pc, #672]	@ (8010e64 <_dtoa_r+0x89c>)
 8010bc4:	2000      	movs	r0, #0
 8010bc6:	f7ef fb67 	bl	8000298 <__aeabi_dsub>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	460b      	mov	r3, r1
 8010bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bd2:	f7ef ff8b 	bl	8000aec <__aeabi_dcmplt>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	f43f af14 	beq.w	8010a04 <_dtoa_r+0x43c>
 8010bdc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010bde:	1e73      	subs	r3, r6, #1
 8010be0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010be2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010be6:	2b30      	cmp	r3, #48	@ 0x30
 8010be8:	d0f8      	beq.n	8010bdc <_dtoa_r+0x614>
 8010bea:	4647      	mov	r7, r8
 8010bec:	e03b      	b.n	8010c66 <_dtoa_r+0x69e>
 8010bee:	4b9e      	ldr	r3, [pc, #632]	@ (8010e68 <_dtoa_r+0x8a0>)
 8010bf0:	f7ef fd0a 	bl	8000608 <__aeabi_dmul>
 8010bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bf8:	e7bc      	b.n	8010b74 <_dtoa_r+0x5ac>
 8010bfa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010bfe:	4656      	mov	r6, sl
 8010c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c04:	4620      	mov	r0, r4
 8010c06:	4629      	mov	r1, r5
 8010c08:	f7ef fe28 	bl	800085c <__aeabi_ddiv>
 8010c0c:	f7ef ffac 	bl	8000b68 <__aeabi_d2iz>
 8010c10:	4680      	mov	r8, r0
 8010c12:	f7ef fc8f 	bl	8000534 <__aeabi_i2d>
 8010c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c1a:	f7ef fcf5 	bl	8000608 <__aeabi_dmul>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	460b      	mov	r3, r1
 8010c22:	4620      	mov	r0, r4
 8010c24:	4629      	mov	r1, r5
 8010c26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010c2a:	f7ef fb35 	bl	8000298 <__aeabi_dsub>
 8010c2e:	f806 4b01 	strb.w	r4, [r6], #1
 8010c32:	9d03      	ldr	r5, [sp, #12]
 8010c34:	eba6 040a 	sub.w	r4, r6, sl
 8010c38:	42a5      	cmp	r5, r4
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	d133      	bne.n	8010ca8 <_dtoa_r+0x6e0>
 8010c40:	f7ef fb2c 	bl	800029c <__adddf3>
 8010c44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c48:	4604      	mov	r4, r0
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	f7ef ff6c 	bl	8000b28 <__aeabi_dcmpgt>
 8010c50:	b9c0      	cbnz	r0, 8010c84 <_dtoa_r+0x6bc>
 8010c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c56:	4620      	mov	r0, r4
 8010c58:	4629      	mov	r1, r5
 8010c5a:	f7ef ff3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8010c5e:	b110      	cbz	r0, 8010c66 <_dtoa_r+0x69e>
 8010c60:	f018 0f01 	tst.w	r8, #1
 8010c64:	d10e      	bne.n	8010c84 <_dtoa_r+0x6bc>
 8010c66:	9902      	ldr	r1, [sp, #8]
 8010c68:	4648      	mov	r0, r9
 8010c6a:	f000 fbbd 	bl	80113e8 <_Bfree>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	7033      	strb	r3, [r6, #0]
 8010c72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c74:	3701      	adds	r7, #1
 8010c76:	601f      	str	r7, [r3, #0]
 8010c78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f000 824b 	beq.w	8011116 <_dtoa_r+0xb4e>
 8010c80:	601e      	str	r6, [r3, #0]
 8010c82:	e248      	b.n	8011116 <_dtoa_r+0xb4e>
 8010c84:	46b8      	mov	r8, r7
 8010c86:	4633      	mov	r3, r6
 8010c88:	461e      	mov	r6, r3
 8010c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c8e:	2a39      	cmp	r2, #57	@ 0x39
 8010c90:	d106      	bne.n	8010ca0 <_dtoa_r+0x6d8>
 8010c92:	459a      	cmp	sl, r3
 8010c94:	d1f8      	bne.n	8010c88 <_dtoa_r+0x6c0>
 8010c96:	2230      	movs	r2, #48	@ 0x30
 8010c98:	f108 0801 	add.w	r8, r8, #1
 8010c9c:	f88a 2000 	strb.w	r2, [sl]
 8010ca0:	781a      	ldrb	r2, [r3, #0]
 8010ca2:	3201      	adds	r2, #1
 8010ca4:	701a      	strb	r2, [r3, #0]
 8010ca6:	e7a0      	b.n	8010bea <_dtoa_r+0x622>
 8010ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8010e68 <_dtoa_r+0x8a0>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	f7ef fcac 	bl	8000608 <__aeabi_dmul>
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	460d      	mov	r5, r1
 8010cb8:	f7ef ff0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d09f      	beq.n	8010c00 <_dtoa_r+0x638>
 8010cc0:	e7d1      	b.n	8010c66 <_dtoa_r+0x69e>
 8010cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cc4:	2a00      	cmp	r2, #0
 8010cc6:	f000 80ea 	beq.w	8010e9e <_dtoa_r+0x8d6>
 8010cca:	9a07      	ldr	r2, [sp, #28]
 8010ccc:	2a01      	cmp	r2, #1
 8010cce:	f300 80cd 	bgt.w	8010e6c <_dtoa_r+0x8a4>
 8010cd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010cd4:	2a00      	cmp	r2, #0
 8010cd6:	f000 80c1 	beq.w	8010e5c <_dtoa_r+0x894>
 8010cda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010cde:	9c08      	ldr	r4, [sp, #32]
 8010ce0:	9e00      	ldr	r6, [sp, #0]
 8010ce2:	9a00      	ldr	r2, [sp, #0]
 8010ce4:	441a      	add	r2, r3
 8010ce6:	9200      	str	r2, [sp, #0]
 8010ce8:	9a06      	ldr	r2, [sp, #24]
 8010cea:	2101      	movs	r1, #1
 8010cec:	441a      	add	r2, r3
 8010cee:	4648      	mov	r0, r9
 8010cf0:	9206      	str	r2, [sp, #24]
 8010cf2:	f000 fc2d 	bl	8011550 <__i2b>
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	b166      	cbz	r6, 8010d14 <_dtoa_r+0x74c>
 8010cfa:	9b06      	ldr	r3, [sp, #24]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	dd09      	ble.n	8010d14 <_dtoa_r+0x74c>
 8010d00:	42b3      	cmp	r3, r6
 8010d02:	9a00      	ldr	r2, [sp, #0]
 8010d04:	bfa8      	it	ge
 8010d06:	4633      	movge	r3, r6
 8010d08:	1ad2      	subs	r2, r2, r3
 8010d0a:	9200      	str	r2, [sp, #0]
 8010d0c:	9a06      	ldr	r2, [sp, #24]
 8010d0e:	1af6      	subs	r6, r6, r3
 8010d10:	1ad3      	subs	r3, r2, r3
 8010d12:	9306      	str	r3, [sp, #24]
 8010d14:	9b08      	ldr	r3, [sp, #32]
 8010d16:	b30b      	cbz	r3, 8010d5c <_dtoa_r+0x794>
 8010d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f000 80c6 	beq.w	8010eac <_dtoa_r+0x8e4>
 8010d20:	2c00      	cmp	r4, #0
 8010d22:	f000 80c0 	beq.w	8010ea6 <_dtoa_r+0x8de>
 8010d26:	4629      	mov	r1, r5
 8010d28:	4622      	mov	r2, r4
 8010d2a:	4648      	mov	r0, r9
 8010d2c:	f000 fcc8 	bl	80116c0 <__pow5mult>
 8010d30:	9a02      	ldr	r2, [sp, #8]
 8010d32:	4601      	mov	r1, r0
 8010d34:	4605      	mov	r5, r0
 8010d36:	4648      	mov	r0, r9
 8010d38:	f000 fc20 	bl	801157c <__multiply>
 8010d3c:	9902      	ldr	r1, [sp, #8]
 8010d3e:	4680      	mov	r8, r0
 8010d40:	4648      	mov	r0, r9
 8010d42:	f000 fb51 	bl	80113e8 <_Bfree>
 8010d46:	9b08      	ldr	r3, [sp, #32]
 8010d48:	1b1b      	subs	r3, r3, r4
 8010d4a:	9308      	str	r3, [sp, #32]
 8010d4c:	f000 80b1 	beq.w	8010eb2 <_dtoa_r+0x8ea>
 8010d50:	9a08      	ldr	r2, [sp, #32]
 8010d52:	4641      	mov	r1, r8
 8010d54:	4648      	mov	r0, r9
 8010d56:	f000 fcb3 	bl	80116c0 <__pow5mult>
 8010d5a:	9002      	str	r0, [sp, #8]
 8010d5c:	2101      	movs	r1, #1
 8010d5e:	4648      	mov	r0, r9
 8010d60:	f000 fbf6 	bl	8011550 <__i2b>
 8010d64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d66:	4604      	mov	r4, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 81d8 	beq.w	801111e <_dtoa_r+0xb56>
 8010d6e:	461a      	mov	r2, r3
 8010d70:	4601      	mov	r1, r0
 8010d72:	4648      	mov	r0, r9
 8010d74:	f000 fca4 	bl	80116c0 <__pow5mult>
 8010d78:	9b07      	ldr	r3, [sp, #28]
 8010d7a:	2b01      	cmp	r3, #1
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	f300 809f 	bgt.w	8010ec0 <_dtoa_r+0x8f8>
 8010d82:	9b04      	ldr	r3, [sp, #16]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f040 8097 	bne.w	8010eb8 <_dtoa_r+0x8f0>
 8010d8a:	9b05      	ldr	r3, [sp, #20]
 8010d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	f040 8093 	bne.w	8010ebc <_dtoa_r+0x8f4>
 8010d96:	9b05      	ldr	r3, [sp, #20]
 8010d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d9c:	0d1b      	lsrs	r3, r3, #20
 8010d9e:	051b      	lsls	r3, r3, #20
 8010da0:	b133      	cbz	r3, 8010db0 <_dtoa_r+0x7e8>
 8010da2:	9b00      	ldr	r3, [sp, #0]
 8010da4:	3301      	adds	r3, #1
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	9b06      	ldr	r3, [sp, #24]
 8010daa:	3301      	adds	r3, #1
 8010dac:	9306      	str	r3, [sp, #24]
 8010dae:	2301      	movs	r3, #1
 8010db0:	9308      	str	r3, [sp, #32]
 8010db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	f000 81b8 	beq.w	801112a <_dtoa_r+0xb62>
 8010dba:	6923      	ldr	r3, [r4, #16]
 8010dbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010dc0:	6918      	ldr	r0, [r3, #16]
 8010dc2:	f000 fb79 	bl	80114b8 <__hi0bits>
 8010dc6:	f1c0 0020 	rsb	r0, r0, #32
 8010dca:	9b06      	ldr	r3, [sp, #24]
 8010dcc:	4418      	add	r0, r3
 8010dce:	f010 001f 	ands.w	r0, r0, #31
 8010dd2:	f000 8082 	beq.w	8010eda <_dtoa_r+0x912>
 8010dd6:	f1c0 0320 	rsb	r3, r0, #32
 8010dda:	2b04      	cmp	r3, #4
 8010ddc:	dd73      	ble.n	8010ec6 <_dtoa_r+0x8fe>
 8010dde:	9b00      	ldr	r3, [sp, #0]
 8010de0:	f1c0 001c 	rsb	r0, r0, #28
 8010de4:	4403      	add	r3, r0
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	9b06      	ldr	r3, [sp, #24]
 8010dea:	4403      	add	r3, r0
 8010dec:	4406      	add	r6, r0
 8010dee:	9306      	str	r3, [sp, #24]
 8010df0:	9b00      	ldr	r3, [sp, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	dd05      	ble.n	8010e02 <_dtoa_r+0x83a>
 8010df6:	9902      	ldr	r1, [sp, #8]
 8010df8:	461a      	mov	r2, r3
 8010dfa:	4648      	mov	r0, r9
 8010dfc:	f000 fcba 	bl	8011774 <__lshift>
 8010e00:	9002      	str	r0, [sp, #8]
 8010e02:	9b06      	ldr	r3, [sp, #24]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	dd05      	ble.n	8010e14 <_dtoa_r+0x84c>
 8010e08:	4621      	mov	r1, r4
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	4648      	mov	r0, r9
 8010e0e:	f000 fcb1 	bl	8011774 <__lshift>
 8010e12:	4604      	mov	r4, r0
 8010e14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d061      	beq.n	8010ede <_dtoa_r+0x916>
 8010e1a:	9802      	ldr	r0, [sp, #8]
 8010e1c:	4621      	mov	r1, r4
 8010e1e:	f000 fd15 	bl	801184c <__mcmp>
 8010e22:	2800      	cmp	r0, #0
 8010e24:	da5b      	bge.n	8010ede <_dtoa_r+0x916>
 8010e26:	2300      	movs	r3, #0
 8010e28:	9902      	ldr	r1, [sp, #8]
 8010e2a:	220a      	movs	r2, #10
 8010e2c:	4648      	mov	r0, r9
 8010e2e:	f000 fafd 	bl	801142c <__multadd>
 8010e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e34:	9002      	str	r0, [sp, #8]
 8010e36:	f107 38ff 	add.w	r8, r7, #4294967295
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f000 8177 	beq.w	801112e <_dtoa_r+0xb66>
 8010e40:	4629      	mov	r1, r5
 8010e42:	2300      	movs	r3, #0
 8010e44:	220a      	movs	r2, #10
 8010e46:	4648      	mov	r0, r9
 8010e48:	f000 faf0 	bl	801142c <__multadd>
 8010e4c:	f1bb 0f00 	cmp.w	fp, #0
 8010e50:	4605      	mov	r5, r0
 8010e52:	dc6f      	bgt.n	8010f34 <_dtoa_r+0x96c>
 8010e54:	9b07      	ldr	r3, [sp, #28]
 8010e56:	2b02      	cmp	r3, #2
 8010e58:	dc49      	bgt.n	8010eee <_dtoa_r+0x926>
 8010e5a:	e06b      	b.n	8010f34 <_dtoa_r+0x96c>
 8010e5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010e62:	e73c      	b.n	8010cde <_dtoa_r+0x716>
 8010e64:	3fe00000 	.word	0x3fe00000
 8010e68:	40240000 	.word	0x40240000
 8010e6c:	9b03      	ldr	r3, [sp, #12]
 8010e6e:	1e5c      	subs	r4, r3, #1
 8010e70:	9b08      	ldr	r3, [sp, #32]
 8010e72:	42a3      	cmp	r3, r4
 8010e74:	db09      	blt.n	8010e8a <_dtoa_r+0x8c2>
 8010e76:	1b1c      	subs	r4, r3, r4
 8010e78:	9b03      	ldr	r3, [sp, #12]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f6bf af30 	bge.w	8010ce0 <_dtoa_r+0x718>
 8010e80:	9b00      	ldr	r3, [sp, #0]
 8010e82:	9a03      	ldr	r2, [sp, #12]
 8010e84:	1a9e      	subs	r6, r3, r2
 8010e86:	2300      	movs	r3, #0
 8010e88:	e72b      	b.n	8010ce2 <_dtoa_r+0x71a>
 8010e8a:	9b08      	ldr	r3, [sp, #32]
 8010e8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e8e:	9408      	str	r4, [sp, #32]
 8010e90:	1ae3      	subs	r3, r4, r3
 8010e92:	441a      	add	r2, r3
 8010e94:	9e00      	ldr	r6, [sp, #0]
 8010e96:	9b03      	ldr	r3, [sp, #12]
 8010e98:	920d      	str	r2, [sp, #52]	@ 0x34
 8010e9a:	2400      	movs	r4, #0
 8010e9c:	e721      	b.n	8010ce2 <_dtoa_r+0x71a>
 8010e9e:	9c08      	ldr	r4, [sp, #32]
 8010ea0:	9e00      	ldr	r6, [sp, #0]
 8010ea2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010ea4:	e728      	b.n	8010cf8 <_dtoa_r+0x730>
 8010ea6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010eaa:	e751      	b.n	8010d50 <_dtoa_r+0x788>
 8010eac:	9a08      	ldr	r2, [sp, #32]
 8010eae:	9902      	ldr	r1, [sp, #8]
 8010eb0:	e750      	b.n	8010d54 <_dtoa_r+0x78c>
 8010eb2:	f8cd 8008 	str.w	r8, [sp, #8]
 8010eb6:	e751      	b.n	8010d5c <_dtoa_r+0x794>
 8010eb8:	2300      	movs	r3, #0
 8010eba:	e779      	b.n	8010db0 <_dtoa_r+0x7e8>
 8010ebc:	9b04      	ldr	r3, [sp, #16]
 8010ebe:	e777      	b.n	8010db0 <_dtoa_r+0x7e8>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	9308      	str	r3, [sp, #32]
 8010ec4:	e779      	b.n	8010dba <_dtoa_r+0x7f2>
 8010ec6:	d093      	beq.n	8010df0 <_dtoa_r+0x828>
 8010ec8:	9a00      	ldr	r2, [sp, #0]
 8010eca:	331c      	adds	r3, #28
 8010ecc:	441a      	add	r2, r3
 8010ece:	9200      	str	r2, [sp, #0]
 8010ed0:	9a06      	ldr	r2, [sp, #24]
 8010ed2:	441a      	add	r2, r3
 8010ed4:	441e      	add	r6, r3
 8010ed6:	9206      	str	r2, [sp, #24]
 8010ed8:	e78a      	b.n	8010df0 <_dtoa_r+0x828>
 8010eda:	4603      	mov	r3, r0
 8010edc:	e7f4      	b.n	8010ec8 <_dtoa_r+0x900>
 8010ede:	9b03      	ldr	r3, [sp, #12]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	46b8      	mov	r8, r7
 8010ee4:	dc20      	bgt.n	8010f28 <_dtoa_r+0x960>
 8010ee6:	469b      	mov	fp, r3
 8010ee8:	9b07      	ldr	r3, [sp, #28]
 8010eea:	2b02      	cmp	r3, #2
 8010eec:	dd1e      	ble.n	8010f2c <_dtoa_r+0x964>
 8010eee:	f1bb 0f00 	cmp.w	fp, #0
 8010ef2:	f47f adb1 	bne.w	8010a58 <_dtoa_r+0x490>
 8010ef6:	4621      	mov	r1, r4
 8010ef8:	465b      	mov	r3, fp
 8010efa:	2205      	movs	r2, #5
 8010efc:	4648      	mov	r0, r9
 8010efe:	f000 fa95 	bl	801142c <__multadd>
 8010f02:	4601      	mov	r1, r0
 8010f04:	4604      	mov	r4, r0
 8010f06:	9802      	ldr	r0, [sp, #8]
 8010f08:	f000 fca0 	bl	801184c <__mcmp>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	f77f ada3 	ble.w	8010a58 <_dtoa_r+0x490>
 8010f12:	4656      	mov	r6, sl
 8010f14:	2331      	movs	r3, #49	@ 0x31
 8010f16:	f806 3b01 	strb.w	r3, [r6], #1
 8010f1a:	f108 0801 	add.w	r8, r8, #1
 8010f1e:	e59f      	b.n	8010a60 <_dtoa_r+0x498>
 8010f20:	9c03      	ldr	r4, [sp, #12]
 8010f22:	46b8      	mov	r8, r7
 8010f24:	4625      	mov	r5, r4
 8010f26:	e7f4      	b.n	8010f12 <_dtoa_r+0x94a>
 8010f28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f000 8101 	beq.w	8011136 <_dtoa_r+0xb6e>
 8010f34:	2e00      	cmp	r6, #0
 8010f36:	dd05      	ble.n	8010f44 <_dtoa_r+0x97c>
 8010f38:	4629      	mov	r1, r5
 8010f3a:	4632      	mov	r2, r6
 8010f3c:	4648      	mov	r0, r9
 8010f3e:	f000 fc19 	bl	8011774 <__lshift>
 8010f42:	4605      	mov	r5, r0
 8010f44:	9b08      	ldr	r3, [sp, #32]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d05c      	beq.n	8011004 <_dtoa_r+0xa3c>
 8010f4a:	6869      	ldr	r1, [r5, #4]
 8010f4c:	4648      	mov	r0, r9
 8010f4e:	f000 fa0b 	bl	8011368 <_Balloc>
 8010f52:	4606      	mov	r6, r0
 8010f54:	b928      	cbnz	r0, 8010f62 <_dtoa_r+0x99a>
 8010f56:	4b82      	ldr	r3, [pc, #520]	@ (8011160 <_dtoa_r+0xb98>)
 8010f58:	4602      	mov	r2, r0
 8010f5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010f5e:	f7ff bb4a 	b.w	80105f6 <_dtoa_r+0x2e>
 8010f62:	692a      	ldr	r2, [r5, #16]
 8010f64:	3202      	adds	r2, #2
 8010f66:	0092      	lsls	r2, r2, #2
 8010f68:	f105 010c 	add.w	r1, r5, #12
 8010f6c:	300c      	adds	r0, #12
 8010f6e:	f7ff fa92 	bl	8010496 <memcpy>
 8010f72:	2201      	movs	r2, #1
 8010f74:	4631      	mov	r1, r6
 8010f76:	4648      	mov	r0, r9
 8010f78:	f000 fbfc 	bl	8011774 <__lshift>
 8010f7c:	f10a 0301 	add.w	r3, sl, #1
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	eb0a 030b 	add.w	r3, sl, fp
 8010f86:	9308      	str	r3, [sp, #32]
 8010f88:	9b04      	ldr	r3, [sp, #16]
 8010f8a:	f003 0301 	and.w	r3, r3, #1
 8010f8e:	462f      	mov	r7, r5
 8010f90:	9306      	str	r3, [sp, #24]
 8010f92:	4605      	mov	r5, r0
 8010f94:	9b00      	ldr	r3, [sp, #0]
 8010f96:	9802      	ldr	r0, [sp, #8]
 8010f98:	4621      	mov	r1, r4
 8010f9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8010f9e:	f7ff fa88 	bl	80104b2 <quorem>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	3330      	adds	r3, #48	@ 0x30
 8010fa6:	9003      	str	r0, [sp, #12]
 8010fa8:	4639      	mov	r1, r7
 8010faa:	9802      	ldr	r0, [sp, #8]
 8010fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fae:	f000 fc4d 	bl	801184c <__mcmp>
 8010fb2:	462a      	mov	r2, r5
 8010fb4:	9004      	str	r0, [sp, #16]
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	4648      	mov	r0, r9
 8010fba:	f000 fc63 	bl	8011884 <__mdiff>
 8010fbe:	68c2      	ldr	r2, [r0, #12]
 8010fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	bb02      	cbnz	r2, 8011008 <_dtoa_r+0xa40>
 8010fc6:	4601      	mov	r1, r0
 8010fc8:	9802      	ldr	r0, [sp, #8]
 8010fca:	f000 fc3f 	bl	801184c <__mcmp>
 8010fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	4631      	mov	r1, r6
 8010fd4:	4648      	mov	r0, r9
 8010fd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8010fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fda:	f000 fa05 	bl	80113e8 <_Bfree>
 8010fde:	9b07      	ldr	r3, [sp, #28]
 8010fe0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010fe2:	9e00      	ldr	r6, [sp, #0]
 8010fe4:	ea42 0103 	orr.w	r1, r2, r3
 8010fe8:	9b06      	ldr	r3, [sp, #24]
 8010fea:	4319      	orrs	r1, r3
 8010fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fee:	d10d      	bne.n	801100c <_dtoa_r+0xa44>
 8010ff0:	2b39      	cmp	r3, #57	@ 0x39
 8010ff2:	d027      	beq.n	8011044 <_dtoa_r+0xa7c>
 8010ff4:	9a04      	ldr	r2, [sp, #16]
 8010ff6:	2a00      	cmp	r2, #0
 8010ff8:	dd01      	ble.n	8010ffe <_dtoa_r+0xa36>
 8010ffa:	9b03      	ldr	r3, [sp, #12]
 8010ffc:	3331      	adds	r3, #49	@ 0x31
 8010ffe:	f88b 3000 	strb.w	r3, [fp]
 8011002:	e52e      	b.n	8010a62 <_dtoa_r+0x49a>
 8011004:	4628      	mov	r0, r5
 8011006:	e7b9      	b.n	8010f7c <_dtoa_r+0x9b4>
 8011008:	2201      	movs	r2, #1
 801100a:	e7e2      	b.n	8010fd2 <_dtoa_r+0xa0a>
 801100c:	9904      	ldr	r1, [sp, #16]
 801100e:	2900      	cmp	r1, #0
 8011010:	db04      	blt.n	801101c <_dtoa_r+0xa54>
 8011012:	9807      	ldr	r0, [sp, #28]
 8011014:	4301      	orrs	r1, r0
 8011016:	9806      	ldr	r0, [sp, #24]
 8011018:	4301      	orrs	r1, r0
 801101a:	d120      	bne.n	801105e <_dtoa_r+0xa96>
 801101c:	2a00      	cmp	r2, #0
 801101e:	ddee      	ble.n	8010ffe <_dtoa_r+0xa36>
 8011020:	9902      	ldr	r1, [sp, #8]
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	2201      	movs	r2, #1
 8011026:	4648      	mov	r0, r9
 8011028:	f000 fba4 	bl	8011774 <__lshift>
 801102c:	4621      	mov	r1, r4
 801102e:	9002      	str	r0, [sp, #8]
 8011030:	f000 fc0c 	bl	801184c <__mcmp>
 8011034:	2800      	cmp	r0, #0
 8011036:	9b00      	ldr	r3, [sp, #0]
 8011038:	dc02      	bgt.n	8011040 <_dtoa_r+0xa78>
 801103a:	d1e0      	bne.n	8010ffe <_dtoa_r+0xa36>
 801103c:	07da      	lsls	r2, r3, #31
 801103e:	d5de      	bpl.n	8010ffe <_dtoa_r+0xa36>
 8011040:	2b39      	cmp	r3, #57	@ 0x39
 8011042:	d1da      	bne.n	8010ffa <_dtoa_r+0xa32>
 8011044:	2339      	movs	r3, #57	@ 0x39
 8011046:	f88b 3000 	strb.w	r3, [fp]
 801104a:	4633      	mov	r3, r6
 801104c:	461e      	mov	r6, r3
 801104e:	3b01      	subs	r3, #1
 8011050:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011054:	2a39      	cmp	r2, #57	@ 0x39
 8011056:	d04e      	beq.n	80110f6 <_dtoa_r+0xb2e>
 8011058:	3201      	adds	r2, #1
 801105a:	701a      	strb	r2, [r3, #0]
 801105c:	e501      	b.n	8010a62 <_dtoa_r+0x49a>
 801105e:	2a00      	cmp	r2, #0
 8011060:	dd03      	ble.n	801106a <_dtoa_r+0xaa2>
 8011062:	2b39      	cmp	r3, #57	@ 0x39
 8011064:	d0ee      	beq.n	8011044 <_dtoa_r+0xa7c>
 8011066:	3301      	adds	r3, #1
 8011068:	e7c9      	b.n	8010ffe <_dtoa_r+0xa36>
 801106a:	9a00      	ldr	r2, [sp, #0]
 801106c:	9908      	ldr	r1, [sp, #32]
 801106e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011072:	428a      	cmp	r2, r1
 8011074:	d028      	beq.n	80110c8 <_dtoa_r+0xb00>
 8011076:	9902      	ldr	r1, [sp, #8]
 8011078:	2300      	movs	r3, #0
 801107a:	220a      	movs	r2, #10
 801107c:	4648      	mov	r0, r9
 801107e:	f000 f9d5 	bl	801142c <__multadd>
 8011082:	42af      	cmp	r7, r5
 8011084:	9002      	str	r0, [sp, #8]
 8011086:	f04f 0300 	mov.w	r3, #0
 801108a:	f04f 020a 	mov.w	r2, #10
 801108e:	4639      	mov	r1, r7
 8011090:	4648      	mov	r0, r9
 8011092:	d107      	bne.n	80110a4 <_dtoa_r+0xadc>
 8011094:	f000 f9ca 	bl	801142c <__multadd>
 8011098:	4607      	mov	r7, r0
 801109a:	4605      	mov	r5, r0
 801109c:	9b00      	ldr	r3, [sp, #0]
 801109e:	3301      	adds	r3, #1
 80110a0:	9300      	str	r3, [sp, #0]
 80110a2:	e777      	b.n	8010f94 <_dtoa_r+0x9cc>
 80110a4:	f000 f9c2 	bl	801142c <__multadd>
 80110a8:	4629      	mov	r1, r5
 80110aa:	4607      	mov	r7, r0
 80110ac:	2300      	movs	r3, #0
 80110ae:	220a      	movs	r2, #10
 80110b0:	4648      	mov	r0, r9
 80110b2:	f000 f9bb 	bl	801142c <__multadd>
 80110b6:	4605      	mov	r5, r0
 80110b8:	e7f0      	b.n	801109c <_dtoa_r+0xad4>
 80110ba:	f1bb 0f00 	cmp.w	fp, #0
 80110be:	bfcc      	ite	gt
 80110c0:	465e      	movgt	r6, fp
 80110c2:	2601      	movle	r6, #1
 80110c4:	4456      	add	r6, sl
 80110c6:	2700      	movs	r7, #0
 80110c8:	9902      	ldr	r1, [sp, #8]
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	2201      	movs	r2, #1
 80110ce:	4648      	mov	r0, r9
 80110d0:	f000 fb50 	bl	8011774 <__lshift>
 80110d4:	4621      	mov	r1, r4
 80110d6:	9002      	str	r0, [sp, #8]
 80110d8:	f000 fbb8 	bl	801184c <__mcmp>
 80110dc:	2800      	cmp	r0, #0
 80110de:	dcb4      	bgt.n	801104a <_dtoa_r+0xa82>
 80110e0:	d102      	bne.n	80110e8 <_dtoa_r+0xb20>
 80110e2:	9b00      	ldr	r3, [sp, #0]
 80110e4:	07db      	lsls	r3, r3, #31
 80110e6:	d4b0      	bmi.n	801104a <_dtoa_r+0xa82>
 80110e8:	4633      	mov	r3, r6
 80110ea:	461e      	mov	r6, r3
 80110ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110f0:	2a30      	cmp	r2, #48	@ 0x30
 80110f2:	d0fa      	beq.n	80110ea <_dtoa_r+0xb22>
 80110f4:	e4b5      	b.n	8010a62 <_dtoa_r+0x49a>
 80110f6:	459a      	cmp	sl, r3
 80110f8:	d1a8      	bne.n	801104c <_dtoa_r+0xa84>
 80110fa:	2331      	movs	r3, #49	@ 0x31
 80110fc:	f108 0801 	add.w	r8, r8, #1
 8011100:	f88a 3000 	strb.w	r3, [sl]
 8011104:	e4ad      	b.n	8010a62 <_dtoa_r+0x49a>
 8011106:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011108:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8011164 <_dtoa_r+0xb9c>
 801110c:	b11b      	cbz	r3, 8011116 <_dtoa_r+0xb4e>
 801110e:	f10a 0308 	add.w	r3, sl, #8
 8011112:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011114:	6013      	str	r3, [r2, #0]
 8011116:	4650      	mov	r0, sl
 8011118:	b017      	add	sp, #92	@ 0x5c
 801111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111e:	9b07      	ldr	r3, [sp, #28]
 8011120:	2b01      	cmp	r3, #1
 8011122:	f77f ae2e 	ble.w	8010d82 <_dtoa_r+0x7ba>
 8011126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011128:	9308      	str	r3, [sp, #32]
 801112a:	2001      	movs	r0, #1
 801112c:	e64d      	b.n	8010dca <_dtoa_r+0x802>
 801112e:	f1bb 0f00 	cmp.w	fp, #0
 8011132:	f77f aed9 	ble.w	8010ee8 <_dtoa_r+0x920>
 8011136:	4656      	mov	r6, sl
 8011138:	9802      	ldr	r0, [sp, #8]
 801113a:	4621      	mov	r1, r4
 801113c:	f7ff f9b9 	bl	80104b2 <quorem>
 8011140:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8011144:	f806 3b01 	strb.w	r3, [r6], #1
 8011148:	eba6 020a 	sub.w	r2, r6, sl
 801114c:	4593      	cmp	fp, r2
 801114e:	ddb4      	ble.n	80110ba <_dtoa_r+0xaf2>
 8011150:	9902      	ldr	r1, [sp, #8]
 8011152:	2300      	movs	r3, #0
 8011154:	220a      	movs	r2, #10
 8011156:	4648      	mov	r0, r9
 8011158:	f000 f968 	bl	801142c <__multadd>
 801115c:	9002      	str	r0, [sp, #8]
 801115e:	e7eb      	b.n	8011138 <_dtoa_r+0xb70>
 8011160:	080134fc 	.word	0x080134fc
 8011164:	08013480 	.word	0x08013480

08011168 <_free_r>:
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	4605      	mov	r5, r0
 801116c:	2900      	cmp	r1, #0
 801116e:	d041      	beq.n	80111f4 <_free_r+0x8c>
 8011170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011174:	1f0c      	subs	r4, r1, #4
 8011176:	2b00      	cmp	r3, #0
 8011178:	bfb8      	it	lt
 801117a:	18e4      	addlt	r4, r4, r3
 801117c:	f000 f8e8 	bl	8011350 <__malloc_lock>
 8011180:	4a1d      	ldr	r2, [pc, #116]	@ (80111f8 <_free_r+0x90>)
 8011182:	6813      	ldr	r3, [r2, #0]
 8011184:	b933      	cbnz	r3, 8011194 <_free_r+0x2c>
 8011186:	6063      	str	r3, [r4, #4]
 8011188:	6014      	str	r4, [r2, #0]
 801118a:	4628      	mov	r0, r5
 801118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011190:	f000 b8e4 	b.w	801135c <__malloc_unlock>
 8011194:	42a3      	cmp	r3, r4
 8011196:	d908      	bls.n	80111aa <_free_r+0x42>
 8011198:	6820      	ldr	r0, [r4, #0]
 801119a:	1821      	adds	r1, r4, r0
 801119c:	428b      	cmp	r3, r1
 801119e:	bf01      	itttt	eq
 80111a0:	6819      	ldreq	r1, [r3, #0]
 80111a2:	685b      	ldreq	r3, [r3, #4]
 80111a4:	1809      	addeq	r1, r1, r0
 80111a6:	6021      	streq	r1, [r4, #0]
 80111a8:	e7ed      	b.n	8011186 <_free_r+0x1e>
 80111aa:	461a      	mov	r2, r3
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	b10b      	cbz	r3, 80111b4 <_free_r+0x4c>
 80111b0:	42a3      	cmp	r3, r4
 80111b2:	d9fa      	bls.n	80111aa <_free_r+0x42>
 80111b4:	6811      	ldr	r1, [r2, #0]
 80111b6:	1850      	adds	r0, r2, r1
 80111b8:	42a0      	cmp	r0, r4
 80111ba:	d10b      	bne.n	80111d4 <_free_r+0x6c>
 80111bc:	6820      	ldr	r0, [r4, #0]
 80111be:	4401      	add	r1, r0
 80111c0:	1850      	adds	r0, r2, r1
 80111c2:	4283      	cmp	r3, r0
 80111c4:	6011      	str	r1, [r2, #0]
 80111c6:	d1e0      	bne.n	801118a <_free_r+0x22>
 80111c8:	6818      	ldr	r0, [r3, #0]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	6053      	str	r3, [r2, #4]
 80111ce:	4408      	add	r0, r1
 80111d0:	6010      	str	r0, [r2, #0]
 80111d2:	e7da      	b.n	801118a <_free_r+0x22>
 80111d4:	d902      	bls.n	80111dc <_free_r+0x74>
 80111d6:	230c      	movs	r3, #12
 80111d8:	602b      	str	r3, [r5, #0]
 80111da:	e7d6      	b.n	801118a <_free_r+0x22>
 80111dc:	6820      	ldr	r0, [r4, #0]
 80111de:	1821      	adds	r1, r4, r0
 80111e0:	428b      	cmp	r3, r1
 80111e2:	bf04      	itt	eq
 80111e4:	6819      	ldreq	r1, [r3, #0]
 80111e6:	685b      	ldreq	r3, [r3, #4]
 80111e8:	6063      	str	r3, [r4, #4]
 80111ea:	bf04      	itt	eq
 80111ec:	1809      	addeq	r1, r1, r0
 80111ee:	6021      	streq	r1, [r4, #0]
 80111f0:	6054      	str	r4, [r2, #4]
 80111f2:	e7ca      	b.n	801118a <_free_r+0x22>
 80111f4:	bd38      	pop	{r3, r4, r5, pc}
 80111f6:	bf00      	nop
 80111f8:	20005fa0 	.word	0x20005fa0

080111fc <malloc>:
 80111fc:	4b02      	ldr	r3, [pc, #8]	@ (8011208 <malloc+0xc>)
 80111fe:	4601      	mov	r1, r0
 8011200:	6818      	ldr	r0, [r3, #0]
 8011202:	f000 b825 	b.w	8011250 <_malloc_r>
 8011206:	bf00      	nop
 8011208:	20000088 	.word	0x20000088

0801120c <sbrk_aligned>:
 801120c:	b570      	push	{r4, r5, r6, lr}
 801120e:	4e0f      	ldr	r6, [pc, #60]	@ (801124c <sbrk_aligned+0x40>)
 8011210:	460c      	mov	r4, r1
 8011212:	6831      	ldr	r1, [r6, #0]
 8011214:	4605      	mov	r5, r0
 8011216:	b911      	cbnz	r1, 801121e <sbrk_aligned+0x12>
 8011218:	f000 fe3e 	bl	8011e98 <_sbrk_r>
 801121c:	6030      	str	r0, [r6, #0]
 801121e:	4621      	mov	r1, r4
 8011220:	4628      	mov	r0, r5
 8011222:	f000 fe39 	bl	8011e98 <_sbrk_r>
 8011226:	1c43      	adds	r3, r0, #1
 8011228:	d103      	bne.n	8011232 <sbrk_aligned+0x26>
 801122a:	f04f 34ff 	mov.w	r4, #4294967295
 801122e:	4620      	mov	r0, r4
 8011230:	bd70      	pop	{r4, r5, r6, pc}
 8011232:	1cc4      	adds	r4, r0, #3
 8011234:	f024 0403 	bic.w	r4, r4, #3
 8011238:	42a0      	cmp	r0, r4
 801123a:	d0f8      	beq.n	801122e <sbrk_aligned+0x22>
 801123c:	1a21      	subs	r1, r4, r0
 801123e:	4628      	mov	r0, r5
 8011240:	f000 fe2a 	bl	8011e98 <_sbrk_r>
 8011244:	3001      	adds	r0, #1
 8011246:	d1f2      	bne.n	801122e <sbrk_aligned+0x22>
 8011248:	e7ef      	b.n	801122a <sbrk_aligned+0x1e>
 801124a:	bf00      	nop
 801124c:	20005f9c 	.word	0x20005f9c

08011250 <_malloc_r>:
 8011250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011254:	1ccd      	adds	r5, r1, #3
 8011256:	f025 0503 	bic.w	r5, r5, #3
 801125a:	3508      	adds	r5, #8
 801125c:	2d0c      	cmp	r5, #12
 801125e:	bf38      	it	cc
 8011260:	250c      	movcc	r5, #12
 8011262:	2d00      	cmp	r5, #0
 8011264:	4606      	mov	r6, r0
 8011266:	db01      	blt.n	801126c <_malloc_r+0x1c>
 8011268:	42a9      	cmp	r1, r5
 801126a:	d904      	bls.n	8011276 <_malloc_r+0x26>
 801126c:	230c      	movs	r3, #12
 801126e:	6033      	str	r3, [r6, #0]
 8011270:	2000      	movs	r0, #0
 8011272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801134c <_malloc_r+0xfc>
 801127a:	f000 f869 	bl	8011350 <__malloc_lock>
 801127e:	f8d8 3000 	ldr.w	r3, [r8]
 8011282:	461c      	mov	r4, r3
 8011284:	bb44      	cbnz	r4, 80112d8 <_malloc_r+0x88>
 8011286:	4629      	mov	r1, r5
 8011288:	4630      	mov	r0, r6
 801128a:	f7ff ffbf 	bl	801120c <sbrk_aligned>
 801128e:	1c43      	adds	r3, r0, #1
 8011290:	4604      	mov	r4, r0
 8011292:	d158      	bne.n	8011346 <_malloc_r+0xf6>
 8011294:	f8d8 4000 	ldr.w	r4, [r8]
 8011298:	4627      	mov	r7, r4
 801129a:	2f00      	cmp	r7, #0
 801129c:	d143      	bne.n	8011326 <_malloc_r+0xd6>
 801129e:	2c00      	cmp	r4, #0
 80112a0:	d04b      	beq.n	801133a <_malloc_r+0xea>
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	4639      	mov	r1, r7
 80112a6:	4630      	mov	r0, r6
 80112a8:	eb04 0903 	add.w	r9, r4, r3
 80112ac:	f000 fdf4 	bl	8011e98 <_sbrk_r>
 80112b0:	4581      	cmp	r9, r0
 80112b2:	d142      	bne.n	801133a <_malloc_r+0xea>
 80112b4:	6821      	ldr	r1, [r4, #0]
 80112b6:	1a6d      	subs	r5, r5, r1
 80112b8:	4629      	mov	r1, r5
 80112ba:	4630      	mov	r0, r6
 80112bc:	f7ff ffa6 	bl	801120c <sbrk_aligned>
 80112c0:	3001      	adds	r0, #1
 80112c2:	d03a      	beq.n	801133a <_malloc_r+0xea>
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	442b      	add	r3, r5
 80112c8:	6023      	str	r3, [r4, #0]
 80112ca:	f8d8 3000 	ldr.w	r3, [r8]
 80112ce:	685a      	ldr	r2, [r3, #4]
 80112d0:	bb62      	cbnz	r2, 801132c <_malloc_r+0xdc>
 80112d2:	f8c8 7000 	str.w	r7, [r8]
 80112d6:	e00f      	b.n	80112f8 <_malloc_r+0xa8>
 80112d8:	6822      	ldr	r2, [r4, #0]
 80112da:	1b52      	subs	r2, r2, r5
 80112dc:	d420      	bmi.n	8011320 <_malloc_r+0xd0>
 80112de:	2a0b      	cmp	r2, #11
 80112e0:	d917      	bls.n	8011312 <_malloc_r+0xc2>
 80112e2:	1961      	adds	r1, r4, r5
 80112e4:	42a3      	cmp	r3, r4
 80112e6:	6025      	str	r5, [r4, #0]
 80112e8:	bf18      	it	ne
 80112ea:	6059      	strne	r1, [r3, #4]
 80112ec:	6863      	ldr	r3, [r4, #4]
 80112ee:	bf08      	it	eq
 80112f0:	f8c8 1000 	streq.w	r1, [r8]
 80112f4:	5162      	str	r2, [r4, r5]
 80112f6:	604b      	str	r3, [r1, #4]
 80112f8:	4630      	mov	r0, r6
 80112fa:	f000 f82f 	bl	801135c <__malloc_unlock>
 80112fe:	f104 000b 	add.w	r0, r4, #11
 8011302:	1d23      	adds	r3, r4, #4
 8011304:	f020 0007 	bic.w	r0, r0, #7
 8011308:	1ac2      	subs	r2, r0, r3
 801130a:	bf1c      	itt	ne
 801130c:	1a1b      	subne	r3, r3, r0
 801130e:	50a3      	strne	r3, [r4, r2]
 8011310:	e7af      	b.n	8011272 <_malloc_r+0x22>
 8011312:	6862      	ldr	r2, [r4, #4]
 8011314:	42a3      	cmp	r3, r4
 8011316:	bf0c      	ite	eq
 8011318:	f8c8 2000 	streq.w	r2, [r8]
 801131c:	605a      	strne	r2, [r3, #4]
 801131e:	e7eb      	b.n	80112f8 <_malloc_r+0xa8>
 8011320:	4623      	mov	r3, r4
 8011322:	6864      	ldr	r4, [r4, #4]
 8011324:	e7ae      	b.n	8011284 <_malloc_r+0x34>
 8011326:	463c      	mov	r4, r7
 8011328:	687f      	ldr	r7, [r7, #4]
 801132a:	e7b6      	b.n	801129a <_malloc_r+0x4a>
 801132c:	461a      	mov	r2, r3
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	42a3      	cmp	r3, r4
 8011332:	d1fb      	bne.n	801132c <_malloc_r+0xdc>
 8011334:	2300      	movs	r3, #0
 8011336:	6053      	str	r3, [r2, #4]
 8011338:	e7de      	b.n	80112f8 <_malloc_r+0xa8>
 801133a:	230c      	movs	r3, #12
 801133c:	6033      	str	r3, [r6, #0]
 801133e:	4630      	mov	r0, r6
 8011340:	f000 f80c 	bl	801135c <__malloc_unlock>
 8011344:	e794      	b.n	8011270 <_malloc_r+0x20>
 8011346:	6005      	str	r5, [r0, #0]
 8011348:	e7d6      	b.n	80112f8 <_malloc_r+0xa8>
 801134a:	bf00      	nop
 801134c:	20005fa0 	.word	0x20005fa0

08011350 <__malloc_lock>:
 8011350:	4801      	ldr	r0, [pc, #4]	@ (8011358 <__malloc_lock+0x8>)
 8011352:	f7ff b89e 	b.w	8010492 <__retarget_lock_acquire_recursive>
 8011356:	bf00      	nop
 8011358:	20005f98 	.word	0x20005f98

0801135c <__malloc_unlock>:
 801135c:	4801      	ldr	r0, [pc, #4]	@ (8011364 <__malloc_unlock+0x8>)
 801135e:	f7ff b899 	b.w	8010494 <__retarget_lock_release_recursive>
 8011362:	bf00      	nop
 8011364:	20005f98 	.word	0x20005f98

08011368 <_Balloc>:
 8011368:	b570      	push	{r4, r5, r6, lr}
 801136a:	69c6      	ldr	r6, [r0, #28]
 801136c:	4604      	mov	r4, r0
 801136e:	460d      	mov	r5, r1
 8011370:	b976      	cbnz	r6, 8011390 <_Balloc+0x28>
 8011372:	2010      	movs	r0, #16
 8011374:	f7ff ff42 	bl	80111fc <malloc>
 8011378:	4602      	mov	r2, r0
 801137a:	61e0      	str	r0, [r4, #28]
 801137c:	b920      	cbnz	r0, 8011388 <_Balloc+0x20>
 801137e:	4b18      	ldr	r3, [pc, #96]	@ (80113e0 <_Balloc+0x78>)
 8011380:	4818      	ldr	r0, [pc, #96]	@ (80113e4 <_Balloc+0x7c>)
 8011382:	216b      	movs	r1, #107	@ 0x6b
 8011384:	f000 fd98 	bl	8011eb8 <__assert_func>
 8011388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801138c:	6006      	str	r6, [r0, #0]
 801138e:	60c6      	str	r6, [r0, #12]
 8011390:	69e6      	ldr	r6, [r4, #28]
 8011392:	68f3      	ldr	r3, [r6, #12]
 8011394:	b183      	cbz	r3, 80113b8 <_Balloc+0x50>
 8011396:	69e3      	ldr	r3, [r4, #28]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801139e:	b9b8      	cbnz	r0, 80113d0 <_Balloc+0x68>
 80113a0:	2101      	movs	r1, #1
 80113a2:	fa01 f605 	lsl.w	r6, r1, r5
 80113a6:	1d72      	adds	r2, r6, #5
 80113a8:	0092      	lsls	r2, r2, #2
 80113aa:	4620      	mov	r0, r4
 80113ac:	f000 fda2 	bl	8011ef4 <_calloc_r>
 80113b0:	b160      	cbz	r0, 80113cc <_Balloc+0x64>
 80113b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113b6:	e00e      	b.n	80113d6 <_Balloc+0x6e>
 80113b8:	2221      	movs	r2, #33	@ 0x21
 80113ba:	2104      	movs	r1, #4
 80113bc:	4620      	mov	r0, r4
 80113be:	f000 fd99 	bl	8011ef4 <_calloc_r>
 80113c2:	69e3      	ldr	r3, [r4, #28]
 80113c4:	60f0      	str	r0, [r6, #12]
 80113c6:	68db      	ldr	r3, [r3, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1e4      	bne.n	8011396 <_Balloc+0x2e>
 80113cc:	2000      	movs	r0, #0
 80113ce:	bd70      	pop	{r4, r5, r6, pc}
 80113d0:	6802      	ldr	r2, [r0, #0]
 80113d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113d6:	2300      	movs	r3, #0
 80113d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113dc:	e7f7      	b.n	80113ce <_Balloc+0x66>
 80113de:	bf00      	nop
 80113e0:	0801348d 	.word	0x0801348d
 80113e4:	0801350d 	.word	0x0801350d

080113e8 <_Bfree>:
 80113e8:	b570      	push	{r4, r5, r6, lr}
 80113ea:	69c6      	ldr	r6, [r0, #28]
 80113ec:	4605      	mov	r5, r0
 80113ee:	460c      	mov	r4, r1
 80113f0:	b976      	cbnz	r6, 8011410 <_Bfree+0x28>
 80113f2:	2010      	movs	r0, #16
 80113f4:	f7ff ff02 	bl	80111fc <malloc>
 80113f8:	4602      	mov	r2, r0
 80113fa:	61e8      	str	r0, [r5, #28]
 80113fc:	b920      	cbnz	r0, 8011408 <_Bfree+0x20>
 80113fe:	4b09      	ldr	r3, [pc, #36]	@ (8011424 <_Bfree+0x3c>)
 8011400:	4809      	ldr	r0, [pc, #36]	@ (8011428 <_Bfree+0x40>)
 8011402:	218f      	movs	r1, #143	@ 0x8f
 8011404:	f000 fd58 	bl	8011eb8 <__assert_func>
 8011408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801140c:	6006      	str	r6, [r0, #0]
 801140e:	60c6      	str	r6, [r0, #12]
 8011410:	b13c      	cbz	r4, 8011422 <_Bfree+0x3a>
 8011412:	69eb      	ldr	r3, [r5, #28]
 8011414:	6862      	ldr	r2, [r4, #4]
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801141c:	6021      	str	r1, [r4, #0]
 801141e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011422:	bd70      	pop	{r4, r5, r6, pc}
 8011424:	0801348d 	.word	0x0801348d
 8011428:	0801350d 	.word	0x0801350d

0801142c <__multadd>:
 801142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011430:	690d      	ldr	r5, [r1, #16]
 8011432:	4607      	mov	r7, r0
 8011434:	460c      	mov	r4, r1
 8011436:	461e      	mov	r6, r3
 8011438:	f101 0c14 	add.w	ip, r1, #20
 801143c:	2000      	movs	r0, #0
 801143e:	f8dc 3000 	ldr.w	r3, [ip]
 8011442:	b299      	uxth	r1, r3
 8011444:	fb02 6101 	mla	r1, r2, r1, r6
 8011448:	0c1e      	lsrs	r6, r3, #16
 801144a:	0c0b      	lsrs	r3, r1, #16
 801144c:	fb02 3306 	mla	r3, r2, r6, r3
 8011450:	b289      	uxth	r1, r1
 8011452:	3001      	adds	r0, #1
 8011454:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011458:	4285      	cmp	r5, r0
 801145a:	f84c 1b04 	str.w	r1, [ip], #4
 801145e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011462:	dcec      	bgt.n	801143e <__multadd+0x12>
 8011464:	b30e      	cbz	r6, 80114aa <__multadd+0x7e>
 8011466:	68a3      	ldr	r3, [r4, #8]
 8011468:	42ab      	cmp	r3, r5
 801146a:	dc19      	bgt.n	80114a0 <__multadd+0x74>
 801146c:	6861      	ldr	r1, [r4, #4]
 801146e:	4638      	mov	r0, r7
 8011470:	3101      	adds	r1, #1
 8011472:	f7ff ff79 	bl	8011368 <_Balloc>
 8011476:	4680      	mov	r8, r0
 8011478:	b928      	cbnz	r0, 8011486 <__multadd+0x5a>
 801147a:	4602      	mov	r2, r0
 801147c:	4b0c      	ldr	r3, [pc, #48]	@ (80114b0 <__multadd+0x84>)
 801147e:	480d      	ldr	r0, [pc, #52]	@ (80114b4 <__multadd+0x88>)
 8011480:	21ba      	movs	r1, #186	@ 0xba
 8011482:	f000 fd19 	bl	8011eb8 <__assert_func>
 8011486:	6922      	ldr	r2, [r4, #16]
 8011488:	3202      	adds	r2, #2
 801148a:	f104 010c 	add.w	r1, r4, #12
 801148e:	0092      	lsls	r2, r2, #2
 8011490:	300c      	adds	r0, #12
 8011492:	f7ff f800 	bl	8010496 <memcpy>
 8011496:	4621      	mov	r1, r4
 8011498:	4638      	mov	r0, r7
 801149a:	f7ff ffa5 	bl	80113e8 <_Bfree>
 801149e:	4644      	mov	r4, r8
 80114a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80114a4:	3501      	adds	r5, #1
 80114a6:	615e      	str	r6, [r3, #20]
 80114a8:	6125      	str	r5, [r4, #16]
 80114aa:	4620      	mov	r0, r4
 80114ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b0:	080134fc 	.word	0x080134fc
 80114b4:	0801350d 	.word	0x0801350d

080114b8 <__hi0bits>:
 80114b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80114bc:	4603      	mov	r3, r0
 80114be:	bf36      	itet	cc
 80114c0:	0403      	lslcc	r3, r0, #16
 80114c2:	2000      	movcs	r0, #0
 80114c4:	2010      	movcc	r0, #16
 80114c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80114ca:	bf3c      	itt	cc
 80114cc:	021b      	lslcc	r3, r3, #8
 80114ce:	3008      	addcc	r0, #8
 80114d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80114d4:	bf3c      	itt	cc
 80114d6:	011b      	lslcc	r3, r3, #4
 80114d8:	3004      	addcc	r0, #4
 80114da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80114de:	bf3c      	itt	cc
 80114e0:	009b      	lslcc	r3, r3, #2
 80114e2:	3002      	addcc	r0, #2
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	db05      	blt.n	80114f4 <__hi0bits+0x3c>
 80114e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80114ec:	f100 0001 	add.w	r0, r0, #1
 80114f0:	bf08      	it	eq
 80114f2:	2020      	moveq	r0, #32
 80114f4:	4770      	bx	lr

080114f6 <__lo0bits>:
 80114f6:	6803      	ldr	r3, [r0, #0]
 80114f8:	4602      	mov	r2, r0
 80114fa:	f013 0007 	ands.w	r0, r3, #7
 80114fe:	d00b      	beq.n	8011518 <__lo0bits+0x22>
 8011500:	07d9      	lsls	r1, r3, #31
 8011502:	d421      	bmi.n	8011548 <__lo0bits+0x52>
 8011504:	0798      	lsls	r0, r3, #30
 8011506:	bf49      	itett	mi
 8011508:	085b      	lsrmi	r3, r3, #1
 801150a:	089b      	lsrpl	r3, r3, #2
 801150c:	2001      	movmi	r0, #1
 801150e:	6013      	strmi	r3, [r2, #0]
 8011510:	bf5c      	itt	pl
 8011512:	6013      	strpl	r3, [r2, #0]
 8011514:	2002      	movpl	r0, #2
 8011516:	4770      	bx	lr
 8011518:	b299      	uxth	r1, r3
 801151a:	b909      	cbnz	r1, 8011520 <__lo0bits+0x2a>
 801151c:	0c1b      	lsrs	r3, r3, #16
 801151e:	2010      	movs	r0, #16
 8011520:	b2d9      	uxtb	r1, r3
 8011522:	b909      	cbnz	r1, 8011528 <__lo0bits+0x32>
 8011524:	3008      	adds	r0, #8
 8011526:	0a1b      	lsrs	r3, r3, #8
 8011528:	0719      	lsls	r1, r3, #28
 801152a:	bf04      	itt	eq
 801152c:	091b      	lsreq	r3, r3, #4
 801152e:	3004      	addeq	r0, #4
 8011530:	0799      	lsls	r1, r3, #30
 8011532:	bf04      	itt	eq
 8011534:	089b      	lsreq	r3, r3, #2
 8011536:	3002      	addeq	r0, #2
 8011538:	07d9      	lsls	r1, r3, #31
 801153a:	d403      	bmi.n	8011544 <__lo0bits+0x4e>
 801153c:	085b      	lsrs	r3, r3, #1
 801153e:	f100 0001 	add.w	r0, r0, #1
 8011542:	d003      	beq.n	801154c <__lo0bits+0x56>
 8011544:	6013      	str	r3, [r2, #0]
 8011546:	4770      	bx	lr
 8011548:	2000      	movs	r0, #0
 801154a:	4770      	bx	lr
 801154c:	2020      	movs	r0, #32
 801154e:	4770      	bx	lr

08011550 <__i2b>:
 8011550:	b510      	push	{r4, lr}
 8011552:	460c      	mov	r4, r1
 8011554:	2101      	movs	r1, #1
 8011556:	f7ff ff07 	bl	8011368 <_Balloc>
 801155a:	4602      	mov	r2, r0
 801155c:	b928      	cbnz	r0, 801156a <__i2b+0x1a>
 801155e:	4b05      	ldr	r3, [pc, #20]	@ (8011574 <__i2b+0x24>)
 8011560:	4805      	ldr	r0, [pc, #20]	@ (8011578 <__i2b+0x28>)
 8011562:	f240 1145 	movw	r1, #325	@ 0x145
 8011566:	f000 fca7 	bl	8011eb8 <__assert_func>
 801156a:	2301      	movs	r3, #1
 801156c:	6144      	str	r4, [r0, #20]
 801156e:	6103      	str	r3, [r0, #16]
 8011570:	bd10      	pop	{r4, pc}
 8011572:	bf00      	nop
 8011574:	080134fc 	.word	0x080134fc
 8011578:	0801350d 	.word	0x0801350d

0801157c <__multiply>:
 801157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011580:	4617      	mov	r7, r2
 8011582:	690a      	ldr	r2, [r1, #16]
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	429a      	cmp	r2, r3
 8011588:	bfa8      	it	ge
 801158a:	463b      	movge	r3, r7
 801158c:	4689      	mov	r9, r1
 801158e:	bfa4      	itt	ge
 8011590:	460f      	movge	r7, r1
 8011592:	4699      	movge	r9, r3
 8011594:	693d      	ldr	r5, [r7, #16]
 8011596:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	6879      	ldr	r1, [r7, #4]
 801159e:	eb05 060a 	add.w	r6, r5, sl
 80115a2:	42b3      	cmp	r3, r6
 80115a4:	b085      	sub	sp, #20
 80115a6:	bfb8      	it	lt
 80115a8:	3101      	addlt	r1, #1
 80115aa:	f7ff fedd 	bl	8011368 <_Balloc>
 80115ae:	b930      	cbnz	r0, 80115be <__multiply+0x42>
 80115b0:	4602      	mov	r2, r0
 80115b2:	4b41      	ldr	r3, [pc, #260]	@ (80116b8 <__multiply+0x13c>)
 80115b4:	4841      	ldr	r0, [pc, #260]	@ (80116bc <__multiply+0x140>)
 80115b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80115ba:	f000 fc7d 	bl	8011eb8 <__assert_func>
 80115be:	f100 0414 	add.w	r4, r0, #20
 80115c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80115c6:	4623      	mov	r3, r4
 80115c8:	2200      	movs	r2, #0
 80115ca:	4573      	cmp	r3, lr
 80115cc:	d320      	bcc.n	8011610 <__multiply+0x94>
 80115ce:	f107 0814 	add.w	r8, r7, #20
 80115d2:	f109 0114 	add.w	r1, r9, #20
 80115d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80115da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80115de:	9302      	str	r3, [sp, #8]
 80115e0:	1beb      	subs	r3, r5, r7
 80115e2:	3b15      	subs	r3, #21
 80115e4:	f023 0303 	bic.w	r3, r3, #3
 80115e8:	3304      	adds	r3, #4
 80115ea:	3715      	adds	r7, #21
 80115ec:	42bd      	cmp	r5, r7
 80115ee:	bf38      	it	cc
 80115f0:	2304      	movcc	r3, #4
 80115f2:	9301      	str	r3, [sp, #4]
 80115f4:	9b02      	ldr	r3, [sp, #8]
 80115f6:	9103      	str	r1, [sp, #12]
 80115f8:	428b      	cmp	r3, r1
 80115fa:	d80c      	bhi.n	8011616 <__multiply+0x9a>
 80115fc:	2e00      	cmp	r6, #0
 80115fe:	dd03      	ble.n	8011608 <__multiply+0x8c>
 8011600:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011604:	2b00      	cmp	r3, #0
 8011606:	d055      	beq.n	80116b4 <__multiply+0x138>
 8011608:	6106      	str	r6, [r0, #16]
 801160a:	b005      	add	sp, #20
 801160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011610:	f843 2b04 	str.w	r2, [r3], #4
 8011614:	e7d9      	b.n	80115ca <__multiply+0x4e>
 8011616:	f8b1 a000 	ldrh.w	sl, [r1]
 801161a:	f1ba 0f00 	cmp.w	sl, #0
 801161e:	d01f      	beq.n	8011660 <__multiply+0xe4>
 8011620:	46c4      	mov	ip, r8
 8011622:	46a1      	mov	r9, r4
 8011624:	2700      	movs	r7, #0
 8011626:	f85c 2b04 	ldr.w	r2, [ip], #4
 801162a:	f8d9 3000 	ldr.w	r3, [r9]
 801162e:	fa1f fb82 	uxth.w	fp, r2
 8011632:	b29b      	uxth	r3, r3
 8011634:	fb0a 330b 	mla	r3, sl, fp, r3
 8011638:	443b      	add	r3, r7
 801163a:	f8d9 7000 	ldr.w	r7, [r9]
 801163e:	0c12      	lsrs	r2, r2, #16
 8011640:	0c3f      	lsrs	r7, r7, #16
 8011642:	fb0a 7202 	mla	r2, sl, r2, r7
 8011646:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801164a:	b29b      	uxth	r3, r3
 801164c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011650:	4565      	cmp	r5, ip
 8011652:	f849 3b04 	str.w	r3, [r9], #4
 8011656:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801165a:	d8e4      	bhi.n	8011626 <__multiply+0xaa>
 801165c:	9b01      	ldr	r3, [sp, #4]
 801165e:	50e7      	str	r7, [r4, r3]
 8011660:	9b03      	ldr	r3, [sp, #12]
 8011662:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011666:	3104      	adds	r1, #4
 8011668:	f1b9 0f00 	cmp.w	r9, #0
 801166c:	d020      	beq.n	80116b0 <__multiply+0x134>
 801166e:	6823      	ldr	r3, [r4, #0]
 8011670:	4647      	mov	r7, r8
 8011672:	46a4      	mov	ip, r4
 8011674:	f04f 0a00 	mov.w	sl, #0
 8011678:	f8b7 b000 	ldrh.w	fp, [r7]
 801167c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011680:	fb09 220b 	mla	r2, r9, fp, r2
 8011684:	4452      	add	r2, sl
 8011686:	b29b      	uxth	r3, r3
 8011688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801168c:	f84c 3b04 	str.w	r3, [ip], #4
 8011690:	f857 3b04 	ldr.w	r3, [r7], #4
 8011694:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011698:	f8bc 3000 	ldrh.w	r3, [ip]
 801169c:	fb09 330a 	mla	r3, r9, sl, r3
 80116a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80116a4:	42bd      	cmp	r5, r7
 80116a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116aa:	d8e5      	bhi.n	8011678 <__multiply+0xfc>
 80116ac:	9a01      	ldr	r2, [sp, #4]
 80116ae:	50a3      	str	r3, [r4, r2]
 80116b0:	3404      	adds	r4, #4
 80116b2:	e79f      	b.n	80115f4 <__multiply+0x78>
 80116b4:	3e01      	subs	r6, #1
 80116b6:	e7a1      	b.n	80115fc <__multiply+0x80>
 80116b8:	080134fc 	.word	0x080134fc
 80116bc:	0801350d 	.word	0x0801350d

080116c0 <__pow5mult>:
 80116c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116c4:	4615      	mov	r5, r2
 80116c6:	f012 0203 	ands.w	r2, r2, #3
 80116ca:	4607      	mov	r7, r0
 80116cc:	460e      	mov	r6, r1
 80116ce:	d007      	beq.n	80116e0 <__pow5mult+0x20>
 80116d0:	4c25      	ldr	r4, [pc, #148]	@ (8011768 <__pow5mult+0xa8>)
 80116d2:	3a01      	subs	r2, #1
 80116d4:	2300      	movs	r3, #0
 80116d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80116da:	f7ff fea7 	bl	801142c <__multadd>
 80116de:	4606      	mov	r6, r0
 80116e0:	10ad      	asrs	r5, r5, #2
 80116e2:	d03d      	beq.n	8011760 <__pow5mult+0xa0>
 80116e4:	69fc      	ldr	r4, [r7, #28]
 80116e6:	b97c      	cbnz	r4, 8011708 <__pow5mult+0x48>
 80116e8:	2010      	movs	r0, #16
 80116ea:	f7ff fd87 	bl	80111fc <malloc>
 80116ee:	4602      	mov	r2, r0
 80116f0:	61f8      	str	r0, [r7, #28]
 80116f2:	b928      	cbnz	r0, 8011700 <__pow5mult+0x40>
 80116f4:	4b1d      	ldr	r3, [pc, #116]	@ (801176c <__pow5mult+0xac>)
 80116f6:	481e      	ldr	r0, [pc, #120]	@ (8011770 <__pow5mult+0xb0>)
 80116f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80116fc:	f000 fbdc 	bl	8011eb8 <__assert_func>
 8011700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011704:	6004      	str	r4, [r0, #0]
 8011706:	60c4      	str	r4, [r0, #12]
 8011708:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801170c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011710:	b94c      	cbnz	r4, 8011726 <__pow5mult+0x66>
 8011712:	f240 2171 	movw	r1, #625	@ 0x271
 8011716:	4638      	mov	r0, r7
 8011718:	f7ff ff1a 	bl	8011550 <__i2b>
 801171c:	2300      	movs	r3, #0
 801171e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011722:	4604      	mov	r4, r0
 8011724:	6003      	str	r3, [r0, #0]
 8011726:	f04f 0900 	mov.w	r9, #0
 801172a:	07eb      	lsls	r3, r5, #31
 801172c:	d50a      	bpl.n	8011744 <__pow5mult+0x84>
 801172e:	4631      	mov	r1, r6
 8011730:	4622      	mov	r2, r4
 8011732:	4638      	mov	r0, r7
 8011734:	f7ff ff22 	bl	801157c <__multiply>
 8011738:	4631      	mov	r1, r6
 801173a:	4680      	mov	r8, r0
 801173c:	4638      	mov	r0, r7
 801173e:	f7ff fe53 	bl	80113e8 <_Bfree>
 8011742:	4646      	mov	r6, r8
 8011744:	106d      	asrs	r5, r5, #1
 8011746:	d00b      	beq.n	8011760 <__pow5mult+0xa0>
 8011748:	6820      	ldr	r0, [r4, #0]
 801174a:	b938      	cbnz	r0, 801175c <__pow5mult+0x9c>
 801174c:	4622      	mov	r2, r4
 801174e:	4621      	mov	r1, r4
 8011750:	4638      	mov	r0, r7
 8011752:	f7ff ff13 	bl	801157c <__multiply>
 8011756:	6020      	str	r0, [r4, #0]
 8011758:	f8c0 9000 	str.w	r9, [r0]
 801175c:	4604      	mov	r4, r0
 801175e:	e7e4      	b.n	801172a <__pow5mult+0x6a>
 8011760:	4630      	mov	r0, r6
 8011762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011766:	bf00      	nop
 8011768:	080135c0 	.word	0x080135c0
 801176c:	0801348d 	.word	0x0801348d
 8011770:	0801350d 	.word	0x0801350d

08011774 <__lshift>:
 8011774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011778:	460c      	mov	r4, r1
 801177a:	6849      	ldr	r1, [r1, #4]
 801177c:	6923      	ldr	r3, [r4, #16]
 801177e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011782:	68a3      	ldr	r3, [r4, #8]
 8011784:	4607      	mov	r7, r0
 8011786:	4691      	mov	r9, r2
 8011788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801178c:	f108 0601 	add.w	r6, r8, #1
 8011790:	42b3      	cmp	r3, r6
 8011792:	db0b      	blt.n	80117ac <__lshift+0x38>
 8011794:	4638      	mov	r0, r7
 8011796:	f7ff fde7 	bl	8011368 <_Balloc>
 801179a:	4605      	mov	r5, r0
 801179c:	b948      	cbnz	r0, 80117b2 <__lshift+0x3e>
 801179e:	4602      	mov	r2, r0
 80117a0:	4b28      	ldr	r3, [pc, #160]	@ (8011844 <__lshift+0xd0>)
 80117a2:	4829      	ldr	r0, [pc, #164]	@ (8011848 <__lshift+0xd4>)
 80117a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80117a8:	f000 fb86 	bl	8011eb8 <__assert_func>
 80117ac:	3101      	adds	r1, #1
 80117ae:	005b      	lsls	r3, r3, #1
 80117b0:	e7ee      	b.n	8011790 <__lshift+0x1c>
 80117b2:	2300      	movs	r3, #0
 80117b4:	f100 0114 	add.w	r1, r0, #20
 80117b8:	f100 0210 	add.w	r2, r0, #16
 80117bc:	4618      	mov	r0, r3
 80117be:	4553      	cmp	r3, sl
 80117c0:	db33      	blt.n	801182a <__lshift+0xb6>
 80117c2:	6920      	ldr	r0, [r4, #16]
 80117c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80117c8:	f104 0314 	add.w	r3, r4, #20
 80117cc:	f019 091f 	ands.w	r9, r9, #31
 80117d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80117d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80117d8:	d02b      	beq.n	8011832 <__lshift+0xbe>
 80117da:	f1c9 0e20 	rsb	lr, r9, #32
 80117de:	468a      	mov	sl, r1
 80117e0:	2200      	movs	r2, #0
 80117e2:	6818      	ldr	r0, [r3, #0]
 80117e4:	fa00 f009 	lsl.w	r0, r0, r9
 80117e8:	4310      	orrs	r0, r2
 80117ea:	f84a 0b04 	str.w	r0, [sl], #4
 80117ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80117f2:	459c      	cmp	ip, r3
 80117f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80117f8:	d8f3      	bhi.n	80117e2 <__lshift+0x6e>
 80117fa:	ebac 0304 	sub.w	r3, ip, r4
 80117fe:	3b15      	subs	r3, #21
 8011800:	f023 0303 	bic.w	r3, r3, #3
 8011804:	3304      	adds	r3, #4
 8011806:	f104 0015 	add.w	r0, r4, #21
 801180a:	4560      	cmp	r0, ip
 801180c:	bf88      	it	hi
 801180e:	2304      	movhi	r3, #4
 8011810:	50ca      	str	r2, [r1, r3]
 8011812:	b10a      	cbz	r2, 8011818 <__lshift+0xa4>
 8011814:	f108 0602 	add.w	r6, r8, #2
 8011818:	3e01      	subs	r6, #1
 801181a:	4638      	mov	r0, r7
 801181c:	612e      	str	r6, [r5, #16]
 801181e:	4621      	mov	r1, r4
 8011820:	f7ff fde2 	bl	80113e8 <_Bfree>
 8011824:	4628      	mov	r0, r5
 8011826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801182a:	f842 0f04 	str.w	r0, [r2, #4]!
 801182e:	3301      	adds	r3, #1
 8011830:	e7c5      	b.n	80117be <__lshift+0x4a>
 8011832:	3904      	subs	r1, #4
 8011834:	f853 2b04 	ldr.w	r2, [r3], #4
 8011838:	f841 2f04 	str.w	r2, [r1, #4]!
 801183c:	459c      	cmp	ip, r3
 801183e:	d8f9      	bhi.n	8011834 <__lshift+0xc0>
 8011840:	e7ea      	b.n	8011818 <__lshift+0xa4>
 8011842:	bf00      	nop
 8011844:	080134fc 	.word	0x080134fc
 8011848:	0801350d 	.word	0x0801350d

0801184c <__mcmp>:
 801184c:	690a      	ldr	r2, [r1, #16]
 801184e:	4603      	mov	r3, r0
 8011850:	6900      	ldr	r0, [r0, #16]
 8011852:	1a80      	subs	r0, r0, r2
 8011854:	b530      	push	{r4, r5, lr}
 8011856:	d10e      	bne.n	8011876 <__mcmp+0x2a>
 8011858:	3314      	adds	r3, #20
 801185a:	3114      	adds	r1, #20
 801185c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011860:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011864:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011868:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801186c:	4295      	cmp	r5, r2
 801186e:	d003      	beq.n	8011878 <__mcmp+0x2c>
 8011870:	d205      	bcs.n	801187e <__mcmp+0x32>
 8011872:	f04f 30ff 	mov.w	r0, #4294967295
 8011876:	bd30      	pop	{r4, r5, pc}
 8011878:	42a3      	cmp	r3, r4
 801187a:	d3f3      	bcc.n	8011864 <__mcmp+0x18>
 801187c:	e7fb      	b.n	8011876 <__mcmp+0x2a>
 801187e:	2001      	movs	r0, #1
 8011880:	e7f9      	b.n	8011876 <__mcmp+0x2a>
	...

08011884 <__mdiff>:
 8011884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011888:	4689      	mov	r9, r1
 801188a:	4606      	mov	r6, r0
 801188c:	4611      	mov	r1, r2
 801188e:	4648      	mov	r0, r9
 8011890:	4614      	mov	r4, r2
 8011892:	f7ff ffdb 	bl	801184c <__mcmp>
 8011896:	1e05      	subs	r5, r0, #0
 8011898:	d112      	bne.n	80118c0 <__mdiff+0x3c>
 801189a:	4629      	mov	r1, r5
 801189c:	4630      	mov	r0, r6
 801189e:	f7ff fd63 	bl	8011368 <_Balloc>
 80118a2:	4602      	mov	r2, r0
 80118a4:	b928      	cbnz	r0, 80118b2 <__mdiff+0x2e>
 80118a6:	4b3f      	ldr	r3, [pc, #252]	@ (80119a4 <__mdiff+0x120>)
 80118a8:	f240 2137 	movw	r1, #567	@ 0x237
 80118ac:	483e      	ldr	r0, [pc, #248]	@ (80119a8 <__mdiff+0x124>)
 80118ae:	f000 fb03 	bl	8011eb8 <__assert_func>
 80118b2:	2301      	movs	r3, #1
 80118b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118b8:	4610      	mov	r0, r2
 80118ba:	b003      	add	sp, #12
 80118bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c0:	bfbc      	itt	lt
 80118c2:	464b      	movlt	r3, r9
 80118c4:	46a1      	movlt	r9, r4
 80118c6:	4630      	mov	r0, r6
 80118c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80118cc:	bfba      	itte	lt
 80118ce:	461c      	movlt	r4, r3
 80118d0:	2501      	movlt	r5, #1
 80118d2:	2500      	movge	r5, #0
 80118d4:	f7ff fd48 	bl	8011368 <_Balloc>
 80118d8:	4602      	mov	r2, r0
 80118da:	b918      	cbnz	r0, 80118e4 <__mdiff+0x60>
 80118dc:	4b31      	ldr	r3, [pc, #196]	@ (80119a4 <__mdiff+0x120>)
 80118de:	f240 2145 	movw	r1, #581	@ 0x245
 80118e2:	e7e3      	b.n	80118ac <__mdiff+0x28>
 80118e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80118e8:	6926      	ldr	r6, [r4, #16]
 80118ea:	60c5      	str	r5, [r0, #12]
 80118ec:	f109 0310 	add.w	r3, r9, #16
 80118f0:	f109 0514 	add.w	r5, r9, #20
 80118f4:	f104 0e14 	add.w	lr, r4, #20
 80118f8:	f100 0b14 	add.w	fp, r0, #20
 80118fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011900:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	46d9      	mov	r9, fp
 8011908:	f04f 0c00 	mov.w	ip, #0
 801190c:	9b01      	ldr	r3, [sp, #4]
 801190e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011912:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011916:	9301      	str	r3, [sp, #4]
 8011918:	fa1f f38a 	uxth.w	r3, sl
 801191c:	4619      	mov	r1, r3
 801191e:	b283      	uxth	r3, r0
 8011920:	1acb      	subs	r3, r1, r3
 8011922:	0c00      	lsrs	r0, r0, #16
 8011924:	4463      	add	r3, ip
 8011926:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801192a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801192e:	b29b      	uxth	r3, r3
 8011930:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011934:	4576      	cmp	r6, lr
 8011936:	f849 3b04 	str.w	r3, [r9], #4
 801193a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801193e:	d8e5      	bhi.n	801190c <__mdiff+0x88>
 8011940:	1b33      	subs	r3, r6, r4
 8011942:	3b15      	subs	r3, #21
 8011944:	f023 0303 	bic.w	r3, r3, #3
 8011948:	3415      	adds	r4, #21
 801194a:	3304      	adds	r3, #4
 801194c:	42a6      	cmp	r6, r4
 801194e:	bf38      	it	cc
 8011950:	2304      	movcc	r3, #4
 8011952:	441d      	add	r5, r3
 8011954:	445b      	add	r3, fp
 8011956:	461e      	mov	r6, r3
 8011958:	462c      	mov	r4, r5
 801195a:	4544      	cmp	r4, r8
 801195c:	d30e      	bcc.n	801197c <__mdiff+0xf8>
 801195e:	f108 0103 	add.w	r1, r8, #3
 8011962:	1b49      	subs	r1, r1, r5
 8011964:	f021 0103 	bic.w	r1, r1, #3
 8011968:	3d03      	subs	r5, #3
 801196a:	45a8      	cmp	r8, r5
 801196c:	bf38      	it	cc
 801196e:	2100      	movcc	r1, #0
 8011970:	440b      	add	r3, r1
 8011972:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011976:	b191      	cbz	r1, 801199e <__mdiff+0x11a>
 8011978:	6117      	str	r7, [r2, #16]
 801197a:	e79d      	b.n	80118b8 <__mdiff+0x34>
 801197c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011980:	46e6      	mov	lr, ip
 8011982:	0c08      	lsrs	r0, r1, #16
 8011984:	fa1c fc81 	uxtah	ip, ip, r1
 8011988:	4471      	add	r1, lr
 801198a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801198e:	b289      	uxth	r1, r1
 8011990:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011994:	f846 1b04 	str.w	r1, [r6], #4
 8011998:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801199c:	e7dd      	b.n	801195a <__mdiff+0xd6>
 801199e:	3f01      	subs	r7, #1
 80119a0:	e7e7      	b.n	8011972 <__mdiff+0xee>
 80119a2:	bf00      	nop
 80119a4:	080134fc 	.word	0x080134fc
 80119a8:	0801350d 	.word	0x0801350d

080119ac <__d2b>:
 80119ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119b0:	460f      	mov	r7, r1
 80119b2:	2101      	movs	r1, #1
 80119b4:	ec59 8b10 	vmov	r8, r9, d0
 80119b8:	4616      	mov	r6, r2
 80119ba:	f7ff fcd5 	bl	8011368 <_Balloc>
 80119be:	4604      	mov	r4, r0
 80119c0:	b930      	cbnz	r0, 80119d0 <__d2b+0x24>
 80119c2:	4602      	mov	r2, r0
 80119c4:	4b23      	ldr	r3, [pc, #140]	@ (8011a54 <__d2b+0xa8>)
 80119c6:	4824      	ldr	r0, [pc, #144]	@ (8011a58 <__d2b+0xac>)
 80119c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80119cc:	f000 fa74 	bl	8011eb8 <__assert_func>
 80119d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80119d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80119d8:	b10d      	cbz	r5, 80119de <__d2b+0x32>
 80119da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80119de:	9301      	str	r3, [sp, #4]
 80119e0:	f1b8 0300 	subs.w	r3, r8, #0
 80119e4:	d023      	beq.n	8011a2e <__d2b+0x82>
 80119e6:	4668      	mov	r0, sp
 80119e8:	9300      	str	r3, [sp, #0]
 80119ea:	f7ff fd84 	bl	80114f6 <__lo0bits>
 80119ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80119f2:	b1d0      	cbz	r0, 8011a2a <__d2b+0x7e>
 80119f4:	f1c0 0320 	rsb	r3, r0, #32
 80119f8:	fa02 f303 	lsl.w	r3, r2, r3
 80119fc:	430b      	orrs	r3, r1
 80119fe:	40c2      	lsrs	r2, r0
 8011a00:	6163      	str	r3, [r4, #20]
 8011a02:	9201      	str	r2, [sp, #4]
 8011a04:	9b01      	ldr	r3, [sp, #4]
 8011a06:	61a3      	str	r3, [r4, #24]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	bf0c      	ite	eq
 8011a0c:	2201      	moveq	r2, #1
 8011a0e:	2202      	movne	r2, #2
 8011a10:	6122      	str	r2, [r4, #16]
 8011a12:	b1a5      	cbz	r5, 8011a3e <__d2b+0x92>
 8011a14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011a18:	4405      	add	r5, r0
 8011a1a:	603d      	str	r5, [r7, #0]
 8011a1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011a20:	6030      	str	r0, [r6, #0]
 8011a22:	4620      	mov	r0, r4
 8011a24:	b003      	add	sp, #12
 8011a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a2a:	6161      	str	r1, [r4, #20]
 8011a2c:	e7ea      	b.n	8011a04 <__d2b+0x58>
 8011a2e:	a801      	add	r0, sp, #4
 8011a30:	f7ff fd61 	bl	80114f6 <__lo0bits>
 8011a34:	9b01      	ldr	r3, [sp, #4]
 8011a36:	6163      	str	r3, [r4, #20]
 8011a38:	3020      	adds	r0, #32
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	e7e8      	b.n	8011a10 <__d2b+0x64>
 8011a3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011a46:	6038      	str	r0, [r7, #0]
 8011a48:	6918      	ldr	r0, [r3, #16]
 8011a4a:	f7ff fd35 	bl	80114b8 <__hi0bits>
 8011a4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a52:	e7e5      	b.n	8011a20 <__d2b+0x74>
 8011a54:	080134fc 	.word	0x080134fc
 8011a58:	0801350d 	.word	0x0801350d

08011a5c <__ssputs_r>:
 8011a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a60:	688e      	ldr	r6, [r1, #8]
 8011a62:	461f      	mov	r7, r3
 8011a64:	42be      	cmp	r6, r7
 8011a66:	680b      	ldr	r3, [r1, #0]
 8011a68:	4682      	mov	sl, r0
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	4690      	mov	r8, r2
 8011a6e:	d82d      	bhi.n	8011acc <__ssputs_r+0x70>
 8011a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011a78:	d026      	beq.n	8011ac8 <__ssputs_r+0x6c>
 8011a7a:	6965      	ldr	r5, [r4, #20]
 8011a7c:	6909      	ldr	r1, [r1, #16]
 8011a7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a82:	eba3 0901 	sub.w	r9, r3, r1
 8011a86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a8a:	1c7b      	adds	r3, r7, #1
 8011a8c:	444b      	add	r3, r9
 8011a8e:	106d      	asrs	r5, r5, #1
 8011a90:	429d      	cmp	r5, r3
 8011a92:	bf38      	it	cc
 8011a94:	461d      	movcc	r5, r3
 8011a96:	0553      	lsls	r3, r2, #21
 8011a98:	d527      	bpl.n	8011aea <__ssputs_r+0x8e>
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	f7ff fbd8 	bl	8011250 <_malloc_r>
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	b360      	cbz	r0, 8011afe <__ssputs_r+0xa2>
 8011aa4:	6921      	ldr	r1, [r4, #16]
 8011aa6:	464a      	mov	r2, r9
 8011aa8:	f7fe fcf5 	bl	8010496 <memcpy>
 8011aac:	89a3      	ldrh	r3, [r4, #12]
 8011aae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ab6:	81a3      	strh	r3, [r4, #12]
 8011ab8:	6126      	str	r6, [r4, #16]
 8011aba:	6165      	str	r5, [r4, #20]
 8011abc:	444e      	add	r6, r9
 8011abe:	eba5 0509 	sub.w	r5, r5, r9
 8011ac2:	6026      	str	r6, [r4, #0]
 8011ac4:	60a5      	str	r5, [r4, #8]
 8011ac6:	463e      	mov	r6, r7
 8011ac8:	42be      	cmp	r6, r7
 8011aca:	d900      	bls.n	8011ace <__ssputs_r+0x72>
 8011acc:	463e      	mov	r6, r7
 8011ace:	6820      	ldr	r0, [r4, #0]
 8011ad0:	4632      	mov	r2, r6
 8011ad2:	4641      	mov	r1, r8
 8011ad4:	f000 f9c6 	bl	8011e64 <memmove>
 8011ad8:	68a3      	ldr	r3, [r4, #8]
 8011ada:	1b9b      	subs	r3, r3, r6
 8011adc:	60a3      	str	r3, [r4, #8]
 8011ade:	6823      	ldr	r3, [r4, #0]
 8011ae0:	4433      	add	r3, r6
 8011ae2:	6023      	str	r3, [r4, #0]
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aea:	462a      	mov	r2, r5
 8011aec:	f000 fa28 	bl	8011f40 <_realloc_r>
 8011af0:	4606      	mov	r6, r0
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d1e0      	bne.n	8011ab8 <__ssputs_r+0x5c>
 8011af6:	6921      	ldr	r1, [r4, #16]
 8011af8:	4650      	mov	r0, sl
 8011afa:	f7ff fb35 	bl	8011168 <_free_r>
 8011afe:	230c      	movs	r3, #12
 8011b00:	f8ca 3000 	str.w	r3, [sl]
 8011b04:	89a3      	ldrh	r3, [r4, #12]
 8011b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b0a:	81a3      	strh	r3, [r4, #12]
 8011b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b10:	e7e9      	b.n	8011ae6 <__ssputs_r+0x8a>
	...

08011b14 <_svfiprintf_r>:
 8011b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b18:	4698      	mov	r8, r3
 8011b1a:	898b      	ldrh	r3, [r1, #12]
 8011b1c:	061b      	lsls	r3, r3, #24
 8011b1e:	b09d      	sub	sp, #116	@ 0x74
 8011b20:	4607      	mov	r7, r0
 8011b22:	460d      	mov	r5, r1
 8011b24:	4614      	mov	r4, r2
 8011b26:	d510      	bpl.n	8011b4a <_svfiprintf_r+0x36>
 8011b28:	690b      	ldr	r3, [r1, #16]
 8011b2a:	b973      	cbnz	r3, 8011b4a <_svfiprintf_r+0x36>
 8011b2c:	2140      	movs	r1, #64	@ 0x40
 8011b2e:	f7ff fb8f 	bl	8011250 <_malloc_r>
 8011b32:	6028      	str	r0, [r5, #0]
 8011b34:	6128      	str	r0, [r5, #16]
 8011b36:	b930      	cbnz	r0, 8011b46 <_svfiprintf_r+0x32>
 8011b38:	230c      	movs	r3, #12
 8011b3a:	603b      	str	r3, [r7, #0]
 8011b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b40:	b01d      	add	sp, #116	@ 0x74
 8011b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b46:	2340      	movs	r3, #64	@ 0x40
 8011b48:	616b      	str	r3, [r5, #20]
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b4e:	2320      	movs	r3, #32
 8011b50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b58:	2330      	movs	r3, #48	@ 0x30
 8011b5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011cf8 <_svfiprintf_r+0x1e4>
 8011b5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b62:	f04f 0901 	mov.w	r9, #1
 8011b66:	4623      	mov	r3, r4
 8011b68:	469a      	mov	sl, r3
 8011b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b6e:	b10a      	cbz	r2, 8011b74 <_svfiprintf_r+0x60>
 8011b70:	2a25      	cmp	r2, #37	@ 0x25
 8011b72:	d1f9      	bne.n	8011b68 <_svfiprintf_r+0x54>
 8011b74:	ebba 0b04 	subs.w	fp, sl, r4
 8011b78:	d00b      	beq.n	8011b92 <_svfiprintf_r+0x7e>
 8011b7a:	465b      	mov	r3, fp
 8011b7c:	4622      	mov	r2, r4
 8011b7e:	4629      	mov	r1, r5
 8011b80:	4638      	mov	r0, r7
 8011b82:	f7ff ff6b 	bl	8011a5c <__ssputs_r>
 8011b86:	3001      	adds	r0, #1
 8011b88:	f000 80a7 	beq.w	8011cda <_svfiprintf_r+0x1c6>
 8011b8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b8e:	445a      	add	r2, fp
 8011b90:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b92:	f89a 3000 	ldrb.w	r3, [sl]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f000 809f 	beq.w	8011cda <_svfiprintf_r+0x1c6>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ba6:	f10a 0a01 	add.w	sl, sl, #1
 8011baa:	9304      	str	r3, [sp, #16]
 8011bac:	9307      	str	r3, [sp, #28]
 8011bae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011bb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011bb4:	4654      	mov	r4, sl
 8011bb6:	2205      	movs	r2, #5
 8011bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bbc:	484e      	ldr	r0, [pc, #312]	@ (8011cf8 <_svfiprintf_r+0x1e4>)
 8011bbe:	f7ee fb0f 	bl	80001e0 <memchr>
 8011bc2:	9a04      	ldr	r2, [sp, #16]
 8011bc4:	b9d8      	cbnz	r0, 8011bfe <_svfiprintf_r+0xea>
 8011bc6:	06d0      	lsls	r0, r2, #27
 8011bc8:	bf44      	itt	mi
 8011bca:	2320      	movmi	r3, #32
 8011bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bd0:	0711      	lsls	r1, r2, #28
 8011bd2:	bf44      	itt	mi
 8011bd4:	232b      	movmi	r3, #43	@ 0x2b
 8011bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bda:	f89a 3000 	ldrb.w	r3, [sl]
 8011bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8011be0:	d015      	beq.n	8011c0e <_svfiprintf_r+0xfa>
 8011be2:	9a07      	ldr	r2, [sp, #28]
 8011be4:	4654      	mov	r4, sl
 8011be6:	2000      	movs	r0, #0
 8011be8:	f04f 0c0a 	mov.w	ip, #10
 8011bec:	4621      	mov	r1, r4
 8011bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bf2:	3b30      	subs	r3, #48	@ 0x30
 8011bf4:	2b09      	cmp	r3, #9
 8011bf6:	d94b      	bls.n	8011c90 <_svfiprintf_r+0x17c>
 8011bf8:	b1b0      	cbz	r0, 8011c28 <_svfiprintf_r+0x114>
 8011bfa:	9207      	str	r2, [sp, #28]
 8011bfc:	e014      	b.n	8011c28 <_svfiprintf_r+0x114>
 8011bfe:	eba0 0308 	sub.w	r3, r0, r8
 8011c02:	fa09 f303 	lsl.w	r3, r9, r3
 8011c06:	4313      	orrs	r3, r2
 8011c08:	9304      	str	r3, [sp, #16]
 8011c0a:	46a2      	mov	sl, r4
 8011c0c:	e7d2      	b.n	8011bb4 <_svfiprintf_r+0xa0>
 8011c0e:	9b03      	ldr	r3, [sp, #12]
 8011c10:	1d19      	adds	r1, r3, #4
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	9103      	str	r1, [sp, #12]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	bfbb      	ittet	lt
 8011c1a:	425b      	neglt	r3, r3
 8011c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8011c20:	9307      	strge	r3, [sp, #28]
 8011c22:	9307      	strlt	r3, [sp, #28]
 8011c24:	bfb8      	it	lt
 8011c26:	9204      	strlt	r2, [sp, #16]
 8011c28:	7823      	ldrb	r3, [r4, #0]
 8011c2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c2c:	d10a      	bne.n	8011c44 <_svfiprintf_r+0x130>
 8011c2e:	7863      	ldrb	r3, [r4, #1]
 8011c30:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c32:	d132      	bne.n	8011c9a <_svfiprintf_r+0x186>
 8011c34:	9b03      	ldr	r3, [sp, #12]
 8011c36:	1d1a      	adds	r2, r3, #4
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	9203      	str	r2, [sp, #12]
 8011c3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c40:	3402      	adds	r4, #2
 8011c42:	9305      	str	r3, [sp, #20]
 8011c44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d08 <_svfiprintf_r+0x1f4>
 8011c48:	7821      	ldrb	r1, [r4, #0]
 8011c4a:	2203      	movs	r2, #3
 8011c4c:	4650      	mov	r0, sl
 8011c4e:	f7ee fac7 	bl	80001e0 <memchr>
 8011c52:	b138      	cbz	r0, 8011c64 <_svfiprintf_r+0x150>
 8011c54:	9b04      	ldr	r3, [sp, #16]
 8011c56:	eba0 000a 	sub.w	r0, r0, sl
 8011c5a:	2240      	movs	r2, #64	@ 0x40
 8011c5c:	4082      	lsls	r2, r0
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	3401      	adds	r4, #1
 8011c62:	9304      	str	r3, [sp, #16]
 8011c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c68:	4824      	ldr	r0, [pc, #144]	@ (8011cfc <_svfiprintf_r+0x1e8>)
 8011c6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c6e:	2206      	movs	r2, #6
 8011c70:	f7ee fab6 	bl	80001e0 <memchr>
 8011c74:	2800      	cmp	r0, #0
 8011c76:	d036      	beq.n	8011ce6 <_svfiprintf_r+0x1d2>
 8011c78:	4b21      	ldr	r3, [pc, #132]	@ (8011d00 <_svfiprintf_r+0x1ec>)
 8011c7a:	bb1b      	cbnz	r3, 8011cc4 <_svfiprintf_r+0x1b0>
 8011c7c:	9b03      	ldr	r3, [sp, #12]
 8011c7e:	3307      	adds	r3, #7
 8011c80:	f023 0307 	bic.w	r3, r3, #7
 8011c84:	3308      	adds	r3, #8
 8011c86:	9303      	str	r3, [sp, #12]
 8011c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c8a:	4433      	add	r3, r6
 8011c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c8e:	e76a      	b.n	8011b66 <_svfiprintf_r+0x52>
 8011c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c94:	460c      	mov	r4, r1
 8011c96:	2001      	movs	r0, #1
 8011c98:	e7a8      	b.n	8011bec <_svfiprintf_r+0xd8>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	3401      	adds	r4, #1
 8011c9e:	9305      	str	r3, [sp, #20]
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	f04f 0c0a 	mov.w	ip, #10
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cac:	3a30      	subs	r2, #48	@ 0x30
 8011cae:	2a09      	cmp	r2, #9
 8011cb0:	d903      	bls.n	8011cba <_svfiprintf_r+0x1a6>
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d0c6      	beq.n	8011c44 <_svfiprintf_r+0x130>
 8011cb6:	9105      	str	r1, [sp, #20]
 8011cb8:	e7c4      	b.n	8011c44 <_svfiprintf_r+0x130>
 8011cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	e7f0      	b.n	8011ca6 <_svfiprintf_r+0x192>
 8011cc4:	ab03      	add	r3, sp, #12
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	462a      	mov	r2, r5
 8011cca:	4b0e      	ldr	r3, [pc, #56]	@ (8011d04 <_svfiprintf_r+0x1f0>)
 8011ccc:	a904      	add	r1, sp, #16
 8011cce:	4638      	mov	r0, r7
 8011cd0:	f7fd fe00 	bl	800f8d4 <_printf_float>
 8011cd4:	1c42      	adds	r2, r0, #1
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	d1d6      	bne.n	8011c88 <_svfiprintf_r+0x174>
 8011cda:	89ab      	ldrh	r3, [r5, #12]
 8011cdc:	065b      	lsls	r3, r3, #25
 8011cde:	f53f af2d 	bmi.w	8011b3c <_svfiprintf_r+0x28>
 8011ce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ce4:	e72c      	b.n	8011b40 <_svfiprintf_r+0x2c>
 8011ce6:	ab03      	add	r3, sp, #12
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	462a      	mov	r2, r5
 8011cec:	4b05      	ldr	r3, [pc, #20]	@ (8011d04 <_svfiprintf_r+0x1f0>)
 8011cee:	a904      	add	r1, sp, #16
 8011cf0:	4638      	mov	r0, r7
 8011cf2:	f7fe f887 	bl	800fe04 <_printf_i>
 8011cf6:	e7ed      	b.n	8011cd4 <_svfiprintf_r+0x1c0>
 8011cf8:	08013566 	.word	0x08013566
 8011cfc:	08013570 	.word	0x08013570
 8011d00:	0800f8d5 	.word	0x0800f8d5
 8011d04:	08011a5d 	.word	0x08011a5d
 8011d08:	0801356c 	.word	0x0801356c

08011d0c <__sflush_r>:
 8011d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d14:	0716      	lsls	r6, r2, #28
 8011d16:	4605      	mov	r5, r0
 8011d18:	460c      	mov	r4, r1
 8011d1a:	d454      	bmi.n	8011dc6 <__sflush_r+0xba>
 8011d1c:	684b      	ldr	r3, [r1, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	dc02      	bgt.n	8011d28 <__sflush_r+0x1c>
 8011d22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	dd48      	ble.n	8011dba <__sflush_r+0xae>
 8011d28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d2a:	2e00      	cmp	r6, #0
 8011d2c:	d045      	beq.n	8011dba <__sflush_r+0xae>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011d34:	682f      	ldr	r7, [r5, #0]
 8011d36:	6a21      	ldr	r1, [r4, #32]
 8011d38:	602b      	str	r3, [r5, #0]
 8011d3a:	d030      	beq.n	8011d9e <__sflush_r+0x92>
 8011d3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011d3e:	89a3      	ldrh	r3, [r4, #12]
 8011d40:	0759      	lsls	r1, r3, #29
 8011d42:	d505      	bpl.n	8011d50 <__sflush_r+0x44>
 8011d44:	6863      	ldr	r3, [r4, #4]
 8011d46:	1ad2      	subs	r2, r2, r3
 8011d48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011d4a:	b10b      	cbz	r3, 8011d50 <__sflush_r+0x44>
 8011d4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011d4e:	1ad2      	subs	r2, r2, r3
 8011d50:	2300      	movs	r3, #0
 8011d52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d54:	6a21      	ldr	r1, [r4, #32]
 8011d56:	4628      	mov	r0, r5
 8011d58:	47b0      	blx	r6
 8011d5a:	1c43      	adds	r3, r0, #1
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	d106      	bne.n	8011d6e <__sflush_r+0x62>
 8011d60:	6829      	ldr	r1, [r5, #0]
 8011d62:	291d      	cmp	r1, #29
 8011d64:	d82b      	bhi.n	8011dbe <__sflush_r+0xb2>
 8011d66:	4a2a      	ldr	r2, [pc, #168]	@ (8011e10 <__sflush_r+0x104>)
 8011d68:	40ca      	lsrs	r2, r1
 8011d6a:	07d6      	lsls	r6, r2, #31
 8011d6c:	d527      	bpl.n	8011dbe <__sflush_r+0xb2>
 8011d6e:	2200      	movs	r2, #0
 8011d70:	6062      	str	r2, [r4, #4]
 8011d72:	04d9      	lsls	r1, r3, #19
 8011d74:	6922      	ldr	r2, [r4, #16]
 8011d76:	6022      	str	r2, [r4, #0]
 8011d78:	d504      	bpl.n	8011d84 <__sflush_r+0x78>
 8011d7a:	1c42      	adds	r2, r0, #1
 8011d7c:	d101      	bne.n	8011d82 <__sflush_r+0x76>
 8011d7e:	682b      	ldr	r3, [r5, #0]
 8011d80:	b903      	cbnz	r3, 8011d84 <__sflush_r+0x78>
 8011d82:	6560      	str	r0, [r4, #84]	@ 0x54
 8011d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d86:	602f      	str	r7, [r5, #0]
 8011d88:	b1b9      	cbz	r1, 8011dba <__sflush_r+0xae>
 8011d8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d8e:	4299      	cmp	r1, r3
 8011d90:	d002      	beq.n	8011d98 <__sflush_r+0x8c>
 8011d92:	4628      	mov	r0, r5
 8011d94:	f7ff f9e8 	bl	8011168 <_free_r>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d9c:	e00d      	b.n	8011dba <__sflush_r+0xae>
 8011d9e:	2301      	movs	r3, #1
 8011da0:	4628      	mov	r0, r5
 8011da2:	47b0      	blx	r6
 8011da4:	4602      	mov	r2, r0
 8011da6:	1c50      	adds	r0, r2, #1
 8011da8:	d1c9      	bne.n	8011d3e <__sflush_r+0x32>
 8011daa:	682b      	ldr	r3, [r5, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d0c6      	beq.n	8011d3e <__sflush_r+0x32>
 8011db0:	2b1d      	cmp	r3, #29
 8011db2:	d001      	beq.n	8011db8 <__sflush_r+0xac>
 8011db4:	2b16      	cmp	r3, #22
 8011db6:	d11e      	bne.n	8011df6 <__sflush_r+0xea>
 8011db8:	602f      	str	r7, [r5, #0]
 8011dba:	2000      	movs	r0, #0
 8011dbc:	e022      	b.n	8011e04 <__sflush_r+0xf8>
 8011dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011dc2:	b21b      	sxth	r3, r3
 8011dc4:	e01b      	b.n	8011dfe <__sflush_r+0xf2>
 8011dc6:	690f      	ldr	r7, [r1, #16]
 8011dc8:	2f00      	cmp	r7, #0
 8011dca:	d0f6      	beq.n	8011dba <__sflush_r+0xae>
 8011dcc:	0793      	lsls	r3, r2, #30
 8011dce:	680e      	ldr	r6, [r1, #0]
 8011dd0:	bf08      	it	eq
 8011dd2:	694b      	ldreq	r3, [r1, #20]
 8011dd4:	600f      	str	r7, [r1, #0]
 8011dd6:	bf18      	it	ne
 8011dd8:	2300      	movne	r3, #0
 8011dda:	eba6 0807 	sub.w	r8, r6, r7
 8011dde:	608b      	str	r3, [r1, #8]
 8011de0:	f1b8 0f00 	cmp.w	r8, #0
 8011de4:	dde9      	ble.n	8011dba <__sflush_r+0xae>
 8011de6:	6a21      	ldr	r1, [r4, #32]
 8011de8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011dea:	4643      	mov	r3, r8
 8011dec:	463a      	mov	r2, r7
 8011dee:	4628      	mov	r0, r5
 8011df0:	47b0      	blx	r6
 8011df2:	2800      	cmp	r0, #0
 8011df4:	dc08      	bgt.n	8011e08 <__sflush_r+0xfc>
 8011df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011dfe:	81a3      	strh	r3, [r4, #12]
 8011e00:	f04f 30ff 	mov.w	r0, #4294967295
 8011e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e08:	4407      	add	r7, r0
 8011e0a:	eba8 0800 	sub.w	r8, r8, r0
 8011e0e:	e7e7      	b.n	8011de0 <__sflush_r+0xd4>
 8011e10:	20400001 	.word	0x20400001

08011e14 <_fflush_r>:
 8011e14:	b538      	push	{r3, r4, r5, lr}
 8011e16:	690b      	ldr	r3, [r1, #16]
 8011e18:	4605      	mov	r5, r0
 8011e1a:	460c      	mov	r4, r1
 8011e1c:	b913      	cbnz	r3, 8011e24 <_fflush_r+0x10>
 8011e1e:	2500      	movs	r5, #0
 8011e20:	4628      	mov	r0, r5
 8011e22:	bd38      	pop	{r3, r4, r5, pc}
 8011e24:	b118      	cbz	r0, 8011e2e <_fflush_r+0x1a>
 8011e26:	6a03      	ldr	r3, [r0, #32]
 8011e28:	b90b      	cbnz	r3, 8011e2e <_fflush_r+0x1a>
 8011e2a:	f7fe f995 	bl	8010158 <__sinit>
 8011e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d0f3      	beq.n	8011e1e <_fflush_r+0xa>
 8011e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011e38:	07d0      	lsls	r0, r2, #31
 8011e3a:	d404      	bmi.n	8011e46 <_fflush_r+0x32>
 8011e3c:	0599      	lsls	r1, r3, #22
 8011e3e:	d402      	bmi.n	8011e46 <_fflush_r+0x32>
 8011e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e42:	f7fe fb26 	bl	8010492 <__retarget_lock_acquire_recursive>
 8011e46:	4628      	mov	r0, r5
 8011e48:	4621      	mov	r1, r4
 8011e4a:	f7ff ff5f 	bl	8011d0c <__sflush_r>
 8011e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e50:	07da      	lsls	r2, r3, #31
 8011e52:	4605      	mov	r5, r0
 8011e54:	d4e4      	bmi.n	8011e20 <_fflush_r+0xc>
 8011e56:	89a3      	ldrh	r3, [r4, #12]
 8011e58:	059b      	lsls	r3, r3, #22
 8011e5a:	d4e1      	bmi.n	8011e20 <_fflush_r+0xc>
 8011e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e5e:	f7fe fb19 	bl	8010494 <__retarget_lock_release_recursive>
 8011e62:	e7dd      	b.n	8011e20 <_fflush_r+0xc>

08011e64 <memmove>:
 8011e64:	4288      	cmp	r0, r1
 8011e66:	b510      	push	{r4, lr}
 8011e68:	eb01 0402 	add.w	r4, r1, r2
 8011e6c:	d902      	bls.n	8011e74 <memmove+0x10>
 8011e6e:	4284      	cmp	r4, r0
 8011e70:	4623      	mov	r3, r4
 8011e72:	d807      	bhi.n	8011e84 <memmove+0x20>
 8011e74:	1e43      	subs	r3, r0, #1
 8011e76:	42a1      	cmp	r1, r4
 8011e78:	d008      	beq.n	8011e8c <memmove+0x28>
 8011e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e82:	e7f8      	b.n	8011e76 <memmove+0x12>
 8011e84:	4402      	add	r2, r0
 8011e86:	4601      	mov	r1, r0
 8011e88:	428a      	cmp	r2, r1
 8011e8a:	d100      	bne.n	8011e8e <memmove+0x2a>
 8011e8c:	bd10      	pop	{r4, pc}
 8011e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e96:	e7f7      	b.n	8011e88 <memmove+0x24>

08011e98 <_sbrk_r>:
 8011e98:	b538      	push	{r3, r4, r5, lr}
 8011e9a:	4d06      	ldr	r5, [pc, #24]	@ (8011eb4 <_sbrk_r+0x1c>)
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	4608      	mov	r0, r1
 8011ea2:	602b      	str	r3, [r5, #0]
 8011ea4:	f7f2 f9e0 	bl	8004268 <_sbrk>
 8011ea8:	1c43      	adds	r3, r0, #1
 8011eaa:	d102      	bne.n	8011eb2 <_sbrk_r+0x1a>
 8011eac:	682b      	ldr	r3, [r5, #0]
 8011eae:	b103      	cbz	r3, 8011eb2 <_sbrk_r+0x1a>
 8011eb0:	6023      	str	r3, [r4, #0]
 8011eb2:	bd38      	pop	{r3, r4, r5, pc}
 8011eb4:	20005f94 	.word	0x20005f94

08011eb8 <__assert_func>:
 8011eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011eba:	4614      	mov	r4, r2
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	4b09      	ldr	r3, [pc, #36]	@ (8011ee4 <__assert_func+0x2c>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	4605      	mov	r5, r0
 8011ec4:	68d8      	ldr	r0, [r3, #12]
 8011ec6:	b14c      	cbz	r4, 8011edc <__assert_func+0x24>
 8011ec8:	4b07      	ldr	r3, [pc, #28]	@ (8011ee8 <__assert_func+0x30>)
 8011eca:	9100      	str	r1, [sp, #0]
 8011ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ed0:	4906      	ldr	r1, [pc, #24]	@ (8011eec <__assert_func+0x34>)
 8011ed2:	462b      	mov	r3, r5
 8011ed4:	f000 f870 	bl	8011fb8 <fiprintf>
 8011ed8:	f000 f880 	bl	8011fdc <abort>
 8011edc:	4b04      	ldr	r3, [pc, #16]	@ (8011ef0 <__assert_func+0x38>)
 8011ede:	461c      	mov	r4, r3
 8011ee0:	e7f3      	b.n	8011eca <__assert_func+0x12>
 8011ee2:	bf00      	nop
 8011ee4:	20000088 	.word	0x20000088
 8011ee8:	08013581 	.word	0x08013581
 8011eec:	0801358e 	.word	0x0801358e
 8011ef0:	080135bc 	.word	0x080135bc

08011ef4 <_calloc_r>:
 8011ef4:	b570      	push	{r4, r5, r6, lr}
 8011ef6:	fba1 5402 	umull	r5, r4, r1, r2
 8011efa:	b934      	cbnz	r4, 8011f0a <_calloc_r+0x16>
 8011efc:	4629      	mov	r1, r5
 8011efe:	f7ff f9a7 	bl	8011250 <_malloc_r>
 8011f02:	4606      	mov	r6, r0
 8011f04:	b928      	cbnz	r0, 8011f12 <_calloc_r+0x1e>
 8011f06:	4630      	mov	r0, r6
 8011f08:	bd70      	pop	{r4, r5, r6, pc}
 8011f0a:	220c      	movs	r2, #12
 8011f0c:	6002      	str	r2, [r0, #0]
 8011f0e:	2600      	movs	r6, #0
 8011f10:	e7f9      	b.n	8011f06 <_calloc_r+0x12>
 8011f12:	462a      	mov	r2, r5
 8011f14:	4621      	mov	r1, r4
 8011f16:	f7fe f9ce 	bl	80102b6 <memset>
 8011f1a:	e7f4      	b.n	8011f06 <_calloc_r+0x12>

08011f1c <__ascii_mbtowc>:
 8011f1c:	b082      	sub	sp, #8
 8011f1e:	b901      	cbnz	r1, 8011f22 <__ascii_mbtowc+0x6>
 8011f20:	a901      	add	r1, sp, #4
 8011f22:	b142      	cbz	r2, 8011f36 <__ascii_mbtowc+0x1a>
 8011f24:	b14b      	cbz	r3, 8011f3a <__ascii_mbtowc+0x1e>
 8011f26:	7813      	ldrb	r3, [r2, #0]
 8011f28:	600b      	str	r3, [r1, #0]
 8011f2a:	7812      	ldrb	r2, [r2, #0]
 8011f2c:	1e10      	subs	r0, r2, #0
 8011f2e:	bf18      	it	ne
 8011f30:	2001      	movne	r0, #1
 8011f32:	b002      	add	sp, #8
 8011f34:	4770      	bx	lr
 8011f36:	4610      	mov	r0, r2
 8011f38:	e7fb      	b.n	8011f32 <__ascii_mbtowc+0x16>
 8011f3a:	f06f 0001 	mvn.w	r0, #1
 8011f3e:	e7f8      	b.n	8011f32 <__ascii_mbtowc+0x16>

08011f40 <_realloc_r>:
 8011f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f44:	4607      	mov	r7, r0
 8011f46:	4614      	mov	r4, r2
 8011f48:	460d      	mov	r5, r1
 8011f4a:	b921      	cbnz	r1, 8011f56 <_realloc_r+0x16>
 8011f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f50:	4611      	mov	r1, r2
 8011f52:	f7ff b97d 	b.w	8011250 <_malloc_r>
 8011f56:	b92a      	cbnz	r2, 8011f64 <_realloc_r+0x24>
 8011f58:	f7ff f906 	bl	8011168 <_free_r>
 8011f5c:	4625      	mov	r5, r4
 8011f5e:	4628      	mov	r0, r5
 8011f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f64:	f000 f841 	bl	8011fea <_malloc_usable_size_r>
 8011f68:	4284      	cmp	r4, r0
 8011f6a:	4606      	mov	r6, r0
 8011f6c:	d802      	bhi.n	8011f74 <_realloc_r+0x34>
 8011f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011f72:	d8f4      	bhi.n	8011f5e <_realloc_r+0x1e>
 8011f74:	4621      	mov	r1, r4
 8011f76:	4638      	mov	r0, r7
 8011f78:	f7ff f96a 	bl	8011250 <_malloc_r>
 8011f7c:	4680      	mov	r8, r0
 8011f7e:	b908      	cbnz	r0, 8011f84 <_realloc_r+0x44>
 8011f80:	4645      	mov	r5, r8
 8011f82:	e7ec      	b.n	8011f5e <_realloc_r+0x1e>
 8011f84:	42b4      	cmp	r4, r6
 8011f86:	4622      	mov	r2, r4
 8011f88:	4629      	mov	r1, r5
 8011f8a:	bf28      	it	cs
 8011f8c:	4632      	movcs	r2, r6
 8011f8e:	f7fe fa82 	bl	8010496 <memcpy>
 8011f92:	4629      	mov	r1, r5
 8011f94:	4638      	mov	r0, r7
 8011f96:	f7ff f8e7 	bl	8011168 <_free_r>
 8011f9a:	e7f1      	b.n	8011f80 <_realloc_r+0x40>

08011f9c <__ascii_wctomb>:
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	4608      	mov	r0, r1
 8011fa0:	b141      	cbz	r1, 8011fb4 <__ascii_wctomb+0x18>
 8011fa2:	2aff      	cmp	r2, #255	@ 0xff
 8011fa4:	d904      	bls.n	8011fb0 <__ascii_wctomb+0x14>
 8011fa6:	228a      	movs	r2, #138	@ 0x8a
 8011fa8:	601a      	str	r2, [r3, #0]
 8011faa:	f04f 30ff 	mov.w	r0, #4294967295
 8011fae:	4770      	bx	lr
 8011fb0:	700a      	strb	r2, [r1, #0]
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	4770      	bx	lr
	...

08011fb8 <fiprintf>:
 8011fb8:	b40e      	push	{r1, r2, r3}
 8011fba:	b503      	push	{r0, r1, lr}
 8011fbc:	4601      	mov	r1, r0
 8011fbe:	ab03      	add	r3, sp, #12
 8011fc0:	4805      	ldr	r0, [pc, #20]	@ (8011fd8 <fiprintf+0x20>)
 8011fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fc6:	6800      	ldr	r0, [r0, #0]
 8011fc8:	9301      	str	r3, [sp, #4]
 8011fca:	f000 f83f 	bl	801204c <_vfiprintf_r>
 8011fce:	b002      	add	sp, #8
 8011fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fd4:	b003      	add	sp, #12
 8011fd6:	4770      	bx	lr
 8011fd8:	20000088 	.word	0x20000088

08011fdc <abort>:
 8011fdc:	b508      	push	{r3, lr}
 8011fde:	2006      	movs	r0, #6
 8011fe0:	f000 fa08 	bl	80123f4 <raise>
 8011fe4:	2001      	movs	r0, #1
 8011fe6:	f7f2 f8c7 	bl	8004178 <_exit>

08011fea <_malloc_usable_size_r>:
 8011fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fee:	1f18      	subs	r0, r3, #4
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	bfbc      	itt	lt
 8011ff4:	580b      	ldrlt	r3, [r1, r0]
 8011ff6:	18c0      	addlt	r0, r0, r3
 8011ff8:	4770      	bx	lr

08011ffa <__sfputc_r>:
 8011ffa:	6893      	ldr	r3, [r2, #8]
 8011ffc:	3b01      	subs	r3, #1
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	b410      	push	{r4}
 8012002:	6093      	str	r3, [r2, #8]
 8012004:	da08      	bge.n	8012018 <__sfputc_r+0x1e>
 8012006:	6994      	ldr	r4, [r2, #24]
 8012008:	42a3      	cmp	r3, r4
 801200a:	db01      	blt.n	8012010 <__sfputc_r+0x16>
 801200c:	290a      	cmp	r1, #10
 801200e:	d103      	bne.n	8012018 <__sfputc_r+0x1e>
 8012010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012014:	f000 b932 	b.w	801227c <__swbuf_r>
 8012018:	6813      	ldr	r3, [r2, #0]
 801201a:	1c58      	adds	r0, r3, #1
 801201c:	6010      	str	r0, [r2, #0]
 801201e:	7019      	strb	r1, [r3, #0]
 8012020:	4608      	mov	r0, r1
 8012022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012026:	4770      	bx	lr

08012028 <__sfputs_r>:
 8012028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801202a:	4606      	mov	r6, r0
 801202c:	460f      	mov	r7, r1
 801202e:	4614      	mov	r4, r2
 8012030:	18d5      	adds	r5, r2, r3
 8012032:	42ac      	cmp	r4, r5
 8012034:	d101      	bne.n	801203a <__sfputs_r+0x12>
 8012036:	2000      	movs	r0, #0
 8012038:	e007      	b.n	801204a <__sfputs_r+0x22>
 801203a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801203e:	463a      	mov	r2, r7
 8012040:	4630      	mov	r0, r6
 8012042:	f7ff ffda 	bl	8011ffa <__sfputc_r>
 8012046:	1c43      	adds	r3, r0, #1
 8012048:	d1f3      	bne.n	8012032 <__sfputs_r+0xa>
 801204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801204c <_vfiprintf_r>:
 801204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012050:	460d      	mov	r5, r1
 8012052:	b09d      	sub	sp, #116	@ 0x74
 8012054:	4614      	mov	r4, r2
 8012056:	4698      	mov	r8, r3
 8012058:	4606      	mov	r6, r0
 801205a:	b118      	cbz	r0, 8012064 <_vfiprintf_r+0x18>
 801205c:	6a03      	ldr	r3, [r0, #32]
 801205e:	b90b      	cbnz	r3, 8012064 <_vfiprintf_r+0x18>
 8012060:	f7fe f87a 	bl	8010158 <__sinit>
 8012064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012066:	07d9      	lsls	r1, r3, #31
 8012068:	d405      	bmi.n	8012076 <_vfiprintf_r+0x2a>
 801206a:	89ab      	ldrh	r3, [r5, #12]
 801206c:	059a      	lsls	r2, r3, #22
 801206e:	d402      	bmi.n	8012076 <_vfiprintf_r+0x2a>
 8012070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012072:	f7fe fa0e 	bl	8010492 <__retarget_lock_acquire_recursive>
 8012076:	89ab      	ldrh	r3, [r5, #12]
 8012078:	071b      	lsls	r3, r3, #28
 801207a:	d501      	bpl.n	8012080 <_vfiprintf_r+0x34>
 801207c:	692b      	ldr	r3, [r5, #16]
 801207e:	b99b      	cbnz	r3, 80120a8 <_vfiprintf_r+0x5c>
 8012080:	4629      	mov	r1, r5
 8012082:	4630      	mov	r0, r6
 8012084:	f000 f938 	bl	80122f8 <__swsetup_r>
 8012088:	b170      	cbz	r0, 80120a8 <_vfiprintf_r+0x5c>
 801208a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801208c:	07dc      	lsls	r4, r3, #31
 801208e:	d504      	bpl.n	801209a <_vfiprintf_r+0x4e>
 8012090:	f04f 30ff 	mov.w	r0, #4294967295
 8012094:	b01d      	add	sp, #116	@ 0x74
 8012096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801209a:	89ab      	ldrh	r3, [r5, #12]
 801209c:	0598      	lsls	r0, r3, #22
 801209e:	d4f7      	bmi.n	8012090 <_vfiprintf_r+0x44>
 80120a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120a2:	f7fe f9f7 	bl	8010494 <__retarget_lock_release_recursive>
 80120a6:	e7f3      	b.n	8012090 <_vfiprintf_r+0x44>
 80120a8:	2300      	movs	r3, #0
 80120aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ac:	2320      	movs	r3, #32
 80120ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80120b6:	2330      	movs	r3, #48	@ 0x30
 80120b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012268 <_vfiprintf_r+0x21c>
 80120bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80120c0:	f04f 0901 	mov.w	r9, #1
 80120c4:	4623      	mov	r3, r4
 80120c6:	469a      	mov	sl, r3
 80120c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120cc:	b10a      	cbz	r2, 80120d2 <_vfiprintf_r+0x86>
 80120ce:	2a25      	cmp	r2, #37	@ 0x25
 80120d0:	d1f9      	bne.n	80120c6 <_vfiprintf_r+0x7a>
 80120d2:	ebba 0b04 	subs.w	fp, sl, r4
 80120d6:	d00b      	beq.n	80120f0 <_vfiprintf_r+0xa4>
 80120d8:	465b      	mov	r3, fp
 80120da:	4622      	mov	r2, r4
 80120dc:	4629      	mov	r1, r5
 80120de:	4630      	mov	r0, r6
 80120e0:	f7ff ffa2 	bl	8012028 <__sfputs_r>
 80120e4:	3001      	adds	r0, #1
 80120e6:	f000 80a7 	beq.w	8012238 <_vfiprintf_r+0x1ec>
 80120ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120ec:	445a      	add	r2, fp
 80120ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80120f0:	f89a 3000 	ldrb.w	r3, [sl]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	f000 809f 	beq.w	8012238 <_vfiprintf_r+0x1ec>
 80120fa:	2300      	movs	r3, #0
 80120fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012104:	f10a 0a01 	add.w	sl, sl, #1
 8012108:	9304      	str	r3, [sp, #16]
 801210a:	9307      	str	r3, [sp, #28]
 801210c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012110:	931a      	str	r3, [sp, #104]	@ 0x68
 8012112:	4654      	mov	r4, sl
 8012114:	2205      	movs	r2, #5
 8012116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801211a:	4853      	ldr	r0, [pc, #332]	@ (8012268 <_vfiprintf_r+0x21c>)
 801211c:	f7ee f860 	bl	80001e0 <memchr>
 8012120:	9a04      	ldr	r2, [sp, #16]
 8012122:	b9d8      	cbnz	r0, 801215c <_vfiprintf_r+0x110>
 8012124:	06d1      	lsls	r1, r2, #27
 8012126:	bf44      	itt	mi
 8012128:	2320      	movmi	r3, #32
 801212a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801212e:	0713      	lsls	r3, r2, #28
 8012130:	bf44      	itt	mi
 8012132:	232b      	movmi	r3, #43	@ 0x2b
 8012134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012138:	f89a 3000 	ldrb.w	r3, [sl]
 801213c:	2b2a      	cmp	r3, #42	@ 0x2a
 801213e:	d015      	beq.n	801216c <_vfiprintf_r+0x120>
 8012140:	9a07      	ldr	r2, [sp, #28]
 8012142:	4654      	mov	r4, sl
 8012144:	2000      	movs	r0, #0
 8012146:	f04f 0c0a 	mov.w	ip, #10
 801214a:	4621      	mov	r1, r4
 801214c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012150:	3b30      	subs	r3, #48	@ 0x30
 8012152:	2b09      	cmp	r3, #9
 8012154:	d94b      	bls.n	80121ee <_vfiprintf_r+0x1a2>
 8012156:	b1b0      	cbz	r0, 8012186 <_vfiprintf_r+0x13a>
 8012158:	9207      	str	r2, [sp, #28]
 801215a:	e014      	b.n	8012186 <_vfiprintf_r+0x13a>
 801215c:	eba0 0308 	sub.w	r3, r0, r8
 8012160:	fa09 f303 	lsl.w	r3, r9, r3
 8012164:	4313      	orrs	r3, r2
 8012166:	9304      	str	r3, [sp, #16]
 8012168:	46a2      	mov	sl, r4
 801216a:	e7d2      	b.n	8012112 <_vfiprintf_r+0xc6>
 801216c:	9b03      	ldr	r3, [sp, #12]
 801216e:	1d19      	adds	r1, r3, #4
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	9103      	str	r1, [sp, #12]
 8012174:	2b00      	cmp	r3, #0
 8012176:	bfbb      	ittet	lt
 8012178:	425b      	neglt	r3, r3
 801217a:	f042 0202 	orrlt.w	r2, r2, #2
 801217e:	9307      	strge	r3, [sp, #28]
 8012180:	9307      	strlt	r3, [sp, #28]
 8012182:	bfb8      	it	lt
 8012184:	9204      	strlt	r2, [sp, #16]
 8012186:	7823      	ldrb	r3, [r4, #0]
 8012188:	2b2e      	cmp	r3, #46	@ 0x2e
 801218a:	d10a      	bne.n	80121a2 <_vfiprintf_r+0x156>
 801218c:	7863      	ldrb	r3, [r4, #1]
 801218e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012190:	d132      	bne.n	80121f8 <_vfiprintf_r+0x1ac>
 8012192:	9b03      	ldr	r3, [sp, #12]
 8012194:	1d1a      	adds	r2, r3, #4
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	9203      	str	r2, [sp, #12]
 801219a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801219e:	3402      	adds	r4, #2
 80121a0:	9305      	str	r3, [sp, #20]
 80121a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012278 <_vfiprintf_r+0x22c>
 80121a6:	7821      	ldrb	r1, [r4, #0]
 80121a8:	2203      	movs	r2, #3
 80121aa:	4650      	mov	r0, sl
 80121ac:	f7ee f818 	bl	80001e0 <memchr>
 80121b0:	b138      	cbz	r0, 80121c2 <_vfiprintf_r+0x176>
 80121b2:	9b04      	ldr	r3, [sp, #16]
 80121b4:	eba0 000a 	sub.w	r0, r0, sl
 80121b8:	2240      	movs	r2, #64	@ 0x40
 80121ba:	4082      	lsls	r2, r0
 80121bc:	4313      	orrs	r3, r2
 80121be:	3401      	adds	r4, #1
 80121c0:	9304      	str	r3, [sp, #16]
 80121c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121c6:	4829      	ldr	r0, [pc, #164]	@ (801226c <_vfiprintf_r+0x220>)
 80121c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121cc:	2206      	movs	r2, #6
 80121ce:	f7ee f807 	bl	80001e0 <memchr>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d03f      	beq.n	8012256 <_vfiprintf_r+0x20a>
 80121d6:	4b26      	ldr	r3, [pc, #152]	@ (8012270 <_vfiprintf_r+0x224>)
 80121d8:	bb1b      	cbnz	r3, 8012222 <_vfiprintf_r+0x1d6>
 80121da:	9b03      	ldr	r3, [sp, #12]
 80121dc:	3307      	adds	r3, #7
 80121de:	f023 0307 	bic.w	r3, r3, #7
 80121e2:	3308      	adds	r3, #8
 80121e4:	9303      	str	r3, [sp, #12]
 80121e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121e8:	443b      	add	r3, r7
 80121ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80121ec:	e76a      	b.n	80120c4 <_vfiprintf_r+0x78>
 80121ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80121f2:	460c      	mov	r4, r1
 80121f4:	2001      	movs	r0, #1
 80121f6:	e7a8      	b.n	801214a <_vfiprintf_r+0xfe>
 80121f8:	2300      	movs	r3, #0
 80121fa:	3401      	adds	r4, #1
 80121fc:	9305      	str	r3, [sp, #20]
 80121fe:	4619      	mov	r1, r3
 8012200:	f04f 0c0a 	mov.w	ip, #10
 8012204:	4620      	mov	r0, r4
 8012206:	f810 2b01 	ldrb.w	r2, [r0], #1
 801220a:	3a30      	subs	r2, #48	@ 0x30
 801220c:	2a09      	cmp	r2, #9
 801220e:	d903      	bls.n	8012218 <_vfiprintf_r+0x1cc>
 8012210:	2b00      	cmp	r3, #0
 8012212:	d0c6      	beq.n	80121a2 <_vfiprintf_r+0x156>
 8012214:	9105      	str	r1, [sp, #20]
 8012216:	e7c4      	b.n	80121a2 <_vfiprintf_r+0x156>
 8012218:	fb0c 2101 	mla	r1, ip, r1, r2
 801221c:	4604      	mov	r4, r0
 801221e:	2301      	movs	r3, #1
 8012220:	e7f0      	b.n	8012204 <_vfiprintf_r+0x1b8>
 8012222:	ab03      	add	r3, sp, #12
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	462a      	mov	r2, r5
 8012228:	4b12      	ldr	r3, [pc, #72]	@ (8012274 <_vfiprintf_r+0x228>)
 801222a:	a904      	add	r1, sp, #16
 801222c:	4630      	mov	r0, r6
 801222e:	f7fd fb51 	bl	800f8d4 <_printf_float>
 8012232:	4607      	mov	r7, r0
 8012234:	1c78      	adds	r0, r7, #1
 8012236:	d1d6      	bne.n	80121e6 <_vfiprintf_r+0x19a>
 8012238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801223a:	07d9      	lsls	r1, r3, #31
 801223c:	d405      	bmi.n	801224a <_vfiprintf_r+0x1fe>
 801223e:	89ab      	ldrh	r3, [r5, #12]
 8012240:	059a      	lsls	r2, r3, #22
 8012242:	d402      	bmi.n	801224a <_vfiprintf_r+0x1fe>
 8012244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012246:	f7fe f925 	bl	8010494 <__retarget_lock_release_recursive>
 801224a:	89ab      	ldrh	r3, [r5, #12]
 801224c:	065b      	lsls	r3, r3, #25
 801224e:	f53f af1f 	bmi.w	8012090 <_vfiprintf_r+0x44>
 8012252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012254:	e71e      	b.n	8012094 <_vfiprintf_r+0x48>
 8012256:	ab03      	add	r3, sp, #12
 8012258:	9300      	str	r3, [sp, #0]
 801225a:	462a      	mov	r2, r5
 801225c:	4b05      	ldr	r3, [pc, #20]	@ (8012274 <_vfiprintf_r+0x228>)
 801225e:	a904      	add	r1, sp, #16
 8012260:	4630      	mov	r0, r6
 8012262:	f7fd fdcf 	bl	800fe04 <_printf_i>
 8012266:	e7e4      	b.n	8012232 <_vfiprintf_r+0x1e6>
 8012268:	08013566 	.word	0x08013566
 801226c:	08013570 	.word	0x08013570
 8012270:	0800f8d5 	.word	0x0800f8d5
 8012274:	08012029 	.word	0x08012029
 8012278:	0801356c 	.word	0x0801356c

0801227c <__swbuf_r>:
 801227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801227e:	460e      	mov	r6, r1
 8012280:	4614      	mov	r4, r2
 8012282:	4605      	mov	r5, r0
 8012284:	b118      	cbz	r0, 801228e <__swbuf_r+0x12>
 8012286:	6a03      	ldr	r3, [r0, #32]
 8012288:	b90b      	cbnz	r3, 801228e <__swbuf_r+0x12>
 801228a:	f7fd ff65 	bl	8010158 <__sinit>
 801228e:	69a3      	ldr	r3, [r4, #24]
 8012290:	60a3      	str	r3, [r4, #8]
 8012292:	89a3      	ldrh	r3, [r4, #12]
 8012294:	071a      	lsls	r2, r3, #28
 8012296:	d501      	bpl.n	801229c <__swbuf_r+0x20>
 8012298:	6923      	ldr	r3, [r4, #16]
 801229a:	b943      	cbnz	r3, 80122ae <__swbuf_r+0x32>
 801229c:	4621      	mov	r1, r4
 801229e:	4628      	mov	r0, r5
 80122a0:	f000 f82a 	bl	80122f8 <__swsetup_r>
 80122a4:	b118      	cbz	r0, 80122ae <__swbuf_r+0x32>
 80122a6:	f04f 37ff 	mov.w	r7, #4294967295
 80122aa:	4638      	mov	r0, r7
 80122ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	6922      	ldr	r2, [r4, #16]
 80122b2:	1a98      	subs	r0, r3, r2
 80122b4:	6963      	ldr	r3, [r4, #20]
 80122b6:	b2f6      	uxtb	r6, r6
 80122b8:	4283      	cmp	r3, r0
 80122ba:	4637      	mov	r7, r6
 80122bc:	dc05      	bgt.n	80122ca <__swbuf_r+0x4e>
 80122be:	4621      	mov	r1, r4
 80122c0:	4628      	mov	r0, r5
 80122c2:	f7ff fda7 	bl	8011e14 <_fflush_r>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d1ed      	bne.n	80122a6 <__swbuf_r+0x2a>
 80122ca:	68a3      	ldr	r3, [r4, #8]
 80122cc:	3b01      	subs	r3, #1
 80122ce:	60a3      	str	r3, [r4, #8]
 80122d0:	6823      	ldr	r3, [r4, #0]
 80122d2:	1c5a      	adds	r2, r3, #1
 80122d4:	6022      	str	r2, [r4, #0]
 80122d6:	701e      	strb	r6, [r3, #0]
 80122d8:	6962      	ldr	r2, [r4, #20]
 80122da:	1c43      	adds	r3, r0, #1
 80122dc:	429a      	cmp	r2, r3
 80122de:	d004      	beq.n	80122ea <__swbuf_r+0x6e>
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	07db      	lsls	r3, r3, #31
 80122e4:	d5e1      	bpl.n	80122aa <__swbuf_r+0x2e>
 80122e6:	2e0a      	cmp	r6, #10
 80122e8:	d1df      	bne.n	80122aa <__swbuf_r+0x2e>
 80122ea:	4621      	mov	r1, r4
 80122ec:	4628      	mov	r0, r5
 80122ee:	f7ff fd91 	bl	8011e14 <_fflush_r>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d0d9      	beq.n	80122aa <__swbuf_r+0x2e>
 80122f6:	e7d6      	b.n	80122a6 <__swbuf_r+0x2a>

080122f8 <__swsetup_r>:
 80122f8:	b538      	push	{r3, r4, r5, lr}
 80122fa:	4b29      	ldr	r3, [pc, #164]	@ (80123a0 <__swsetup_r+0xa8>)
 80122fc:	4605      	mov	r5, r0
 80122fe:	6818      	ldr	r0, [r3, #0]
 8012300:	460c      	mov	r4, r1
 8012302:	b118      	cbz	r0, 801230c <__swsetup_r+0x14>
 8012304:	6a03      	ldr	r3, [r0, #32]
 8012306:	b90b      	cbnz	r3, 801230c <__swsetup_r+0x14>
 8012308:	f7fd ff26 	bl	8010158 <__sinit>
 801230c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012310:	0719      	lsls	r1, r3, #28
 8012312:	d422      	bmi.n	801235a <__swsetup_r+0x62>
 8012314:	06da      	lsls	r2, r3, #27
 8012316:	d407      	bmi.n	8012328 <__swsetup_r+0x30>
 8012318:	2209      	movs	r2, #9
 801231a:	602a      	str	r2, [r5, #0]
 801231c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012320:	81a3      	strh	r3, [r4, #12]
 8012322:	f04f 30ff 	mov.w	r0, #4294967295
 8012326:	e033      	b.n	8012390 <__swsetup_r+0x98>
 8012328:	0758      	lsls	r0, r3, #29
 801232a:	d512      	bpl.n	8012352 <__swsetup_r+0x5a>
 801232c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801232e:	b141      	cbz	r1, 8012342 <__swsetup_r+0x4a>
 8012330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012334:	4299      	cmp	r1, r3
 8012336:	d002      	beq.n	801233e <__swsetup_r+0x46>
 8012338:	4628      	mov	r0, r5
 801233a:	f7fe ff15 	bl	8011168 <_free_r>
 801233e:	2300      	movs	r3, #0
 8012340:	6363      	str	r3, [r4, #52]	@ 0x34
 8012342:	89a3      	ldrh	r3, [r4, #12]
 8012344:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012348:	81a3      	strh	r3, [r4, #12]
 801234a:	2300      	movs	r3, #0
 801234c:	6063      	str	r3, [r4, #4]
 801234e:	6923      	ldr	r3, [r4, #16]
 8012350:	6023      	str	r3, [r4, #0]
 8012352:	89a3      	ldrh	r3, [r4, #12]
 8012354:	f043 0308 	orr.w	r3, r3, #8
 8012358:	81a3      	strh	r3, [r4, #12]
 801235a:	6923      	ldr	r3, [r4, #16]
 801235c:	b94b      	cbnz	r3, 8012372 <__swsetup_r+0x7a>
 801235e:	89a3      	ldrh	r3, [r4, #12]
 8012360:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012368:	d003      	beq.n	8012372 <__swsetup_r+0x7a>
 801236a:	4621      	mov	r1, r4
 801236c:	4628      	mov	r0, r5
 801236e:	f000 f883 	bl	8012478 <__smakebuf_r>
 8012372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012376:	f013 0201 	ands.w	r2, r3, #1
 801237a:	d00a      	beq.n	8012392 <__swsetup_r+0x9a>
 801237c:	2200      	movs	r2, #0
 801237e:	60a2      	str	r2, [r4, #8]
 8012380:	6962      	ldr	r2, [r4, #20]
 8012382:	4252      	negs	r2, r2
 8012384:	61a2      	str	r2, [r4, #24]
 8012386:	6922      	ldr	r2, [r4, #16]
 8012388:	b942      	cbnz	r2, 801239c <__swsetup_r+0xa4>
 801238a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801238e:	d1c5      	bne.n	801231c <__swsetup_r+0x24>
 8012390:	bd38      	pop	{r3, r4, r5, pc}
 8012392:	0799      	lsls	r1, r3, #30
 8012394:	bf58      	it	pl
 8012396:	6962      	ldrpl	r2, [r4, #20]
 8012398:	60a2      	str	r2, [r4, #8]
 801239a:	e7f4      	b.n	8012386 <__swsetup_r+0x8e>
 801239c:	2000      	movs	r0, #0
 801239e:	e7f7      	b.n	8012390 <__swsetup_r+0x98>
 80123a0:	20000088 	.word	0x20000088

080123a4 <_raise_r>:
 80123a4:	291f      	cmp	r1, #31
 80123a6:	b538      	push	{r3, r4, r5, lr}
 80123a8:	4605      	mov	r5, r0
 80123aa:	460c      	mov	r4, r1
 80123ac:	d904      	bls.n	80123b8 <_raise_r+0x14>
 80123ae:	2316      	movs	r3, #22
 80123b0:	6003      	str	r3, [r0, #0]
 80123b2:	f04f 30ff 	mov.w	r0, #4294967295
 80123b6:	bd38      	pop	{r3, r4, r5, pc}
 80123b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80123ba:	b112      	cbz	r2, 80123c2 <_raise_r+0x1e>
 80123bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80123c0:	b94b      	cbnz	r3, 80123d6 <_raise_r+0x32>
 80123c2:	4628      	mov	r0, r5
 80123c4:	f000 f830 	bl	8012428 <_getpid_r>
 80123c8:	4622      	mov	r2, r4
 80123ca:	4601      	mov	r1, r0
 80123cc:	4628      	mov	r0, r5
 80123ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123d2:	f000 b817 	b.w	8012404 <_kill_r>
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d00a      	beq.n	80123f0 <_raise_r+0x4c>
 80123da:	1c59      	adds	r1, r3, #1
 80123dc:	d103      	bne.n	80123e6 <_raise_r+0x42>
 80123de:	2316      	movs	r3, #22
 80123e0:	6003      	str	r3, [r0, #0]
 80123e2:	2001      	movs	r0, #1
 80123e4:	e7e7      	b.n	80123b6 <_raise_r+0x12>
 80123e6:	2100      	movs	r1, #0
 80123e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80123ec:	4620      	mov	r0, r4
 80123ee:	4798      	blx	r3
 80123f0:	2000      	movs	r0, #0
 80123f2:	e7e0      	b.n	80123b6 <_raise_r+0x12>

080123f4 <raise>:
 80123f4:	4b02      	ldr	r3, [pc, #8]	@ (8012400 <raise+0xc>)
 80123f6:	4601      	mov	r1, r0
 80123f8:	6818      	ldr	r0, [r3, #0]
 80123fa:	f7ff bfd3 	b.w	80123a4 <_raise_r>
 80123fe:	bf00      	nop
 8012400:	20000088 	.word	0x20000088

08012404 <_kill_r>:
 8012404:	b538      	push	{r3, r4, r5, lr}
 8012406:	4d07      	ldr	r5, [pc, #28]	@ (8012424 <_kill_r+0x20>)
 8012408:	2300      	movs	r3, #0
 801240a:	4604      	mov	r4, r0
 801240c:	4608      	mov	r0, r1
 801240e:	4611      	mov	r1, r2
 8012410:	602b      	str	r3, [r5, #0]
 8012412:	f7f1 fea1 	bl	8004158 <_kill>
 8012416:	1c43      	adds	r3, r0, #1
 8012418:	d102      	bne.n	8012420 <_kill_r+0x1c>
 801241a:	682b      	ldr	r3, [r5, #0]
 801241c:	b103      	cbz	r3, 8012420 <_kill_r+0x1c>
 801241e:	6023      	str	r3, [r4, #0]
 8012420:	bd38      	pop	{r3, r4, r5, pc}
 8012422:	bf00      	nop
 8012424:	20005f94 	.word	0x20005f94

08012428 <_getpid_r>:
 8012428:	f7f1 be8e 	b.w	8004148 <_getpid>

0801242c <__swhatbuf_r>:
 801242c:	b570      	push	{r4, r5, r6, lr}
 801242e:	460c      	mov	r4, r1
 8012430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012434:	2900      	cmp	r1, #0
 8012436:	b096      	sub	sp, #88	@ 0x58
 8012438:	4615      	mov	r5, r2
 801243a:	461e      	mov	r6, r3
 801243c:	da0d      	bge.n	801245a <__swhatbuf_r+0x2e>
 801243e:	89a3      	ldrh	r3, [r4, #12]
 8012440:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012444:	f04f 0100 	mov.w	r1, #0
 8012448:	bf14      	ite	ne
 801244a:	2340      	movne	r3, #64	@ 0x40
 801244c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012450:	2000      	movs	r0, #0
 8012452:	6031      	str	r1, [r6, #0]
 8012454:	602b      	str	r3, [r5, #0]
 8012456:	b016      	add	sp, #88	@ 0x58
 8012458:	bd70      	pop	{r4, r5, r6, pc}
 801245a:	466a      	mov	r2, sp
 801245c:	f000 f848 	bl	80124f0 <_fstat_r>
 8012460:	2800      	cmp	r0, #0
 8012462:	dbec      	blt.n	801243e <__swhatbuf_r+0x12>
 8012464:	9901      	ldr	r1, [sp, #4]
 8012466:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801246a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801246e:	4259      	negs	r1, r3
 8012470:	4159      	adcs	r1, r3
 8012472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012476:	e7eb      	b.n	8012450 <__swhatbuf_r+0x24>

08012478 <__smakebuf_r>:
 8012478:	898b      	ldrh	r3, [r1, #12]
 801247a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801247c:	079d      	lsls	r5, r3, #30
 801247e:	4606      	mov	r6, r0
 8012480:	460c      	mov	r4, r1
 8012482:	d507      	bpl.n	8012494 <__smakebuf_r+0x1c>
 8012484:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012488:	6023      	str	r3, [r4, #0]
 801248a:	6123      	str	r3, [r4, #16]
 801248c:	2301      	movs	r3, #1
 801248e:	6163      	str	r3, [r4, #20]
 8012490:	b003      	add	sp, #12
 8012492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012494:	ab01      	add	r3, sp, #4
 8012496:	466a      	mov	r2, sp
 8012498:	f7ff ffc8 	bl	801242c <__swhatbuf_r>
 801249c:	9f00      	ldr	r7, [sp, #0]
 801249e:	4605      	mov	r5, r0
 80124a0:	4639      	mov	r1, r7
 80124a2:	4630      	mov	r0, r6
 80124a4:	f7fe fed4 	bl	8011250 <_malloc_r>
 80124a8:	b948      	cbnz	r0, 80124be <__smakebuf_r+0x46>
 80124aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124ae:	059a      	lsls	r2, r3, #22
 80124b0:	d4ee      	bmi.n	8012490 <__smakebuf_r+0x18>
 80124b2:	f023 0303 	bic.w	r3, r3, #3
 80124b6:	f043 0302 	orr.w	r3, r3, #2
 80124ba:	81a3      	strh	r3, [r4, #12]
 80124bc:	e7e2      	b.n	8012484 <__smakebuf_r+0xc>
 80124be:	89a3      	ldrh	r3, [r4, #12]
 80124c0:	6020      	str	r0, [r4, #0]
 80124c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124c6:	81a3      	strh	r3, [r4, #12]
 80124c8:	9b01      	ldr	r3, [sp, #4]
 80124ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80124ce:	b15b      	cbz	r3, 80124e8 <__smakebuf_r+0x70>
 80124d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124d4:	4630      	mov	r0, r6
 80124d6:	f000 f81d 	bl	8012514 <_isatty_r>
 80124da:	b128      	cbz	r0, 80124e8 <__smakebuf_r+0x70>
 80124dc:	89a3      	ldrh	r3, [r4, #12]
 80124de:	f023 0303 	bic.w	r3, r3, #3
 80124e2:	f043 0301 	orr.w	r3, r3, #1
 80124e6:	81a3      	strh	r3, [r4, #12]
 80124e8:	89a3      	ldrh	r3, [r4, #12]
 80124ea:	431d      	orrs	r5, r3
 80124ec:	81a5      	strh	r5, [r4, #12]
 80124ee:	e7cf      	b.n	8012490 <__smakebuf_r+0x18>

080124f0 <_fstat_r>:
 80124f0:	b538      	push	{r3, r4, r5, lr}
 80124f2:	4d07      	ldr	r5, [pc, #28]	@ (8012510 <_fstat_r+0x20>)
 80124f4:	2300      	movs	r3, #0
 80124f6:	4604      	mov	r4, r0
 80124f8:	4608      	mov	r0, r1
 80124fa:	4611      	mov	r1, r2
 80124fc:	602b      	str	r3, [r5, #0]
 80124fe:	f7f1 fe8b 	bl	8004218 <_fstat>
 8012502:	1c43      	adds	r3, r0, #1
 8012504:	d102      	bne.n	801250c <_fstat_r+0x1c>
 8012506:	682b      	ldr	r3, [r5, #0]
 8012508:	b103      	cbz	r3, 801250c <_fstat_r+0x1c>
 801250a:	6023      	str	r3, [r4, #0]
 801250c:	bd38      	pop	{r3, r4, r5, pc}
 801250e:	bf00      	nop
 8012510:	20005f94 	.word	0x20005f94

08012514 <_isatty_r>:
 8012514:	b538      	push	{r3, r4, r5, lr}
 8012516:	4d06      	ldr	r5, [pc, #24]	@ (8012530 <_isatty_r+0x1c>)
 8012518:	2300      	movs	r3, #0
 801251a:	4604      	mov	r4, r0
 801251c:	4608      	mov	r0, r1
 801251e:	602b      	str	r3, [r5, #0]
 8012520:	f7f1 fe8a 	bl	8004238 <_isatty>
 8012524:	1c43      	adds	r3, r0, #1
 8012526:	d102      	bne.n	801252e <_isatty_r+0x1a>
 8012528:	682b      	ldr	r3, [r5, #0]
 801252a:	b103      	cbz	r3, 801252e <_isatty_r+0x1a>
 801252c:	6023      	str	r3, [r4, #0]
 801252e:	bd38      	pop	{r3, r4, r5, pc}
 8012530:	20005f94 	.word	0x20005f94

08012534 <atan2f>:
 8012534:	f000 b856 	b.w	80125e4 <__ieee754_atan2f>

08012538 <fmaxf>:
 8012538:	b508      	push	{r3, lr}
 801253a:	ed2d 8b02 	vpush	{d8}
 801253e:	eeb0 8a40 	vmov.f32	s16, s0
 8012542:	eef0 8a60 	vmov.f32	s17, s1
 8012546:	f000 f831 	bl	80125ac <__fpclassifyf>
 801254a:	b930      	cbnz	r0, 801255a <fmaxf+0x22>
 801254c:	eeb0 8a68 	vmov.f32	s16, s17
 8012550:	eeb0 0a48 	vmov.f32	s0, s16
 8012554:	ecbd 8b02 	vpop	{d8}
 8012558:	bd08      	pop	{r3, pc}
 801255a:	eeb0 0a68 	vmov.f32	s0, s17
 801255e:	f000 f825 	bl	80125ac <__fpclassifyf>
 8012562:	2800      	cmp	r0, #0
 8012564:	d0f4      	beq.n	8012550 <fmaxf+0x18>
 8012566:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256e:	dded      	ble.n	801254c <fmaxf+0x14>
 8012570:	e7ee      	b.n	8012550 <fmaxf+0x18>

08012572 <fminf>:
 8012572:	b508      	push	{r3, lr}
 8012574:	ed2d 8b02 	vpush	{d8}
 8012578:	eeb0 8a40 	vmov.f32	s16, s0
 801257c:	eef0 8a60 	vmov.f32	s17, s1
 8012580:	f000 f814 	bl	80125ac <__fpclassifyf>
 8012584:	b930      	cbnz	r0, 8012594 <fminf+0x22>
 8012586:	eeb0 8a68 	vmov.f32	s16, s17
 801258a:	eeb0 0a48 	vmov.f32	s0, s16
 801258e:	ecbd 8b02 	vpop	{d8}
 8012592:	bd08      	pop	{r3, pc}
 8012594:	eeb0 0a68 	vmov.f32	s0, s17
 8012598:	f000 f808 	bl	80125ac <__fpclassifyf>
 801259c:	2800      	cmp	r0, #0
 801259e:	d0f4      	beq.n	801258a <fminf+0x18>
 80125a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80125a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a8:	d5ed      	bpl.n	8012586 <fminf+0x14>
 80125aa:	e7ee      	b.n	801258a <fminf+0x18>

080125ac <__fpclassifyf>:
 80125ac:	ee10 3a10 	vmov	r3, s0
 80125b0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80125b4:	d00d      	beq.n	80125d2 <__fpclassifyf+0x26>
 80125b6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80125ba:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80125be:	d30a      	bcc.n	80125d6 <__fpclassifyf+0x2a>
 80125c0:	4b07      	ldr	r3, [pc, #28]	@ (80125e0 <__fpclassifyf+0x34>)
 80125c2:	1e42      	subs	r2, r0, #1
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d908      	bls.n	80125da <__fpclassifyf+0x2e>
 80125c8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80125cc:	4258      	negs	r0, r3
 80125ce:	4158      	adcs	r0, r3
 80125d0:	4770      	bx	lr
 80125d2:	2002      	movs	r0, #2
 80125d4:	4770      	bx	lr
 80125d6:	2004      	movs	r0, #4
 80125d8:	4770      	bx	lr
 80125da:	2003      	movs	r0, #3
 80125dc:	4770      	bx	lr
 80125de:	bf00      	nop
 80125e0:	007ffffe 	.word	0x007ffffe

080125e4 <__ieee754_atan2f>:
 80125e4:	ee10 2a90 	vmov	r2, s1
 80125e8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80125ec:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80125f0:	b510      	push	{r4, lr}
 80125f2:	eef0 7a40 	vmov.f32	s15, s0
 80125f6:	d806      	bhi.n	8012606 <__ieee754_atan2f+0x22>
 80125f8:	ee10 0a10 	vmov	r0, s0
 80125fc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8012600:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012604:	d904      	bls.n	8012610 <__ieee754_atan2f+0x2c>
 8012606:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801260a:	eeb0 0a67 	vmov.f32	s0, s15
 801260e:	bd10      	pop	{r4, pc}
 8012610:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012614:	d103      	bne.n	801261e <__ieee754_atan2f+0x3a>
 8012616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801261a:	f000 b883 	b.w	8012724 <atanf>
 801261e:	1794      	asrs	r4, r2, #30
 8012620:	f004 0402 	and.w	r4, r4, #2
 8012624:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012628:	b943      	cbnz	r3, 801263c <__ieee754_atan2f+0x58>
 801262a:	2c02      	cmp	r4, #2
 801262c:	d05e      	beq.n	80126ec <__ieee754_atan2f+0x108>
 801262e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012700 <__ieee754_atan2f+0x11c>
 8012632:	2c03      	cmp	r4, #3
 8012634:	bf08      	it	eq
 8012636:	eef0 7a47 	vmoveq.f32	s15, s14
 801263a:	e7e6      	b.n	801260a <__ieee754_atan2f+0x26>
 801263c:	b941      	cbnz	r1, 8012650 <__ieee754_atan2f+0x6c>
 801263e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8012704 <__ieee754_atan2f+0x120>
 8012642:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012708 <__ieee754_atan2f+0x124>
 8012646:	2800      	cmp	r0, #0
 8012648:	bfa8      	it	ge
 801264a:	eef0 7a47 	vmovge.f32	s15, s14
 801264e:	e7dc      	b.n	801260a <__ieee754_atan2f+0x26>
 8012650:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012654:	d110      	bne.n	8012678 <__ieee754_atan2f+0x94>
 8012656:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801265a:	f104 34ff 	add.w	r4, r4, #4294967295
 801265e:	d107      	bne.n	8012670 <__ieee754_atan2f+0x8c>
 8012660:	2c02      	cmp	r4, #2
 8012662:	d846      	bhi.n	80126f2 <__ieee754_atan2f+0x10e>
 8012664:	4b29      	ldr	r3, [pc, #164]	@ (801270c <__ieee754_atan2f+0x128>)
 8012666:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801266a:	edd3 7a00 	vldr	s15, [r3]
 801266e:	e7cc      	b.n	801260a <__ieee754_atan2f+0x26>
 8012670:	2c02      	cmp	r4, #2
 8012672:	d841      	bhi.n	80126f8 <__ieee754_atan2f+0x114>
 8012674:	4b26      	ldr	r3, [pc, #152]	@ (8012710 <__ieee754_atan2f+0x12c>)
 8012676:	e7f6      	b.n	8012666 <__ieee754_atan2f+0x82>
 8012678:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801267c:	d0df      	beq.n	801263e <__ieee754_atan2f+0x5a>
 801267e:	1a5b      	subs	r3, r3, r1
 8012680:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8012684:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012688:	da1a      	bge.n	80126c0 <__ieee754_atan2f+0xdc>
 801268a:	2a00      	cmp	r2, #0
 801268c:	da01      	bge.n	8012692 <__ieee754_atan2f+0xae>
 801268e:	313c      	adds	r1, #60	@ 0x3c
 8012690:	db19      	blt.n	80126c6 <__ieee754_atan2f+0xe2>
 8012692:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012696:	f000 f919 	bl	80128cc <fabsf>
 801269a:	f000 f843 	bl	8012724 <atanf>
 801269e:	eef0 7a40 	vmov.f32	s15, s0
 80126a2:	2c01      	cmp	r4, #1
 80126a4:	d012      	beq.n	80126cc <__ieee754_atan2f+0xe8>
 80126a6:	2c02      	cmp	r4, #2
 80126a8:	d017      	beq.n	80126da <__ieee754_atan2f+0xf6>
 80126aa:	2c00      	cmp	r4, #0
 80126ac:	d0ad      	beq.n	801260a <__ieee754_atan2f+0x26>
 80126ae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8012714 <__ieee754_atan2f+0x130>
 80126b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126b6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012718 <__ieee754_atan2f+0x134>
 80126ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126be:	e7a4      	b.n	801260a <__ieee754_atan2f+0x26>
 80126c0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012708 <__ieee754_atan2f+0x124>
 80126c4:	e7ed      	b.n	80126a2 <__ieee754_atan2f+0xbe>
 80126c6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801271c <__ieee754_atan2f+0x138>
 80126ca:	e7ea      	b.n	80126a2 <__ieee754_atan2f+0xbe>
 80126cc:	ee17 3a90 	vmov	r3, s15
 80126d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80126d4:	ee07 3a90 	vmov	s15, r3
 80126d8:	e797      	b.n	801260a <__ieee754_atan2f+0x26>
 80126da:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012714 <__ieee754_atan2f+0x130>
 80126de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8012718 <__ieee754_atan2f+0x134>
 80126e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126ea:	e78e      	b.n	801260a <__ieee754_atan2f+0x26>
 80126ec:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012718 <__ieee754_atan2f+0x134>
 80126f0:	e78b      	b.n	801260a <__ieee754_atan2f+0x26>
 80126f2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8012720 <__ieee754_atan2f+0x13c>
 80126f6:	e788      	b.n	801260a <__ieee754_atan2f+0x26>
 80126f8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801271c <__ieee754_atan2f+0x138>
 80126fc:	e785      	b.n	801260a <__ieee754_atan2f+0x26>
 80126fe:	bf00      	nop
 8012700:	c0490fdb 	.word	0xc0490fdb
 8012704:	bfc90fdb 	.word	0xbfc90fdb
 8012708:	3fc90fdb 	.word	0x3fc90fdb
 801270c:	080137d0 	.word	0x080137d0
 8012710:	080137c4 	.word	0x080137c4
 8012714:	33bbbd2e 	.word	0x33bbbd2e
 8012718:	40490fdb 	.word	0x40490fdb
 801271c:	00000000 	.word	0x00000000
 8012720:	3f490fdb 	.word	0x3f490fdb

08012724 <atanf>:
 8012724:	b538      	push	{r3, r4, r5, lr}
 8012726:	ee10 5a10 	vmov	r5, s0
 801272a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801272e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012732:	eef0 7a40 	vmov.f32	s15, s0
 8012736:	d310      	bcc.n	801275a <atanf+0x36>
 8012738:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801273c:	d904      	bls.n	8012748 <atanf+0x24>
 801273e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012742:	eeb0 0a67 	vmov.f32	s0, s15
 8012746:	bd38      	pop	{r3, r4, r5, pc}
 8012748:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012880 <atanf+0x15c>
 801274c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012884 <atanf+0x160>
 8012750:	2d00      	cmp	r5, #0
 8012752:	bfc8      	it	gt
 8012754:	eef0 7a47 	vmovgt.f32	s15, s14
 8012758:	e7f3      	b.n	8012742 <atanf+0x1e>
 801275a:	4b4b      	ldr	r3, [pc, #300]	@ (8012888 <atanf+0x164>)
 801275c:	429c      	cmp	r4, r3
 801275e:	d810      	bhi.n	8012782 <atanf+0x5e>
 8012760:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012764:	d20a      	bcs.n	801277c <atanf+0x58>
 8012766:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801288c <atanf+0x168>
 801276a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801276e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012772:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277a:	dce2      	bgt.n	8012742 <atanf+0x1e>
 801277c:	f04f 33ff 	mov.w	r3, #4294967295
 8012780:	e013      	b.n	80127aa <atanf+0x86>
 8012782:	f000 f8a3 	bl	80128cc <fabsf>
 8012786:	4b42      	ldr	r3, [pc, #264]	@ (8012890 <atanf+0x16c>)
 8012788:	429c      	cmp	r4, r3
 801278a:	d84f      	bhi.n	801282c <atanf+0x108>
 801278c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012790:	429c      	cmp	r4, r3
 8012792:	d841      	bhi.n	8012818 <atanf+0xf4>
 8012794:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012798:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801279c:	eea0 7a27 	vfma.f32	s14, s0, s15
 80127a0:	2300      	movs	r3, #0
 80127a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80127a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80127aa:	1c5a      	adds	r2, r3, #1
 80127ac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80127b0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012894 <atanf+0x170>
 80127b4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8012898 <atanf+0x174>
 80127b8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801289c <atanf+0x178>
 80127bc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80127c0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80127c4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80128a0 <atanf+0x17c>
 80127c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80127cc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80128a4 <atanf+0x180>
 80127d0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80127d4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80128a8 <atanf+0x184>
 80127d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80127dc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80128ac <atanf+0x188>
 80127e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80127e4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80128b0 <atanf+0x18c>
 80127e8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80127ec:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80128b4 <atanf+0x190>
 80127f0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80127f4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80128b8 <atanf+0x194>
 80127f8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80127fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80128bc <atanf+0x198>
 8012800:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012804:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012808:	eea5 7a86 	vfma.f32	s14, s11, s12
 801280c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012810:	d121      	bne.n	8012856 <atanf+0x132>
 8012812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012816:	e794      	b.n	8012742 <atanf+0x1e>
 8012818:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801281c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012820:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012824:	2301      	movs	r3, #1
 8012826:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801282a:	e7be      	b.n	80127aa <atanf+0x86>
 801282c:	4b24      	ldr	r3, [pc, #144]	@ (80128c0 <atanf+0x19c>)
 801282e:	429c      	cmp	r4, r3
 8012830:	d80b      	bhi.n	801284a <atanf+0x126>
 8012832:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012836:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801283a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801283e:	2302      	movs	r3, #2
 8012840:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012848:	e7af      	b.n	80127aa <atanf+0x86>
 801284a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801284e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012852:	2303      	movs	r3, #3
 8012854:	e7a9      	b.n	80127aa <atanf+0x86>
 8012856:	4a1b      	ldr	r2, [pc, #108]	@ (80128c4 <atanf+0x1a0>)
 8012858:	491b      	ldr	r1, [pc, #108]	@ (80128c8 <atanf+0x1a4>)
 801285a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801285e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012862:	edd3 6a00 	vldr	s13, [r3]
 8012866:	ee37 7a66 	vsub.f32	s14, s14, s13
 801286a:	2d00      	cmp	r5, #0
 801286c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012870:	edd2 7a00 	vldr	s15, [r2]
 8012874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012878:	bfb8      	it	lt
 801287a:	eef1 7a67 	vneglt.f32	s15, s15
 801287e:	e760      	b.n	8012742 <atanf+0x1e>
 8012880:	bfc90fdb 	.word	0xbfc90fdb
 8012884:	3fc90fdb 	.word	0x3fc90fdb
 8012888:	3edfffff 	.word	0x3edfffff
 801288c:	7149f2ca 	.word	0x7149f2ca
 8012890:	3f97ffff 	.word	0x3f97ffff
 8012894:	3c8569d7 	.word	0x3c8569d7
 8012898:	3d4bda59 	.word	0x3d4bda59
 801289c:	bd6ef16b 	.word	0xbd6ef16b
 80128a0:	3d886b35 	.word	0x3d886b35
 80128a4:	3dba2e6e 	.word	0x3dba2e6e
 80128a8:	3e124925 	.word	0x3e124925
 80128ac:	3eaaaaab 	.word	0x3eaaaaab
 80128b0:	bd15a221 	.word	0xbd15a221
 80128b4:	bd9d8795 	.word	0xbd9d8795
 80128b8:	bde38e38 	.word	0xbde38e38
 80128bc:	be4ccccd 	.word	0xbe4ccccd
 80128c0:	401bffff 	.word	0x401bffff
 80128c4:	080137ec 	.word	0x080137ec
 80128c8:	080137dc 	.word	0x080137dc

080128cc <fabsf>:
 80128cc:	ee10 3a10 	vmov	r3, s0
 80128d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80128d4:	ee00 3a10 	vmov	s0, r3
 80128d8:	4770      	bx	lr
	...

080128dc <_init>:
 80128dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128de:	bf00      	nop
 80128e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128e2:	bc08      	pop	{r3}
 80128e4:	469e      	mov	lr, r3
 80128e6:	4770      	bx	lr

080128e8 <_fini>:
 80128e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ea:	bf00      	nop
 80128ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ee:	bc08      	pop	{r3}
 80128f0:	469e      	mov	lr, r3
 80128f2:	4770      	bx	lr
