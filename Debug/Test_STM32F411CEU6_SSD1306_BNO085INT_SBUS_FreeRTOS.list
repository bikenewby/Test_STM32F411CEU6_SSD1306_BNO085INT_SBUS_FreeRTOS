
Test_STM32F411CEU6_SSD1306_BNO085INT_SBUS_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012dc8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001554  08012f68  08012f68  00013f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144bc  080144bc  00016244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080144bc  080144bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080144c4  080144c4  00016244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080144c4  080144c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080144c8  080144c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  080144cc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005da4  20000244  08014710  00016244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005fe8  08014710  00016fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029013  00000000  00000000  00016274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e6c  00000000  00000000  0003f287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002000  00000000  00000000  000440f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c084  00000000  00000000  000460f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000257b5  00000000  00000000  0006217c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a3c2f  00000000  00000000  00087931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0012b560  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001ad7  00000000  00000000  0012b5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a4c  00000000  00000000  0012d07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000147d  00000000  00000000  00136ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00137f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012f50 	.word	0x08012f50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	08012f50 	.word	0x08012f50

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
return 0;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f18:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f1c:	4905      	ldr	r1, [pc, #20]	@ (8000f34 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f20:	68ca      	ldr	r2, [r1, #12]
 8000f22:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60cb      	str	r3, [r1, #12]
 8000f2a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f2e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000f30:	e7fd      	b.n	8000f2e <__NVIC_SystemReset+0x16>
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	05fa0004 	.word	0x05fa0004

08000f3c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Printf redirection for USART1
int _write(int file, char *ptr, int len) {
 8000f3c:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
int _write(int file, char *ptr, int len) {
 8000f42:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 1000);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <_write+0x14>)
 8000f46:	b292      	uxth	r2, r2
 8000f48:	f00a f9be 	bl	800b2c8 <HAL_UART_Transmit>
	return len;
}
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	bd10      	pop	{r4, pc}
 8000f50:	20000350 	.word	0x20000350

08000f54 <i2c_bus_scan>:
	va_end(args);
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
}

// Modified I2C bus scanner: stores found addresses in a string buffer
void i2c_bus_scan(char *found_devices, size_t bufsize) {
 8000f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr_str[8];
	uint8_t first = 1;
	found_devices[0] = '\0';
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2401      	movs	r4, #1
void i2c_bus_scan(char *found_devices, size_t bufsize) {
 8000f5c:	b082      	sub	sp, #8

	for (uint8_t addr = 1; addr < 127; addr++) {
		if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 8000f5e:	4f1b      	ldr	r7, [pc, #108]	@ (8000fcc <i2c_bus_scan+0x78>)
			if (!first) {
				strncat(found_devices, ",",
						bufsize - strlen(found_devices) - 1);
			}
			snprintf(addr_str, sizeof(addr_str), "0x%02X", addr);
 8000f60:	f8df 906c 	ldr.w	r9, [pc, #108]	@ 8000fd0 <i2c_bus_scan+0x7c>
				strncat(found_devices, ",",
 8000f64:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8000fd4 <i2c_bus_scan+0x80>
	found_devices[0] = '\0';
 8000f68:	7003      	strb	r3, [r0, #0]
void i2c_bus_scan(char *found_devices, size_t bufsize) {
 8000f6a:	4605      	mov	r5, r0
 8000f6c:	4688      	mov	r8, r1
	uint8_t first = 1;
 8000f6e:	4626      	mov	r6, r4
 8000f70:	e013      	b.n	8000f9a <i2c_bus_scan+0x46>
 8000f72:	f108 36ff 	add.w	r6, r8, #4294967295
			snprintf(addr_str, sizeof(addr_str), "0x%02X", addr);
 8000f76:	2108      	movs	r1, #8
 8000f78:	4623      	mov	r3, r4
 8000f7a:	464a      	mov	r2, r9
 8000f7c:	4668      	mov	r0, sp
 8000f7e:	f00f fc57 	bl	8010830 <sniprintf>
			strncat(found_devices, addr_str,
					bufsize - strlen(found_devices) - 1);
 8000f82:	4628      	mov	r0, r5
 8000f84:	f7ff f97c 	bl	8000280 <strlen>
			strncat(found_devices, addr_str,
 8000f88:	4669      	mov	r1, sp
 8000f8a:	1a32      	subs	r2, r6, r0
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	f00f fd65 	bl	8010a5c <strncat>
			first = 0;
 8000f92:	2600      	movs	r6, #0
	for (uint8_t addr = 1; addr < 127; addr++) {
 8000f94:	3401      	adds	r4, #1
 8000f96:	2c7f      	cmp	r4, #127	@ 0x7f
 8000f98:	d015      	beq.n	8000fc6 <i2c_bus_scan+0x72>
		if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 8000f9a:	0061      	lsls	r1, r4, #1
 8000f9c:	b289      	uxth	r1, r1
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	f007 ff8e 	bl	8008ec4 <HAL_I2C_IsDeviceReady>
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d1f3      	bne.n	8000f94 <i2c_bus_scan+0x40>
			if (!first) {
 8000fac:	2e00      	cmp	r6, #0
 8000fae:	d1e0      	bne.n	8000f72 <i2c_bus_scan+0x1e>
						bufsize - strlen(found_devices) - 1);
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	f7ff f965 	bl	8000280 <strlen>
				strncat(found_devices, ",",
 8000fb6:	f108 36ff 	add.w	r6, r8, #4294967295
 8000fba:	1a32      	subs	r2, r6, r0
 8000fbc:	4651      	mov	r1, sl
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	f00f fd4c 	bl	8010a5c <strncat>
 8000fc4:	e7d7      	b.n	8000f76 <i2c_bus_scan+0x22>
		}
	}
}
 8000fc6:	b002      	add	sp, #8
 8000fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fcc:	20000260 	.word	0x20000260
 8000fd0:	0801378c 	.word	0x0801378c
 8000fd4:	08013788 	.word	0x08013788

08000fd8 <bno085_read_chip_id>:

// Read BNO085 Chip ID register (Register 0x00)
uint8_t bno085_read_chip_id() {
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	b084      	sub	sp, #16
	uint8_t reg = 0x00;
 8000fdc:	2000      	movs	r0, #0
	uint8_t id = 0;
	if (HAL_I2C_Master_Transmit(&hi2c1, BNO085_ADDR, &reg, 1, HAL_MAX_DELAY)
 8000fde:	f04f 34ff 	mov.w	r4, #4294967295
	uint8_t reg = 0x00;
 8000fe2:	f88d 000e 	strb.w	r0, [sp, #14]
	uint8_t id = 0;
 8000fe6:	f88d 000f 	strb.w	r0, [sp, #15]
	if (HAL_I2C_Master_Transmit(&hi2c1, BNO085_ADDR, &reg, 1, HAL_MAX_DELAY)
 8000fea:	9400      	str	r4, [sp, #0]
 8000fec:	480b      	ldr	r0, [pc, #44]	@ (800101c <bno085_read_chip_id+0x44>)
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f10d 020e 	add.w	r2, sp, #14
 8000ff4:	2194      	movs	r1, #148	@ 0x94
 8000ff6:	f007 f909 	bl	800820c <HAL_I2C_Master_Transmit>
 8000ffa:	b960      	cbnz	r0, 8001016 <bno085_read_chip_id+0x3e>
			!= HAL_OK)
		return 0xFF; // Indicate error
	if (HAL_I2C_Master_Receive(&hi2c1, BNO085_ADDR, &id, 1, HAL_MAX_DELAY)
 8000ffc:	4807      	ldr	r0, [pc, #28]	@ (800101c <bno085_read_chip_id+0x44>)
 8000ffe:	9400      	str	r4, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	f10d 020f 	add.w	r2, sp, #15
 8001006:	2194      	movs	r1, #148	@ 0x94
 8001008:	f007 f9fe 	bl	8008408 <HAL_I2C_Master_Receive>
 800100c:	b918      	cbnz	r0, 8001016 <bno085_read_chip_id+0x3e>
			!= HAL_OK)
		return 0xFF; // Indicate error
	return id;
 800100e:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 8001012:	b004      	add	sp, #16
 8001014:	bd10      	pop	{r4, pc}
		return 0xFF; // Indicate error
 8001016:	20ff      	movs	r0, #255	@ 0xff
}
 8001018:	b004      	add	sp, #16
 800101a:	bd10      	pop	{r4, pc}
 800101c:	20000260 	.word	0x20000260

08001020 <sh2_event_callback>:

void sh2_event_callback(void *cookie, sh2_AsyncEvent_t *pEvent) {
	// Optional: handle async events (reset, etc.)
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <sh2_sensor_handler>:

static void sh2_sensor_handler(void *cookie, sh2_SensorEvent_t *event) {
 8001024:	b510      	push	{r4, lr}
 8001026:	ed2d 8b02 	vpush	{d8}
 800102a:	b094      	sub	sp, #80	@ 0x50
	// Handle sensor events from BNO085
	sh2_SensorValue_t value;
	if (sh2_decodeSensorEvent(&value, event) == 0) {
 800102c:	4668      	mov	r0, sp
 800102e:	f004 f8d7 	bl	80051e0 <sh2_decodeSensorEvent>
 8001032:	b918      	cbnz	r0, 800103c <sh2_sensor_handler+0x18>
		if (value.sensorId == SH2_ROTATION_VECTOR) {
 8001034:	f89d 3000 	ldrb.w	r3, [sp]
 8001038:	2b05      	cmp	r3, #5
 800103a:	d003      	beq.n	8001044 <sh2_sensor_handler+0x20>
			osMutexAcquire(CompassMutexHandle, osWaitForever);
			compass_heading_deg = yaw_deg;
			osMutexRelease(CompassMutexHandle);
		}
	}
}
 800103c:	b014      	add	sp, #80	@ 0x50
 800103e:	ecbd 8b02 	vpop	{d8}
 8001042:	bd10      	pop	{r4, pc}
			float q3 = value.un.rotationVector.k;
 8001044:	eddd 6a07 	vldr	s13, [sp, #28]
			float q2 = value.un.rotationVector.j;
 8001048:	ed9d 7a06 	vldr	s14, [sp, #24]
			float t3 = 2.0f * (q0 * q3 + q1 * q2);
 800104c:	ed9d 0a05 	vldr	s0, [sp, #20]
 8001050:	ed9d 6a08 	vldr	s12, [sp, #32]
			osMutexAcquire(CompassMutexHandle, osWaitForever);
 8001054:	4c17      	ldr	r4, [pc, #92]	@ (80010b4 <sh2_sensor_handler+0x90>)
			float t4 = 1.0f - 2.0f * (q2 * q2 + q3 * q3);
 8001056:	ee66 7aa6 	vmul.f32	s15, s13, s13
			float t3 = 2.0f * (q0 * q3 + q1 * q2);
 800105a:	ee27 0a00 	vmul.f32	s0, s14, s0
			float t4 = 1.0f - 2.0f * (q2 * q2 + q3 * q3);
 800105e:	eee7 7a07 	vfma.f32	s15, s14, s14
			float t3 = 2.0f * (q0 * q3 + q1 * q2);
 8001062:	eea6 0a26 	vfma.f32	s0, s12, s13
			float t4 = 1.0f - 2.0f * (q2 * q2 + q3 * q3);
 8001066:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800106a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
			float yaw = atan2f(t3, t4);
 800106e:	eee7 0ac7 	vfms.f32	s1, s15, s14
 8001072:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001076:	f011 fd97 	bl	8012ba8 <atan2f>
			float yaw_deg = yaw * (180.0f / (float) M_PI);
 800107a:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80010b8 <sh2_sensor_handler+0x94>
			osMutexAcquire(CompassMutexHandle, osWaitForever);
 800107e:	6820      	ldr	r0, [r4, #0]
			float yaw_deg = yaw * (180.0f / (float) M_PI);
 8001080:	ee20 8a27 	vmul.f32	s16, s0, s15
			osMutexAcquire(CompassMutexHandle, osWaitForever);
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
			if (yaw_deg < 0)
 8001088:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				yaw_deg += 360.0f;
 8001090:	bf44      	itt	mi
 8001092:	eddf 7a0a 	vldrmi	s15, [pc, #40]	@ 80010bc <sh2_sensor_handler+0x98>
 8001096:	ee38 8a27 	vaddmi.f32	s16, s16, s15
			osMutexAcquire(CompassMutexHandle, osWaitForever);
 800109a:	f00b fd70 	bl	800cb7e <osMutexAcquire>
			compass_heading_deg = yaw_deg;
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <sh2_sensor_handler+0x9c>)
			osMutexRelease(CompassMutexHandle);
 80010a0:	6820      	ldr	r0, [r4, #0]
			compass_heading_deg = yaw_deg;
 80010a2:	ed83 8a00 	vstr	s16, [r3]
			osMutexRelease(CompassMutexHandle);
 80010a6:	f00b fdb5 	bl	800cc14 <osMutexRelease>
}
 80010aa:	b014      	add	sp, #80	@ 0x50
 80010ac:	ecbd 8b02 	vpop	{d8}
 80010b0:	bd10      	pop	{r4, pc}
 80010b2:	bf00      	nop
 80010b4:	20000450 	.word	0x20000450
 80010b8:	42652ee0 	.word	0x42652ee0
 80010bc:	43b40000 	.word	0x43b40000
 80010c0:	200004b4 	.word	0x200004b4

080010c4 <bno085_setup>:

void bno085_setup(void) {
 80010c4:	b538      	push	{r3, r4, r5, lr}
	sh2_hal.open = sh2_hal_open;
 80010c6:	4811      	ldr	r0, [pc, #68]	@ (800110c <bno085_setup+0x48>)
 80010c8:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <bno085_setup+0x4c>)
	sh2_hal.close = sh2_hal_close;
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <bno085_setup+0x50>)
	sh2_hal.read = sh2_hal_read;
 80010cc:	4d12      	ldr	r5, [pc, #72]	@ (8001118 <bno085_setup+0x54>)
	sh2_hal.write = sh2_hal_write;
 80010ce:	4c13      	ldr	r4, [pc, #76]	@ (800111c <bno085_setup+0x58>)
	sh2_hal.getTimeUs = sh2_hal_getTimeUs;

	sh2_open(&sh2_hal, sh2_event_callback, NULL);
 80010d0:	4913      	ldr	r1, [pc, #76]	@ (8001120 <bno085_setup+0x5c>)
	sh2_hal.close = sh2_hal_close;
 80010d2:	e9c0 2300 	strd	r2, r3, [r0]
	sh2_hal.getTimeUs = sh2_hal_getTimeUs;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <bno085_setup+0x60>)
 80010d8:	6103      	str	r3, [r0, #16]
	sh2_open(&sh2_hal, sh2_event_callback, NULL);
 80010da:	2200      	movs	r2, #0
	sh2_hal.write = sh2_hal_write;
 80010dc:	e9c0 5402 	strd	r5, r4, [r0, #8]
	sh2_open(&sh2_hal, sh2_event_callback, NULL);
 80010e0:	f003 ff68 	bl	8004fb4 <sh2_open>
	sh2_setSensorCallback(sh2_sensor_handler, NULL);
 80010e4:	2100      	movs	r1, #0
 80010e6:	4810      	ldr	r0, [pc, #64]	@ (8001128 <bno085_setup+0x64>)
 80010e8:	f004 f812 	bl	8005110 <sh2_setSensorCallback>

	sh2_config.changeSensitivityEnabled = false;
 80010ec:	490f      	ldr	r1, [pc, #60]	@ (800112c <bno085_setup+0x68>)
 80010ee:	2300      	movs	r3, #0
	sh2_config.changeSensitivityRelative = false;
	sh2_config.wakeupEnabled = false;
	sh2_config.alwaysOnEnabled = false;
	sh2_config.sniffEnabled = false;
	sh2_config.changeSensitivity = 0;
	sh2_config.reportInterval_us = 10000; // 100Hz
 80010f0:	f242 7210 	movw	r2, #10000	@ 0x2710
	//sh2_config.reportInterval_us = 20000; // 50Hz
	sh2_config.batchInterval_us = 0;
 80010f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sh2_config.changeSensitivityEnabled = false;
 80010f8:	600b      	str	r3, [r1, #0]
	sh2_config.sniffEnabled = false;
 80010fa:	710b      	strb	r3, [r1, #4]
	sh2_config.changeSensitivity = 0;
 80010fc:	80cb      	strh	r3, [r1, #6]
	sh2_config.sensorSpecific = 0;
 80010fe:	610b      	str	r3, [r1, #16]

	sh2_setSensorConfig(SH2_ROTATION_VECTOR, &sh2_config);
 8001100:	2005      	movs	r0, #5
}
 8001102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sh2_setSensorConfig(SH2_ROTATION_VECTOR, &sh2_config);
 8001106:	f004 b819 	b.w	800513c <sh2_setSensorConfig>
 800110a:	bf00      	nop
 800110c:	20000510 	.word	0x20000510
 8001110:	08006639 	.word	0x08006639
 8001114:	0800664f 	.word	0x0800664f
 8001118:	08006665 	.word	0x08006665
 800111c:	080066dd 	.word	0x080066dd
 8001120:	08001021 	.word	0x08001021
 8001124:	08006739 	.word	0x08006739
 8001128:	08001025 	.word	0x08001025
 800112c:	20000524 	.word	0x20000524

08001130 <sbus_to_percentage>:

// Convert SBUS channel value (172-1811) to percentage (-100 to +100)
int16_t sbus_to_percentage(uint16_t sbus_value) {
	if (sbus_value < 172)
		sbus_value = 172;
	if (sbus_value > 1811)
 8001130:	f240 7313 	movw	r3, #1811	@ 0x713
		sbus_value = 1811;

	int16_t result = (int16_t) (((int32_t) sbus_value - 992) * 100 / 820);
 8001134:	4298      	cmp	r0, r3
 8001136:	bf28      	it	cs
 8001138:	4618      	movcs	r0, r3
 800113a:	28ac      	cmp	r0, #172	@ 0xac
 800113c:	bf38      	it	cc
 800113e:	20ac      	movcc	r0, #172	@ 0xac
 8001140:	2264      	movs	r2, #100	@ 0x64
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <sbus_to_percentage+0x34>)
 8001144:	f5a0 7078 	sub.w	r0, r0, #992	@ 0x3e0
 8001148:	fb02 f000 	mul.w	r0, r2, r0
 800114c:	fb83 2300 	smull	r2, r3, r3, r0
 8001150:	17c0      	asrs	r0, r0, #31
 8001152:	ebc0 2023 	rsb	r0, r0, r3, asr #8

	// Optional: Dead zone of ±5%
	if (result >= -5 && result <= 5) {
 8001156:	1d43      	adds	r3, r0, #5
 8001158:	b29b      	uxth	r3, r3
 800115a:	2b0a      	cmp	r3, #10
 800115c:	bf98      	it	ls
 800115e:	2000      	movls	r0, #0
		result = 0;
	}

	return result;
}
 8001160:	b200      	sxth	r0, r0
 8001162:	4770      	bx	lr
 8001164:	4fec04ff 	.word	0x4fec04ff

08001168 <calculate_omni_motor_speeds>:
	// Left Front (Motor 1B):   +0.5*x + 0.866*y - rotation  (FIXED: was +rotation)
	// Right Front (Motor 1A):  +0.5*x - 0.866*y - rotation  (FIXED: was +rotation)
	// Back (Motor 2A):         -1.0*x + 0*y - rotation      (FIXED: was +rotation)

	// Use integer math (multiply by 100 to maintain precision, then divide)
	int32_t lf = (+50 * x + 87 * y - 100 * rotation) / 100; // Left Front (FIXED)
 8001168:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
		int16_t *left_front, int16_t *right_front, int16_t *back) {
 800116c:	b510      	push	{r4, lr}
	int32_t lf = (+50 * x + 87 * y - 100 * rotation) / 100; // Left Front (FIXED)
 800116e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8001172:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
 8001176:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 800117a:	ebc1 0181 	rsb	r1, r1, r1, lsl #2
 800117e:	f64f 7c9c 	movw	ip, #65436	@ 0xff9c
	int32_t rf = (+50 * x - 87 * y - 100 * rotation) / 100; // Right Front (FIXED)
	int32_t bk = (-100 * x + 0 * y - 100 * rotation) / 100;  // Back (FIXED)
 8001182:	4410      	add	r0, r2
	int32_t lf = (+50 * x + 87 * y - 100 * rotation) / 100; // Left Front (FIXED)
 8001184:	fb12 f20c 	smulbb	r2, r2, ip
 8001188:	eb01 0c4e 	add.w	ip, r1, lr, lsl #1
 800118c:	4494      	add	ip, r2
	int32_t rf = (+50 * x - 87 * y - 100 * rotation) / 100; // Right Front (FIXED)
 800118e:	ebc1 014e 	rsb	r1, r1, lr, lsl #1

	// Clamp to -100 to +100
	if (lf > 100)
 8001192:	f242 7e73 	movw	lr, #10099	@ 0x2773
 8001196:	45f4      	cmp	ip, lr
	int32_t rf = (+50 * x - 87 * y - 100 * rotation) / 100; // Right Front (FIXED)
 8001198:	4411      	add	r1, r2
		int16_t *left_front, int16_t *right_front, int16_t *back) {
 800119a:	9a03      	ldr	r2, [sp, #12]
	if (lf > 100)
 800119c:	dc11      	bgt.n	80011c2 <calculate_omni_motor_speeds+0x5a>
		lf = 100;
	if (lf < -100)
 800119e:	4c1e      	ldr	r4, [pc, #120]	@ (8001218 <calculate_omni_motor_speeds+0xb0>)
 80011a0:	45a4      	cmp	ip, r4
 80011a2:	da2e      	bge.n	8001202 <calculate_omni_motor_speeds+0x9a>
		lf = -100;
	if (rf > 100)
 80011a4:	f242 7e73 	movw	lr, #10099	@ 0x2773
 80011a8:	4571      	cmp	r1, lr
 80011aa:	f06f 0c63 	mvn.w	ip, #99	@ 0x63
 80011ae:	dd0e      	ble.n	80011ce <calculate_omni_motor_speeds+0x66>
 80011b0:	2164      	movs	r1, #100	@ 0x64
		rf = 100;
	if (rf < -100)
		rf = -100;
	if (bk > 100)
 80011b2:	f110 0f64 	cmn.w	r0, #100	@ 0x64
 80011b6:	db12      	blt.n	80011de <calculate_omni_motor_speeds+0x76>
		bk = 100;
	if (bk < -100)
 80011b8:	2864      	cmp	r0, #100	@ 0x64
 80011ba:	dd17      	ble.n	80011ec <calculate_omni_motor_speeds+0x84>
 80011bc:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80011c0:	e00e      	b.n	80011e0 <calculate_omni_motor_speeds+0x78>
 80011c2:	f04f 0c64 	mov.w	ip, #100	@ 0x64
	if (rf > 100)
 80011c6:	f242 7e73 	movw	lr, #10099	@ 0x2773
 80011ca:	4571      	cmp	r1, lr
 80011cc:	dcf0      	bgt.n	80011b0 <calculate_omni_motor_speeds+0x48>
	if (rf < -100)
 80011ce:	4c12      	ldr	r4, [pc, #72]	@ (8001218 <calculate_omni_motor_speeds+0xb0>)
 80011d0:	42a1      	cmp	r1, r4
 80011d2:	da0e      	bge.n	80011f2 <calculate_omni_motor_speeds+0x8a>
	if (bk > 100)
 80011d4:	f110 0f64 	cmn.w	r0, #100	@ 0x64
 80011d8:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80011dc:	daec      	bge.n	80011b8 <calculate_omni_motor_speeds+0x50>
 80011de:	2064      	movs	r0, #100	@ 0x64
		bk = -100;

	*left_front = (int16_t) lf;
 80011e0:	f8a3 c000 	strh.w	ip, [r3]
	*right_front = (int16_t) rf;
 80011e4:	9b02      	ldr	r3, [sp, #8]
 80011e6:	8019      	strh	r1, [r3, #0]
	*back = (int16_t) bk;
 80011e8:	8010      	strh	r0, [r2, #0]
}
 80011ea:	bd10      	pop	{r4, pc}
	int32_t bk = (-100 * x + 0 * y - 100 * rotation) / 100;  // Back (FIXED)
 80011ec:	4240      	negs	r0, r0
	*back = (int16_t) bk;
 80011ee:	b200      	sxth	r0, r0
 80011f0:	e7f6      	b.n	80011e0 <calculate_omni_motor_speeds+0x78>
	int32_t rf = (+50 * x - 87 * y - 100 * rotation) / 100; // Right Front (FIXED)
 80011f2:	4c0a      	ldr	r4, [pc, #40]	@ (800121c <calculate_omni_motor_speeds+0xb4>)
 80011f4:	fb84 4e01 	smull	r4, lr, r4, r1
 80011f8:	17c9      	asrs	r1, r1, #31
 80011fa:	ebc1 116e 	rsb	r1, r1, lr, asr #5
	*right_front = (int16_t) rf;
 80011fe:	b209      	sxth	r1, r1
 8001200:	e7d7      	b.n	80011b2 <calculate_omni_motor_speeds+0x4a>
	int32_t lf = (+50 * x + 87 * y - 100 * rotation) / 100; // Left Front (FIXED)
 8001202:	4c06      	ldr	r4, [pc, #24]	@ (800121c <calculate_omni_motor_speeds+0xb4>)
 8001204:	fb84 e40c 	smull	lr, r4, r4, ip
 8001208:	ea4f 7cec 	mov.w	ip, ip, asr #31
 800120c:	ebcc 1c64 	rsb	ip, ip, r4, asr #5
	*left_front = (int16_t) lf;
 8001210:	fa0f fc8c 	sxth.w	ip, ip
 8001214:	e7d7      	b.n	80011c6 <calculate_omni_motor_speeds+0x5e>
 8001216:	bf00      	nop
 8001218:	ffffd88d 	.word	0xffffd88d
 800121c:	51eb851f 	.word	0x51eb851f

08001220 <calculate_omni_motor_speeds_with_heading>:
// y: Forward/Backward movement (-100 to +100) - Positive = Forward, Negative = Backward
// rotation: Rotational movement (-100 to +100)
// heading_correction: PID output for heading lock (-100 to +100)
void calculate_omni_motor_speeds_with_heading(int16_t x, int16_t y,
		int16_t rotation, float heading_correction, int16_t *left_front,
		int16_t *right_front, int16_t *back) {
 8001220:	ee07 2a90 	vmov	s15, r2

	// Blend manual rotation with heading correction
	// Give priority to manual input when operator is actively rotating
	float manual_rotation_f = (float) rotation;
 8001224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float total_rotation;

	if (fabs(manual_rotation_f) > 10.0f) {
 8001228:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800122c:	eef0 6ae7 	vabs.f32	s13, s15
 8001230:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		// Manual rotation is active - blend with less heading correction
		total_rotation = manual_rotation_f + (heading_correction * 0.3f);
 8001238:	bfc4      	itt	gt
 800123a:	ed9f 7a3d 	vldrgt	s14, [pc, #244]	@ 8001330 <calculate_omni_motor_speeds_with_heading+0x110>
 800123e:	eee0 7a07 	vfmagt.f32	s15, s0, s14
		int16_t *right_front, int16_t *back) {
 8001242:	b510      	push	{r4, lr}
	} else {
		// No manual rotation - use full heading correction
		total_rotation = manual_rotation_f + heading_correction;
 8001244:	bfd8      	it	le
 8001246:	ee77 7a80 	vaddle.f32	s15, s15, s0
	}

	// Clamp total rotation to prevent overflow
	if (total_rotation > 100.0f)
 800124a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001334 <calculate_omni_motor_speeds_with_heading+0x114>
		int16_t *right_front, int16_t *back) {
 800124e:	9a03      	ldr	r2, [sp, #12]
	if (total_rotation > 100.0f)
 8001250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	dc0b      	bgt.n	8001272 <calculate_omni_motor_speeds_with_heading+0x52>
		total_rotation = 100.0f;
	if (total_rotation < -100.0f)
 800125a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001338 <calculate_omni_motor_speeds_with_heading+0x118>
 800125e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	d55a      	bpl.n	800131e <calculate_omni_motor_speeds_with_heading+0xfe>
 8001268:	f242 7410 	movw	r4, #10000	@ 0x2710
 800126c:	f06f 0c63 	mvn.w	ip, #99	@ 0x63
 8001270:	e002      	b.n	8001278 <calculate_omni_motor_speeds_with_heading+0x58>
 8001272:	4c32      	ldr	r4, [pc, #200]	@ (800133c <calculate_omni_motor_speeds_with_heading+0x11c>)
 8001274:	f04f 0c64 	mov.w	ip, #100	@ 0x64
		total_rotation = -100.0f;

	// 3-wheel omnidirectional kinematics with heading correction - FIXED ROTATION
	int32_t lf = (+50 * x + 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 8001278:	ebc1 0ec1 	rsb	lr, r1, r1, lsl #3
 800127c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
	int32_t rf = (+50 * x - 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
	int32_t bk = (-100 * x + 0 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 8001280:	4484      	add	ip, r0
	int32_t lf = (+50 * x + 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 8001282:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001286:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800128a:	ebc1 0181 	rsb	r1, r1, r1, lsl #2
 800128e:	eb01 0e40 	add.w	lr, r1, r0, lsl #1
	int32_t rf = (+50 * x - 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 8001292:	ebc1 0140 	rsb	r1, r1, r0, lsl #1
 8001296:	4421      	add	r1, r4
	int32_t lf = (+50 * x + 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 8001298:	eb0e 0004 	add.w	r0, lr, r4

	// Clamp to -100 to +100
	if (lf > 100)
 800129c:	f242 7473 	movw	r4, #10099	@ 0x2773
 80012a0:	42a0      	cmp	r0, r4
 80012a2:	dc12      	bgt.n	80012ca <calculate_omni_motor_speeds_with_heading+0xaa>
		lf = 100;
	if (lf < -100)
 80012a4:	4c26      	ldr	r4, [pc, #152]	@ (8001340 <calculate_omni_motor_speeds_with_heading+0x120>)
 80012a6:	42a0      	cmp	r0, r4
 80012a8:	da31      	bge.n	800130e <calculate_omni_motor_speeds_with_heading+0xee>
		lf = -100;
	if (rf > 100)
 80012aa:	f242 7473 	movw	r4, #10099	@ 0x2773
 80012ae:	42a1      	cmp	r1, r4
 80012b0:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80012b4:	dd0e      	ble.n	80012d4 <calculate_omni_motor_speeds_with_heading+0xb4>
 80012b6:	2164      	movs	r1, #100	@ 0x64
		rf = 100;
	if (rf < -100)
		rf = -100;
	if (bk > 100)
 80012b8:	f11c 0f64 	cmn.w	ip, #100	@ 0x64
 80012bc:	db12      	blt.n	80012e4 <calculate_omni_motor_speeds_with_heading+0xc4>
		bk = 100;
	if (bk < -100)
 80012be:	f1bc 0f64 	cmp.w	ip, #100	@ 0x64
 80012c2:	dd17      	ble.n	80012f4 <calculate_omni_motor_speeds_with_heading+0xd4>
 80012c4:	f06f 0c63 	mvn.w	ip, #99	@ 0x63
 80012c8:	e00e      	b.n	80012e8 <calculate_omni_motor_speeds_with_heading+0xc8>
 80012ca:	2064      	movs	r0, #100	@ 0x64
	if (rf > 100)
 80012cc:	f242 7473 	movw	r4, #10099	@ 0x2773
 80012d0:	42a1      	cmp	r1, r4
 80012d2:	dcf0      	bgt.n	80012b6 <calculate_omni_motor_speeds_with_heading+0x96>
	if (rf < -100)
 80012d4:	4c1a      	ldr	r4, [pc, #104]	@ (8001340 <calculate_omni_motor_speeds_with_heading+0x120>)
 80012d6:	42a1      	cmp	r1, r4
 80012d8:	da11      	bge.n	80012fe <calculate_omni_motor_speeds_with_heading+0xde>
	if (bk > 100)
 80012da:	f11c 0f64 	cmn.w	ip, #100	@ 0x64
 80012de:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80012e2:	daec      	bge.n	80012be <calculate_omni_motor_speeds_with_heading+0x9e>
 80012e4:	f04f 0c64 	mov.w	ip, #100	@ 0x64
		bk = -100;

	*left_front = (int16_t) lf;
 80012e8:	8018      	strh	r0, [r3, #0]
	*right_front = (int16_t) rf;
 80012ea:	9b02      	ldr	r3, [sp, #8]
 80012ec:	8019      	strh	r1, [r3, #0]
	*back = (int16_t) bk;
 80012ee:	f8a2 c000 	strh.w	ip, [r2]
}
 80012f2:	bd10      	pop	{r4, pc}
	int32_t bk = (-100 * x + 0 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 80012f4:	f1cc 0c00 	rsb	ip, ip, #0
	*back = (int16_t) bk;
 80012f8:	fa0f fc8c 	sxth.w	ip, ip
 80012fc:	e7f4      	b.n	80012e8 <calculate_omni_motor_speeds_with_heading+0xc8>
	int32_t rf = (+50 * x - 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 80012fe:	4c11      	ldr	r4, [pc, #68]	@ (8001344 <calculate_omni_motor_speeds_with_heading+0x124>)
 8001300:	fb84 e401 	smull	lr, r4, r4, r1
 8001304:	17c9      	asrs	r1, r1, #31
 8001306:	ebc1 1164 	rsb	r1, r1, r4, asr #5
	*right_front = (int16_t) rf;
 800130a:	b209      	sxth	r1, r1
 800130c:	e7d4      	b.n	80012b8 <calculate_omni_motor_speeds_with_heading+0x98>
	int32_t lf = (+50 * x + 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 800130e:	4c0d      	ldr	r4, [pc, #52]	@ (8001344 <calculate_omni_motor_speeds_with_heading+0x124>)
 8001310:	fb84 e400 	smull	lr, r4, r4, r0
 8001314:	17c0      	asrs	r0, r0, #31
 8001316:	ebc0 1064 	rsb	r0, r0, r4, asr #5
	*left_front = (int16_t) lf;
 800131a:	b200      	sxth	r0, r0
 800131c:	e7d6      	b.n	80012cc <calculate_omni_motor_speeds_with_heading+0xac>
	int32_t lf = (+50 * x + 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 800131e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001322:	f06f 0463 	mvn.w	r4, #99	@ 0x63
 8001326:	ee17 ca90 	vmov	ip, s15
 800132a:	fb04 f40c 	mul.w	r4, r4, ip
 800132e:	e7a3      	b.n	8001278 <calculate_omni_motor_speeds_with_heading+0x58>
 8001330:	3e99999a 	.word	0x3e99999a
 8001334:	42c80000 	.word	0x42c80000
 8001338:	c2c80000 	.word	0xc2c80000
 800133c:	ffffd8f0 	.word	0xffffd8f0
 8001340:	ffffd88d 	.word	0xffffd88d
 8001344:	51eb851f 	.word	0x51eb851f

08001348 <apply_motor_speeds_3wheel>:
		int16_t back) {
	const uint16_t pwm_val1 = 49; // For TIM1 (100% duty if Period = 49)
	const uint16_t pwm_val3 = 49; // For TIM3 (was 24, now 49)

	// Motor 1B - Left Front
	if (left_front == 0) {
 8001348:	2800      	cmp	r0, #0
		int16_t back) {
 800134a:	b538      	push	{r3, r4, r5, lr}
 800134c:	460c      	mov	r4, r1
 800134e:	4615      	mov	r5, r2
	if (left_front == 0) {
 8001350:	d04a      	beq.n	80013e8 <apply_motor_speeds_3wheel+0xa0>
		tb6612fng_brake(MOTOR_1B);
	} else if (left_front > 0) {
 8001352:	dd2e      	ble.n	80013b2 <apply_motor_speeds_3wheel+0x6a>
		tb6612fng_drive(MOTOR_1B, TB6612FNG_FORWARD,
				(pwm_val1 * left_front) / 100);
 8001354:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <apply_motor_speeds_3wheel+0xec>)
 8001356:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800135a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800135e:	fba3 3200 	umull	r3, r2, r3, r0
		tb6612fng_drive(MOTOR_1B, TB6612FNG_FORWARD,
 8001362:	2101      	movs	r1, #1
 8001364:	f3c2 124f 	ubfx	r2, r2, #5, #16
 8001368:	4608      	mov	r0, r1
 800136a:	f003 f98f 	bl	800468c <tb6612fng_drive>
		tb6612fng_drive(MOTOR_1B, TB6612FNG_BACKWARD,
				(pwm_val1 * (-left_front)) / 100);
	}

	// Motor 1A - Right Front
	if (right_front == 0) {
 800136e:	2c00      	cmp	r4, #0
 8001370:	d030      	beq.n	80013d4 <apply_motor_speeds_3wheel+0x8c>
		tb6612fng_brake(MOTOR_1A);
	} else if (right_front > 0) {
 8001372:	dd4e      	ble.n	8001412 <apply_motor_speeds_3wheel+0xca>
		tb6612fng_drive(MOTOR_1A, TB6612FNG_FORWARD,
				(pwm_val1 * right_front) / 100);
 8001374:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <apply_motor_speeds_3wheel+0xec>)
 8001376:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800137a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800137e:	fba3 3204 	umull	r3, r2, r3, r4
		tb6612fng_drive(MOTOR_1A, TB6612FNG_FORWARD,
 8001382:	f3c2 124f 	ubfx	r2, r2, #5, #16
 8001386:	2101      	movs	r1, #1
 8001388:	2000      	movs	r0, #0
 800138a:	f003 f97f 	bl	800468c <tb6612fng_drive>
		tb6612fng_drive(MOTOR_1A, TB6612FNG_BACKWARD,
				(pwm_val1 * (-right_front)) / 100);
	}

	// Motor 2A - Back
	if (back == 0) {
 800138e:	2d00      	cmp	r5, #0
 8001390:	d025      	beq.n	80013de <apply_motor_speeds_3wheel+0x96>
		tb6612fng_brake(MOTOR_2A);
	} else if (back > 0) {
 8001392:	dd2d      	ble.n	80013f0 <apply_motor_speeds_3wheel+0xa8>
		tb6612fng_drive(MOTOR_2A, TB6612FNG_FORWARD, (pwm_val3 * back) / 100);
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <apply_motor_speeds_3wheel+0xec>)
 8001396:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 800139a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 800139e:	fba3 3205 	umull	r3, r2, r3, r5
 80013a2:	f3c2 124f 	ubfx	r2, r2, #5, #16
	} else {
		tb6612fng_drive(MOTOR_2A, TB6612FNG_BACKWARD,
				(pwm_val3 * (-back)) / 100);
	}
}
 80013a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tb6612fng_drive(MOTOR_2A, TB6612FNG_FORWARD, (pwm_val3 * back) / 100);
 80013aa:	2101      	movs	r1, #1
 80013ac:	2002      	movs	r0, #2
 80013ae:	f003 b96d 	b.w	800468c <tb6612fng_drive>
				(pwm_val1 * (-left_front)) / 100);
 80013b2:	ebc0 6380 	rsb	r3, r0, r0, lsl #26
 80013b6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80013ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001434 <apply_motor_speeds_3wheel+0xec>)
 80013bc:	ebc0 1003 	rsb	r0, r0, r3, lsl #4
 80013c0:	fba2 3200 	umull	r3, r2, r2, r0
		tb6612fng_drive(MOTOR_1B, TB6612FNG_BACKWARD,
 80013c4:	f3c2 124f 	ubfx	r2, r2, #5, #16
 80013c8:	2102      	movs	r1, #2
 80013ca:	2001      	movs	r0, #1
 80013cc:	f003 f95e 	bl	800468c <tb6612fng_drive>
	if (right_front == 0) {
 80013d0:	2c00      	cmp	r4, #0
 80013d2:	d1ce      	bne.n	8001372 <apply_motor_speeds_3wheel+0x2a>
		tb6612fng_brake(MOTOR_1A);
 80013d4:	4620      	mov	r0, r4
 80013d6:	f003 f991 	bl	80046fc <tb6612fng_brake>
	if (back == 0) {
 80013da:	2d00      	cmp	r5, #0
 80013dc:	d1d9      	bne.n	8001392 <apply_motor_speeds_3wheel+0x4a>
}
 80013de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tb6612fng_brake(MOTOR_2A);
 80013e2:	2002      	movs	r0, #2
 80013e4:	f003 b98a 	b.w	80046fc <tb6612fng_brake>
		tb6612fng_brake(MOTOR_1B);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f003 f987 	bl	80046fc <tb6612fng_brake>
 80013ee:	e7be      	b.n	800136e <apply_motor_speeds_3wheel+0x26>
				(pwm_val3 * (-back)) / 100);
 80013f0:	ebc5 6385 	rsb	r3, r5, r5, lsl #26
 80013f4:	490f      	ldr	r1, [pc, #60]	@ (8001434 <apply_motor_speeds_3wheel+0xec>)
 80013f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80013fa:	ebc5 1203 	rsb	r2, r5, r3, lsl #4
 80013fe:	fba1 1202 	umull	r1, r2, r1, r2
		tb6612fng_drive(MOTOR_2A, TB6612FNG_BACKWARD,
 8001402:	2102      	movs	r1, #2
}
 8001404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tb6612fng_drive(MOTOR_2A, TB6612FNG_BACKWARD,
 8001408:	f3c2 124f 	ubfx	r2, r2, #5, #16
 800140c:	4608      	mov	r0, r1
 800140e:	f003 b93d 	b.w	800468c <tb6612fng_drive>
				(pwm_val1 * (-right_front)) / 100);
 8001412:	ebc4 6384 	rsb	r3, r4, r4, lsl #26
 8001416:	4907      	ldr	r1, [pc, #28]	@ (8001434 <apply_motor_speeds_3wheel+0xec>)
 8001418:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800141c:	ebc4 1203 	rsb	r2, r4, r3, lsl #4
 8001420:	fba1 1202 	umull	r1, r2, r1, r2
		tb6612fng_drive(MOTOR_1A, TB6612FNG_BACKWARD,
 8001424:	f3c2 124f 	ubfx	r2, r2, #5, #16
 8001428:	2102      	movs	r1, #2
 800142a:	2000      	movs	r0, #0
 800142c:	f003 f92e 	bl	800468c <tb6612fng_drive>
 8001430:	e7ad      	b.n	800138e <apply_motor_speeds_3wheel+0x46>
 8001432:	bf00      	nop
 8001434:	51eb851f 	.word	0x51eb851f

08001438 <stop_all_motors_3wheel>:

// Stop all motors (3-wheel configuration)
void stop_all_motors_3wheel(void) {
 8001438:	b508      	push	{r3, lr}
	tb6612fng_stop(MOTOR_1A); // Right Front
 800143a:	2000      	movs	r0, #0
 800143c:	f003 f944 	bl	80046c8 <tb6612fng_stop>
	tb6612fng_stop(MOTOR_1B); // Left Front
 8001440:	2001      	movs	r0, #1
 8001442:	f003 f941 	bl	80046c8 <tb6612fng_stop>
	tb6612fng_stop(MOTOR_2A); // Back
}
 8001446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tb6612fng_stop(MOTOR_2A); // Back
 800144a:	2002      	movs	r0, #2
 800144c:	f003 b93c 	b.w	80046c8 <tb6612fng_stop>

08001450 <is_sbus_signal_valid>:

// Check if SBUS signal is valid and recent
// Enhanced SBUS signal check with recovery
uint8_t is_sbus_signal_valid(void) {
 8001450:	b508      	push	{r3, lr}
	uint32_t now = HAL_GetTick();
 8001452:	f005 fd7b 	bl	8006f4c <HAL_GetTick>

	// Check if we have received a valid frame recently
	if (sbus_signal_valid && (now - sbus_last_valid_time) <= SBUS_TIMEOUT_MS) {
 8001456:	4a13      	ldr	r2, [pc, #76]	@ (80014a4 <is_sbus_signal_valid+0x54>)
 8001458:	7811      	ldrb	r1, [r2, #0]
	uint32_t now = HAL_GetTick();
 800145a:	4603      	mov	r3, r0
	if (sbus_signal_valid && (now - sbus_last_valid_time) <= SBUS_TIMEOUT_MS) {
 800145c:	4812      	ldr	r0, [pc, #72]	@ (80014a8 <is_sbus_signal_valid+0x58>)
 800145e:	b129      	cbz	r1, 800146c <is_sbus_signal_valid+0x1c>
 8001460:	6801      	ldr	r1, [r0, #0]
 8001462:	1a59      	subs	r1, r3, r1
 8001464:	2964      	cmp	r1, #100	@ 0x64
 8001466:	d801      	bhi.n	800146c <is_sbus_signal_valid+0x1c>
		return 1;
 8001468:	2001      	movs	r0, #1
			}
		}

		return 0;
	}
}
 800146a:	bd08      	pop	{r3, pc}
		sbus_signal_valid = 0; // Mark as invalid if timeout
 800146c:	2100      	movs	r1, #0
 800146e:	7011      	strb	r1, [r2, #0]
		if ((now - sbus_last_valid_time) > (SBUS_TIMEOUT_MS * 10)) {
 8001470:	6802      	ldr	r2, [r0, #0]
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001478:	d906      	bls.n	8001488 <is_sbus_signal_valid+0x38>
			if ((now - last_recovery_attempt) > 5000) {  // Try every 5 seconds
 800147a:	490c      	ldr	r1, [pc, #48]	@ (80014ac <is_sbus_signal_valid+0x5c>)
 800147c:	680a      	ldr	r2, [r1, #0]
 800147e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001482:	1a9a      	subs	r2, r3, r2
 8001484:	4282      	cmp	r2, r0
 8001486:	d801      	bhi.n	800148c <is_sbus_signal_valid+0x3c>
		return 0;
 8001488:	2000      	movs	r0, #0
}
 800148a:	bd08      	pop	{r3, pc}
				HAL_UART_AbortReceive(&huart2);
 800148c:	4808      	ldr	r0, [pc, #32]	@ (80014b0 <is_sbus_signal_valid+0x60>)
				last_recovery_attempt = now;
 800148e:	600b      	str	r3, [r1, #0]
				HAL_UART_AbortReceive(&huart2);
 8001490:	f009 ffca 	bl	800b428 <HAL_UART_AbortReceive>
				MX_USART2_UART_Init();
 8001494:	f000 ffae 	bl	80023f4 <MX_USART2_UART_Init>
				HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8001498:	4906      	ldr	r1, [pc, #24]	@ (80014b4 <is_sbus_signal_valid+0x64>)
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <is_sbus_signal_valid+0x60>)
 800149c:	2219      	movs	r2, #25
 800149e:	f009 ff9e 	bl	800b3de <HAL_UART_Receive_DMA>
 80014a2:	e7f1      	b.n	8001488 <is_sbus_signal_valid+0x38>
 80014a4:	200004b0 	.word	0x200004b0
 80014a8:	200004ac 	.word	0x200004ac
 80014ac:	20000538 	.word	0x20000538
 80014b0:	20000398 	.word	0x20000398
 80014b4:	20000468 	.word	0x20000468

080014b8 <calculate_heading_pid_simplified>:
	return diff;
}

// Simplified PID controller with reduced computational overhead
float calculate_heading_pid_simplified(float target_heading,
		float current_heading) {
 80014b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t history_idx = 0;
	static uint32_t last_oscillation_time = 0;
	static uint32_t overshoot_cooldown = 0;

	uint32_t now = HAL_GetTick();
	if (last_time == 0)
 80014bc:	4dce      	ldr	r5, [pc, #824]	@ (80017f8 <calculate_heading_pid_simplified+0x340>)
		float current_heading) {
 80014be:	ed2d 8b0a 	vpush	{d8-d12}
 80014c2:	eeb0 8a40 	vmov.f32	s16, s0
 80014c6:	eef0 8a60 	vmov.f32	s17, s1
	uint32_t now = HAL_GetTick();
 80014ca:	f005 fd3f 	bl	8006f4c <HAL_GetTick>
	if (last_time == 0)
 80014ce:	682b      	ldr	r3, [r5, #0]
	uint32_t now = HAL_GetTick();
 80014d0:	4604      	mov	r4, r0
	if (last_time == 0)
 80014d2:	b93b      	cbnz	r3, 80014e4 <calculate_heading_pid_simplified+0x2c>
		last_time = now;
 80014d4:	6028      	str	r0, [r5, #0]
	// Store for debugging
	heading_error = error;
	heading_pid_output = output_filtered;

	return output_filtered;
}
 80014d6:	ecbd 8b0a 	vpop	{d8-d12}
		return output_filtered;
 80014da:	4bc8      	ldr	r3, [pc, #800]	@ (80017fc <calculate_heading_pid_simplified+0x344>)
 80014dc:	ed93 0a00 	vldr	s0, [r3]
}
 80014e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	float dt = (now - last_time) / 1000.0f;
 80014e4:	1ac3      	subs	r3, r0, r3
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8001800 <calculate_heading_pid_simplified+0x348>
 80014ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f2:	eec7 aa87 	vdiv.f32	s21, s15, s14
	if (dt <= 0)
 80014f6:	eef5 aac0 	vcmpe.f32	s21, #0.0
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	d9ea      	bls.n	80014d6 <calculate_heading_pid_simplified+0x1e>
	float error = target_heading - current_heading;
 8001500:	ee38 8a68 	vsub.f32	s16, s16, s17
	while (error > 180.0f)
 8001504:	eddf 7abf 	vldr	s15, [pc, #764]	@ 8001804 <calculate_heading_pid_simplified+0x34c>
 8001508:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	dd63      	ble.n	80015da <calculate_heading_pid_simplified+0x122>
		error -= 360.0f;
 8001512:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8001808 <calculate_heading_pid_simplified+0x350>
 8001516:	ee38 8a47 	vsub.f32	s16, s16, s14
	while (error > 180.0f)
 800151a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	dcf8      	bgt.n	8001516 <calculate_heading_pid_simplified+0x5e>
	error_history[history_idx] = error;
 8001524:	48b9      	ldr	r0, [pc, #740]	@ (800180c <calculate_heading_pid_simplified+0x354>)
 8001526:	4eba      	ldr	r6, [pc, #744]	@ (8001810 <calculate_heading_pid_simplified+0x358>)
 8001528:	7801      	ldrb	r1, [r0, #0]
	history_idx = (history_idx + 1) % 3;
 800152a:	4aba      	ldr	r2, [pc, #744]	@ (8001814 <calculate_heading_pid_simplified+0x35c>)
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 800152c:	f8df 833c 	ldr.w	r8, [pc, #828]	@ 800186c <calculate_heading_pid_simplified+0x3b4>
	history_idx = (history_idx + 1) % 3;
 8001530:	1c4b      	adds	r3, r1, #1
 8001532:	fba2 7203 	umull	r7, r2, r2, r3
	error_history[history_idx] = error;
 8001536:	eb06 0181 	add.w	r1, r6, r1, lsl #2
	if (fabs(error) < 20.0f) { // Only check when close to target
 800153a:	eef0 9ac8 	vabs.f32	s19, s16
 800153e:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
	error_history[history_idx] = error;
 8001542:	ed81 8a00 	vstr	s16, [r1]
	history_idx = (history_idx + 1) % 3;
 8001546:	f402 71ff 	and.w	r1, r2, #510	@ 0x1fe
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 800154a:	edd8 8a00 	vldr	s17, [r8]
			integral *= 0.5f; // Reduce integral windup
 800154e:	4fb2      	ldr	r7, [pc, #712]	@ (8001818 <calculate_heading_pid_simplified+0x360>)
	history_idx = (history_idx + 1) % 3;
 8001550:	eb01 0252 	add.w	r2, r1, r2, lsr #1
	if (fabs(error) < 20.0f) { // Only check when close to target
 8001554:	eef4 9ae7 	vcmpe.f32	s19, s15
	history_idx = (history_idx + 1) % 3;
 8001558:	1a9b      	subs	r3, r3, r2
	if (fabs(error) < 20.0f) { // Only check when close to target
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 800155e:	ee28 7a28 	vmul.f32	s14, s16, s17
			integral *= 0.5f; // Reduce integral windup
 8001562:	ed97 0a00 	vldr	s0, [r7]
	history_idx = (history_idx + 1) % 3;
 8001566:	7003      	strb	r3, [r0, #0]
	if (fabs(error) < 20.0f) { // Only check when close to target
 8001568:	d548      	bpl.n	80015fc <calculate_heading_pid_simplified+0x144>
			if ((error_history[i] * error_history[i + 1]) < 0) {
 800156a:	edd6 6a01 	vldr	s13, [r6, #4]
 800156e:	edd6 7a00 	vldr	s15, [r6]
 8001572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	d460      	bmi.n	8001642 <calculate_heading_pid_simplified+0x18a>
 8001580:	edd6 7a02 	vldr	s15, [r6, #8]
 8001584:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001588:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	d457      	bmi.n	8001642 <calculate_heading_pid_simplified+0x18a>
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 8001592:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	f100 80f6 	bmi.w	800178a <calculate_heading_pid_simplified+0x2d2>
	if (fabs(error) < dead_zone) {
 800159e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80015a2:	eef4 9ae7 	vcmpe.f32	s19, s15
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	f140 80fd 	bpl.w	80017a8 <calculate_heading_pid_simplified+0x2f0>
		output_filtered *= 0.9f;
 80015ae:	4b93      	ldr	r3, [pc, #588]	@ (80017fc <calculate_heading_pid_simplified+0x344>)
		previous_error = error;
 80015b0:	ed88 8a00 	vstr	s16, [r8]
}
 80015b4:	ecbd 8b0a 	vpop	{d8-d12}
		output_filtered *= 0.9f;
 80015b8:	edd3 7a00 	vldr	s15, [r3]
		integral *= 0.95f;
 80015bc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800181c <calculate_heading_pid_simplified+0x364>
		output_filtered *= 0.9f;
 80015c0:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8001820 <calculate_heading_pid_simplified+0x368>
		last_time = now;
 80015c4:	602c      	str	r4, [r5, #0]
		integral *= 0.95f;
 80015c6:	ee20 7a07 	vmul.f32	s14, s0, s14
		output_filtered *= 0.9f;
 80015ca:	ee27 0aa6 	vmul.f32	s0, s15, s13
		integral *= 0.95f;
 80015ce:	ed87 7a00 	vstr	s14, [r7]
		output_filtered *= 0.9f;
 80015d2:	ed83 0a00 	vstr	s0, [r3]
}
 80015d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	while (error < -180.0f)
 80015da:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8001824 <calculate_heading_pid_simplified+0x36c>
 80015de:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d59d      	bpl.n	8001524 <calculate_heading_pid_simplified+0x6c>
		error += 360.0f;
 80015e8:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8001808 <calculate_heading_pid_simplified+0x350>
 80015ec:	ee38 8a07 	vadd.f32	s16, s16, s14
	while (error < -180.0f)
 80015f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	d4f8      	bmi.n	80015ec <calculate_heading_pid_simplified+0x134>
 80015fa:	e793      	b.n	8001524 <calculate_heading_pid_simplified+0x6c>
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 80015fc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001604:	f100 80dd 	bmi.w	80017c2 <calculate_heading_pid_simplified+0x30a>
	if (fabs(error) > 60.0f) {
 8001608:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8001870 <calculate_heading_pid_simplified+0x3b8>
 800160c:	eef4 9ac7 	vcmpe.f32	s19, s14
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	f300 80e2 	bgt.w	80017dc <calculate_heading_pid_simplified+0x324>
	} else if (fabs(error) > 20.0f) {
 8001618:	eef4 9ae7 	vcmpe.f32	s19, s15
 800161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001620:	f340 80c2 	ble.w	80017a8 <calculate_heading_pid_simplified+0x2f0>
	float proportional = kp * error;
 8001624:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 8001628:	2600      	movs	r6, #0
 800162a:	ee28 9a09 	vmul.f32	s18, s16, s18
		kd = 0.15f;
 800162e:	ed9f ca7e 	vldr	s24, [pc, #504]	@ 8001828 <calculate_heading_pid_simplified+0x370>
		ki = 0.03f;
 8001632:	eddf ba7e 	vldr	s23, [pc, #504]	@ 800182c <calculate_heading_pid_simplified+0x374>
		max_output = 20.0f;
 8001636:	eeb0 aa67 	vmov.f32	s20, s15
	float proportional = kp * error;
 800163a:	eebb ba04 	vmov.f32	s22, #180	@ 0xc1a00000 -20.0
 800163e:	46b1      	mov	r9, r6
 8001640:	e024      	b.n	800168c <calculate_heading_pid_simplified+0x1d4>
		if (sign_changes >= 1 && (now - last_oscillation_time) > 1000) {
 8001642:	4a7b      	ldr	r2, [pc, #492]	@ (8001830 <calculate_heading_pid_simplified+0x378>)
 8001644:	6813      	ldr	r3, [r2, #0]
 8001646:	1ae3      	subs	r3, r4, r3
 8001648:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800164c:	d9a1      	bls.n	8001592 <calculate_heading_pid_simplified+0xda>
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 800164e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
			integral *= 0.5f; // Reduce integral windup
 8001652:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			integral *= 0.5f; // Reduce integral windup
 800165a:	ee20 0a27 	vmul.f32	s0, s0, s15
			last_oscillation_time = now;
 800165e:	6014      	str	r4, [r2, #0]
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 8001660:	f100 812f 	bmi.w	80018c2 <calculate_heading_pid_simplified+0x40a>
	if (fabs(error) < dead_zone) {
 8001664:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8001668:	eef4 9ae7 	vcmpe.f32	s19, s15
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	d49d      	bmi.n	80015ae <calculate_heading_pid_simplified+0xf6>
		if ((now - overshoot_cooldown) > 1000) {
 8001672:	ed9f ca70 	vldr	s24, [pc, #448]	@ 8001834 <calculate_heading_pid_simplified+0x37c>
 8001676:	eddf ba70 	vldr	s23, [pc, #448]	@ 8001838 <calculate_heading_pid_simplified+0x380>
 800167a:	eeb0 9a48 	vmov.f32	s18, s16
 800167e:	eeba ba05 	vmov.f32	s22, #165	@ 0xc1280000 -10.5
 8001682:	eeb2 aa05 	vmov.f32	s20, #37	@ 0x41280000  10.5
 8001686:	f04f 0900 	mov.w	r9, #0
	float proportional = kp * error;
 800168a:	2601      	movs	r6, #1
	float derivative = kd * (error - previous_error) / dt;
 800168c:	ee78 8a68 	vsub.f32	s17, s16, s17
	integral = fmaxf(-50.0f, fminf(50.0f, integral)); // Simple clamping
 8001690:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800183c <calculate_heading_pid_simplified+0x384>
 8001694:	eeaa 0a88 	vfma.f32	s0, s21, s16
 8001698:	f011 faa5 	bl	8012be6 <fminf>
	float derivative = kd * (error - previous_error) / dt;
 800169c:	ee68 8a8c 	vmul.f32	s17, s17, s24
	integral = fmaxf(-50.0f, fminf(50.0f, integral)); // Simple clamping
 80016a0:	eddf 0a67 	vldr	s1, [pc, #412]	@ 8001840 <calculate_heading_pid_simplified+0x388>
 80016a4:	f011 fa82 	bl	8012bac <fmaxf>
	float derivative = kd * (error - previous_error) / dt;
 80016a8:	eec8 0aaa 	vdiv.f32	s1, s17, s21
	float raw_output = proportional + integral_term + derivative;
 80016ac:	eea0 9a2b 	vfma.f32	s18, s0, s23
	integral = fmaxf(-50.0f, fminf(50.0f, integral)); // Simple clamping
 80016b0:	ed87 0a00 	vstr	s0, [r7]
	raw_output = fmaxf(-max_output, fminf(max_output, raw_output));
 80016b4:	ee79 0a20 	vadd.f32	s1, s18, s1
 80016b8:	eeb0 0a4a 	vmov.f32	s0, s20
 80016bc:	f011 fa93 	bl	8012be6 <fminf>
 80016c0:	eef0 0a4b 	vmov.f32	s1, s22
 80016c4:	f011 fa72 	bl	8012bac <fmaxf>
	float rate_limit = fabs(error) > 30.0f ? 2.0f : 3.0f;
 80016c8:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 80016cc:	eef4 9ae7 	vcmpe.f32	s19, s15
 80016d0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001844 <calculate_heading_pid_simplified+0x38c>
 80016d4:	ed9f 6a5c 	vldr	s12, [pc, #368]	@ 8001848 <calculate_heading_pid_simplified+0x390>
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80016e0:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80016e4:	bfd8      	it	le
 80016e6:	eeb0 7a46 	vmovle.f32	s14, s12
 80016ea:	bfd8      	it	le
 80016ec:	eef0 7a66 	vmovle.f32	s15, s13
 80016f0:	f1b9 0f00 	cmp.w	r9, #0
 80016f4:	bf08      	it	eq
 80016f6:	eeb0 7a67 	vmoveq.f32	s14, s15
	if (oscillation)
 80016fa:	b11e      	cbz	r6, 8001704 <calculate_heading_pid_simplified+0x24c>
		rate_limit *= 0.5f;
 80016fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001700:	ee27 7a27 	vmul.f32	s14, s14, s15
	float output_diff = raw_output - output_filtered;
 8001704:	4b3d      	ldr	r3, [pc, #244]	@ (80017fc <calculate_heading_pid_simplified+0x344>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee30 0a67 	vsub.f32	s0, s0, s15
	if (fabs(output_diff) > rate_limit) {
 800170e:	eef0 6ac0 	vabs.f32	s13, s0
 8001712:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	dd08      	ble.n	800172e <calculate_heading_pid_simplified+0x276>
		output_diff = (output_diff > 0) ? rate_limit : -rate_limit;
 800171c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	bfd4      	ite	le
 8001726:	eeb1 0a47 	vnegle.f32	s0, s14
 800172a:	eeb0 0a47 	vmovgt.f32	s0, s14
	output_filtered += output_diff;
 800172e:	ee37 0a80 	vadd.f32	s0, s15, s0
	if (fabs(error) < 20.0f && fabs(error) > 3.0f) {
 8001732:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8001736:	eef4 9ae7 	vcmpe.f32	s19, s15
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	output_filtered += output_diff;
 800173e:	ed83 0a00 	vstr	s0, [r3]
	if (fabs(error) < 20.0f && fabs(error) > 3.0f) {
 8001742:	d515      	bpl.n	8001770 <calculate_heading_pid_simplified+0x2b8>
 8001744:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001748:	eef4 9ac7 	vcmpe.f32	s19, s14
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	dd0e      	ble.n	8001770 <calculate_heading_pid_simplified+0x2b8>
		float approach_factor = fabs(error) / 20.0f;
 8001752:	ee89 7aa7 	vdiv.f32	s14, s19, s15
		if (approach_factor < 0.6f)
 8001756:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 800184c <calculate_heading_pid_simplified+0x394>
			approach_factor = 0.6f;
 800175a:	eeb4 7a67 	vcmp.f32	s14, s15
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	bf48      	it	mi
 8001764:	eeb0 7a67 	vmovmi.f32	s14, s15
		output_filtered *= approach_factor;
 8001768:	ee20 0a07 	vmul.f32	s0, s0, s14
 800176c:	ed83 0a00 	vstr	s0, [r3]
	heading_error = error;
 8001770:	4a37      	ldr	r2, [pc, #220]	@ (8001850 <calculate_heading_pid_simplified+0x398>)
	previous_error = error;
 8001772:	ed88 8a00 	vstr	s16, [r8]
	heading_error = error;
 8001776:	ed82 8a00 	vstr	s16, [r2]
}
 800177a:	ecbd 8b0a 	vpop	{d8-d12}
	heading_pid_output = output_filtered;
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <calculate_heading_pid_simplified+0x39c>)
	last_time = now;
 8001780:	602c      	str	r4, [r5, #0]
	heading_pid_output = output_filtered;
 8001782:	ed83 0a00 	vstr	s0, [r3]
}
 8001786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 800178a:	eef2 7a0e 	vmov.f32	s15, #46	@ 0x41700000  15.0
 800178e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	f77f af02 	ble.w	800159e <calculate_heading_pid_simplified+0xe6>
		if ((now - overshoot_cooldown) > 1000) {
 800179a:	4a2f      	ldr	r2, [pc, #188]	@ (8001858 <calculate_heading_pid_simplified+0x3a0>)
 800179c:	6813      	ldr	r3, [r2, #0]
 800179e:	1ae3      	subs	r3, r4, r3
 80017a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017a4:	f200 80dd 	bhi.w	8001962 <calculate_heading_pid_simplified+0x4aa>
	float proportional = kp * error;
 80017a8:	2600      	movs	r6, #0
 80017aa:	ee38 9a08 	vadd.f32	s18, s16, s16
		kd = 0.2f;
 80017ae:	ed9f ca2b 	vldr	s24, [pc, #172]	@ 800185c <calculate_heading_pid_simplified+0x3a4>
		ki = 0.04f;
 80017b2:	eddf ba2b 	vldr	s23, [pc, #172]	@ 8001860 <calculate_heading_pid_simplified+0x3a8>
	float proportional = kp * error;
 80017b6:	eeba ba0e 	vmov.f32	s22, #174	@ 0xc1700000 -15.0
		max_output = 15.0f;
 80017ba:	eeb2 aa0e 	vmov.f32	s20, #46	@ 0x41700000  15.0
	float proportional = kp * error;
 80017be:	46b1      	mov	r9, r6
 80017c0:	e764      	b.n	800168c <calculate_heading_pid_simplified+0x1d4>
		if ((now - overshoot_cooldown) > 1000) {
 80017c2:	4a25      	ldr	r2, [pc, #148]	@ (8001858 <calculate_heading_pid_simplified+0x3a0>)
 80017c4:	6813      	ldr	r3, [r2, #0]
 80017c6:	1ae3      	subs	r3, r4, r3
 80017c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017cc:	d858      	bhi.n	8001880 <calculate_heading_pid_simplified+0x3c8>
	if (fabs(error) > 60.0f) {
 80017ce:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001870 <calculate_heading_pid_simplified+0x3b8>
 80017d2:	eef4 9ac7 	vcmpe.f32	s19, s14
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	dd6b      	ble.n	80018b4 <calculate_heading_pid_simplified+0x3fc>
 80017dc:	2600      	movs	r6, #0
		kd = 0.1f;
 80017de:	ed9f ca21 	vldr	s24, [pc, #132]	@ 8001864 <calculate_heading_pid_simplified+0x3ac>
		ki = 0.02f;
 80017e2:	eddf ba21 	vldr	s23, [pc, #132]	@ 8001868 <calculate_heading_pid_simplified+0x3b0>
	if (fabs(error) > 60.0f) {
 80017e6:	eeb0 9a48 	vmov.f32	s18, s16
 80017ea:	eebb ba09 	vmov.f32	s22, #185	@ 0xc1c80000 -25.0
		max_output = 25.0f;
 80017ee:	eeb3 aa09 	vmov.f32	s20, #57	@ 0x41c80000  25.0
	if (fabs(error) > 60.0f) {
 80017f2:	46b1      	mov	r9, r6
 80017f4:	e74a      	b.n	800168c <calculate_heading_pid_simplified+0x1d4>
 80017f6:	bf00      	nop
 80017f8:	2000053c 	.word	0x2000053c
 80017fc:	20000540 	.word	0x20000540
 8001800:	447a0000 	.word	0x447a0000
 8001804:	43340000 	.word	0x43340000
 8001808:	43b40000 	.word	0x43b40000
 800180c:	20000544 	.word	0x20000544
 8001810:	20000548 	.word	0x20000548
 8001814:	aaaaaaab 	.word	0xaaaaaaab
 8001818:	20000558 	.word	0x20000558
 800181c:	3f733333 	.word	0x3f733333
 8001820:	3f666666 	.word	0x3f666666
 8001824:	c3340000 	.word	0xc3340000
 8001828:	3e19999a 	.word	0x3e19999a
 800182c:	3cf5c28f 	.word	0x3cf5c28f
 8001830:	20000554 	.word	0x20000554
 8001834:	3df5c290 	.word	0x3df5c290
 8001838:	3c449ba6 	.word	0x3c449ba6
 800183c:	42480000 	.word	0x42480000
 8001840:	c2480000 	.word	0xc2480000
 8001844:	3fb33333 	.word	0x3fb33333
 8001848:	40066666 	.word	0x40066666
 800184c:	3f19999a 	.word	0x3f19999a
 8001850:	200004e4 	.word	0x200004e4
 8001854:	200004e8 	.word	0x200004e8
 8001858:	20000560 	.word	0x20000560
 800185c:	3e4ccccd 	.word	0x3e4ccccd
 8001860:	3d23d70a 	.word	0x3d23d70a
 8001864:	3dcccccd 	.word	0x3dcccccd
 8001868:	3ca3d70a 	.word	0x3ca3d70a
 800186c:	2000055c 	.word	0x2000055c
 8001870:	42700000 	.word	0x42700000
 8001874:	3f333333 	.word	0x3f333333
 8001878:	3da3d70b 	.word	0x3da3d70b
 800187c:	3c23d70a 	.word	0x3c23d70a
 8001880:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001870 <calculate_heading_pid_simplified+0x3b8>
			integral *= 0.7f;
 8001884:	ed1f 9a05 	vldr	s18, [pc, #-20]	@ 8001874 <calculate_heading_pid_simplified+0x3bc>
			overshoot_cooldown = now;
 8001888:	6014      	str	r4, [r2, #0]
	if (fabs(error) > 60.0f) {
 800188a:	eef4 9ac7 	vcmpe.f32	s19, s14
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			integral *= 0.7f;
 8001892:	ee20 0a09 	vmul.f32	s0, s0, s18
	if (fabs(error) > 60.0f) {
 8001896:	dd35      	ble.n	8001904 <calculate_heading_pid_simplified+0x44c>
	float proportional = kp * error;
 8001898:	ee28 9a09 	vmul.f32	s18, s16, s18
		kd *= 0.8f;
 800189c:	ed1f ca0a 	vldr	s24, [pc, #-40]	@ 8001878 <calculate_heading_pid_simplified+0x3c0>
		ki *= 0.5f;
 80018a0:	ed5f ba0a 	vldr	s23, [pc, #-40]	@ 800187c <calculate_heading_pid_simplified+0x3c4>
		max_output *= 0.8f;
 80018a4:	eeb0 aa67 	vmov.f32	s20, s15
	float proportional = kp * error;
 80018a8:	eebb ba04 	vmov.f32	s22, #180	@ 0xc1a00000 -20.0
 80018ac:	2600      	movs	r6, #0
 80018ae:	f04f 0901 	mov.w	r9, #1
 80018b2:	e6eb      	b.n	800168c <calculate_heading_pid_simplified+0x1d4>
	} else if (fabs(error) > 20.0f) {
 80018b4:	eef4 9ae7 	vcmpe.f32	s19, s15
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	f73f aeb2 	bgt.w	8001624 <calculate_heading_pid_simplified+0x16c>
 80018c0:	e772      	b.n	80017a8 <calculate_heading_pid_simplified+0x2f0>
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 80018c2:	eef2 7a0e 	vmov.f32	s15, #46	@ 0x41700000  15.0
 80018c6:	eef4 9ae7 	vcmpe.f32	s19, s15
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	f77f aec9 	ble.w	8001664 <calculate_heading_pid_simplified+0x1ac>
		if ((now - overshoot_cooldown) > 1000) {
 80018d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <calculate_heading_pid_simplified+0x4cc>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	1aa2      	subs	r2, r4, r2
 80018d8:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80018dc:	f67f aec9 	bls.w	8001672 <calculate_heading_pid_simplified+0x1ba>
			integral *= 0.7f;
 80018e0:	ed9f 9a29 	vldr	s18, [pc, #164]	@ 8001988 <calculate_heading_pid_simplified+0x4d0>
	float proportional = kp * error;
 80018e4:	ed9f ba29 	vldr	s22, [pc, #164]	@ 800198c <calculate_heading_pid_simplified+0x4d4>
 80018e8:	ed9f aa29 	vldr	s20, [pc, #164]	@ 8001990 <calculate_heading_pid_simplified+0x4d8>
 80018ec:	ed9f ca29 	vldr	s24, [pc, #164]	@ 8001994 <calculate_heading_pid_simplified+0x4dc>
 80018f0:	eddf ba29 	vldr	s23, [pc, #164]	@ 8001998 <calculate_heading_pid_simplified+0x4e0>
			overshoot_cooldown = now;
 80018f4:	601c      	str	r4, [r3, #0]
			integral *= 0.7f;
 80018f6:	ee20 0a09 	vmul.f32	s0, s0, s18
	float proportional = kp * error;
 80018fa:	f04f 0901 	mov.w	r9, #1
 80018fe:	ee28 9a09 	vmul.f32	s18, s16, s18
 8001902:	e6c2      	b.n	800168a <calculate_heading_pid_simplified+0x1d2>
	} else if (fabs(error) > 20.0f) {
 8001904:	eef4 9ae7 	vcmpe.f32	s19, s15
 8001908:	ed9f ca24 	vldr	s24, [pc, #144]	@ 800199c <calculate_heading_pid_simplified+0x4e4>
 800190c:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80019a0 <calculate_heading_pid_simplified+0x4e8>
 8001910:	eddf ba24 	vldr	s23, [pc, #144]	@ 80019a4 <calculate_heading_pid_simplified+0x4ec>
 8001914:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80019a8 <calculate_heading_pid_simplified+0x4f0>
 8001918:	ed9f 9a24 	vldr	s18, [pc, #144]	@ 80019ac <calculate_heading_pid_simplified+0x4f4>
 800191c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80019b0 <calculate_heading_pid_simplified+0x4f8>
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	eebb ba00 	vmov.f32	s22, #176	@ 0xc1800000 -16.0
 8001928:	eeba 5a08 	vmov.f32	s10, #168	@ 0xc1400000 -12.0
 800192c:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 8001930:	eef2 5a08 	vmov.f32	s11, #40	@ 0x41400000  12.0
 8001934:	bfd8      	it	le
 8001936:	eeb0 ba45 	vmovle.f32	s22, s10
 800193a:	bfd4      	ite	le
 800193c:	eeb0 aa65 	vmovle.f32	s20, s11
 8001940:	eeb0 aa67 	vmovgt.f32	s20, s15
 8001944:	bfd8      	it	le
 8001946:	eeb0 ca46 	vmovle.f32	s24, s12
 800194a:	bfd8      	it	le
 800194c:	eef0 ba66 	vmovle.f32	s23, s13
 8001950:	bfd8      	it	le
 8001952:	eeb0 9a47 	vmovle.f32	s18, s14
	float proportional = kp * error;
 8001956:	ee28 9a09 	vmul.f32	s18, s16, s18
 800195a:	2600      	movs	r6, #0
 800195c:	f04f 0901 	mov.w	r9, #1
 8001960:	e694      	b.n	800168c <calculate_heading_pid_simplified+0x1d4>
			integral *= 0.7f;
 8001962:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8001988 <calculate_heading_pid_simplified+0x4d0>
 8001966:	ed9f ca0e 	vldr	s24, [pc, #56]	@ 80019a0 <calculate_heading_pid_simplified+0x4e8>
 800196a:	eddf ba0f 	vldr	s23, [pc, #60]	@ 80019a8 <calculate_heading_pid_simplified+0x4f0>
 800196e:	ed9f 9a10 	vldr	s18, [pc, #64]	@ 80019b0 <calculate_heading_pid_simplified+0x4f8>
			overshoot_cooldown = now;
 8001972:	6014      	str	r4, [r2, #0]
			integral *= 0.7f;
 8001974:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001978:	eeba ba08 	vmov.f32	s22, #168	@ 0xc1400000 -12.0
 800197c:	eeb2 aa08 	vmov.f32	s20, #40	@ 0x41400000  12.0
 8001980:	e7e9      	b.n	8001956 <calculate_heading_pid_simplified+0x49e>
 8001982:	bf00      	nop
 8001984:	20000560 	.word	0x20000560
 8001988:	3f333333 	.word	0x3f333333
 800198c:	c1066666 	.word	0xc1066666
 8001990:	41066666 	.word	0x41066666
 8001994:	3dc49ba7 	.word	0x3dc49ba7
 8001998:	3bc49ba6 	.word	0x3bc49ba6
 800199c:	3df5c290 	.word	0x3df5c290
 80019a0:	3e23d70b 	.word	0x3e23d70b
 80019a4:	3c75c28f 	.word	0x3c75c28f
 80019a8:	3ca3d70a 	.word	0x3ca3d70a
 80019ac:	3f866666 	.word	0x3f866666
 80019b0:	3fb33333 	.word	0x3fb33333

080019b4 <reset_heading_pid>:

// Reset PID controller
void reset_heading_pid(void) {
 80019b4:	b510      	push	{r4, lr}
	pid_integral = 0.0f;
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <reset_heading_pid+0x24>)
	pid_previous_error = 0.0f;
 80019b8:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <reset_heading_pid+0x28>)
	pid_output_filtered = 0.0f;  // Reset filtered output
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <reset_heading_pid+0x2c>)
	pid_integral = 0.0f;
 80019bc:	2400      	movs	r4, #0
 80019be:	600c      	str	r4, [r1, #0]
	pid_previous_error = 0.0f;
 80019c0:	6014      	str	r4, [r2, #0]
	pid_output_filtered = 0.0f;  // Reset filtered output
 80019c2:	601c      	str	r4, [r3, #0]
	pid_last_time = HAL_GetTick();
 80019c4:	f005 fac2 	bl	8006f4c <HAL_GetTick>
 80019c8:	4906      	ldr	r1, [pc, #24]	@ (80019e4 <reset_heading_pid+0x30>)
	heading_error = 0.0f;
 80019ca:	4a07      	ldr	r2, [pc, #28]	@ (80019e8 <reset_heading_pid+0x34>)
	heading_pid_output = 0.0f;
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <reset_heading_pid+0x38>)
	pid_last_time = HAL_GetTick();
 80019ce:	6008      	str	r0, [r1, #0]
	heading_error = 0.0f;
 80019d0:	6014      	str	r4, [r2, #0]
	heading_pid_output = 0.0f;
 80019d2:	601c      	str	r4, [r3, #0]
}
 80019d4:	bd10      	pop	{r4, pc}
 80019d6:	bf00      	nop
 80019d8:	200004ec 	.word	0x200004ec
 80019dc:	200004f0 	.word	0x200004f0
 80019e0:	200004fc 	.word	0x200004fc
 80019e4:	200004f4 	.word	0x200004f4
 80019e8:	200004e4 	.word	0x200004e4
 80019ec:	200004e8 	.word	0x200004e8

080019f0 <set_heading_lock>:
// Updated set heading lock function
void set_heading_lock(float compass_heading) {
 80019f0:	b508      	push	{r3, lr}
	locked_heading = compass_to_robot_front(compass_heading);
 80019f2:	f000 f819 	bl	8001a28 <compass_to_robot_front>
	heading_lock_enabled = 1;
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <set_heading_lock+0x20>)
	locked_heading = compass_to_robot_front(compass_heading);
 80019f8:	4906      	ldr	r1, [pc, #24]	@ (8001a14 <set_heading_lock+0x24>)
	heading_lock_enabled = 1;
 80019fa:	2201      	movs	r2, #1
	locked_heading = compass_to_robot_front(compass_heading);
 80019fc:	ed81 0a00 	vstr	s0, [r1]
	heading_lock_enabled = 1;
 8001a00:	701a      	strb	r2, [r3, #0]
	reset_heading_pid();
 8001a02:	f7ff ffd7 	bl	80019b4 <reset_heading_pid>
	save_heading_lock_to_eeprom(); // Add this line
}
 8001a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	save_heading_lock_to_eeprom(); // Add this line
 8001a0a:	f000 b82d 	b.w	8001a68 <save_heading_lock_to_eeprom>
 8001a0e:	bf00      	nop
 8001a10:	200004de 	.word	0x200004de
 8001a14:	200004e0 	.word	0x200004e0

08001a18 <disable_heading_lock>:

// Disable heading lock
void disable_heading_lock(void) {
	heading_lock_enabled = 0;
 8001a18:	4b02      	ldr	r3, [pc, #8]	@ (8001a24 <disable_heading_lock+0xc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
	reset_heading_pid();
 8001a1e:	f7ff bfc9 	b.w	80019b4 <reset_heading_pid>
 8001a22:	bf00      	nop
 8001a24:	200004de 	.word	0x200004de

08001a28 <compass_to_robot_front>:
}

// Convert compass heading to robot front direction
float compass_to_robot_front(float compass_heading) {
	float robot_front = compass_heading + ROBOT_FRONT_OFFSET;
 8001a28:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001a60 <compass_to_robot_front+0x38>

	// Normalize to 0-360 range
	while (robot_front >= 360.0f) {
 8001a2c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8001a64 <compass_to_robot_front+0x3c>
	float robot_front = compass_heading + ROBOT_FRONT_OFFSET;
 8001a30:	ee30 0a07 	vadd.f32	s0, s0, s14
	while (robot_front >= 360.0f) {
 8001a34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	db09      	blt.n	8001a52 <compass_to_robot_front+0x2a>
		robot_front -= 360.0f;
 8001a3e:	ee30 0a67 	vsub.f32	s0, s0, s15
	while (robot_front >= 360.0f) {
 8001a42:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	daf8      	bge.n	8001a3e <compass_to_robot_front+0x16>
 8001a4c:	4770      	bx	lr
	}
	while (robot_front < 0.0f) {
		robot_front += 360.0f;
 8001a4e:	ee30 0a27 	vadd.f32	s0, s0, s15
	while (robot_front < 0.0f) {
 8001a52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	d4f8      	bmi.n	8001a4e <compass_to_robot_front+0x26>
	}

	return robot_front;
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	438d0000 	.word	0x438d0000
 8001a64:	43b40000 	.word	0x43b40000

08001a68 <save_heading_lock_to_eeprom>:
 osMutexRelease(EEPROMMutexHandle);
 return result;
 }
 */

void save_heading_lock_to_eeprom(void) {
 8001a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (heading_lock_enabled) {
 8001a6a:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <save_heading_lock_to_eeprom+0x94>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b903      	cbnz	r3, 8001a72 <save_heading_lock_to_eeprom+0xa>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
			}
		}
		osMutexRelease(I2C1MutexHandle);
	}
}
 8001a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8001a72:	4e23      	ldr	r6, [pc, #140]	@ (8001b00 <save_heading_lock_to_eeprom+0x98>)
		eeStorage.magic_number = EE_MAGIC_NUMBER;
 8001a74:	4c23      	ldr	r4, [pc, #140]	@ (8001b04 <save_heading_lock_to_eeprom+0x9c>)
		osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8001a76:	6830      	ldr	r0, [r6, #0]
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	f00b f87f 	bl	800cb7e <osMutexAcquire>
		eeStorage.saved_locked_heading = locked_heading;
 8001a80:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <save_heading_lock_to_eeprom+0xa0>)
		eeStorage.magic_number = EE_MAGIC_NUMBER;
 8001a82:	4a22      	ldr	r2, [pc, #136]	@ (8001b0c <save_heading_lock_to_eeprom+0xa4>)
		eeStorage.saved_locked_heading = locked_heading;
 8001a84:	681b      	ldr	r3, [r3, #0]
		eeStorage.magic_number = EE_MAGIC_NUMBER;
 8001a86:	6022      	str	r2, [r4, #0]
		eeStorage.saved_locked_heading = locked_heading;
 8001a88:	6063      	str	r3, [r4, #4]
		eeStorage.heading_lock_was_active = 1;
 8001a8a:	2701      	movs	r7, #1
		HAL_StatusTypeDef status = MB85rc_Bus_Write(MB85rc_ADDRESS, 0x0000, 
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	4622      	mov	r2, r4
 8001a90:	2100      	movs	r1, #0
 8001a92:	20a0      	movs	r0, #160	@ 0xa0
		eeStorage.heading_lock_was_active = 1;
 8001a94:	7227      	strb	r7, [r4, #8]
		HAL_StatusTypeDef status = MB85rc_Bus_Write(MB85rc_ADDRESS, 0x0000, 
 8001a96:	f001 fe73 	bl	8003780 <MB85rc_Bus_Write>
		if (status != HAL_OK) {
 8001a9a:	4605      	mov	r5, r0
 8001a9c:	b920      	cbnz	r0, 8001aa8 <save_heading_lock_to_eeprom+0x40>
		osMutexRelease(I2C1MutexHandle);
 8001a9e:	6830      	ldr	r0, [r6, #0]
}
 8001aa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		osMutexRelease(I2C1MutexHandle);
 8001aa4:	f00b b8b6 	b.w	800cc14 <osMutexRelease>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aae:	4818      	ldr	r0, [pc, #96]	@ (8001b10 <save_heading_lock_to_eeprom+0xa8>)
 8001ab0:	f006 f9ec 	bl	8007e8c <HAL_GPIO_WritePin>
			printf("FRAM Write Error: 0x%02X at tick %lu\r\n", status, HAL_GetTick());
 8001ab4:	f005 fa4a 	bl	8006f4c <HAL_GetTick>
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4602      	mov	r2, r0
 8001abc:	4815      	ldr	r0, [pc, #84]	@ (8001b14 <save_heading_lock_to_eeprom+0xac>)
 8001abe:	f00e fe47 	bl	8010750 <iprintf>
			HAL_I2C_DeInit(&hi2c1);
 8001ac2:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <save_heading_lock_to_eeprom+0xb0>)
 8001ac4:	f006 fb72 	bl	80081ac <HAL_I2C_DeInit>
			HAL_Delay(10);
 8001ac8:	200a      	movs	r0, #10
 8001aca:	f005 fa4b 	bl	8006f64 <HAL_Delay>
			MX_I2C1_Init();
 8001ace:	f000 fba9 	bl	8002224 <MX_I2C1_Init>
			status = MB85rc_Bus_Write(MB85rc_ADDRESS, 0x0000, 
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	20a0      	movs	r0, #160	@ 0xa0
 8001ada:	f001 fe51 	bl	8003780 <MB85rc_Bus_Write>
			if (status != HAL_OK) {
 8001ade:	b118      	cbz	r0, 8001ae8 <save_heading_lock_to_eeprom+0x80>
				printf("FRAM Write Failed Again - Continuing without save\r\n");
 8001ae0:	480e      	ldr	r0, [pc, #56]	@ (8001b1c <save_heading_lock_to_eeprom+0xb4>)
 8001ae2:	f00e fe9d 	bl	8010820 <puts>
 8001ae6:	e7da      	b.n	8001a9e <save_heading_lock_to_eeprom+0x36>
				printf("FRAM Write Recovered Successfully\r\n");
 8001ae8:	480d      	ldr	r0, [pc, #52]	@ (8001b20 <save_heading_lock_to_eeprom+0xb8>)
 8001aea:	f00e fe99 	bl	8010820 <puts>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001aee:	4808      	ldr	r0, [pc, #32]	@ (8001b10 <save_heading_lock_to_eeprom+0xa8>)
 8001af0:	463a      	mov	r2, r7
 8001af2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af6:	f006 f9c9 	bl	8007e8c <HAL_GPIO_WritePin>
 8001afa:	e7d0      	b.n	8001a9e <save_heading_lock_to_eeprom+0x36>
 8001afc:	200004de 	.word	0x200004de
 8001b00:	20000454 	.word	0x20000454
 8001b04:	20000504 	.word	0x20000504
 8001b08:	200004e0 	.word	0x200004e0
 8001b0c:	48454144 	.word	0x48454144
 8001b10:	40020800 	.word	0x40020800
 8001b14:	08013794 	.word	0x08013794
 8001b18:	20000260 	.word	0x20000260
 8001b1c:	080137bc 	.word	0x080137bc
 8001b20:	080137f0 	.word	0x080137f0

08001b24 <restore_heading_lock_from_eeprom>:

bool restore_heading_lock_from_eeprom(void) {
 8001b24:	b570      	push	{r4, r5, r6, lr}
	bool result = false;
	osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8001b26:	4e2b      	ldr	r6, [pc, #172]	@ (8001bd4 <restore_heading_lock_from_eeprom+0xb0>)

	HAL_StatusTypeDef status = MB85rc_Bus_Read(MB85rc_ADDRESS, 0x0000, 
 8001b28:	4d2b      	ldr	r5, [pc, #172]	@ (8001bd8 <restore_heading_lock_from_eeprom+0xb4>)
	osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8001b2a:	6830      	ldr	r0, [r6, #0]
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	f00b f825 	bl	800cb7e <osMutexAcquire>
	HAL_StatusTypeDef status = MB85rc_Bus_Read(MB85rc_ADDRESS, 0x0000, 
 8001b34:	230c      	movs	r3, #12
 8001b36:	462a      	mov	r2, r5
 8001b38:	2100      	movs	r1, #0
 8001b3a:	20a0      	movs	r0, #160	@ 0xa0
 8001b3c:	f001 fe44 	bl	80037c8 <MB85rc_Bus_Read>
			(uint8_t*) &eeStorage, sizeof(eeStorage_t));

	if (status != HAL_OK) {
 8001b40:	b948      	cbnz	r0, 8001b56 <restore_heading_lock_from_eeprom+0x32>
			eeStorage.saved_locked_heading = 0.0f;
			eeStorage.heading_lock_was_active = 0;
		}
	}

	if (status == HAL_OK && eeStorage.magic_number == EE_MAGIC_NUMBER
 8001b42:	4b26      	ldr	r3, [pc, #152]	@ (8001bdc <restore_heading_lock_from_eeprom+0xb8>)
 8001b44:	682a      	ldr	r2, [r5, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d02f      	beq.n	8001baa <restore_heading_lock_from_eeprom+0x86>
			&& eeStorage.heading_lock_was_active) {
		locked_heading = eeStorage.saved_locked_heading;
		result = true;
	}

	osMutexRelease(I2C1MutexHandle);
 8001b4a:	6830      	ldr	r0, [r6, #0]
	bool result = false;
 8001b4c:	2400      	movs	r4, #0
	osMutexRelease(I2C1MutexHandle);
 8001b4e:	f00b f861 	bl	800cc14 <osMutexRelease>
	return result;
}
 8001b52:	4620      	mov	r0, r4
 8001b54:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	4820      	ldr	r0, [pc, #128]	@ (8001be0 <restore_heading_lock_from_eeprom+0xbc>)
 8001b60:	f006 f994 	bl	8007e8c <HAL_GPIO_WritePin>
		printf("FRAM Read Error: 0x%02X at tick %lu\r\n", status, HAL_GetTick());
 8001b64:	f005 f9f2 	bl	8006f4c <HAL_GetTick>
 8001b68:	4621      	mov	r1, r4
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	481d      	ldr	r0, [pc, #116]	@ (8001be4 <restore_heading_lock_from_eeprom+0xc0>)
 8001b6e:	f00e fdef 	bl	8010750 <iprintf>
		HAL_I2C_DeInit(&hi2c1);
 8001b72:	481d      	ldr	r0, [pc, #116]	@ (8001be8 <restore_heading_lock_from_eeprom+0xc4>)
 8001b74:	f006 fb1a 	bl	80081ac <HAL_I2C_DeInit>
		HAL_Delay(10);
 8001b78:	200a      	movs	r0, #10
 8001b7a:	f005 f9f3 	bl	8006f64 <HAL_Delay>
		MX_I2C1_Init();
 8001b7e:	f000 fb51 	bl	8002224 <MX_I2C1_Init>
		status = MB85rc_Bus_Read(MB85rc_ADDRESS, 0x0000, 
 8001b82:	230c      	movs	r3, #12
 8001b84:	2100      	movs	r1, #0
 8001b86:	462a      	mov	r2, r5
 8001b88:	20a0      	movs	r0, #160	@ 0xa0
 8001b8a:	f001 fe1d 	bl	80037c8 <MB85rc_Bus_Read>
		if (status == HAL_OK) {
 8001b8e:	b9c0      	cbnz	r0, 8001bc2 <restore_heading_lock_from_eeprom+0x9e>
			printf("FRAM Read Recovered Successfully\r\n");
 8001b90:	4816      	ldr	r0, [pc, #88]	@ (8001bec <restore_heading_lock_from_eeprom+0xc8>)
 8001b92:	f00e fe45 	bl	8010820 <puts>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001b96:	2201      	movs	r2, #1
 8001b98:	4811      	ldr	r0, [pc, #68]	@ (8001be0 <restore_heading_lock_from_eeprom+0xbc>)
 8001b9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b9e:	f006 f975 	bl	8007e8c <HAL_GPIO_WritePin>
	if (status == HAL_OK && eeStorage.magic_number == EE_MAGIC_NUMBER
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <restore_heading_lock_from_eeprom+0xb8>)
 8001ba4:	682a      	ldr	r2, [r5, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d1cf      	bne.n	8001b4a <restore_heading_lock_from_eeprom+0x26>
			&& eeStorage.heading_lock_was_active) {
 8001baa:	7a2b      	ldrb	r3, [r5, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0cc      	beq.n	8001b4a <restore_heading_lock_from_eeprom+0x26>
		locked_heading = eeStorage.saved_locked_heading;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <restore_heading_lock_from_eeprom+0xcc>)
 8001bb2:	686a      	ldr	r2, [r5, #4]
	osMutexRelease(I2C1MutexHandle);
 8001bb4:	6830      	ldr	r0, [r6, #0]
		locked_heading = eeStorage.saved_locked_heading;
 8001bb6:	601a      	str	r2, [r3, #0]
		result = true;
 8001bb8:	2401      	movs	r4, #1
	osMutexRelease(I2C1MutexHandle);
 8001bba:	f00b f82b 	bl	800cc14 <osMutexRelease>
}
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
			printf("FRAM Read Failed - Using defaults\r\n");
 8001bc2:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <restore_heading_lock_from_eeprom+0xd0>)
 8001bc4:	f00e fe2c 	bl	8010820 <puts>
			eeStorage.magic_number = 0; // Invalid magic number
 8001bc8:	2300      	movs	r3, #0
			eeStorage.saved_locked_heading = 0.0f;
 8001bca:	2200      	movs	r2, #0
			eeStorage.magic_number = 0; // Invalid magic number
 8001bcc:	602b      	str	r3, [r5, #0]
			eeStorage.saved_locked_heading = 0.0f;
 8001bce:	606a      	str	r2, [r5, #4]
			eeStorage.heading_lock_was_active = 0;
 8001bd0:	722b      	strb	r3, [r5, #8]
	if (status == HAL_OK && eeStorage.magic_number == EE_MAGIC_NUMBER
 8001bd2:	e7ba      	b.n	8001b4a <restore_heading_lock_from_eeprom+0x26>
 8001bd4:	20000454 	.word	0x20000454
 8001bd8:	20000504 	.word	0x20000504
 8001bdc:	48454144 	.word	0x48454144
 8001be0:	40020800 	.word	0x40020800
 8001be4:	08013814 	.word	0x08013814
 8001be8:	20000260 	.word	0x20000260
 8001bec:	0801383c 	.word	0x0801383c
 8001bf0:	200004e0 	.word	0x200004e0
 8001bf4:	08013860 	.word	0x08013860

08001bf8 <get_channel7_position>:

// Get the current position of channel 7 (assumed to be used for mode selection)
ch7_position_t get_channel7_position(void) {
 8001bf8:	b508      	push	{r3, lr}
	if (!is_sbus_signal_valid()) {
 8001bfa:	f7ff fc29 	bl	8001450 <is_sbus_signal_valid>
 8001bfe:	b1b0      	cbz	r0, 8001c2e <get_channel7_position+0x36>
		return CH7_POSITION_UNKNOWN;
	}

	uint16_t ch7_value = sbus_channels[6]; // Channel 7 (index 6)
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <get_channel7_position+0x40>)
 8001c02:	899b      	ldrh	r3, [r3, #12]
 8001c04:	b29b      	uxth	r3, r3

	// Define positions with dead zones (assuming SBUS range 172-1811)
	// Min: 172-500, Mid: 700-1283, Max: 1511-1811
	if (ch7_value >= 172 && ch7_value <= 500) {
 8001c06:	f1a3 02ac 	sub.w	r2, r3, #172	@ 0xac
 8001c0a:	f5b2 7fa4 	cmp.w	r2, #328	@ 0x148
 8001c0e:	d90c      	bls.n	8001c2a <get_channel7_position+0x32>
		return CH7_POSITION_MIN;
	} else if (ch7_value >= 700 && ch7_value <= 1283) {
 8001c10:	f5a3 722f 	sub.w	r2, r3, #700	@ 0x2bc
 8001c14:	f5b2 7f12 	cmp.w	r2, #584	@ 0x248
 8001c18:	d30b      	bcc.n	8001c32 <get_channel7_position+0x3a>
		return CH7_POSITION_MID;
	} else if (ch7_value >= 1511 && ch7_value <= 1811) {
 8001c1a:	f2a3 53e7 	subw	r3, r3, #1511	@ 0x5e7
		return CH7_POSITION_UNKNOWN;
 8001c1e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c22:	bf94      	ite	ls
 8001c24:	2002      	movls	r0, #2
 8001c26:	2003      	movhi	r0, #3
		return CH7_POSITION_MAX;
	}

	return CH7_POSITION_UNKNOWN; // In dead zone or invalid
}
 8001c28:	bd08      	pop	{r3, pc}
		return CH7_POSITION_MIN;
 8001c2a:	2000      	movs	r0, #0
}
 8001c2c:	bd08      	pop	{r3, pc}
		return CH7_POSITION_UNKNOWN;
 8001c2e:	2003      	movs	r0, #3
}
 8001c30:	bd08      	pop	{r3, pc}
		return CH7_POSITION_MID;
 8001c32:	2001      	movs	r0, #1
}
 8001c34:	bd08      	pop	{r3, pc}
 8001c36:	bf00      	nop
 8001c38:	20000484 	.word	0x20000484

08001c3c <print_system_status>:

void print_system_status(void) {
 8001c3c:	b570      	push	{r4, r5, r6, lr}
    printf("\r\n=== OPTIMIZED SYSTEM STATUS ===\r\n");
 8001c3e:	4853      	ldr	r0, [pc, #332]	@ (8001d8c <print_system_status+0x150>)
    printf("CPU: %lu MHz\r\n", HAL_RCC_GetSysClockFreq() / 1000000);
 8001c40:	4c53      	ldr	r4, [pc, #332]	@ (8001d90 <print_system_status+0x154>)
void print_system_status(void) {
 8001c42:	b086      	sub	sp, #24
    printf("\r\n=== OPTIMIZED SYSTEM STATUS ===\r\n");
 8001c44:	f00e fdec 	bl	8010820 <puts>
    printf("CPU: %lu MHz\r\n", HAL_RCC_GetSysClockFreq() / 1000000);
 8001c48:	f008 fb20 	bl	800a28c <HAL_RCC_GetSysClockFreq>
 8001c4c:	fba4 3100 	umull	r3, r1, r4, r0
 8001c50:	0c89      	lsrs	r1, r1, #18
 8001c52:	4850      	ldr	r0, [pc, #320]	@ (8001d94 <print_system_status+0x158>)
 8001c54:	f00e fd7c 	bl	8010750 <iprintf>
    printf("AHB: %lu MHz\r\n", HAL_RCC_GetHCLKFreq() / 1000000);
 8001c58:	f008 fbde 	bl	800a418 <HAL_RCC_GetHCLKFreq>
 8001c5c:	fba4 3100 	umull	r3, r1, r4, r0
 8001c60:	0c89      	lsrs	r1, r1, #18
 8001c62:	484d      	ldr	r0, [pc, #308]	@ (8001d98 <print_system_status+0x15c>)
 8001c64:	f00e fd74 	bl	8010750 <iprintf>
    printf("APB1: %lu MHz\r\n", HAL_RCC_GetPCLK1Freq() / 1000000);
 8001c68:	f008 fbe2 	bl	800a430 <HAL_RCC_GetPCLK1Freq>
 8001c6c:	fba4 3100 	umull	r3, r1, r4, r0
 8001c70:	0c89      	lsrs	r1, r1, #18
 8001c72:	484a      	ldr	r0, [pc, #296]	@ (8001d9c <print_system_status+0x160>)
 8001c74:	f00e fd6c 	bl	8010750 <iprintf>
    printf("APB2: %lu MHz\r\n", HAL_RCC_GetPCLK2Freq() / 1000000);
 8001c78:	f008 fbee 	bl	800a458 <HAL_RCC_GetPCLK2Freq>
 8001c7c:	fba4 4100 	umull	r4, r1, r4, r0
 8001c80:	0c89      	lsrs	r1, r1, #18
 8001c82:	4847      	ldr	r0, [pc, #284]	@ (8001da0 <print_system_status+0x164>)
 8001c84:	f00e fd64 	bl	8010750 <iprintf>
    #if defined(SCB_CCR_IC_Msk) && defined(SCB_CCR_DC_Msk)
        printf("I-Cache: %s\r\n", (SCB->CCR & SCB_CCR_IC_Msk) ? "ON" : "OFF");
        printf("D-Cache: %s\r\n", (SCB->CCR & SCB_CCR_DC_Msk) ? "ON" : "OFF");
    #else
        // STM32F4 doesn't have separate I/D cache control in CCR
        printf("Cache: Enabled\r\n");
 8001c88:	4846      	ldr	r0, [pc, #280]	@ (8001da4 <print_system_status+0x168>)
 8001c8a:	f00e fdc9 	bl	8010820 <puts>
    #endif

    // FreeRTOS heap status
    if (osKernelGetState() == osKernelRunning) {
 8001c8e:	f00a fdd5 	bl	800c83c <osKernelGetState>
 8001c92:	2802      	cmp	r0, #2
 8001c94:	d06a      	beq.n	8001d6c <print_system_status+0x130>
        printf("Free Heap: %u bytes\r\n", xPortGetFreeHeapSize());
        printf("Current Task: %s\r\n", osThreadGetName(osThreadGetId()));
    } else {
        printf("FreeRTOS: Not Running\r\n");
 8001c96:	4844      	ldr	r0, [pc, #272]	@ (8001da8 <print_system_status+0x16c>)
 8001c98:	f00e fdc2 	bl	8010820 <puts>
    }

    // Timer frequencies - Fixed format specifiers
    uint32_t tim1_freq = HAL_RCC_GetPCLK2Freq() / ((htim1.Init.Prescaler + 1) * (htim1.Init.Period + 1));
 8001c9c:	4c43      	ldr	r4, [pc, #268]	@ (8001dac <print_system_status+0x170>)
    uint32_t tim3_freq = (HAL_RCC_GetPCLK1Freq() * 2) / ((htim3.Init.Prescaler + 1) * (htim3.Init.Period + 1));
 8001c9e:	4d44      	ldr	r5, [pc, #272]	@ (8001db0 <print_system_status+0x174>)
    uint32_t tim1_freq = HAL_RCC_GetPCLK2Freq() / ((htim1.Init.Prescaler + 1) * (htim1.Init.Period + 1));
 8001ca0:	f008 fbda 	bl	800a458 <HAL_RCC_GetPCLK2Freq>
 8001ca4:	68e3      	ldr	r3, [r4, #12]
 8001ca6:	6862      	ldr	r2, [r4, #4]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	fb02 3303 	mla	r3, r2, r3, r3
 8001cae:	fbb0 f6f3 	udiv	r6, r0, r3
    uint32_t tim3_freq = (HAL_RCC_GetPCLK1Freq() * 2) / ((htim3.Init.Prescaler + 1) * (htim3.Init.Period + 1));
 8001cb2:	f008 fbbd 	bl	800a430 <HAL_RCC_GetPCLK1Freq>
 8001cb6:	68eb      	ldr	r3, [r5, #12]
    printf("TIM1 PWM: %lu Hz (%lu steps)\r\n", tim1_freq, (unsigned long)(htim1.Init.Period + 1));
 8001cb8:	68e2      	ldr	r2, [r4, #12]
    uint32_t tim3_freq = (HAL_RCC_GetPCLK1Freq() * 2) / ((htim3.Init.Prescaler + 1) * (htim3.Init.Period + 1));
 8001cba:	686c      	ldr	r4, [r5, #4]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	fb04 3303 	mla	r3, r4, r3, r3
    printf("TIM1 PWM: %lu Hz (%lu steps)\r\n", tim1_freq, (unsigned long)(htim1.Init.Period + 1));
 8001cc2:	4631      	mov	r1, r6
 8001cc4:	3201      	adds	r2, #1
    uint32_t tim3_freq = (HAL_RCC_GetPCLK1Freq() * 2) / ((htim3.Init.Prescaler + 1) * (htim3.Init.Period + 1));
 8001cc6:	0040      	lsls	r0, r0, #1
 8001cc8:	fbb0 f4f3 	udiv	r4, r0, r3
    printf("TIM1 PWM: %lu Hz (%lu steps)\r\n", tim1_freq, (unsigned long)(htim1.Init.Period + 1));
 8001ccc:	4839      	ldr	r0, [pc, #228]	@ (8001db4 <print_system_status+0x178>)
 8001cce:	f00e fd3f 	bl	8010750 <iprintf>
    printf("TIM3 PWM: %lu Hz (%lu steps)\r\n", tim3_freq, (unsigned long)(htim3.Init.Period + 1));
 8001cd2:	68ea      	ldr	r2, [r5, #12]
 8001cd4:	4838      	ldr	r0, [pc, #224]	@ (8001db8 <print_system_status+0x17c>)
           HAL_GetTick() - sbus_last_valid_time);

    // Robot status
    const char *mode_names[] = { "SENSOR", "MOVE", "MOVE_HL" };
    const char *state_names[] = { "IDLE", "RUN" };
    printf("Mode: %s, State: %s\r\n", mode_names[current_mode], state_names[robot_state]);
 8001cd6:	4d39      	ldr	r5, [pc, #228]	@ (8001dbc <print_system_status+0x180>)
    printf("TIM3 PWM: %lu Hz (%lu steps)\r\n", tim3_freq, (unsigned long)(htim3.Init.Period + 1));
 8001cd8:	4621      	mov	r1, r4
 8001cda:	3201      	adds	r2, #1
 8001cdc:	f00e fd38 	bl	8010750 <iprintf>
    printf("I2C1: %s\r\n", (hi2c1.State == HAL_I2C_STATE_READY) ? "READY" : "BUSY");
 8001ce0:	4b37      	ldr	r3, [pc, #220]	@ (8001dc0 <print_system_status+0x184>)
 8001ce2:	4a38      	ldr	r2, [pc, #224]	@ (8001dc4 <print_system_status+0x188>)
 8001ce4:	f893 103d 	ldrb.w	r1, [r3, #61]	@ 0x3d
 8001ce8:	4b37      	ldr	r3, [pc, #220]	@ (8001dc8 <print_system_status+0x18c>)
 8001cea:	4838      	ldr	r0, [pc, #224]	@ (8001dcc <print_system_status+0x190>)
    printf("SBUS: %s (Last: %lu ms ago)\r\n",
 8001cec:	4c38      	ldr	r4, [pc, #224]	@ (8001dd0 <print_system_status+0x194>)
    printf("I2C1: %s\r\n", (hi2c1.State == HAL_I2C_STATE_READY) ? "READY" : "BUSY");
 8001cee:	2920      	cmp	r1, #32
 8001cf0:	bf14      	ite	ne
 8001cf2:	4611      	movne	r1, r2
 8001cf4:	4619      	moveq	r1, r3
 8001cf6:	f00e fd2b 	bl	8010750 <iprintf>
           sbus_signal_valid ? "VALID" : "INVALID",
 8001cfa:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <print_system_status+0x198>)
 8001cfc:	781a      	ldrb	r2, [r3, #0]
    printf("SBUS: %s (Last: %lu ms ago)\r\n",
 8001cfe:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <print_system_status+0x19c>)
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	bf18      	it	ne
 8001d04:	461c      	movne	r4, r3
           HAL_GetTick() - sbus_last_valid_time);
 8001d06:	f005 f921 	bl	8006f4c <HAL_GetTick>
    printf("SBUS: %s (Last: %lu ms ago)\r\n",
 8001d0a:	4b34      	ldr	r3, [pc, #208]	@ (8001ddc <print_system_status+0x1a0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
           HAL_GetTick() - sbus_last_valid_time);
 8001d0e:	4602      	mov	r2, r0
    printf("SBUS: %s (Last: %lu ms ago)\r\n",
 8001d10:	4621      	mov	r1, r4
 8001d12:	1ad2      	subs	r2, r2, r3
 8001d14:	4832      	ldr	r0, [pc, #200]	@ (8001de0 <print_system_status+0x1a4>)
    printf("Mode: %s, State: %s\r\n", mode_names[current_mode], state_names[robot_state]);
 8001d16:	4c33      	ldr	r4, [pc, #204]	@ (8001de4 <print_system_status+0x1a8>)
    printf("SBUS: %s (Last: %lu ms ago)\r\n",
 8001d18:	f00e fd1a 	bl	8010750 <iprintf>
    const char *mode_names[] = { "SENSOR", "MOVE", "MOVE_HL" };
 8001d1c:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <print_system_status+0x1ac>)
 8001d1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    printf("Mode: %s, State: %s\r\n", mode_names[current_mode], state_names[robot_state]);
 8001d22:	782b      	ldrb	r3, [r5, #0]
 8001d24:	7824      	ldrb	r4, [r4, #0]
    const char *mode_names[] = { "SENSOR", "MOVE", "MOVE_HL" };
 8001d26:	ad06      	add	r5, sp, #24
 8001d28:	e905 0007 	stmdb	r5, {r0, r1, r2}
    const char *state_names[] = { "IDLE", "RUN" };
 8001d2c:	492f      	ldr	r1, [pc, #188]	@ (8001dec <print_system_status+0x1b0>)
 8001d2e:	4a30      	ldr	r2, [pc, #192]	@ (8001df0 <print_system_status+0x1b4>)
    printf("Mode: %s, State: %s\r\n", mode_names[current_mode], state_names[robot_state]);
 8001d30:	4830      	ldr	r0, [pc, #192]	@ (8001df4 <print_system_status+0x1b8>)
    const char *state_names[] = { "IDLE", "RUN" };
 8001d32:	e9cd 1201 	strd	r1, r2, [sp, #4]
    printf("Mode: %s, State: %s\r\n", mode_names[current_mode], state_names[robot_state]);
 8001d36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001d3a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8001d3e:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8001d42:	f854 2c14 	ldr.w	r2, [r4, #-20]
 8001d46:	f00e fd03 	bl	8010750 <iprintf>
    printf("Heading Lock: %s\r\n", heading_lock_enabled ? "ENABLED" : "DISABLED");
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <print_system_status+0x1bc>)
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dfc <print_system_status+0x1c0>)
 8001d4e:	7819      	ldrb	r1, [r3, #0]
 8001d50:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <print_system_status+0x1c4>)
 8001d52:	482c      	ldr	r0, [pc, #176]	@ (8001e04 <print_system_status+0x1c8>)
 8001d54:	2900      	cmp	r1, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	4611      	moveq	r1, r2
 8001d5a:	4619      	movne	r1, r3
 8001d5c:	f00e fcf8 	bl	8010750 <iprintf>

    printf("=== END STATUS ===\r\n\r\n");
 8001d60:	4829      	ldr	r0, [pc, #164]	@ (8001e08 <print_system_status+0x1cc>)
}
 8001d62:	b006      	add	sp, #24
 8001d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("=== END STATUS ===\r\n\r\n");
 8001d68:	f00e bd5a 	b.w	8010820 <puts>
        printf("Free Heap: %u bytes\r\n", xPortGetFreeHeapSize());
 8001d6c:	f00d ff10 	bl	800fb90 <xPortGetFreeHeapSize>
 8001d70:	4601      	mov	r1, r0
 8001d72:	4826      	ldr	r0, [pc, #152]	@ (8001e0c <print_system_status+0x1d0>)
 8001d74:	f00e fcec 	bl	8010750 <iprintf>
        printf("Current Task: %s\r\n", osThreadGetName(osThreadGetId()));
 8001d78:	f00a fe55 	bl	800ca26 <osThreadGetId>
 8001d7c:	f00a fe38 	bl	800c9f0 <osThreadGetName>
 8001d80:	4601      	mov	r1, r0
 8001d82:	4823      	ldr	r0, [pc, #140]	@ (8001e10 <print_system_status+0x1d4>)
 8001d84:	f00e fce4 	bl	8010750 <iprintf>
 8001d88:	e788      	b.n	8001c9c <print_system_status+0x60>
 8001d8a:	bf00      	nop
 8001d8c:	080138b8 	.word	0x080138b8
 8001d90:	431bde83 	.word	0x431bde83
 8001d94:	080138dc 	.word	0x080138dc
 8001d98:	080138ec 	.word	0x080138ec
 8001d9c:	080138fc 	.word	0x080138fc
 8001da0:	0801390c 	.word	0x0801390c
 8001da4:	0801391c 	.word	0x0801391c
 8001da8:	08013958 	.word	0x08013958
 8001dac:	200002c0 	.word	0x200002c0
 8001db0:	20000308 	.word	0x20000308
 8001db4:	08013970 	.word	0x08013970
 8001db8:	08013990 	.word	0x08013990
 8001dbc:	200004cc 	.word	0x200004cc
 8001dc0:	20000260 	.word	0x20000260
 8001dc4:	0801388c 	.word	0x0801388c
 8001dc8:	08013884 	.word	0x08013884
 8001dcc:	080139b0 	.word	0x080139b0
 8001dd0:	0801389c 	.word	0x0801389c
 8001dd4:	200004b0 	.word	0x200004b0
 8001dd8:	08013894 	.word	0x08013894
 8001ddc:	200004ac 	.word	0x200004ac
 8001de0:	080139bc 	.word	0x080139bc
 8001de4:	200004ce 	.word	0x200004ce
 8001de8:	08012f68 	.word	0x08012f68
 8001dec:	080139dc 	.word	0x080139dc
 8001df0:	080139e4 	.word	0x080139e4
 8001df4:	080139e8 	.word	0x080139e8
 8001df8:	200004de 	.word	0x200004de
 8001dfc:	080138ac 	.word	0x080138ac
 8001e00:	080138a4 	.word	0x080138a4
 8001e04:	08013a00 	.word	0x08013a00
 8001e08:	08013a14 	.word	0x08013a14
 8001e0c:	0801392c 	.word	0x0801392c
 8001e10:	08013944 	.word	0x08013944

08001e14 <main>:

  /* USER CODE BEGIN 1 */
	// STM32F4 cache configuration (different from STM32F7/H7)
	#if defined(STM32F4)
	    // Enable prefetch buffer for STM32F4
	    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4ba9      	ldr	r3, [pc, #676]	@ (80020bc <main+0x2a8>)
{
 8001e16:	b530      	push	{r4, r5, lr}
	    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
{
 8001e1e:	b0a9      	sub	sp, #164	@ 0xa4
	    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	601a      	str	r2, [r3, #0]
	        __HAL_FLASH_ART_ENABLE();
	    #endif

	    // Enable instruction cache if available (some STM32F4 variants)
	    #if defined(FLASH_ACR_ICEN)
	        __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e28:	601a      	str	r2, [r3, #0]
	    #endif

	    // Enable data cache if available (some STM32F4 variants)
	    #if defined(FLASH_ACR_DCEN)
	        __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e30:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e32:	f005 f855 	bl	8006ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e36:	f000 f9a7 	bl	8002188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3a:	f000 fb15 	bl	8002468 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e3e:	f000 faf9 	bl	8002434 <MX_DMA_Init>
  MX_I2C1_Init();
 8001e42:	f000 f9ef 	bl	8002224 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001e46:	f000 fad5 	bl	80023f4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001e4a:	f000 fa19 	bl	8002280 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001e4e:	f000 fa77 	bl	8002340 <MX_TIM3_Init>
  MX_IWDG_Init();
 8001e52:	f000 fa03 	bl	800225c <MX_IWDG_Init>
  MX_USART1_UART_Init();
 8001e56:	f000 fab3 	bl	80023c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8001e5a:	4999      	ldr	r1, [pc, #612]	@ (80020c0 <main+0x2ac>)
 8001e5c:	4899      	ldr	r0, [pc, #612]	@ (80020c4 <main+0x2b0>)
 8001e5e:	2219      	movs	r2, #25
 8001e60:	f009 fabd 	bl	800b3de <HAL_UART_Receive_DMA>

	TB6612FNG_Init(); // Initialize TB6612 drivers and PWM
 8001e64:	f002 fb26 	bl	80044b4 <TB6612FNG_Init>

	char i2c_devices[128];
	//  char display_str[48];

	// Turn ON LED during initialization (PC13 is active LOW)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e6e:	4896      	ldr	r0, [pc, #600]	@ (80020c8 <main+0x2b4>)
 8001e70:	f006 f80c 	bl	8007e8c <HAL_GPIO_WritePin>

	HAL_Delay(BNO085_BOOT_DELAY_MS);
 8001e74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e78:	f005 f874 	bl	8006f64 <HAL_Delay>

	// Set PC13 high to turn the onboard LED off
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e82:	4891      	ldr	r0, [pc, #580]	@ (80020c8 <main+0x2b4>)
 8001e84:	f006 f802 	bl	8007e8c <HAL_GPIO_WritePin>

	printf("Start I2C BUS Scan\r\n");
 8001e88:	4890      	ldr	r0, [pc, #576]	@ (80020cc <main+0x2b8>)
 8001e8a:	f00e fcc9 	bl	8010820 <puts>
	i2c_bus_scan(i2c_devices, sizeof(i2c_devices)); // Scan and store result
 8001e8e:	2180      	movs	r1, #128	@ 0x80
 8001e90:	a808      	add	r0, sp, #32
 8001e92:	f7ff f85f 	bl	8000f54 <i2c_bus_scan>

	uint8_t chip_id = bno085_read_chip_id();
 8001e96:	f7ff f89f 	bl	8000fd8 <bno085_read_chip_id>
	if (chip_id == 0xFF) {
 8001e9a:	28ff      	cmp	r0, #255	@ 0xff
 8001e9c:	d013      	beq.n	8001ec6 <main+0xb2>
		// Optionally display error on OLED
		Error_Handler();
	}

	printf("About to setup BNO085 Compass\r\n");
 8001e9e:	488c      	ldr	r0, [pc, #560]	@ (80020d0 <main+0x2bc>)
 8001ea0:	f00e fcbe 	bl	8010820 <puts>
	bno085_setup();
 8001ea4:	f7ff f90e 	bl	80010c4 <bno085_setup>
	//HAL_Delay(100); // Give BNO085 time to boot
	sh2_clearTare(); // Now device uses absolute/magnetic north as reference
 8001ea8:	f003 f972 	bl	8005190 <sh2_clearTare>
	printf("BNO085 Compass setup successful\r\n");
 8001eac:	4889      	ldr	r0, [pc, #548]	@ (80020d4 <main+0x2c0>)
 8001eae:	f00e fcb7 	bl	8010820 <puts>

	printf("About to initialize SSD1306 LCD\r\n");
 8001eb2:	4889      	ldr	r0, [pc, #548]	@ (80020d8 <main+0x2c4>)
 8001eb4:	f00e fcb4 	bl	8010820 <puts>
	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c1) != 0) {
 8001eb8:	4888      	ldr	r0, [pc, #544]	@ (80020dc <main+0x2c8>)
 8001eba:	f001 fcd1 	bl	8003860 <ssd1306_Init>
 8001ebe:	b120      	cbz	r0, 8001eca <main+0xb6>
		printf("Unable to initialize SSD1306 LCD\r\n");
 8001ec0:	4887      	ldr	r0, [pc, #540]	@ (80020e0 <main+0x2cc>)
 8001ec2:	f00e fcad 	bl	8010820 <puts>
		Error_Handler();
 8001ec6:	f001 fb9f 	bl	8003608 <Error_Handler>
	}
	printf("SSD1306 Initialized\r\n");
 8001eca:	4886      	ldr	r0, [pc, #536]	@ (80020e4 <main+0x2d0>)
 8001ecc:	f00e fca8 	bl	8010820 <puts>

	// Initialize the MB85RC256V EEPROM with the I2C handle
	printf("About to initialize MB85RC256V EEPROM\r\n");
 8001ed0:	4885      	ldr	r0, [pc, #532]	@ (80020e8 <main+0x2d4>)
 8001ed2:	f00e fca5 	bl	8010820 <puts>
	MB85rc_Init(&hi2c1);
 8001ed6:	4881      	ldr	r0, [pc, #516]	@ (80020dc <main+0x2c8>)
 8001ed8:	f001 fc42 	bl	8003760 <MB85rc_Init>
	if (HAL_I2C_IsDeviceReady(&hi2c1, MB85rc_ADDRESS, 3, 100) != HAL_OK) {
 8001edc:	487f      	ldr	r0, [pc, #508]	@ (80020dc <main+0x2c8>)
 8001ede:	2364      	movs	r3, #100	@ 0x64
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	21a0      	movs	r1, #160	@ 0xa0
 8001ee4:	f006 ffee 	bl	8008ec4 <HAL_I2C_IsDeviceReady>
 8001ee8:	4605      	mov	r5, r0
 8001eea:	2800      	cmp	r0, #0
 8001eec:	f040 80cb 	bne.w	8002086 <main+0x272>
		printf("Unable to initialize MB85RC256V EEPROM\r\n");
		// Device not ready, handle error
		Error_Handler();
	} else {
		printf("MB85RC256V EEPROM Device Ready\r\n");
 8001ef0:	487e      	ldr	r0, [pc, #504]	@ (80020ec <main+0x2d8>)
		// FRAM is ready - display status information
		ssd1306_Fill(Black);
		ssd1306_SetCursor(1, 0);
		ssd1306_WriteString("FRAM MB85RC256V", Font_7x10, White);
 8001ef2:	4c7f      	ldr	r4, [pc, #508]	@ (80020f0 <main+0x2dc>)
		printf("MB85RC256V EEPROM Device Ready\r\n");
 8001ef4:	f00e fc94 	bl	8010820 <puts>
		ssd1306_Fill(Black);
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f001 fdd1 	bl	8003aa0 <ssd1306_Fill>
		ssd1306_SetCursor(1, 0);
 8001efe:	4629      	mov	r1, r5
 8001f00:	2001      	movs	r0, #1
 8001f02:	f001 ff45 	bl	8003d90 <ssd1306_SetCursor>
		ssd1306_WriteString("FRAM MB85RC256V", Font_7x10, White);
 8001f06:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	4879      	ldr	r0, [pc, #484]	@ (80020f4 <main+0x2e0>)
 8001f0e:	f001 ff19 	bl	8003d44 <ssd1306_WriteString>

		// Display FRAM address
		char fram_info[32];
		snprintf(fram_info, sizeof(fram_info), "Addr: 0x%02X", MB85rc_ADDRESS);
 8001f12:	4a79      	ldr	r2, [pc, #484]	@ (80020f8 <main+0x2e4>)
 8001f14:	23a0      	movs	r3, #160	@ 0xa0
 8001f16:	2120      	movs	r1, #32
 8001f18:	4668      	mov	r0, sp
 8001f1a:	f00e fc89 	bl	8010830 <sniprintf>
		ssd1306_SetCursor(1, 12);
 8001f1e:	210c      	movs	r1, #12
 8001f20:	2001      	movs	r0, #1
 8001f22:	f001 ff35 	bl	8003d90 <ssd1306_SetCursor>
		ssd1306_WriteString(fram_info, Font_7x10, White);
 8001f26:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4668      	mov	r0, sp
 8001f2e:	f001 ff09 	bl	8003d44 <ssd1306_WriteString>
		printf("FRAM MB85RC256V initialized: %s, Status: OK\r\n", fram_info);
 8001f32:	4669      	mov	r1, sp
 8001f34:	4871      	ldr	r0, [pc, #452]	@ (80020fc <main+0x2e8>)
 8001f36:	f00e fc0b 	bl	8010750 <iprintf>

		// Display FRAM size (32KB for MB85RC256V)
		ssd1306_SetCursor(1, 24);
 8001f3a:	2118      	movs	r1, #24
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f001 ff27 	bl	8003d90 <ssd1306_SetCursor>
		ssd1306_WriteString("Size: 32KB", Font_7x10, White);
 8001f42:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f46:	2301      	movs	r3, #1
 8001f48:	486d      	ldr	r0, [pc, #436]	@ (8002100 <main+0x2ec>)
 8001f4a:	f001 fefb 	bl	8003d44 <ssd1306_WriteString>

		// Display initialization status
		ssd1306_SetCursor(1, 36);
 8001f4e:	2124      	movs	r1, #36	@ 0x24
 8001f50:	2001      	movs	r0, #1
 8001f52:	f001 ff1d 	bl	8003d90 <ssd1306_SetCursor>
		ssd1306_WriteString("Status: OK", Font_7x10, White);
 8001f56:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4869      	ldr	r0, [pc, #420]	@ (8002104 <main+0x2f0>)
 8001f5e:	f001 fef1 	bl	8003d44 <ssd1306_WriteString>

		ssd1306_UpdateScreen(&hi2c1);
 8001f62:	485e      	ldr	r0, [pc, #376]	@ (80020dc <main+0x2c8>)
 8001f64:	f001 fdc0 	bl	8003ae8 <ssd1306_UpdateScreen>
		HAL_IWDG_Refresh(&hiwdg);
 8001f68:	4867      	ldr	r0, [pc, #412]	@ (8002108 <main+0x2f4>)
 8001f6a:	f007 fe21 	bl	8009bb0 <HAL_IWDG_Refresh>
		HAL_Delay(2000); // Show FRAM info for 2 seconds
 8001f6e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f72:	f004 fff7 	bl	8006f64 <HAL_Delay>
	}


	ssd1306_Fill(Black);
 8001f76:	4628      	mov	r0, r5
 8001f78:	f001 fd92 	bl	8003aa0 <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1);
 8001f7c:	4857      	ldr	r0, [pc, #348]	@ (80020dc <main+0x2c8>)
 8001f7e:	f001 fdb3 	bl	8003ae8 <ssd1306_UpdateScreen>

	HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog
 8001f82:	4861      	ldr	r0, [pc, #388]	@ (8002108 <main+0x2f4>)
 8001f84:	f007 fe14 	bl	8009bb0 <HAL_IWDG_Refresh>
	HAL_Delay(1000);
 8001f88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f8c:	f004 ffea 	bl	8006f64 <HAL_Delay>

	// Write data to local screenbuffer
	ssd1306_SetCursor(1, 0);
 8001f90:	4629      	mov	r1, r5
 8001f92:	2001      	movs	r0, #1
 8001f94:	f001 fefc 	bl	8003d90 <ssd1306_SetCursor>
	ssd1306_WriteString(APP_VERSION, Font_7x10, White);
 8001f98:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	485b      	ldr	r0, [pc, #364]	@ (800210c <main+0x2f8>)
 8001fa0:	f001 fed0 	bl	8003d44 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 12);
 8001fa4:	210c      	movs	r1, #12
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f001 fef2 	bl	8003d90 <ssd1306_SetCursor>
	if (i2c_devices[0] == '\0') {
 8001fac:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d16d      	bne.n	8002090 <main+0x27c>
		printf("No I2C devices found\r\n");
 8001fb4:	4856      	ldr	r0, [pc, #344]	@ (8002110 <main+0x2fc>)
 8001fb6:	f00e fc33 	bl	8010820 <puts>
		ssd1306_WriteString("No I2C found", Font_7x10, White);
 8001fba:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001fbe:	4855      	ldr	r0, [pc, #340]	@ (8002114 <main+0x300>)
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f001 febf 	bl	8003d44 <ssd1306_WriteString>
		ssd1306_SetCursor(1, 24);
		ssd1306_WriteString(i2c_devices, Font_7x10, White);
	}

	// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 8001fc6:	4845      	ldr	r0, [pc, #276]	@ (80020dc <main+0x2c8>)
 8001fc8:	f001 fd8e 	bl	8003ae8 <ssd1306_UpdateScreen>

	HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog
 8001fcc:	484e      	ldr	r0, [pc, #312]	@ (8002108 <main+0x2f4>)
 8001fce:	f007 fdef 	bl	8009bb0 <HAL_IWDG_Refresh>
	// Delay to see I2C info
	HAL_Delay(2000);
 8001fd2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fd6:	f004 ffc5 	bl	8006f64 <HAL_Delay>

	// Turn OFF LED after successful initialization (PC13 is active LOW)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001fda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4839      	ldr	r0, [pc, #228]	@ (80020c8 <main+0x2b4>)
 8001fe2:	f005 ff53 	bl	8007e8c <HAL_GPIO_WritePin>
	printf("System initialization completed - LED turned OFF\r\n");
 8001fe6:	484c      	ldr	r0, [pc, #304]	@ (8002118 <main+0x304>)
 8001fe8:	f00e fc1a 	bl	8010820 <puts>

    // Print system status after initialization
    print_system_status();
 8001fec:	f7ff fe26 	bl	8001c3c <print_system_status>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ff0:	f00a fc00 	bl	800c7f4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CompassMutex */
  CompassMutexHandle = osMutexNew(&CompassMutex_attributes);
 8001ff4:	4849      	ldr	r0, [pc, #292]	@ (800211c <main+0x308>)
 8001ff6:	f00a fd3c 	bl	800ca72 <osMutexNew>
 8001ffa:	4b49      	ldr	r3, [pc, #292]	@ (8002120 <main+0x30c>)
 8001ffc:	4602      	mov	r2, r0

  /* creation of I2C1Mutex */
  I2C1MutexHandle = osMutexNew(&I2C1Mutex_attributes);
 8001ffe:	4849      	ldr	r0, [pc, #292]	@ (8002124 <main+0x310>)
  CompassMutexHandle = osMutexNew(&CompassMutex_attributes);
 8002000:	601a      	str	r2, [r3, #0]
  I2C1MutexHandle = osMutexNew(&I2C1Mutex_attributes);
 8002002:	f00a fd36 	bl	800ca72 <osMutexNew>
 8002006:	4b48      	ldr	r3, [pc, #288]	@ (8002128 <main+0x314>)
 8002008:	4602      	mov	r2, r0

  /* creation of EncoderMutex */
  EncoderMutexHandle = osMutexNew(&EncoderMutex_attributes);
 800200a:	4848      	ldr	r0, [pc, #288]	@ (800212c <main+0x318>)
  I2C1MutexHandle = osMutexNew(&I2C1Mutex_attributes);
 800200c:	601a      	str	r2, [r3, #0]
  EncoderMutexHandle = osMutexNew(&EncoderMutex_attributes);
 800200e:	f00a fd30 	bl	800ca72 <osMutexNew>
 8002012:	4b47      	ldr	r3, [pc, #284]	@ (8002130 <main+0x31c>)
 8002014:	4602      	mov	r2, r0

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8002016:	4847      	ldr	r0, [pc, #284]	@ (8002134 <main+0x320>)
  EncoderMutexHandle = osMutexNew(&EncoderMutex_attributes);
 8002018:	601a      	str	r2, [r3, #0]
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 800201a:	f00a fd2a 	bl	800ca72 <osMutexNew>
 800201e:	4b46      	ldr	r3, [pc, #280]	@ (8002138 <main+0x324>)
 8002020:	4602      	mov	r2, r0

  /* creation of ModeMutex */
  ModeMutexHandle = osMutexNew(&ModeMutex_attributes);
 8002022:	4846      	ldr	r0, [pc, #280]	@ (800213c <main+0x328>)
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8002024:	601a      	str	r2, [r3, #0]
  ModeMutexHandle = osMutexNew(&ModeMutex_attributes);
 8002026:	f00a fd24 	bl	800ca72 <osMutexNew>
 800202a:	4b45      	ldr	r3, [pc, #276]	@ (8002140 <main+0x32c>)
 800202c:	4602      	mov	r2, r0

  /* creation of EEPROMMutex */
  EEPROMMutexHandle = osMutexNew(&EEPROMMutex_attributes);
 800202e:	4845      	ldr	r0, [pc, #276]	@ (8002144 <main+0x330>)
  ModeMutexHandle = osMutexNew(&ModeMutex_attributes);
 8002030:	601a      	str	r2, [r3, #0]
  EEPROMMutexHandle = osMutexNew(&EEPROMMutex_attributes);
 8002032:	f00a fd1e 	bl	800ca72 <osMutexNew>
 8002036:	4b44      	ldr	r3, [pc, #272]	@ (8002148 <main+0x334>)
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002038:	4a44      	ldr	r2, [pc, #272]	@ (800214c <main+0x338>)
  EEPROMMutexHandle = osMutexNew(&EEPROMMutex_attributes);
 800203a:	4604      	mov	r4, r0
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800203c:	2100      	movs	r1, #0
 800203e:	4844      	ldr	r0, [pc, #272]	@ (8002150 <main+0x33c>)
  EEPROMMutexHandle = osMutexNew(&EEPROMMutex_attributes);
 8002040:	601c      	str	r4, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002042:	f00a fc43 	bl	800c8cc <osThreadNew>
 8002046:	4b43      	ldr	r3, [pc, #268]	@ (8002154 <main+0x340>)

  /* creation of CompassTask */
  CompassTaskHandle = osThreadNew(StartCompassTask, NULL, &CompassTask_attributes);
 8002048:	4a43      	ldr	r2, [pc, #268]	@ (8002158 <main+0x344>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800204a:	4604      	mov	r4, r0
  CompassTaskHandle = osThreadNew(StartCompassTask, NULL, &CompassTask_attributes);
 800204c:	2100      	movs	r1, #0
 800204e:	4843      	ldr	r0, [pc, #268]	@ (800215c <main+0x348>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002050:	601c      	str	r4, [r3, #0]
  CompassTaskHandle = osThreadNew(StartCompassTask, NULL, &CompassTask_attributes);
 8002052:	f00a fc3b 	bl	800c8cc <osThreadNew>
 8002056:	4b42      	ldr	r3, [pc, #264]	@ (8002160 <main+0x34c>)

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 8002058:	4a42      	ldr	r2, [pc, #264]	@ (8002164 <main+0x350>)
  CompassTaskHandle = osThreadNew(StartCompassTask, NULL, &CompassTask_attributes);
 800205a:	4604      	mov	r4, r0
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 800205c:	2100      	movs	r1, #0
 800205e:	4842      	ldr	r0, [pc, #264]	@ (8002168 <main+0x354>)
  CompassTaskHandle = osThreadNew(StartCompassTask, NULL, &CompassTask_attributes);
 8002060:	601c      	str	r4, [r3, #0]
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 8002062:	f00a fc33 	bl	800c8cc <osThreadNew>
 8002066:	4b41      	ldr	r3, [pc, #260]	@ (800216c <main+0x358>)

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8002068:	4a41      	ldr	r2, [pc, #260]	@ (8002170 <main+0x35c>)
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 800206a:	4604      	mov	r4, r0
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 800206c:	2100      	movs	r1, #0
 800206e:	4841      	ldr	r0, [pc, #260]	@ (8002174 <main+0x360>)
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 8002070:	601c      	str	r4, [r3, #0]
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8002072:	f00a fc2b 	bl	800c8cc <osThreadNew>
 8002076:	4b40      	ldr	r3, [pc, #256]	@ (8002178 <main+0x364>)
 8002078:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800207a:	f00a fc01 	bl	800c880 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		osDelay(1);
 800207e:	2001      	movs	r0, #1
 8002080:	f00a fcdc 	bl	800ca3c <osDelay>
	while (1) {
 8002084:	e7fb      	b.n	800207e <main+0x26a>
		printf("Unable to initialize MB85RC256V EEPROM\r\n");
 8002086:	483d      	ldr	r0, [pc, #244]	@ (800217c <main+0x368>)
 8002088:	f00e fbca 	bl	8010820 <puts>
		Error_Handler();
 800208c:	f001 fabc 	bl	8003608 <Error_Handler>
		printf("I2C devices found: %s\r\n", i2c_devices);
 8002090:	a908      	add	r1, sp, #32
 8002092:	483b      	ldr	r0, [pc, #236]	@ (8002180 <main+0x36c>)
 8002094:	f00e fb5c 	bl	8010750 <iprintf>
		ssd1306_WriteString("I2C:", Font_7x10, White);
 8002098:	e894 0006 	ldmia.w	r4, {r1, r2}
 800209c:	2301      	movs	r3, #1
 800209e:	4839      	ldr	r0, [pc, #228]	@ (8002184 <main+0x370>)
 80020a0:	f001 fe50 	bl	8003d44 <ssd1306_WriteString>
		ssd1306_SetCursor(1, 24);
 80020a4:	2118      	movs	r1, #24
 80020a6:	2001      	movs	r0, #1
 80020a8:	f001 fe72 	bl	8003d90 <ssd1306_SetCursor>
		ssd1306_WriteString(i2c_devices, Font_7x10, White);
 80020ac:	e894 0006 	ldmia.w	r4, {r1, r2}
 80020b0:	2301      	movs	r3, #1
 80020b2:	a808      	add	r0, sp, #32
 80020b4:	f001 fe46 	bl	8003d44 <ssd1306_WriteString>
 80020b8:	e785      	b.n	8001fc6 <main+0x1b2>
 80020ba:	bf00      	nop
 80020bc:	40023c00 	.word	0x40023c00
 80020c0:	20000468 	.word	0x20000468
 80020c4:	20000398 	.word	0x20000398
 80020c8:	40020800 	.word	0x40020800
 80020cc:	08013a44 	.word	0x08013a44
 80020d0:	08013a58 	.word	0x08013a58
 80020d4:	08013a78 	.word	0x08013a78
 80020d8:	08013a9c 	.word	0x08013a9c
 80020dc:	20000260 	.word	0x20000260
 80020e0:	08013ac0 	.word	0x08013ac0
 80020e4:	08013ae4 	.word	0x08013ae4
 80020e8:	08013afc 	.word	0x08013afc
 80020ec:	08013b4c 	.word	0x08013b4c
 80020f0:	20000000 	.word	0x20000000
 80020f4:	08013b6c 	.word	0x08013b6c
 80020f8:	08013b7c 	.word	0x08013b7c
 80020fc:	08013b8c 	.word	0x08013b8c
 8002100:	08013bbc 	.word	0x08013bbc
 8002104:	08013bc8 	.word	0x08013bc8
 8002108:	200002b4 	.word	0x200002b4
 800210c:	08013bd4 	.word	0x08013bd4
 8002110:	08013be0 	.word	0x08013be0
 8002114:	08013bf8 	.word	0x08013bf8
 8002118:	08013c28 	.word	0x08013c28
 800211c:	0801400c 	.word	0x0801400c
 8002120:	20000450 	.word	0x20000450
 8002124:	0801401c 	.word	0x0801401c
 8002128:	20000454 	.word	0x20000454
 800212c:	0801402c 	.word	0x0801402c
 8002130:	20000458 	.word	0x20000458
 8002134:	0801403c 	.word	0x0801403c
 8002138:	2000045c 	.word	0x2000045c
 800213c:	0801404c 	.word	0x0801404c
 8002140:	20000460 	.word	0x20000460
 8002144:	0801405c 	.word	0x0801405c
 8002148:	20000464 	.word	0x20000464
 800214c:	08013f7c 	.word	0x08013f7c
 8002150:	080028c1 	.word	0x080028c1
 8002154:	20000440 	.word	0x20000440
 8002158:	08013fa0 	.word	0x08013fa0
 800215c:	08002e55 	.word	0x08002e55
 8002160:	20000444 	.word	0x20000444
 8002164:	08013fc4 	.word	0x08013fc4
 8002168:	08002e71 	.word	0x08002e71
 800216c:	20000448 	.word	0x20000448
 8002170:	08013fe8 	.word	0x08013fe8
 8002174:	080034ad 	.word	0x080034ad
 8002178:	2000044c 	.word	0x2000044c
 800217c:	08013b24 	.word	0x08013b24
 8002180:	08013c08 	.word	0x08013c08
 8002184:	08013c20 	.word	0x08013c20

08002188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002188:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218a:	2300      	movs	r3, #0
{
 800218c:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002192:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002196:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4920      	ldr	r1, [pc, #128]	@ (800221c <SystemClock_Config+0x94>)
 800219c:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002220 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80021aa:	6408      	str	r0, [r1, #64]	@ 0x40
 80021ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021ae:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 80021b2:	9101      	str	r1, [sp, #4]
 80021b4:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	6813      	ldr	r3, [r2, #0]
 80021c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c6:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021c8:	2009      	movs	r0, #9
 80021ca:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ce:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021d0:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021da:	e9cd 240d 	strd	r2, r4, [sp, #52]	@ 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021de:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e0:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80021e2:	2119      	movs	r1, #25
  RCC_OscInitStruct.PLL.PLLN = 200;
 80021e4:	22c8      	movs	r2, #200	@ 0xc8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021e6:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 200;
 80021ea:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021ee:	e9cd 4312 	strd	r4, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f2:	f007 fced 	bl	8009bd0 <HAL_RCC_OscConfig>
 80021f6:	b978      	cbnz	r0, 8002218 <SystemClock_Config+0x90>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f8:	210f      	movs	r1, #15
 80021fa:	4603      	mov	r3, r0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021fc:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002200:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002204:	a803      	add	r0, sp, #12
 8002206:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002208:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800220c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800220e:	f007 ff57 	bl	800a0c0 <HAL_RCC_ClockConfig>
 8002212:	b908      	cbnz	r0, 8002218 <SystemClock_Config+0x90>
  {
    Error_Handler();
  }
}
 8002214:	b014      	add	sp, #80	@ 0x50
 8002216:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002218:	f001 f9f6 	bl	8003608 <Error_Handler>
 800221c:	40023800 	.word	0x40023800
 8002220:	40007000 	.word	0x40007000

08002224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002224:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002226:	480a      	ldr	r0, [pc, #40]	@ (8002250 <MX_I2C1_Init+0x2c>)
  hi2c1.Init.ClockSpeed = 400000;
 8002228:	4c0a      	ldr	r4, [pc, #40]	@ (8002254 <MX_I2C1_Init+0x30>)
 800222a:	490b      	ldr	r1, [pc, #44]	@ (8002258 <MX_I2C1_Init+0x34>)
 800222c:	2300      	movs	r3, #0
 800222e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002232:	e9c0 4100 	strd	r4, r1, [r0]
 8002236:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800223a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800223e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8002242:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002244:	f005 fe6e 	bl	8007f24 <HAL_I2C_Init>
 8002248:	b900      	cbnz	r0, 800224c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800224a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800224c:	f001 f9dc 	bl	8003608 <Error_Handler>
 8002250:	20000260 	.word	0x20000260
 8002254:	40005400 	.word	0x40005400
 8002258:	00061a80 	.word	0x00061a80

0800225c <MX_IWDG_Init>:
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800225c:	4806      	ldr	r0, [pc, #24]	@ (8002278 <MX_IWDG_Init+0x1c>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800225e:	4907      	ldr	r1, [pc, #28]	@ (800227c <MX_IWDG_Init+0x20>)
{
 8002260:	b508      	push	{r3, lr}
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002262:	2204      	movs	r2, #4
 8002264:	f640 4335 	movw	r3, #3125	@ 0xc35
 8002268:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hiwdg.Init.Reload = 3125;
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800226c:	f007 fc5c 	bl	8009b28 <HAL_IWDG_Init>
 8002270:	b900      	cbnz	r0, 8002274 <MX_IWDG_Init+0x18>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002272:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002274:	f001 f9c8 	bl	8003608 <Error_Handler>
 8002278:	200002b4 	.word	0x200002b4
 800227c:	40003000 	.word	0x40003000

08002280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002280:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002282:	2400      	movs	r4, #0
{
 8002284:	b093      	sub	sp, #76	@ 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002286:	2220      	movs	r2, #32
 8002288:	4621      	mov	r1, r4
 800228a:	a80a      	add	r0, sp, #40	@ 0x28

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800228c:	4d2a      	ldr	r5, [pc, #168]	@ (8002338 <MX_TIM1_Init+0xb8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228e:	9400      	str	r4, [sp, #0]
 8002290:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002294:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002298:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800229c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022a0:	f00e fbd4 	bl	8010a4c <memset>
  htim1.Init.Prescaler = 99;
 80022a4:	4a25      	ldr	r2, [pc, #148]	@ (800233c <MX_TIM1_Init+0xbc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a6:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 99;
 80022a8:	2363      	movs	r3, #99	@ 0x63
 80022aa:	e9c5 2300 	strd	r2, r3, [r5]
  htim1.Init.Period = 49;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022ae:	4628      	mov	r0, r5
  htim1.Init.Period = 49;
 80022b0:	2331      	movs	r3, #49	@ 0x31
  htim1.Init.RepetitionCounter = 0;
 80022b2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80022b6:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 49;
 80022b8:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022ba:	f008 f9cf 	bl	800a65c <HAL_TIM_PWM_Init>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d137      	bne.n	8002332 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c2:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c4:	2600      	movs	r6, #0
 80022c6:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c8:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ca:	e9cd 6700 	strd	r6, r7, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ce:	f008 fed7 	bl	800b080 <HAL_TIMEx_MasterConfigSynchronization>
 80022d2:	4602      	mov	r2, r0
 80022d4:	bb68      	cbnz	r0, 8002332 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d6:	e9cd 0003 	strd	r0, r0, [sp, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022da:	9005      	str	r0, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022dc:	9008      	str	r0, [sp, #32]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022de:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e0:	a902      	add	r1, sp, #8
 80022e2:	4628      	mov	r0, r5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e4:	e9cd 6706 	strd	r6, r7, [sp, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ea:	f008 fba7 	bl	800aa3c <HAL_TIM_PWM_ConfigChannel>
 80022ee:	bb00      	cbnz	r0, 8002332 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022f0:	2204      	movs	r2, #4
 80022f2:	a902      	add	r1, sp, #8
 80022f4:	4628      	mov	r0, r5
 80022f6:	f008 fba1 	bl	800aa3c <HAL_TIM_PWM_ConfigChannel>
 80022fa:	b9d0      	cbnz	r0, 8002332 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022fc:	220c      	movs	r2, #12
 80022fe:	a902      	add	r1, sp, #8
 8002300:	4628      	mov	r0, r5
 8002302:	f008 fb9b 	bl	800aa3c <HAL_TIM_PWM_ConfigChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	b998      	cbnz	r0, 8002332 <MX_TIM1_Init+0xb2>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800230a:	2600      	movs	r6, #0
 800230c:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002310:	a90a      	add	r1, sp, #40	@ 0x28
 8002312:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002314:	e9cd 670e 	strd	r6, r7, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002318:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800231c:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002320:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002322:	f008 ff1b 	bl	800b15c <HAL_TIMEx_ConfigBreakDeadTime>
 8002326:	b920      	cbnz	r0, 8002332 <MX_TIM1_Init+0xb2>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002328:	4628      	mov	r0, r5
 800232a:	f001 fe17 	bl	8003f5c <HAL_TIM_MspPostInit>

}
 800232e:	b013      	add	sp, #76	@ 0x4c
 8002330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002332:	f001 f969 	bl	8003608 <Error_Handler>
 8002336:	bf00      	nop
 8002338:	200002c0 	.word	0x200002c0
 800233c:	40010000 	.word	0x40010000

08002340 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002340:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002342:	4c1d      	ldr	r4, [pc, #116]	@ (80023b8 <MX_TIM3_Init+0x78>)
 8002344:	4a1d      	ldr	r2, [pc, #116]	@ (80023bc <MX_TIM3_Init+0x7c>)
{
 8002346:	b08a      	sub	sp, #40	@ 0x28
  htim3.Instance = TIM3;
 8002348:	6022      	str	r2, [r4, #0]
  htim3.Init.Prescaler = 99;
 800234a:	2263      	movs	r2, #99	@ 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234c:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 99;
 800234e:	6062      	str	r2, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 49;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002350:	4620      	mov	r0, r4
  htim3.Init.Period = 49;
 8002352:	2231      	movs	r2, #49	@ 0x31
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002354:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002358:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800235c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002360:	e9cd 3306 	strd	r3, r3, [sp, #24]
  htim3.Init.Period = 49;
 8002364:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002368:	9308      	str	r3, [sp, #32]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236a:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800236e:	f008 f975 	bl	800a65c <HAL_TIM_PWM_Init>
 8002372:	b9d0      	cbnz	r0, 80023aa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	2200      	movs	r2, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002378:	4669      	mov	r1, sp
 800237a:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002380:	f008 fe7e 	bl	800b080 <HAL_TIMEx_MasterConfigSynchronization>
 8002384:	4603      	mov	r3, r0
 8002386:	b980      	cbnz	r0, 80023aa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002388:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80023b0 <MX_TIM3_Init+0x70>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800238c:	a902      	add	r1, sp, #8
 800238e:	2204      	movs	r2, #4
 8002390:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002392:	ed8d 7b02 	vstr	d7, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002396:	9304      	str	r3, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002398:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800239a:	f008 fb4f 	bl	800aa3c <HAL_TIM_PWM_ConfigChannel>
 800239e:	b920      	cbnz	r0, 80023aa <MX_TIM3_Init+0x6a>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023a0:	4620      	mov	r0, r4
 80023a2:	f001 fddb 	bl	8003f5c <HAL_TIM_MspPostInit>

}
 80023a6:	b00a      	add	sp, #40	@ 0x28
 80023a8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80023aa:	f001 f92d 	bl	8003608 <Error_Handler>
 80023ae:	bf00      	nop
 80023b0:	00000060 	.word	0x00000060
 80023b4:	00000000 	.word	0x00000000
 80023b8:	20000308 	.word	0x20000308
 80023bc:	40000400 	.word	0x40000400

080023c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023c0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c2:	480a      	ldr	r0, [pc, #40]	@ (80023ec <MX_USART1_UART_Init+0x2c>)
 80023c4:	4c0a      	ldr	r4, [pc, #40]	@ (80023f0 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023c6:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 80023c8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX;
 80023cc:	2208      	movs	r2, #8
  huart1.Init.BaudRate = 115200;
 80023ce:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX;
 80023d6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023da:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023de:	f008 ff23 	bl	800b228 <HAL_UART_Init>
 80023e2:	b900      	cbnz	r0, 80023e6 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023e4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80023e6:	f001 f90f 	bl	8003608 <Error_Handler>
 80023ea:	bf00      	nop
 80023ec:	20000350 	.word	0x20000350
 80023f0:	40011000 	.word	0x40011000

080023f4 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023f4:	480c      	ldr	r0, [pc, #48]	@ (8002428 <MX_USART2_UART_Init+0x34>)
 80023f6:	490d      	ldr	r1, [pc, #52]	@ (800242c <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 100000;
 80023f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <MX_USART2_UART_Init+0x3c>)
{
 80023fa:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 100000;
 80023fc:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002400:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
  huart2.Init.StopBits = UART_STOPBITS_2;
 8002404:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002408:	e9c0 4202 	strd	r4, r2, [r0, #8]
  huart2.Init.Parity = UART_PARITY_EVEN;
  huart2.Init.Mode = UART_MODE_RX;
 800240c:	2300      	movs	r3, #0
  huart2.Init.Parity = UART_PARITY_EVEN;
 800240e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  huart2.Init.Mode = UART_MODE_RX;
 8002412:	2204      	movs	r2, #4
 8002414:	e9c0 1204 	strd	r1, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002418:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800241c:	f008 ff04 	bl	800b228 <HAL_UART_Init>
 8002420:	b900      	cbnz	r0, 8002424 <MX_USART2_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002422:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002424:	f001 f8f0 	bl	8003608 <Error_Handler>
 8002428:	20000398 	.word	0x20000398
 800242c:	40004400 	.word	0x40004400
 8002430:	000186a0 	.word	0x000186a0

08002434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002434:	b500      	push	{lr}
 8002436:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <MX_DMA_Init+0x30>)
 800243a:	2200      	movs	r2, #0
 800243c:	9201      	str	r2, [sp, #4]
 800243e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002440:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8002444:	6319      	str	r1, [r3, #48]	@ 0x30
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244c:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800244e:	2105      	movs	r1, #5
 8002450:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002452:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002454:	f004 fe62 	bl	800711c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002458:	2010      	movs	r0, #16

}
 800245a:	b003      	add	sp, #12
 800245c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002460:	f004 be78 	b.w	8007154 <HAL_NVIC_EnableIRQ>
 8002464:	40023800 	.word	0x40023800

08002468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	2400      	movs	r4, #0
{
 800246c:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002472:	e9cd 4406 	strd	r4, r4, [sp, #24]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	4b4b      	ldr	r3, [pc, #300]	@ (80025a4 <MX_GPIO_Init+0x13c>)
 8002478:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247a:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800247c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800247e:	4d4a      	ldr	r5, [pc, #296]	@ (80025a8 <MX_GPIO_Init+0x140>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_1A_IN1_Pin|Motor_1A_IN2_Pin, GPIO_PIN_RESET);
 8002480:	4e4a      	ldr	r6, [pc, #296]	@ (80025ac <MX_GPIO_Init+0x144>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_2A_IN1_Pin|Motor_2A_IN2_Pin|Motor_1B_IN2_Pin|TB6612__1_STBY_Pin
 8002482:	4f4b      	ldr	r7, [pc, #300]	@ (80025b0 <MX_GPIO_Init+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002484:	f042 0204 	orr.w	r2, r2, #4
 8002488:	631a      	str	r2, [r3, #48]	@ 0x30
 800248a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800248c:	f002 0204 	and.w	r2, r2, #4
 8002490:	9200      	str	r2, [sp, #0]
 8002492:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002494:	9401      	str	r4, [sp, #4]
 8002496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002498:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
 800249e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80024a4:	9201      	str	r2, [sp, #4]
 80024a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	9402      	str	r4, [sp, #8]
 80024aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80024b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b4:	f002 0201 	and.w	r2, r2, #1
 80024b8:	9202      	str	r2, [sp, #8]
 80024ba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024bc:	9403      	str	r4, [sp, #12]
 80024be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024c0:	f042 0202 	orr.w	r2, r2, #2
 80024c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024ce:	4622      	mov	r2, r4
 80024d0:	4628      	mov	r0, r5
 80024d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024d8:	f005 fcd8 	bl	8007e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, Motor_1A_IN1_Pin|Motor_1A_IN2_Pin, GPIO_PIN_RESET);
 80024dc:	4622      	mov	r2, r4
 80024de:	4630      	mov	r0, r6
 80024e0:	2103      	movs	r1, #3
 80024e2:	f005 fcd3 	bl	8007e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Motor_2A_IN1_Pin|Motor_2A_IN2_Pin|Motor_1B_IN2_Pin|TB6612__1_STBY_Pin
 80024e6:	4622      	mov	r2, r4
 80024e8:	4638      	mov	r0, r7
 80024ea:	f24f 4123 	movw	r1, #62499	@ 0xf423
 80024ee:	f005 fccd 	bl	8007e8c <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f2:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024f8:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fa:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002504:	f005 fa42 	bl	800798c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_1A_IN1_Pin Motor_1A_IN2_Pin */
  GPIO_InitStruct.Pin = Motor_1A_IN1_Pin|Motor_1A_IN2_Pin;
 8002508:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	a904      	add	r1, sp, #16
 800250c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = Motor_1A_IN1_Pin|Motor_1A_IN2_Pin;
 800250e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	e9cd 5405 	strd	r5, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	f005 fa39 	bl	800798c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_for_CLK___SNP00128_Pin */
  GPIO_InitStruct.Pin = INT_for_CLK___SNP00128_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(INT_for_CLK___SNP00128_GPIO_Port, &GPIO_InitStruct);
 800251a:	a904      	add	r1, sp, #16
 800251c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = INT_for_CLK___SNP00128_Pin;
 800251e:	2210      	movs	r2, #16
 8002520:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002524:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002528:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(INT_for_CLK___SNP00128_GPIO_Port, &GPIO_InitStruct);
 800252a:	f005 fa2f 	bl	800798c <HAL_GPIO_Init>

  /*Configure GPIO pin : for_DT___SNP00128_Pin */
  GPIO_InitStruct.Pin = for_DT___SNP00128_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(for_DT___SNP00128_GPIO_Port, &GPIO_InitStruct);
 800252e:	a904      	add	r1, sp, #16
 8002530:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = for_DT___SNP00128_Pin;
 8002532:	2220      	movs	r2, #32
 8002534:	2300      	movs	r3, #0
 8002536:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(for_DT___SNP00128_GPIO_Port, &GPIO_InitStruct);
 800253c:	f005 fa26 	bl	800798c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_for_SW___SNP00128_Pin */
  GPIO_InitStruct.Pin = INT_for_SW___SNP00128_Pin;
 8002540:	2240      	movs	r2, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(INT_for_SW___SNP00128_GPIO_Port, &GPIO_InitStruct);
 8002542:	4630      	mov	r0, r6
 8002544:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = INT_for_SW___SNP00128_Pin;
 8002546:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800254a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(INT_for_SW___SNP00128_GPIO_Port, &GPIO_InitStruct);
 8002550:	f005 fa1c 	bl	800798c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_2A_IN1_Pin Motor_2A_IN2_Pin Motor_1B_IN2_Pin TB6612__1_STBY_Pin
                           TB6612__2_STBY_Pin Motor_2B_IN1_Pin Motor_2B_IN2_Pin Motor_1B_IN1_Pin */
  GPIO_InitStruct.Pin = Motor_2A_IN1_Pin|Motor_2A_IN2_Pin|Motor_1B_IN2_Pin|TB6612__1_STBY_Pin
 8002554:	f24f 4323 	movw	r3, #62499	@ 0xf423
                          |TB6612__2_STBY_Pin|Motor_2B_IN1_Pin|Motor_2B_IN2_Pin|Motor_1B_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002558:	a904      	add	r1, sp, #16
 800255a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = Motor_2A_IN1_Pin|Motor_2A_IN2_Pin|Motor_1B_IN2_Pin|TB6612__1_STBY_Pin
 800255c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	e9cd 5405 	strd	r5, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002564:	f005 fa12 	bl	800798c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_for_BNO085_Pin */
  GPIO_InitStruct.Pin = INT_for_BNO085_Pin;
 8002568:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800256c:	f44f 7280 	mov.w	r2, #256	@ 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(INT_for_BNO085_GPIO_Port, &GPIO_InitStruct);
 8002570:	a904      	add	r1, sp, #16
 8002572:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = INT_for_BNO085_Pin;
 8002574:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(INT_for_BNO085_GPIO_Port, &GPIO_InitStruct);
 800257a:	f005 fa07 	bl	800798c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800257e:	4622      	mov	r2, r4
 8002580:	2105      	movs	r1, #5
 8002582:	200a      	movs	r0, #10
 8002584:	f004 fdca 	bl	800711c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002588:	200a      	movs	r0, #10
 800258a:	f004 fde3 	bl	8007154 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800258e:	4622      	mov	r2, r4
 8002590:	2105      	movs	r1, #5
 8002592:	2017      	movs	r0, #23
 8002594:	f004 fdc2 	bl	800711c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002598:	2017      	movs	r0, #23
 800259a:	f004 fddb 	bl	8007154 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800259e:	b00b      	add	sp, #44	@ 0x2c
 80025a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400

080025b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// EXTI Callback for INT pin (e.g., PA0 for EXTI0)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	4604      	mov	r4, r0
	uint32_t now = HAL_GetTick();
 80025b8:	f004 fcc8 	bl	8006f4c <HAL_GetTick>

	// BNO085 INT (PA8)
	if (GPIO_Pin == GPIO_PIN_8) {
 80025bc:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80025c0:	d017      	beq.n	80025f2 <HAL_GPIO_EXTI_Callback+0x3e>
		bno085_int_flag = 1;
	}
	if (GPIO_Pin == ENC_CLK_Pin) {
 80025c2:	2c10      	cmp	r4, #16
 80025c4:	4605      	mov	r5, r0
 80025c6:	d018      	beq.n	80025fa <HAL_GPIO_EXTI_Callback+0x46>
				osMutexRelease(EncoderMutexHandle);
			}
		}
	}

	if (GPIO_Pin == ENC_SW_Pin) {
 80025c8:	2c40      	cmp	r4, #64	@ 0x40
 80025ca:	d111      	bne.n	80025f0 <HAL_GPIO_EXTI_Callback+0x3c>
		GPIO_PinState clk_state = HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port,
 80025cc:	2110      	movs	r1, #16
 80025ce:	482b      	ldr	r0, [pc, #172]	@ (800267c <HAL_GPIO_EXTI_Callback+0xc8>)
 80025d0:	f005 fc44 	bl	8007e5c <HAL_GPIO_ReadPin>
				ENC_CLK_Pin);
		GPIO_PinState dt_state = HAL_GPIO_ReadPin(ENC_DT_GPIO_Port,
 80025d4:	2120      	movs	r1, #32
		GPIO_PinState clk_state = HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port,
 80025d6:	4606      	mov	r6, r0
		GPIO_PinState dt_state = HAL_GPIO_ReadPin(ENC_DT_GPIO_Port,
 80025d8:	4828      	ldr	r0, [pc, #160]	@ (800267c <HAL_GPIO_EXTI_Callback+0xc8>)
 80025da:	f005 fc3f 	bl	8007e5c <HAL_GPIO_ReadPin>
				ENC_DT_Pin);
		GPIO_PinState sw_state = HAL_GPIO_ReadPin(ENC_SW_GPIO_Port,
 80025de:	4621      	mov	r1, r4
		GPIO_PinState dt_state = HAL_GPIO_ReadPin(ENC_DT_GPIO_Port,
 80025e0:	4603      	mov	r3, r0
		GPIO_PinState sw_state = HAL_GPIO_ReadPin(ENC_SW_GPIO_Port,
 80025e2:	4826      	ldr	r0, [pc, #152]	@ (800267c <HAL_GPIO_EXTI_Callback+0xc8>)
		GPIO_PinState dt_state = HAL_GPIO_ReadPin(ENC_DT_GPIO_Port,
 80025e4:	461c      	mov	r4, r3
		GPIO_PinState sw_state = HAL_GPIO_ReadPin(ENC_SW_GPIO_Port,
 80025e6:	f005 fc39 	bl	8007e5c <HAL_GPIO_ReadPin>
				ENC_SW_Pin);
		// Only count if button is actually pressed (logic low) and both CLK and DT are high
		// Note: When turn rotary knob left/right, SW pin is always pulled low together with CLK and DT pins.
		if (sw_state == GPIO_PIN_RESET) {
 80025ea:	b908      	cbnz	r0, 80025f0 <HAL_GPIO_EXTI_Callback+0x3c>
			if (dt_state == GPIO_PIN_SET) {
 80025ec:	2c01      	cmp	r4, #1
 80025ee:	d027      	beq.n	8002640 <HAL_GPIO_EXTI_Callback+0x8c>
					}
				}
			}
		}
	}
}
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
		bno085_int_flag = 1;
 80025f2:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <HAL_GPIO_EXTI_Callback+0xcc>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
}
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
		if (HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port, ENC_CLK_Pin)
 80025fa:	4820      	ldr	r0, [pc, #128]	@ (800267c <HAL_GPIO_EXTI_Callback+0xc8>)
 80025fc:	4621      	mov	r1, r4
 80025fe:	f005 fc2d 	bl	8007e5c <HAL_GPIO_ReadPin>
 8002602:	2800      	cmp	r0, #0
 8002604:	d1f4      	bne.n	80025f0 <HAL_GPIO_EXTI_Callback+0x3c>
			if (now - last_clk_tick > ENCODER_DEBOUNCE_MS) {
 8002606:	4a1f      	ldr	r2, [pc, #124]	@ (8002684 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002608:	6813      	ldr	r3, [r2, #0]
 800260a:	1aeb      	subs	r3, r5, r3
 800260c:	2b96      	cmp	r3, #150	@ 0x96
 800260e:	d9ef      	bls.n	80025f0 <HAL_GPIO_EXTI_Callback+0x3c>
				osMutexAcquire(EncoderMutexHandle, 0);
 8002610:	4c1d      	ldr	r4, [pc, #116]	@ (8002688 <HAL_GPIO_EXTI_Callback+0xd4>)
				last_clk_tick = now;
 8002612:	6015      	str	r5, [r2, #0]
				osMutexAcquire(EncoderMutexHandle, 0);
 8002614:	4601      	mov	r1, r0
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	f00a fab1 	bl	800cb7e <osMutexAcquire>
				if (HAL_GPIO_ReadPin(ENC_DT_GPIO_Port, ENC_DT_Pin)
 800261c:	4817      	ldr	r0, [pc, #92]	@ (800267c <HAL_GPIO_EXTI_Callback+0xc8>)
 800261e:	2120      	movs	r1, #32
 8002620:	f005 fc1c 	bl	8007e5c <HAL_GPIO_ReadPin>
					encoder_count++;
 8002624:	4a19      	ldr	r2, [pc, #100]	@ (800268c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002626:	6813      	ldr	r3, [r2, #0]
				if (HAL_GPIO_ReadPin(ENC_DT_GPIO_Port, ENC_DT_Pin)
 8002628:	2801      	cmp	r0, #1
					encoder_count++;
 800262a:	bf08      	it	eq
 800262c:	3301      	addeq	r3, #1
				osMutexRelease(EncoderMutexHandle);
 800262e:	6820      	ldr	r0, [r4, #0]
					encoder_count--;
 8002630:	bf18      	it	ne
 8002632:	f103 33ff 	addne.w	r3, r3, #4294967295
}
 8002636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					encoder_count--;
 800263a:	6013      	str	r3, [r2, #0]
				osMutexRelease(EncoderMutexHandle);
 800263c:	f00a baea 	b.w	800cc14 <osMutexRelease>
				if (clk_state == GPIO_PIN_SET) {
 8002640:	2e01      	cmp	r6, #1
 8002642:	d1d5      	bne.n	80025f0 <HAL_GPIO_EXTI_Callback+0x3c>
					if ((now - last_clk_tick) > CLK_SW_DEBOUNCE_MS) {
 8002644:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1aeb      	subs	r3, r5, r3
 800264a:	2b1e      	cmp	r3, #30
 800264c:	d9d0      	bls.n	80025f0 <HAL_GPIO_EXTI_Callback+0x3c>
						if (now - last_sw_tick > BUTTON_DEBOUNCE_MS) {
 800264e:	4a10      	ldr	r2, [pc, #64]	@ (8002690 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002650:	6813      	ldr	r3, [r2, #0]
 8002652:	1aeb      	subs	r3, r5, r3
 8002654:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002658:	d9ca      	bls.n	80025f0 <HAL_GPIO_EXTI_Callback+0x3c>
							osMutexAcquire(EncoderMutexHandle, 0);
 800265a:	4c0b      	ldr	r4, [pc, #44]	@ (8002688 <HAL_GPIO_EXTI_Callback+0xd4>)
							last_sw_tick = now;
 800265c:	6015      	str	r5, [r2, #0]
							osMutexAcquire(EncoderMutexHandle, 0);
 800265e:	4601      	mov	r1, r0
 8002660:	6820      	ldr	r0, [r4, #0]
 8002662:	f00a fa8c 	bl	800cb7e <osMutexAcquire>
							encoder_button_pressed = 1;
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_GPIO_EXTI_Callback+0xe0>)
							encoder_sw_count++; // Increment counter on each debounced press
 8002668:	4a0b      	ldr	r2, [pc, #44]	@ (8002698 <HAL_GPIO_EXTI_Callback+0xe4>)
							encoder_button_pressed = 1;
 800266a:	701e      	strb	r6, [r3, #0]
							encoder_sw_count++; // Increment counter on each debounced press
 800266c:	6813      	ldr	r3, [r2, #0]
							osMutexRelease(EncoderMutexHandle);
 800266e:	6820      	ldr	r0, [r4, #0]
							encoder_sw_count++; // Increment counter on each debounced press
 8002670:	3301      	adds	r3, #1
}
 8002672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
							encoder_sw_count++; // Increment counter on each debounced press
 8002676:	6013      	str	r3, [r2, #0]
							osMutexRelease(EncoderMutexHandle);
 8002678:	f00a bacc 	b.w	800cc14 <osMutexRelease>
 800267c:	40020000 	.word	0x40020000
 8002680:	200004b3 	.word	0x200004b3
 8002684:	200004c4 	.word	0x200004c4
 8002688:	20000458 	.word	0x20000458
 800268c:	200004b8 	.word	0x200004b8
 8002690:	200004c8 	.word	0x200004c8
 8002694:	200004bc 	.word	0x200004bc
 8002698:	200004c0 	.word	0x200004c0

0800269c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800269c:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == USART2) {
 800269e:	6802      	ldr	r2, [r0, #0]
 80026a0:	4b69      	ldr	r3, [pc, #420]	@ (8002848 <HAL_UART_RxCpltCallback+0x1ac>)
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d000      	beq.n	80026a8 <HAL_UART_RxCpltCallback+0xc>
		} else {
			// Invalid frame - don't update sbus_signal_valid or channels
		}
		// DO NOT restart DMA - Circular mode handles this automatically
	}
}
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
		if (sbus_rx_buffer[0] == 0x0F && sbus_rx_buffer[24] == 0x00) {
 80026a8:	4c68      	ldr	r4, [pc, #416]	@ (800284c <HAL_UART_RxCpltCallback+0x1b0>)
 80026aa:	7823      	ldrb	r3, [r4, #0]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d1fa      	bne.n	80026a6 <HAL_UART_RxCpltCallback+0xa>
 80026b0:	7e23      	ldrb	r3, [r4, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f7      	bne.n	80026a6 <HAL_UART_RxCpltCallback+0xa>
			sbus_last_valid_time = HAL_GetTick();
 80026b6:	f004 fc49 	bl	8006f4c <HAL_GetTick>
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 80026ba:	78a2      	ldrb	r2, [r4, #2]
				uint16_t value = (sbus_rx_buffer[byte_idx]
 80026bc:	7863      	ldrb	r3, [r4, #1]
			sbus_last_valid_time = HAL_GetTick();
 80026be:	4d64      	ldr	r5, [pc, #400]	@ (8002850 <HAL_UART_RxCpltCallback+0x1b4>)
			sbus_signal_valid = 1;
 80026c0:	4964      	ldr	r1, [pc, #400]	@ (8002854 <HAL_UART_RxCpltCallback+0x1b8>)
			sbus_last_valid_time = HAL_GetTick();
 80026c2:	6028      	str	r0, [r5, #0]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 80026c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				value = (value >> bit_idx) & 0x07FF;
 80026c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
			sbus_signal_valid = 1;
 80026cc:	2001      	movs	r0, #1
 80026ce:	7008      	strb	r0, [r1, #0]
				if (value >= 172 && value <= 1811) {
 80026d0:	f1a3 01ac 	sub.w	r1, r3, #172	@ 0xac
 80026d4:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 80026d8:	bf3c      	itt	cc
 80026da:	495f      	ldrcc	r1, [pc, #380]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 80026dc:	800b      	strhcc	r3, [r1, #0]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 80026de:	78e3      	ldrb	r3, [r4, #3]
				value = (value >> bit_idx) & 0x07FF;
 80026e0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80026e4:	f3c2 02ca 	ubfx	r2, r2, #3, #11
				if (value >= 172 && value <= 1811) {
 80026e8:	f1a2 01ac 	sub.w	r1, r2, #172	@ 0xac
 80026ec:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 80026f0:	bf3c      	itt	cc
 80026f2:	4959      	ldrcc	r1, [pc, #356]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 80026f4:	804a      	strhcc	r2, [r1, #2]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 80026f6:	7922      	ldrb	r2, [r4, #4]
				value = (value >> bit_idx) & 0x07FF;
 80026f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026fc:	099b      	lsrs	r3, r3, #6
				if (value >= 172 && value <= 1811) {
 80026fe:	f1a3 02ac 	sub.w	r2, r3, #172	@ 0xac
 8002702:	f5b2 6fcd 	cmp.w	r2, #1640	@ 0x668
					sbus_channels[ch] = value;
 8002706:	bf3c      	itt	cc
 8002708:	4a53      	ldrcc	r2, [pc, #332]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 800270a:	8093      	strhcc	r3, [r2, #4]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 800270c:	79a2      	ldrb	r2, [r4, #6]
				uint16_t value = (sbus_rx_buffer[byte_idx]
 800270e:	7963      	ldrb	r3, [r4, #5]
				value = (value >> bit_idx) & 0x07FF;
 8002710:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002714:	f3c3 034a 	ubfx	r3, r3, #1, #11
				if (value >= 172 && value <= 1811) {
 8002718:	f1a3 01ac 	sub.w	r1, r3, #172	@ 0xac
 800271c:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 8002720:	bf3c      	itt	cc
 8002722:	494d      	ldrcc	r1, [pc, #308]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 8002724:	80cb      	strhcc	r3, [r1, #6]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 8002726:	79e3      	ldrb	r3, [r4, #7]
				value = (value >> bit_idx) & 0x07FF;
 8002728:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800272c:	f3c2 120a 	ubfx	r2, r2, #4, #11
				if (value >= 172 && value <= 1811) {
 8002730:	f1a2 01ac 	sub.w	r1, r2, #172	@ 0xac
 8002734:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 8002738:	bf3c      	itt	cc
 800273a:	4947      	ldrcc	r1, [pc, #284]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 800273c:	810a      	strhcc	r2, [r1, #8]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 800273e:	7a22      	ldrb	r2, [r4, #8]
				value = (value >> bit_idx) & 0x07FF;
 8002740:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002744:	09db      	lsrs	r3, r3, #7
				if (value >= 172 && value <= 1811) {
 8002746:	f1a3 02ac 	sub.w	r2, r3, #172	@ 0xac
 800274a:	f5b2 6fcd 	cmp.w	r2, #1640	@ 0x668
					sbus_channels[ch] = value;
 800274e:	bf3c      	itt	cc
 8002750:	4a41      	ldrcc	r2, [pc, #260]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 8002752:	8153      	strhcc	r3, [r2, #10]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 8002754:	7aa3      	ldrb	r3, [r4, #10]
				uint16_t value = (sbus_rx_buffer[byte_idx]
 8002756:	7a62      	ldrb	r2, [r4, #9]
				value = (value >> bit_idx) & 0x07FF;
 8002758:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800275c:	f3c2 028a 	ubfx	r2, r2, #2, #11
				if (value >= 172 && value <= 1811) {
 8002760:	f1a2 01ac 	sub.w	r1, r2, #172	@ 0xac
 8002764:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 8002768:	bf3c      	itt	cc
 800276a:	493b      	ldrcc	r1, [pc, #236]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 800276c:	818a      	strhcc	r2, [r1, #12]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 800276e:	7ae2      	ldrb	r2, [r4, #11]
				value = (value >> bit_idx) & 0x07FF;
 8002770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002774:	095b      	lsrs	r3, r3, #5
				if (value >= 172 && value <= 1811) {
 8002776:	f1a3 02ac 	sub.w	r2, r3, #172	@ 0xac
 800277a:	f5b2 6fcd 	cmp.w	r2, #1640	@ 0x668
					sbus_channels[ch] = value;
 800277e:	bf3c      	itt	cc
 8002780:	4a35      	ldrcc	r2, [pc, #212]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 8002782:	81d3      	strhcc	r3, [r2, #14]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 8002784:	7b62      	ldrb	r2, [r4, #13]
				uint16_t value = (sbus_rx_buffer[byte_idx]
 8002786:	7b23      	ldrb	r3, [r4, #12]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 8002788:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				value = (value >> bit_idx) & 0x07FF;
 800278c:	f3c3 030a 	ubfx	r3, r3, #0, #11
				if (value >= 172 && value <= 1811) {
 8002790:	f1a3 01ac 	sub.w	r1, r3, #172	@ 0xac
 8002794:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 8002798:	bf3c      	itt	cc
 800279a:	492f      	ldrcc	r1, [pc, #188]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 800279c:	820b      	strhcc	r3, [r1, #16]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 800279e:	7ba3      	ldrb	r3, [r4, #14]
				value = (value >> bit_idx) & 0x07FF;
 80027a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80027a4:	f3c2 02ca 	ubfx	r2, r2, #3, #11
				if (value >= 172 && value <= 1811) {
 80027a8:	f1a2 01ac 	sub.w	r1, r2, #172	@ 0xac
 80027ac:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 80027b0:	bf3c      	itt	cc
 80027b2:	4929      	ldrcc	r1, [pc, #164]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 80027b4:	824a      	strhcc	r2, [r1, #18]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 80027b6:	7be2      	ldrb	r2, [r4, #15]
				value = (value >> bit_idx) & 0x07FF;
 80027b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80027bc:	099b      	lsrs	r3, r3, #6
				if (value >= 172 && value <= 1811) {
 80027be:	f1a3 02ac 	sub.w	r2, r3, #172	@ 0xac
 80027c2:	f5b2 6fcd 	cmp.w	r2, #1640	@ 0x668
					sbus_channels[ch] = value;
 80027c6:	bf3c      	itt	cc
 80027c8:	4a23      	ldrcc	r2, [pc, #140]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 80027ca:	8293      	strhcc	r3, [r2, #20]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 80027cc:	7c62      	ldrb	r2, [r4, #17]
				uint16_t value = (sbus_rx_buffer[byte_idx]
 80027ce:	7c23      	ldrb	r3, [r4, #16]
				value = (value >> bit_idx) & 0x07FF;
 80027d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80027d4:	f3c3 034a 	ubfx	r3, r3, #1, #11
				if (value >= 172 && value <= 1811) {
 80027d8:	f1a3 01ac 	sub.w	r1, r3, #172	@ 0xac
 80027dc:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 80027e0:	bf3c      	itt	cc
 80027e2:	491d      	ldrcc	r1, [pc, #116]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 80027e4:	82cb      	strhcc	r3, [r1, #22]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 80027e6:	7ca3      	ldrb	r3, [r4, #18]
				value = (value >> bit_idx) & 0x07FF;
 80027e8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80027ec:	f3c2 120a 	ubfx	r2, r2, #4, #11
				if (value >= 172 && value <= 1811) {
 80027f0:	f1a2 01ac 	sub.w	r1, r2, #172	@ 0xac
 80027f4:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 80027f8:	bf3c      	itt	cc
 80027fa:	4917      	ldrcc	r1, [pc, #92]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 80027fc:	830a      	strhcc	r2, [r1, #24]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 80027fe:	7ce2      	ldrb	r2, [r4, #19]
				value = (value >> bit_idx) & 0x07FF;
 8002800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002804:	09db      	lsrs	r3, r3, #7
				if (value >= 172 && value <= 1811) {
 8002806:	f1a3 02ac 	sub.w	r2, r3, #172	@ 0xac
 800280a:	f5b2 6fcd 	cmp.w	r2, #1640	@ 0x668
					sbus_channels[ch] = value;
 800280e:	bf3c      	itt	cc
 8002810:	4a11      	ldrcc	r2, [pc, #68]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 8002812:	8353      	strhcc	r3, [r2, #26]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 8002814:	7d63      	ldrb	r3, [r4, #21]
				uint16_t value = (sbus_rx_buffer[byte_idx]
 8002816:	7d22      	ldrb	r2, [r4, #20]
				value = (value >> bit_idx) & 0x07FF;
 8002818:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800281c:	f3c2 028a 	ubfx	r2, r2, #2, #11
				if (value >= 172 && value <= 1811) {
 8002820:	f1a2 01ac 	sub.w	r1, r2, #172	@ 0xac
 8002824:	f5b1 6fcd 	cmp.w	r1, #1640	@ 0x668
					sbus_channels[ch] = value;
 8002828:	bf3c      	itt	cc
 800282a:	490b      	ldrcc	r1, [pc, #44]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 800282c:	838a      	strhcc	r2, [r1, #28]
												 | (sbus_rx_buffer[byte_idx + 1] << 8)
 800282e:	7da2      	ldrb	r2, [r4, #22]
				value = (value >> bit_idx) & 0x07FF;
 8002830:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002834:	095b      	lsrs	r3, r3, #5
				if (value >= 172 && value <= 1811) {
 8002836:	f1a3 02ac 	sub.w	r2, r3, #172	@ 0xac
 800283a:	f5b2 6fcd 	cmp.w	r2, #1640	@ 0x668
					sbus_channels[ch] = value;
 800283e:	bf3c      	itt	cc
 8002840:	4a05      	ldrcc	r2, [pc, #20]	@ (8002858 <HAL_UART_RxCpltCallback+0x1bc>)
 8002842:	83d3      	strhcc	r3, [r2, #30]
}
 8002844:	bd38      	pop	{r3, r4, r5, pc}
 8002846:	bf00      	nop
 8002848:	40004400 	.word	0x40004400
 800284c:	20000468 	.word	0x20000468
 8002850:	200004ac 	.word	0x200004ac
 8002854:	200004b0 	.word	0x200004b0
 8002858:	20000484 	.word	0x20000484

0800285c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800285c:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == USART2) {
 800285e:	6802      	ldr	r2, [r0, #0]
 8002860:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <HAL_UART_ErrorCallback+0x48>)
 8002862:	429a      	cmp	r2, r3
 8002864:	d000      	beq.n	8002868 <HAL_UART_ErrorCallback+0xc>
		osMutexRelease(UARTMutexHandle);

		// Set flag for recovery in main task context
		sbus_recovery_requested = 1;
	}
}
 8002866:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002868:	4604      	mov	r4, r0
 800286a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800286e:	480e      	ldr	r0, [pc, #56]	@ (80028a8 <HAL_UART_ErrorCallback+0x4c>)
		osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002870:	4d0e      	ldr	r5, [pc, #56]	@ (80028ac <HAL_UART_ErrorCallback+0x50>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002872:	2200      	movs	r2, #0
 8002874:	f005 fb0a 	bl	8007e8c <HAL_GPIO_WritePin>
		sbus_signal_valid = 0;
 8002878:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <HAL_UART_ErrorCallback+0x54>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
		stop_all_motors_3wheel();
 800287e:	f7fe fddb 	bl	8001438 <stop_all_motors_3wheel>
		osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002882:	f04f 31ff 	mov.w	r1, #4294967295
 8002886:	6828      	ldr	r0, [r5, #0]
 8002888:	f00a f979 	bl	800cb7e <osMutexAcquire>
		uart2_error_flag = 1;
 800288c:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_UART_ErrorCallback+0x58>)
		uart2_error_code = huart->ErrorCode;
 800288e:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <HAL_UART_ErrorCallback+0x5c>)
 8002890:	6c61      	ldr	r1, [r4, #68]	@ 0x44
		osMutexRelease(UARTMutexHandle);
 8002892:	6828      	ldr	r0, [r5, #0]
		uart2_error_code = huart->ErrorCode;
 8002894:	6011      	str	r1, [r2, #0]
		uart2_error_flag = 1;
 8002896:	2401      	movs	r4, #1
 8002898:	701c      	strb	r4, [r3, #0]
		osMutexRelease(UARTMutexHandle);
 800289a:	f00a f9bb 	bl	800cc14 <osMutexRelease>
		sbus_recovery_requested = 1;
 800289e:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <HAL_UART_ErrorCallback+0x60>)
 80028a0:	701c      	strb	r4, [r3, #0]
}
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
 80028a4:	40004400 	.word	0x40004400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	2000045c 	.word	0x2000045c
 80028b0:	200004b0 	.word	0x200004b0
 80028b4:	200004a8 	.word	0x200004a8
 80028b8:	200004a4 	.word	0x200004a4
 80028bc:	200004b2 	.word	0x200004b2

080028c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80028c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c4:	ed2d 8b04 	vpush	{d8-d9}
 80028c8:	4fa9      	ldr	r7, [pc, #676]	@ (8002b70 <StartDefaultTask+0x2b0>)
							locked_heading, current_robot_front);
				}

				// Calculate individual motor speeds for 3-wheel omnidirectional
				int16_t lf, rf, bk;
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 80028ca:	ed9f 9aaa 	vldr	s18, [pc, #680]	@ 8002b74 <StartDefaultTask+0x2b4>
 80028ce:	f8df 8310 	ldr.w	r8, [pc, #784]	@ 8002be0 <StartDefaultTask+0x320>
 80028d2:	f8df b310 	ldr.w	fp, [pc, #784]	@ 8002be4 <StartDefaultTask+0x324>
{
 80028d6:	b089      	sub	sp, #36	@ 0x24
 80028d8:	e07f      	b.n	80029da <StartDefaultTask+0x11a>
		if (sbus_valid && sbus_was_in_error) {
 80028da:	4ba7      	ldr	r3, [pc, #668]	@ (8002b78 <StartDefaultTask+0x2b8>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 81c1 	bne.w	8002c66 <StartDefaultTask+0x3a6>
		osMutexAcquire(CompassMutexHandle, osWaitForever);
 80028e4:	4da5      	ldr	r5, [pc, #660]	@ (8002b7c <StartDefaultTask+0x2bc>)
 80028e6:	f04f 31ff 	mov.w	r1, #4294967295
 80028ea:	6828      	ldr	r0, [r5, #0]
 80028ec:	f00a f947 	bl	800cb7e <osMutexAcquire>
		current_compass_heading = compass_heading_deg;
 80028f0:	4ba3      	ldr	r3, [pc, #652]	@ (8002b80 <StartDefaultTask+0x2c0>)
		osMutexRelease(CompassMutexHandle);
 80028f2:	6828      	ldr	r0, [r5, #0]
		current_compass_heading = compass_heading_deg;
 80028f4:	edd3 8a00 	vldr	s17, [r3]
		osMutexRelease(CompassMutexHandle);
 80028f8:	f00a f98c 	bl	800cc14 <osMutexRelease>
		current_robot_front = compass_to_robot_front(current_compass_heading);
 80028fc:	eeb0 0a68 	vmov.f32	s0, s17
 8002900:	f7ff f892 	bl	8001a28 <compass_to_robot_front>
		osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002904:	4b9f      	ldr	r3, [pc, #636]	@ (8002b84 <StartDefaultTask+0x2c4>)
 8002906:	f04f 31ff 	mov.w	r1, #4294967295
 800290a:	6818      	ldr	r0, [r3, #0]
		current_robot_front = compass_to_robot_front(current_compass_heading);
 800290c:	eeb0 8a40 	vmov.f32	s16, s0
		osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002910:	f00a f935 	bl	800cb7e <osMutexAcquire>
		mode = current_mode;
 8002914:	4b9c      	ldr	r3, [pc, #624]	@ (8002b88 <StartDefaultTask+0x2c8>)
		if (mode_change_request) {
 8002916:	4a9d      	ldr	r2, [pc, #628]	@ (8002b8c <StartDefaultTask+0x2cc>)
		mode = current_mode;
 8002918:	781d      	ldrb	r5, [r3, #0]
		state = robot_state;
 800291a:	4b9d      	ldr	r3, [pc, #628]	@ (8002b90 <StartDefaultTask+0x2d0>)
 800291c:	781e      	ldrb	r6, [r3, #0]
		if (mode_change_request) {
 800291e:	7813      	ldrb	r3, [r2, #0]
		mode = current_mode;
 8002920:	b2ed      	uxtb	r5, r5
		state = robot_state;
 8002922:	b2f6      	uxtb	r6, r6
		if (mode_change_request) {
 8002924:	f003 0aff 	and.w	sl, r3, #255	@ 0xff
 8002928:	b11b      	cbz	r3, 8002932 <StartDefaultTask+0x72>
			mode_change_request = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	7013      	strb	r3, [r2, #0]
			mode_changed = 1;
 800292e:	f04f 0a01 	mov.w	sl, #1
		if (state_toggle_request) {
 8002932:	4a98      	ldr	r2, [pc, #608]	@ (8002b94 <StartDefaultTask+0x2d4>)
 8002934:	7813      	ldrb	r3, [r2, #0]
 8002936:	f003 09ff 	and.w	r9, r3, #255	@ 0xff
 800293a:	b11b      	cbz	r3, 8002944 <StartDefaultTask+0x84>
			state_toggle_request = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	7013      	strb	r3, [r2, #0]
			state_changed = 1;
 8002940:	f04f 0901 	mov.w	r9, #1
		osMutexRelease(ModeMutexHandle);
 8002944:	4b8f      	ldr	r3, [pc, #572]	@ (8002b84 <StartDefaultTask+0x2c4>)
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	f00a f964 	bl	800cc14 <osMutexRelease>
		if (sbus_valid) {
 800294c:	2c00      	cmp	r4, #0
 800294e:	d164      	bne.n	8002a1a <StartDefaultTask+0x15a>
			ch7_stable_time = 0;
 8002950:	4b91      	ldr	r3, [pc, #580]	@ (8002b98 <StartDefaultTask+0x2d8>)
			last_ch7_position = CH7_POSITION_UNKNOWN;
 8002952:	4a92      	ldr	r2, [pc, #584]	@ (8002b9c <StartDefaultTask+0x2dc>)
			ch7_stable_time = 0;
 8002954:	601c      	str	r4, [r3, #0]
			last_ch7_position = CH7_POSITION_UNKNOWN;
 8002956:	2303      	movs	r3, #3
 8002958:	7013      	strb	r3, [r2, #0]
		if (mode_changed) {
 800295a:	f1ba 0f00 	cmp.w	sl, #0
 800295e:	d172      	bne.n	8002a46 <StartDefaultTask+0x186>
		if (state_changed) {
 8002960:	f1b9 0f00 	cmp.w	r9, #0
 8002964:	d17b      	bne.n	8002a5e <StartDefaultTask+0x19e>
		if (mode == MODE_MOVEMENT || mode == MODE_MOVEMENT_HL) { // UPDATED
 8002966:	3d01      	subs	r5, #1
 8002968:	2d01      	cmp	r5, #1
 800296a:	f240 8156 	bls.w	8002c1a <StartDefaultTask+0x35a>
				motor_back = 0;
			}
		}

		// Performance monitoring (every 5 seconds)
		uint32_t loop_end = HAL_GetTick();
 800296e:	f004 faed 	bl	8006f4c <HAL_GetTick>
		uint32_t loop_time = loop_end - loop_start;
 8002972:	9b02      	ldr	r3, [sp, #8]

		loop_count++;
 8002974:	683c      	ldr	r4, [r7, #0]
		if (loop_time > max_loop_time) max_loop_time = loop_time;
		avg_loop_time = (avg_loop_time * (loop_count - 1) + loop_time) / loop_count;
 8002976:	f8d8 2000 	ldr.w	r2, [r8]
		uint32_t loop_time = loop_end - loop_start;
 800297a:	1ac5      	subs	r5, r0, r3
		if (loop_time > max_loop_time) max_loop_time = loop_time;
 800297c:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <StartDefaultTask+0x2e0>)
 800297e:	681e      	ldr	r6, [r3, #0]
 8002980:	42ae      	cmp	r6, r5
 8002982:	bf38      	it	cc
 8002984:	601d      	strcc	r5, [r3, #0]

		if ((loop_end - last_perf_check) >= 5000) {
 8002986:	f8db 3000 	ldr.w	r3, [fp]
		loop_count++;
 800298a:	f104 0101 	add.w	r1, r4, #1
		if ((loop_end - last_perf_check) >= 5000) {
 800298e:	eba0 0303 	sub.w	r3, r0, r3
		avg_loop_time = (avg_loop_time * (loop_count - 1) + loop_time) / loop_count;
 8002992:	fb02 5404 	mla	r4, r2, r4, r5
		if ((loop_end - last_perf_check) >= 5000) {
 8002996:	f241 3287 	movw	r2, #4999	@ 0x1387
		if (loop_time > max_loop_time) max_loop_time = loop_time;
 800299a:	bf38      	it	cc
 800299c:	462e      	movcc	r6, r5
		if ((loop_end - last_perf_check) >= 5000) {
 800299e:	4293      	cmp	r3, r2
		avg_loop_time = (avg_loop_time * (loop_count - 1) + loop_time) / loop_count;
 80029a0:	fbb4 f4f1 	udiv	r4, r4, r1
		loop_count++;
 80029a4:	6039      	str	r1, [r7, #0]
		avg_loop_time = (avg_loop_time * (loop_count - 1) + loop_time) / loop_count;
 80029a6:	f8c8 4000 	str.w	r4, [r8]
		if ((loop_end - last_perf_check) >= 5000) {
 80029aa:	d910      	bls.n	80029ce <StartDefaultTask+0x10e>
			last_perf_check = loop_end;
 80029ac:	f8cb 0000 	str.w	r0, [fp]
			printf("Perf: Loop=%lums, Max=%lums, Avg=%lums, Heap=%u\r\n",
 80029b0:	f00d f8ee 	bl	800fb90 <xPortGetFreeHeapSize>
 80029b4:	4623      	mov	r3, r4
 80029b6:	9000      	str	r0, [sp, #0]
 80029b8:	4632      	mov	r2, r6
 80029ba:	487a      	ldr	r0, [pc, #488]	@ (8002ba4 <StartDefaultTask+0x2e4>)
 80029bc:	4629      	mov	r1, r5
 80029be:	f00d fec7 	bl	8010750 <iprintf>
					loop_time, max_loop_time, avg_loop_time, xPortGetFreeHeapSize());
			max_loop_time = 0;  // Reset max
 80029c2:	4a77      	ldr	r2, [pc, #476]	@ (8002ba0 <StartDefaultTask+0x2e0>)
 80029c4:	2300      	movs	r3, #0
 80029c6:	6013      	str	r3, [r2, #0]
			loop_count = 0;     // Reset counter
 80029c8:	603b      	str	r3, [r7, #0]
			avg_loop_time = 0;  // Reset average
 80029ca:	f8c8 3000 	str.w	r3, [r8]
		}

		HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog
 80029ce:	4876      	ldr	r0, [pc, #472]	@ (8002ba8 <StartDefaultTask+0x2e8>)
 80029d0:	f007 f8ee 	bl	8009bb0 <HAL_IWDG_Refresh>

		osDelay(50); // Update at 20Hz
 80029d4:	2032      	movs	r0, #50	@ 0x32
 80029d6:	f00a f831 	bl	800ca3c <osDelay>
		uint32_t loop_start = HAL_GetTick();
 80029da:	f004 fab7 	bl	8006f4c <HAL_GetTick>
		if (sbus_recovery_requested) {
 80029de:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <StartDefaultTask+0x2ec>)
		uint32_t loop_start = HAL_GetTick();
 80029e0:	9002      	str	r0, [sp, #8]
		if (sbus_recovery_requested) {
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 80ff 	bne.w	8002be8 <StartDefaultTask+0x328>
		sbus_valid = is_sbus_signal_valid();
 80029ea:	f7fe fd31 	bl	8001450 <is_sbus_signal_valid>
		if (sbus_valid && sbus_was_in_error) {
 80029ee:	4604      	mov	r4, r0
 80029f0:	2800      	cmp	r0, #0
 80029f2:	f47f af72 	bne.w	80028da <StartDefaultTask+0x1a>
		} else if (!sbus_valid && !sbus_was_in_error) {
 80029f6:	4b60      	ldr	r3, [pc, #384]	@ (8002b78 <StartDefaultTask+0x2b8>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f47f af72 	bne.w	80028e4 <StartDefaultTask+0x24>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a00:	4602      	mov	r2, r0
 8002a02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a06:	486a      	ldr	r0, [pc, #424]	@ (8002bb0 <StartDefaultTask+0x2f0>)
 8002a08:	f005 fa40 	bl	8007e8c <HAL_GPIO_WritePin>
			printf("SBUS lost - LED turned ON\r\n");
 8002a0c:	4869      	ldr	r0, [pc, #420]	@ (8002bb4 <StartDefaultTask+0x2f4>)
 8002a0e:	f00d ff07 	bl	8010820 <puts>
			sbus_was_in_error = 1;
 8002a12:	4a59      	ldr	r2, [pc, #356]	@ (8002b78 <StartDefaultTask+0x2b8>)
 8002a14:	2301      	movs	r3, #1
 8002a16:	7013      	strb	r3, [r2, #0]
 8002a18:	e764      	b.n	80028e4 <StartDefaultTask+0x24>
			ch7_position_t current_ch7 = get_channel7_position();
 8002a1a:	f7ff f8ed 	bl	8001bf8 <get_channel7_position>
 8002a1e:	9003      	str	r0, [sp, #12]
			uint32_t now = HAL_GetTick();
 8002a20:	f004 fa94 	bl	8006f4c <HAL_GetTick>
			if (current_ch7 != last_ch7_position
 8002a24:	4b5d      	ldr	r3, [pc, #372]	@ (8002b9c <StartDefaultTask+0x2dc>)
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	9b03      	ldr	r3, [sp, #12]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	f000 81ac 	beq.w	8002d88 <StartDefaultTask+0x4c8>
					&& current_ch7 != CH7_POSITION_UNKNOWN) {
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d005      	beq.n	8002a40 <StartDefaultTask+0x180>
				if (ch7_stable_time == 0) {
 8002a34:	4958      	ldr	r1, [pc, #352]	@ (8002b98 <StartDefaultTask+0x2d8>)
 8002a36:	680a      	ldr	r2, [r1, #0]
 8002a38:	2a00      	cmp	r2, #0
 8002a3a:	f040 8121 	bne.w	8002c80 <StartDefaultTask+0x3c0>
					ch7_stable_time = now; // Start debounce timer
 8002a3e:	6008      	str	r0, [r1, #0]
		if (mode_changed) {
 8002a40:	f1ba 0f00 	cmp.w	sl, #0
 8002a44:	d06e      	beq.n	8002b24 <StartDefaultTask+0x264>
			stop_all_motors_3wheel();
 8002a46:	f7fe fcf7 	bl	8001438 <stop_all_motors_3wheel>
			disable_heading_lock();
 8002a4a:	f7fe ffe5 	bl	8001a18 <disable_heading_lock>
			sbus_was_lost = 0;
 8002a4e:	4a5a      	ldr	r2, [pc, #360]	@ (8002bb8 <StartDefaultTask+0x2f8>)
 8002a50:	2300      	movs	r3, #0
 8002a52:	7013      	strb	r3, [r2, #0]
			heading_lock_was_enabled = 0;
 8002a54:	4a59      	ldr	r2, [pc, #356]	@ (8002bbc <StartDefaultTask+0x2fc>)
 8002a56:	7013      	strb	r3, [r2, #0]
		if (state_changed) {
 8002a58:	f1b9 0f00 	cmp.w	r9, #0
 8002a5c:	d005      	beq.n	8002a6a <StartDefaultTask+0x1aa>
			if (state == STATE_IDLE) {
 8002a5e:	2e00      	cmp	r6, #0
 8002a60:	f000 80f7 	beq.w	8002c52 <StartDefaultTask+0x392>
			} else if (state == STATE_RUNNING && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002a64:	2e01      	cmp	r6, #1
 8002a66:	f000 814d 	beq.w	8002d04 <StartDefaultTask+0x444>
		if (mode == MODE_MOVEMENT || mode == MODE_MOVEMENT_HL) { // UPDATED
 8002a6a:	1e6b      	subs	r3, r5, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	f63f af7e 	bhi.w	800296e <StartDefaultTask+0xae>
			if (sbus_valid) {
 8002a72:	2c00      	cmp	r4, #0
 8002a74:	f000 80d1 	beq.w	8002c1a <StartDefaultTask+0x35a>
				if (sbus_was_lost && mode == MODE_MOVEMENT_HL
 8002a78:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb8 <StartDefaultTask+0x2f8>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d05c      	beq.n	8002b3a <StartDefaultTask+0x27a>
 8002a80:	2d02      	cmp	r5, #2
 8002a82:	f000 8191 	beq.w	8002da8 <StartDefaultTask+0x4e8>
				int16_t x = sbus_to_percentage(sbus_channels[1]); // Channel 2: Left/Right
 8002a86:	494e      	ldr	r1, [pc, #312]	@ (8002bc0 <StartDefaultTask+0x300>)
 8002a88:	8848      	ldrh	r0, [r1, #2]
 8002a8a:	b280      	uxth	r0, r0
 8002a8c:	f7fe fb50 	bl	8001130 <sbus_to_percentage>
 8002a90:	4681      	mov	r9, r0
				int16_t y = sbus_to_percentage(sbus_channels[4]); // Channel 5: Forward/Backward
 8002a92:	8908      	ldrh	r0, [r1, #8]
 8002a94:	b280      	uxth	r0, r0
 8002a96:	f7fe fb4b 	bl	8001130 <sbus_to_percentage>
 8002a9a:	4604      	mov	r4, r0
				int16_t rot = sbus_to_percentage(sbus_channels[3]); // Channel 4: Rotation
 8002a9c:	88c8      	ldrh	r0, [r1, #6]
 8002a9e:	b280      	uxth	r0, r0
 8002aa0:	f7fe fb46 	bl	8001130 <sbus_to_percentage>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002aa4:	4a47      	ldr	r2, [pc, #284]	@ (8002bc4 <StartDefaultTask+0x304>)
 8002aa6:	7813      	ldrb	r3, [r2, #0]
				int16_t rot = sbus_to_percentage(sbus_channels[3]); // Channel 4: Rotation
 8002aa8:	4682      	mov	sl, r0
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d15d      	bne.n	8002b6a <StartDefaultTask+0x2aa>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002aae:	7813      	ldrb	r3, [r2, #0]
					calculate_omni_motor_speeds(x, y, rot, &lf, &rf, &bk);
 8002ab0:	f10d 031e 	add.w	r3, sp, #30
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	ab07      	add	r3, sp, #28
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4652      	mov	r2, sl
 8002abc:	f10d 031a 	add.w	r3, sp, #26
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	4648      	mov	r0, r9
 8002ac4:	f7fe fb50 	bl	8001168 <calculate_omni_motor_speeds>
				joystick_x = x;
 8002ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc8 <StartDefaultTask+0x308>)
				motor_left_front = lf;   // Motor 1B
 8002aca:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
				joystick_x = x;
 8002ace:	f8a3 9000 	strh.w	r9, [r3]
				joystick_y = y;
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bcc <StartDefaultTask+0x30c>)
				motor_right_front = rf;  // Motor 1A
 8002ad4:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
				joystick_y = y;
 8002ad8:	801c      	strh	r4, [r3, #0]
				joystick_rotation = rot;
 8002ada:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd0 <StartDefaultTask+0x310>)
				motor_back = bk;         // Motor 2A
 8002adc:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
				joystick_rotation = rot;
 8002ae0:	f8a3 a000 	strh.w	sl, [r3]
				motor_left_front = lf;   // Motor 1B
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd4 <StartDefaultTask+0x314>)
 8002ae6:	8018      	strh	r0, [r3, #0]
				motor_right_front = rf;  // Motor 1A
 8002ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd8 <StartDefaultTask+0x318>)
 8002aea:	8019      	strh	r1, [r3, #0]
				motor_back = bk;         // Motor 2A
 8002aec:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <StartDefaultTask+0x31c>)
						&& state == STATE_RUNNING) { // UPDATED
 8002aee:	2e01      	cmp	r6, #1
				motor_back = bk;         // Motor 2A
 8002af0:	801a      	strh	r2, [r3, #0]
						&& state == STATE_RUNNING) { // UPDATED
 8002af2:	f47f af3c 	bne.w	800296e <StartDefaultTask+0xae>
					apply_motor_speeds_3wheel(lf, rf, bk);
 8002af6:	f7fe fc27 	bl	8001348 <apply_motor_speeds_3wheel>
 8002afa:	e738      	b.n	800296e <StartDefaultTask+0xae>
							|| target_state != robot_state) {
 8002afc:	4924      	ldr	r1, [pc, #144]	@ (8002b90 <StartDefaultTask+0x2d0>)
 8002afe:	9803      	ldr	r0, [sp, #12]
 8002b00:	7809      	ldrb	r1, [r1, #0]
 8002b02:	4281      	cmp	r1, r0
 8002b04:	f040 80d6 	bne.w	8002cb4 <StartDefaultTask+0x3f4>
					osMutexRelease(ModeMutexHandle);
 8002b08:	9303      	str	r3, [sp, #12]
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <StartDefaultTask+0x2c4>)
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	f00a f881 	bl	800cc14 <osMutexRelease>
					last_ch7_position = current_ch7;
 8002b12:	4a22      	ldr	r2, [pc, #136]	@ (8002b9c <StartDefaultTask+0x2dc>)
 8002b14:	9b03      	ldr	r3, [sp, #12]
 8002b16:	7013      	strb	r3, [r2, #0]
					ch7_stable_time = 0; // Reset debounce timer
 8002b18:	4a1f      	ldr	r2, [pc, #124]	@ (8002b98 <StartDefaultTask+0x2d8>)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	6013      	str	r3, [r2, #0]
		if (mode_changed) {
 8002b1e:	f1ba 0f00 	cmp.w	sl, #0
 8002b22:	d190      	bne.n	8002a46 <StartDefaultTask+0x186>
		if (state_changed) {
 8002b24:	f1b9 0f00 	cmp.w	r9, #0
 8002b28:	d199      	bne.n	8002a5e <StartDefaultTask+0x19e>
		if (mode == MODE_MOVEMENT || mode == MODE_MOVEMENT_HL) { // UPDATED
 8002b2a:	1e6b      	subs	r3, r5, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	f63f af1e 	bhi.w	800296e <StartDefaultTask+0xae>
				if (sbus_was_lost && mode == MODE_MOVEMENT_HL
 8002b32:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <StartDefaultTask+0x2f8>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1a2      	bne.n	8002a80 <StartDefaultTask+0x1c0>
				int16_t x = sbus_to_percentage(sbus_channels[1]); // Channel 2: Left/Right
 8002b3a:	4921      	ldr	r1, [pc, #132]	@ (8002bc0 <StartDefaultTask+0x300>)
 8002b3c:	8848      	ldrh	r0, [r1, #2]
 8002b3e:	b280      	uxth	r0, r0
 8002b40:	f7fe faf6 	bl	8001130 <sbus_to_percentage>
 8002b44:	4681      	mov	r9, r0
				int16_t y = sbus_to_percentage(sbus_channels[4]); // Channel 5: Forward/Backward
 8002b46:	8908      	ldrh	r0, [r1, #8]
 8002b48:	b280      	uxth	r0, r0
 8002b4a:	f7fe faf1 	bl	8001130 <sbus_to_percentage>
 8002b4e:	4604      	mov	r4, r0
				int16_t rot = sbus_to_percentage(sbus_channels[3]); // Channel 4: Rotation
 8002b50:	88c8      	ldrh	r0, [r1, #6]
 8002b52:	b280      	uxth	r0, r0
 8002b54:	f7fe faec 	bl	8001130 <sbus_to_percentage>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002b58:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <StartDefaultTask+0x304>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
				int16_t rot = sbus_to_percentage(sbus_channels[3]); // Channel 4: Rotation
 8002b5c:	4682      	mov	sl, r0
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 811a 	beq.w	8002d98 <StartDefaultTask+0x4d8>
 8002b64:	2d02      	cmp	r5, #2
 8002b66:	f000 8122 	beq.w	8002dae <StartDefaultTask+0x4ee>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002b6a:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <StartDefaultTask+0x304>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	e79f      	b.n	8002ab0 <StartDefaultTask+0x1f0>
 8002b70:	2000056c 	.word	0x2000056c
 8002b74:	00000000 	.word	0x00000000
 8002b78:	20000564 	.word	0x20000564
 8002b7c:	20000450 	.word	0x20000450
 8002b80:	200004b4 	.word	0x200004b4
 8002b84:	20000460 	.word	0x20000460
 8002b88:	200004cc 	.word	0x200004cc
 8002b8c:	200004cf 	.word	0x200004cf
 8002b90:	200004ce 	.word	0x200004ce
 8002b94:	200004d0 	.word	0x200004d0
 8002b98:	20000568 	.word	0x20000568
 8002b9c:	20000008 	.word	0x20000008
 8002ba0:	20000570 	.word	0x20000570
 8002ba4:	08013c9c 	.word	0x08013c9c
 8002ba8:	200002b4 	.word	0x200002b4
 8002bac:	200004b2 	.word	0x200004b2
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	08013c80 	.word	0x08013c80
 8002bb8:	20000500 	.word	0x20000500
 8002bbc:	20000501 	.word	0x20000501
 8002bc0:	20000484 	.word	0x20000484
 8002bc4:	200004de 	.word	0x200004de
 8002bc8:	200004d2 	.word	0x200004d2
 8002bcc:	200004d4 	.word	0x200004d4
 8002bd0:	200004d6 	.word	0x200004d6
 8002bd4:	200004d8 	.word	0x200004d8
 8002bd8:	200004da 	.word	0x200004da
 8002bdc:	200004dc 	.word	0x200004dc
 8002be0:	20000574 	.word	0x20000574
 8002be4:	20000578 	.word	0x20000578
			sbus_recovery_requested = 0;
 8002be8:	4a7f      	ldr	r2, [pc, #508]	@ (8002de8 <StartDefaultTask+0x528>)
				HAL_UART_AbortReceive(&huart2);
 8002bea:	4c80      	ldr	r4, [pc, #512]	@ (8002dec <StartDefaultTask+0x52c>)
				HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8002bec:	4d80      	ldr	r5, [pc, #512]	@ (8002df0 <StartDefaultTask+0x530>)
			sbus_recovery_requested = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	7013      	strb	r3, [r2, #0]
 8002bf2:	2605      	movs	r6, #5
				HAL_UART_AbortReceive(&huart2);
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f008 fc17 	bl	800b428 <HAL_UART_AbortReceive>
				MX_USART2_UART_Init();
 8002bfa:	f7ff fbfb 	bl	80023f4 <MX_USART2_UART_Init>
				HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8002bfe:	2219      	movs	r2, #25
 8002c00:	4629      	mov	r1, r5
 8002c02:	4620      	mov	r0, r4
 8002c04:	f008 fbeb 	bl	800b3de <HAL_UART_Receive_DMA>
				HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog during recovery
 8002c08:	487a      	ldr	r0, [pc, #488]	@ (8002df4 <StartDefaultTask+0x534>)
 8002c0a:	f006 ffd1 	bl	8009bb0 <HAL_IWDG_Refresh>
				osDelay(10); // Give hardware time to settle
 8002c0e:	200a      	movs	r0, #10
 8002c10:	f009 ff14 	bl	800ca3c <osDelay>
			for (int attempt = 0; attempt < SBUS_MAX_RECOVERY_ATTEMPTS;
 8002c14:	3e01      	subs	r6, #1
 8002c16:	d1ed      	bne.n	8002bf4 <StartDefaultTask+0x334>
 8002c18:	e6e7      	b.n	80029ea <StartDefaultTask+0x12a>
				if (!sbus_was_lost) {
 8002c1a:	4a77      	ldr	r2, [pc, #476]	@ (8002df8 <StartDefaultTask+0x538>)
 8002c1c:	7813      	ldrb	r3, [r2, #0]
 8002c1e:	b933      	cbnz	r3, 8002c2e <StartDefaultTask+0x36e>
					heading_lock_was_enabled = heading_lock_enabled;
 8002c20:	4b76      	ldr	r3, [pc, #472]	@ (8002dfc <StartDefaultTask+0x53c>)
 8002c22:	4977      	ldr	r1, [pc, #476]	@ (8002e00 <StartDefaultTask+0x540>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	700b      	strb	r3, [r1, #0]
					sbus_was_lost = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	7013      	strb	r3, [r2, #0]
				stop_all_motors_3wheel();
 8002c2e:	f7fe fc03 	bl	8001438 <stop_all_motors_3wheel>
				disable_heading_lock();
 8002c32:	f7fe fef1 	bl	8001a18 <disable_heading_lock>
				joystick_x = 0;
 8002c36:	4a73      	ldr	r2, [pc, #460]	@ (8002e04 <StartDefaultTask+0x544>)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	8013      	strh	r3, [r2, #0]
				joystick_y = 0;
 8002c3c:	4a72      	ldr	r2, [pc, #456]	@ (8002e08 <StartDefaultTask+0x548>)
 8002c3e:	8013      	strh	r3, [r2, #0]
				joystick_rotation = 0;
 8002c40:	4a72      	ldr	r2, [pc, #456]	@ (8002e0c <StartDefaultTask+0x54c>)
 8002c42:	8013      	strh	r3, [r2, #0]
				motor_left_front = 0;
 8002c44:	4a72      	ldr	r2, [pc, #456]	@ (8002e10 <StartDefaultTask+0x550>)
 8002c46:	8013      	strh	r3, [r2, #0]
				motor_right_front = 0;
 8002c48:	4a72      	ldr	r2, [pc, #456]	@ (8002e14 <StartDefaultTask+0x554>)
 8002c4a:	8013      	strh	r3, [r2, #0]
				motor_back = 0;
 8002c4c:	4a72      	ldr	r2, [pc, #456]	@ (8002e18 <StartDefaultTask+0x558>)
 8002c4e:	8013      	strh	r3, [r2, #0]
 8002c50:	e68d      	b.n	800296e <StartDefaultTask+0xae>
				stop_all_motors_3wheel();
 8002c52:	f7fe fbf1 	bl	8001438 <stop_all_motors_3wheel>
				disable_heading_lock();
 8002c56:	f7fe fedf 	bl	8001a18 <disable_heading_lock>
				sbus_was_lost = 0;
 8002c5a:	4a67      	ldr	r2, [pc, #412]	@ (8002df8 <StartDefaultTask+0x538>)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	7013      	strb	r3, [r2, #0]
				heading_lock_was_enabled = 0;
 8002c60:	4a67      	ldr	r2, [pc, #412]	@ (8002e00 <StartDefaultTask+0x540>)
 8002c62:	7013      	strb	r3, [r2, #0]
 8002c64:	e701      	b.n	8002a6a <StartDefaultTask+0x1aa>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002c66:	2201      	movs	r2, #1
 8002c68:	486c      	ldr	r0, [pc, #432]	@ (8002e1c <StartDefaultTask+0x55c>)
 8002c6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c6e:	f005 f90d 	bl	8007e8c <HAL_GPIO_WritePin>
			printf("SBUS recovered - LED turned OFF\r\n");
 8002c72:	486b      	ldr	r0, [pc, #428]	@ (8002e20 <StartDefaultTask+0x560>)
 8002c74:	f00d fdd4 	bl	8010820 <puts>
			sbus_was_in_error = 0;
 8002c78:	4a6a      	ldr	r2, [pc, #424]	@ (8002e24 <StartDefaultTask+0x564>)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	7013      	strb	r3, [r2, #0]
 8002c7e:	e631      	b.n	80028e4 <StartDefaultTask+0x24>
				} else if ((now - ch7_stable_time) >= CH7_DEBOUNCE_MS) {
 8002c80:	1a80      	subs	r0, r0, r2
 8002c82:	2863      	cmp	r0, #99	@ 0x63
 8002c84:	f67f aedc 	bls.w	8002a40 <StartDefaultTask+0x180>
					switch (current_ch7) {
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	f200 809c 	bhi.w	8002dc6 <StartDefaultTask+0x506>
 8002c8e:	4a66      	ldr	r2, [pc, #408]	@ (8002e28 <StartDefaultTask+0x568>)
 8002c90:	5cd2      	ldrb	r2, [r2, r3]
 8002c92:	9203      	str	r2, [sp, #12]
				} else if ((now - ch7_stable_time) >= CH7_DEBOUNCE_MS) {
 8002c94:	461a      	mov	r2, r3
					osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002c96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c9a:	4b64      	ldr	r3, [pc, #400]	@ (8002e2c <StartDefaultTask+0x56c>)
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	f009 ff6c 	bl	800cb7e <osMutexAcquire>
					if (target_mode != current_mode
 8002ca6:	4b62      	ldr	r3, [pc, #392]	@ (8002e30 <StartDefaultTask+0x570>)
 8002ca8:	9a04      	ldr	r2, [sp, #16]
 8002caa:	7819      	ldrb	r1, [r3, #0]
 8002cac:	9b05      	ldr	r3, [sp, #20]
 8002cae:	4291      	cmp	r1, r2
 8002cb0:	f43f af24 	beq.w	8002afc <StartDefaultTask+0x23c>
						current_mode = target_mode;
 8002cb4:	9304      	str	r3, [sp, #16]
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8002e30 <StartDefaultTask+0x570>)
 8002cb8:	701a      	strb	r2, [r3, #0]
						selected_mode = target_mode; // Keep encoder selection in sync
 8002cba:	4b5e      	ldr	r3, [pc, #376]	@ (8002e34 <StartDefaultTask+0x574>)
 8002cbc:	701a      	strb	r2, [r3, #0]
						robot_state = target_state;
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	@ (8002e38 <StartDefaultTask+0x578>)
 8002cc0:	9a03      	ldr	r2, [sp, #12]
 8002cc2:	701a      	strb	r2, [r3, #0]
						mode_change_request = 1;
 8002cc4:	4b5d      	ldr	r3, [pc, #372]	@ (8002e3c <StartDefaultTask+0x57c>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
						state_toggle_request = 1;
 8002cca:	4b5d      	ldr	r3, [pc, #372]	@ (8002e40 <StartDefaultTask+0x580>)
 8002ccc:	701a      	strb	r2, [r3, #0]
					osMutexRelease(ModeMutexHandle);
 8002cce:	4b57      	ldr	r3, [pc, #348]	@ (8002e2c <StartDefaultTask+0x56c>)
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	f009 ff9f 	bl	800cc14 <osMutexRelease>
					last_ch7_position = current_ch7;
 8002cd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e44 <StartDefaultTask+0x584>)
 8002cd8:	9b04      	ldr	r3, [sp, #16]
 8002cda:	7013      	strb	r3, [r2, #0]
					ch7_stable_time = 0; // Reset debounce timer
 8002cdc:	4b5a      	ldr	r3, [pc, #360]	@ (8002e48 <StartDefaultTask+0x588>)
 8002cde:	f04f 0900 	mov.w	r9, #0
 8002ce2:	f8c3 9000 	str.w	r9, [r3]
			stop_all_motors_3wheel();
 8002ce6:	f7fe fba7 	bl	8001438 <stop_all_motors_3wheel>
			disable_heading_lock();
 8002cea:	f7fe fe95 	bl	8001a18 <disable_heading_lock>
			sbus_was_lost = 0;
 8002cee:	4b42      	ldr	r3, [pc, #264]	@ (8002df8 <StartDefaultTask+0x538>)
 8002cf0:	f883 9000 	strb.w	r9, [r3]
			heading_lock_was_enabled = 0;
 8002cf4:	4b42      	ldr	r3, [pc, #264]	@ (8002e00 <StartDefaultTask+0x540>)
 8002cf6:	f883 9000 	strb.w	r9, [r3]
			if (state == STATE_IDLE) {
 8002cfa:	2e00      	cmp	r6, #0
 8002cfc:	d0a9      	beq.n	8002c52 <StartDefaultTask+0x392>
			} else if (state == STATE_RUNNING && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002cfe:	2e01      	cmp	r6, #1
 8002d00:	f47f af13 	bne.w	8002b2a <StartDefaultTask+0x26a>
 8002d04:	2d02      	cmp	r5, #2
 8002d06:	f47f aeb0 	bne.w	8002a6a <StartDefaultTask+0x1aa>
				set_heading_lock(current_compass_heading);
 8002d0a:	eeb0 0a68 	vmov.f32	s0, s17
 8002d0e:	f7fe fe6f 	bl	80019f0 <set_heading_lock>
				sbus_was_lost = 0;
 8002d12:	4a39      	ldr	r2, [pc, #228]	@ (8002df8 <StartDefaultTask+0x538>)
				heading_lock_was_enabled = 1;
 8002d14:	493a      	ldr	r1, [pc, #232]	@ (8002e00 <StartDefaultTask+0x540>)
				sbus_was_lost = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	7013      	strb	r3, [r2, #0]
				heading_lock_was_enabled = 1;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	700b      	strb	r3, [r1, #0]
			if (sbus_valid) {
 8002d1e:	2c00      	cmp	r4, #0
 8002d20:	f43f af7b 	beq.w	8002c1a <StartDefaultTask+0x35a>
				if (sbus_was_lost && mode == MODE_MOVEMENT_HL
 8002d24:	7813      	ldrb	r3, [r2, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f43f af07 	beq.w	8002b3a <StartDefaultTask+0x27a>
					if (heading_lock_was_enabled) {
 8002d2c:	4b34      	ldr	r3, [pc, #208]	@ (8002e00 <StartDefaultTask+0x540>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d14b      	bne.n	8002dcc <StartDefaultTask+0x50c>
					sbus_was_lost = 0;
 8002d34:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <StartDefaultTask+0x538>)
 8002d36:	2300      	movs	r3, #0
 8002d38:	7013      	strb	r3, [r2, #0]
				int16_t x = sbus_to_percentage(sbus_channels[1]); // Channel 2: Left/Right
 8002d3a:	4944      	ldr	r1, [pc, #272]	@ (8002e4c <StartDefaultTask+0x58c>)
 8002d3c:	8848      	ldrh	r0, [r1, #2]
 8002d3e:	b280      	uxth	r0, r0
 8002d40:	f7fe f9f6 	bl	8001130 <sbus_to_percentage>
 8002d44:	4681      	mov	r9, r0
				int16_t y = sbus_to_percentage(sbus_channels[4]); // Channel 5: Forward/Backward
 8002d46:	8908      	ldrh	r0, [r1, #8]
 8002d48:	b280      	uxth	r0, r0
 8002d4a:	f7fe f9f1 	bl	8001130 <sbus_to_percentage>
 8002d4e:	4604      	mov	r4, r0
				int16_t rot = sbus_to_percentage(sbus_channels[3]); // Channel 4: Rotation
 8002d50:	88c8      	ldrh	r0, [r1, #6]
 8002d52:	b280      	uxth	r0, r0
 8002d54:	f7fe f9ec 	bl	8001130 <sbus_to_percentage>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002d58:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <StartDefaultTask+0x53c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
				int16_t rot = sbus_to_percentage(sbus_channels[3]); // Channel 4: Rotation
 8002d5c:	4682      	mov	sl, r0
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002d5e:	bb33      	cbnz	r3, 8002dae <StartDefaultTask+0x4ee>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002d60:	4b26      	ldr	r3, [pc, #152]	@ (8002dfc <StartDefaultTask+0x53c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f43f aea3 	beq.w	8002ab0 <StartDefaultTask+0x1f0>
 8002d6a:	eeb0 0a49 	vmov.f32	s0, s18
					calculate_omni_motor_speeds_with_heading(x, y, rot,
 8002d6e:	f10d 031e 	add.w	r3, sp, #30
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	ab07      	add	r3, sp, #28
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4652      	mov	r2, sl
 8002d7a:	f10d 031a 	add.w	r3, sp, #26
 8002d7e:	4621      	mov	r1, r4
 8002d80:	4648      	mov	r0, r9
 8002d82:	f7fe fa4d 	bl	8001220 <calculate_omni_motor_speeds_with_heading>
 8002d86:	e69f      	b.n	8002ac8 <StartDefaultTask+0x208>
				ch7_stable_time = 0; // Reset debounce if position unchanged
 8002d88:	4a2f      	ldr	r2, [pc, #188]	@ (8002e48 <StartDefaultTask+0x588>)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6013      	str	r3, [r2, #0]
		if (mode_changed) {
 8002d8e:	f1ba 0f00 	cmp.w	sl, #0
 8002d92:	f43f aec7 	beq.w	8002b24 <StartDefaultTask+0x264>
 8002d96:	e656      	b.n	8002a46 <StartDefaultTask+0x186>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <StartDefaultTask+0x53c>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f43f ae87 	beq.w	8002ab0 <StartDefaultTask+0x1f0>
 8002da2:	2d02      	cmp	r5, #2
 8002da4:	d0e1      	beq.n	8002d6a <StartDefaultTask+0x4aa>
 8002da6:	e683      	b.n	8002ab0 <StartDefaultTask+0x1f0>
						&& state == STATE_RUNNING) {
 8002da8:	2e01      	cmp	r6, #1
 8002daa:	d1c6      	bne.n	8002d3a <StartDefaultTask+0x47a>
 8002dac:	e7be      	b.n	8002d2c <StartDefaultTask+0x46c>
					heading_correction = calculate_heading_pid_simplified(
 8002dae:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <StartDefaultTask+0x590>)
 8002db0:	eef0 0a48 	vmov.f32	s1, s16
 8002db4:	ed93 0a00 	vldr	s0, [r3]
 8002db8:	f7fe fb7e 	bl	80014b8 <calculate_heading_pid_simplified>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <StartDefaultTask+0x53c>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1d4      	bne.n	8002d6e <StartDefaultTask+0x4ae>
 8002dc4:	e674      	b.n	8002ab0 <StartDefaultTask+0x1f0>
						target_state = state;
 8002dc6:	9603      	str	r6, [sp, #12]
						target_mode = mode; // No change
 8002dc8:	462a      	mov	r2, r5
 8002dca:	e764      	b.n	8002c96 <StartDefaultTask+0x3d6>
						if (restore_heading_lock_from_eeprom()) {
 8002dcc:	f7fe feaa 	bl	8001b24 <restore_heading_lock_from_eeprom>
 8002dd0:	b128      	cbz	r0, 8002dde <StartDefaultTask+0x51e>
							heading_lock_enabled = 1;
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <StartDefaultTask+0x53c>)
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	7013      	strb	r3, [r2, #0]
							reset_heading_pid();
 8002dd8:	f7fe fdec 	bl	80019b4 <reset_heading_pid>
 8002ddc:	e7aa      	b.n	8002d34 <StartDefaultTask+0x474>
							set_heading_lock(current_compass_heading);
 8002dde:	eeb0 0a68 	vmov.f32	s0, s17
 8002de2:	f7fe fe05 	bl	80019f0 <set_heading_lock>
 8002de6:	e7a5      	b.n	8002d34 <StartDefaultTask+0x474>
 8002de8:	200004b2 	.word	0x200004b2
 8002dec:	20000398 	.word	0x20000398
 8002df0:	20000468 	.word	0x20000468
 8002df4:	200002b4 	.word	0x200002b4
 8002df8:	20000500 	.word	0x20000500
 8002dfc:	200004de 	.word	0x200004de
 8002e00:	20000501 	.word	0x20000501
 8002e04:	200004d2 	.word	0x200004d2
 8002e08:	200004d4 	.word	0x200004d4
 8002e0c:	200004d6 	.word	0x200004d6
 8002e10:	200004d8 	.word	0x200004d8
 8002e14:	200004da 	.word	0x200004da
 8002e18:	200004dc 	.word	0x200004dc
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	08013c5c 	.word	0x08013c5c
 8002e24:	20000564 	.word	0x20000564
 8002e28:	0801406c 	.word	0x0801406c
 8002e2c:	20000460 	.word	0x20000460
 8002e30:	200004cc 	.word	0x200004cc
 8002e34:	200004cd 	.word	0x200004cd
 8002e38:	200004ce 	.word	0x200004ce
 8002e3c:	200004cf 	.word	0x200004cf
 8002e40:	200004d0 	.word	0x200004d0
 8002e44:	20000008 	.word	0x20000008
 8002e48:	20000568 	.word	0x20000568
 8002e4c:	20000484 	.word	0x20000484
 8002e50:	200004e0 	.word	0x200004e0

08002e54 <StartCompassTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCompassTask */
void StartCompassTask(void *argument)
{
 8002e54:	b508      	push	{r3, lr}
 8002e56:	4c05      	ldr	r4, [pc, #20]	@ (8002e6c <StartCompassTask+0x18>)
  /* USER CODE BEGIN StartCompassTask */
	/* Infinite loop */
	for (;;) {
		if (bno085_int_flag) {
			bno085_int_flag = 0;
 8002e58:	2500      	movs	r5, #0
		if (bno085_int_flag) {
 8002e5a:	7823      	ldrb	r3, [r4, #0]
 8002e5c:	b113      	cbz	r3, 8002e64 <StartCompassTask+0x10>
			bno085_int_flag = 0;
 8002e5e:	7025      	strb	r5, [r4, #0]
			sh2_service();
 8002e60:	f002 f942 	bl	80050e8 <sh2_service>
		}
		osDelay(10);
 8002e64:	200a      	movs	r0, #10
 8002e66:	f009 fde9 	bl	800ca3c <osDelay>
		if (bno085_int_flag) {
 8002e6a:	e7f6      	b.n	8002e5a <StartCompassTask+0x6>
 8002e6c:	200004b3 	.word	0x200004b3

08002e70 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8002e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartDisplayTask */
	char display_str[48];
	const char *mode_names[] = { "SENSOR", "MOVE", "MOVE_HL" }; // UPDATED NAMES
 8002e74:	4aad      	ldr	r2, [pc, #692]	@ (800312c <StartDisplayTask+0x2bc>)
	const char *state_names[] = { "IDLE", "RUN" };
 8002e76:	4cae      	ldr	r4, [pc, #696]	@ (8003130 <StartDisplayTask+0x2c0>)
 8002e78:	f8df 9334 	ldr.w	r9, [pc, #820]	@ 80031b0 <StartDisplayTask+0x340>
 8002e7c:	f8df b334 	ldr.w	fp, [pc, #820]	@ 80031b4 <StartDisplayTask+0x344>
 8002e80:	f8df a334 	ldr.w	sl, [pc, #820]	@ 80031b8 <StartDisplayTask+0x348>
{
 8002e84:	ed2d 8b02 	vpush	{d8}
	const char *mode_names[] = { "SENSOR", "MOVE", "MOVE_HL" }; // UPDATED NAMES
 8002e88:	ca07      	ldmia	r2, {r0, r1, r2}
{
 8002e8a:	b0a7      	sub	sp, #156	@ 0x9c
	const char *mode_names[] = { "SENSOR", "MOVE", "MOVE_HL" }; // UPDATED NAMES
 8002e8c:	ab0f      	add	r3, sp, #60	@ 0x3c
 8002e8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char *state_names[] = { "IDLE", "RUN" };
 8002e92:	940d      	str	r4, [sp, #52]	@ 0x34
 8002e94:	4ca7      	ldr	r4, [pc, #668]	@ (8003134 <StartDisplayTask+0x2c4>)
 8002e96:	940e      	str	r4, [sp, #56]	@ 0x38
 8002e98:	4ca7      	ldr	r4, [pc, #668]	@ (8003138 <StartDisplayTask+0x2c8>)
 8002e9a:	ae12      	add	r6, sp, #72	@ 0x48
		uint8_t show_uart_error = 0;
		uint8_t sbus_valid = 0;
		uint32_t error_code = 0;

		// Check SBUS signal validity
		sbus_valid = is_sbus_signal_valid();
 8002e9c:	f7fe fad8 	bl	8001450 <is_sbus_signal_valid>

		// Check for UART error under mutex
		osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
		sbus_valid = is_sbus_signal_valid();
 8002ea4:	4605      	mov	r5, r0
		osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002ea6:	f8d9 0000 	ldr.w	r0, [r9]
 8002eaa:	f009 fe68 	bl	800cb7e <osMutexAcquire>
		if (uart2_error_flag) {
 8002eae:	f89b 3000 	ldrb.w	r3, [fp]
 8002eb2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002eb6:	9208      	str	r2, [sp, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f040 80cb 	bne.w	8003054 <StartDisplayTask+0x1e4>
			show_uart_error = 1;
			error_code = uart2_error_code;
			uart2_error_flag = 0; // Clear after displaying
		}
		osMutexRelease(UARTMutexHandle);
 8002ebe:	f8d9 0000 	ldr.w	r0, [r9]
 8002ec2:	f009 fea7 	bl	800cc14 <osMutexRelease>
			osDelay(2000); // Show error for 2s
			continue;
		}

		// Get current mode, selected mode, and state
		osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002ec6:	4b9d      	ldr	r3, [pc, #628]	@ (800313c <StartDisplayTask+0x2cc>)
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	f009 fe56 	bl	800cb7e <osMutexAcquire>
		mode = current_mode;
 8002ed2:	4a9b      	ldr	r2, [pc, #620]	@ (8003140 <StartDisplayTask+0x2d0>)
 8002ed4:	7817      	ldrb	r7, [r2, #0]
		sel_mode = selected_mode;
 8002ed6:	4a9b      	ldr	r2, [pc, #620]	@ (8003144 <StartDisplayTask+0x2d4>)
 8002ed8:	7813      	ldrb	r3, [r2, #0]
		state = robot_state;
 8002eda:	4a9b      	ldr	r2, [pc, #620]	@ (8003148 <StartDisplayTask+0x2d8>)
		sel_mode = selected_mode;
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	9309      	str	r3, [sp, #36]	@ 0x24
		osMutexRelease(ModeMutexHandle);
 8002ee0:	4b96      	ldr	r3, [pc, #600]	@ (800313c <StartDisplayTask+0x2cc>)
		state = robot_state;
 8002ee2:	f892 8000 	ldrb.w	r8, [r2]
		osMutexRelease(ModeMutexHandle);
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	f009 fe94 	bl	800cc14 <osMutexRelease>

		// Get compass heading
		osMutexAcquire(CompassMutexHandle, osWaitForever);
 8002eec:	4b97      	ldr	r3, [pc, #604]	@ (800314c <StartDisplayTask+0x2dc>)
 8002eee:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	f009 fe43 	bl	800cb7e <osMutexAcquire>
		heading = compass_heading_deg;
		osMutexRelease(CompassMutexHandle);
 8002ef8:	4b94      	ldr	r3, [pc, #592]	@ (800314c <StartDisplayTask+0x2dc>)
		heading = compass_heading_deg;
 8002efa:	4a95      	ldr	r2, [pc, #596]	@ (8003150 <StartDisplayTask+0x2e0>)
		osMutexRelease(CompassMutexHandle);
 8002efc:	6818      	ldr	r0, [r3, #0]
		heading = compass_heading_deg;
 8002efe:	ed92 8a00 	vldr	s16, [r2]
		osMutexRelease(CompassMutexHandle);
 8002f02:	f009 fe87 	bl	800cc14 <osMutexRelease>

		// Get encoder data
		osMutexAcquire(EncoderMutexHandle, osWaitForever);
 8002f06:	4b93      	ldr	r3, [pc, #588]	@ (8003154 <StartDisplayTask+0x2e4>)
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	f009 fe36 	bl	800cb7e <osMutexAcquire>
		sw_count = encoder_sw_count;
		enc_count = encoder_count;
		osMutexRelease(EncoderMutexHandle);
 8002f12:	4b90      	ldr	r3, [pc, #576]	@ (8003154 <StartDisplayTask+0x2e4>)
 8002f14:	6818      	ldr	r0, [r3, #0]
		sw_count = encoder_sw_count;
 8002f16:	4b90      	ldr	r3, [pc, #576]	@ (8003158 <StartDisplayTask+0x2e8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	930a      	str	r3, [sp, #40]	@ 0x28
		enc_count = encoder_count;
 8002f1c:	4b8f      	ldr	r3, [pc, #572]	@ (800315c <StartDisplayTask+0x2ec>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	930b      	str	r3, [sp, #44]	@ 0x2c
		osMutexRelease(EncoderMutexHandle);
 8002f22:	f009 fe77 	bl	800cc14 <osMutexRelease>

		ssd1306_Fill(Black);
 8002f26:	9a08      	ldr	r2, [sp, #32]
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f000 fdb9 	bl	8003aa0 <ssd1306_Fill>

		// Line 1: Show selected mode with indicator if different from current
		// Add SBUS status, recovery status, and heading lock indicator
		if (sel_mode == mode) {
 8002f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
		mode = current_mode;
 8002f30:	b2ff      	uxtb	r7, r7
		if (sel_mode == mode) {
 8002f32:	429f      	cmp	r7, r3
		state = robot_state;
 8002f34:	fa5f f888 	uxtb.w	r8, r8
		if (sel_mode == mode) {
 8002f38:	f000 80ca 	beq.w	80030d0 <StartDisplayTask+0x260>
					mode_names[mode], state_names[state], sbus_status,
					recovery_status, heading_status);
		} else {
			// Selected mode (different from current) - show with arrow indicator
			char sbus_status = sbus_valid ? 'S' : '!';
			char recovery_status = sbus_was_lost ? 'R' : ' ';
 8002f3c:	4a88      	ldr	r2, [pc, #544]	@ (8003160 <StartDisplayTask+0x2f0>)
 8002f3e:	7811      	ldrb	r1, [r2, #0]
			char heading_status =
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 8002f40:	4a88      	ldr	r2, [pc, #544]	@ (8003164 <StartDisplayTask+0x2f4>)
			char sbus_status = sbus_valid ? 'S' : '!';
 8002f42:	2d00      	cmp	r5, #0
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 8002f44:	7810      	ldrb	r0, [r2, #0]
			char sbus_status = sbus_valid ? 'S' : '!';
 8002f46:	bf0c      	ite	eq
 8002f48:	2221      	moveq	r2, #33	@ 0x21
 8002f4a:	2253      	movne	r2, #83	@ 0x53
			char recovery_status = sbus_was_lost ? 'R' : ' ';
 8002f4c:	2900      	cmp	r1, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2120      	moveq	r1, #32
 8002f52:	2152      	movne	r1, #82	@ 0x52
			char heading_status =
 8002f54:	2800      	cmp	r0, #0
 8002f56:	f000 8189 	beq.w	800326c <StartDisplayTask+0x3fc>
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 8002f5a:	2f02      	cmp	r7, #2
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2048      	moveq	r0, #72	@ 0x48
 8002f60:	2020      	movne	r0, #32
							'H' : ' '; // UPDATED

			snprintf(display_str, sizeof(display_str), ">%s< %s %c%c%c",
 8002f62:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8002f66:	9201      	str	r2, [sp, #4]
 8002f68:	aa26      	add	r2, sp, #152	@ 0x98
 8002f6a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8002f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002f72:	f858 2c64 	ldr.w	r2, [r8, #-100]
 8002f76:	9200      	str	r2, [sp, #0]
 8002f78:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002f7c:	4a7a      	ldr	r2, [pc, #488]	@ (8003168 <StartDisplayTask+0x2f8>)
 8002f7e:	2130      	movs	r1, #48	@ 0x30
 8002f80:	a81a      	add	r0, sp, #104	@ 0x68
 8002f82:	f00d fc55 	bl	8010830 <sniprintf>
					mode_names[sel_mode], state_names[state], sbus_status,
					recovery_status, heading_status);
		}
		ssd1306_SetCursor(1, 0);
 8002f86:	2100      	movs	r1, #0
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f000 ff01 	bl	8003d90 <ssd1306_SetCursor>
		ssd1306_WriteString(display_str, Font_7x10, White);
 8002f8e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002f92:	2301      	movs	r3, #1
 8002f94:	a81a      	add	r0, sp, #104	@ 0x68
 8002f96:	f000 fed5 	bl	8003d44 <ssd1306_WriteString>

		// Display content based on current active mode (not selected mode)
		switch (mode) {
 8002f9a:	2f00      	cmp	r7, #0
 8002f9c:	f000 810e 	beq.w	80031bc <StartDisplayTask+0x34c>
 8002fa0:	1e7b      	subs	r3, r7, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	f200 80bb 	bhi.w	800311e <StartDisplayTask+0x2ae>
			ssd1306_WriteString(display_str, Font_7x10, White);
			break;

		case MODE_MOVEMENT:        // UPDATED - was MODE_MOVEMENT_SIMULATOR
		case MODE_MOVEMENT_HL:     // UPDATED - was MODE_MOVEMENT
			if (sbus_valid) {
 8002fa8:	2d00      	cmp	r5, #0
 8002faa:	f000 8163 	beq.w	8003274 <StartDisplayTask+0x404>
				// Line 2: Joystick input values (LR=Left/Right, FB=Forward/Backward, R=Rotation)
				snprintf(display_str, sizeof(display_str),
 8002fae:	4b6f      	ldr	r3, [pc, #444]	@ (800316c <StartDisplayTask+0x2fc>)
 8002fb0:	4a6f      	ldr	r2, [pc, #444]	@ (8003170 <StartDisplayTask+0x300>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	8812      	ldrh	r2, [r2, #0]
 8002fb6:	b212      	sxth	r2, r2
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	4a6e      	ldr	r2, [pc, #440]	@ (8003174 <StartDisplayTask+0x304>)
 8002fbc:	8812      	ldrh	r2, [r2, #0]
 8002fbe:	b212      	sxth	r2, r2
 8002fc0:	b21b      	sxth	r3, r3
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	2130      	movs	r1, #48	@ 0x30
 8002fc6:	4a6c      	ldr	r2, [pc, #432]	@ (8003178 <StartDisplayTask+0x308>)
 8002fc8:	a81a      	add	r0, sp, #104	@ 0x68
 8002fca:	f00d fc31 	bl	8010830 <sniprintf>
						"LR:%3d FB:%3d R:%3d", joystick_x, joystick_y,
						joystick_rotation);
				ssd1306_SetCursor(1, 12);
 8002fce:	210c      	movs	r1, #12
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f000 fedd 	bl	8003d90 <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002fdc:	a81a      	add	r0, sp, #104	@ 0x68
 8002fde:	f000 feb1 	bl	8003d44 <ssd1306_WriteString>

				// Line 3: Show heading lock info with oscillation detection
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002fe2:	4b60      	ldr	r3, [pc, #384]	@ (8003164 <StartDisplayTask+0x2f4>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 81a6 	beq.w	8003338 <StartDisplayTask+0x4c8>
 8002fec:	2f02      	cmp	r7, #2
 8002fee:	f000 81d9 	beq.w	80033a4 <StartDisplayTask+0x534>
					snprintf(display_str, sizeof(display_str),
							"L:%.0f N:%.0f E:%.1f%c", locked_heading,
							current_robot_front, heading_error, status_char);
				} else {
					// Show motor values
					snprintf(display_str, sizeof(display_str), "LF:%4d RF:%4d",
 8002ff2:	4b62      	ldr	r3, [pc, #392]	@ (800317c <StartDisplayTask+0x30c>)
 8002ff4:	4a62      	ldr	r2, [pc, #392]	@ (8003180 <StartDisplayTask+0x310>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	8812      	ldrh	r2, [r2, #0]
 8002ffa:	b212      	sxth	r2, r2
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	9200      	str	r2, [sp, #0]
 8003000:	2130      	movs	r1, #48	@ 0x30
 8003002:	4a60      	ldr	r2, [pc, #384]	@ (8003184 <StartDisplayTask+0x314>)
 8003004:	a81a      	add	r0, sp, #104	@ 0x68
 8003006:	f00d fc13 	bl	8010830 <sniprintf>
							motor_left_front, motor_right_front);
				}
				ssd1306_SetCursor(1, 24);
 800300a:	2118      	movs	r1, #24
 800300c:	2001      	movs	r0, #1
 800300e:	f000 febf 	bl	8003d90 <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8003012:	2301      	movs	r3, #1
 8003014:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003018:	a81a      	add	r0, sp, #104	@ 0x68
 800301a:	f000 fe93 	bl	8003d44 <ssd1306_WriteString>

				// Line 4: PID output with overshoot indicator
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 800301e:	4b51      	ldr	r3, [pc, #324]	@ (8003164 <StartDisplayTask+0x2f4>)
 8003020:	781b      	ldrb	r3, [r3, #0]
					snprintf(display_str, sizeof(display_str),
							"PID:%.1f BK:%4d%s", heading_pid_output, motor_back,
							overshoot_detected ? " OS" : "");
				} else {
					snprintf(display_str, sizeof(display_str), "BK:%4d",
 8003022:	4b59      	ldr	r3, [pc, #356]	@ (8003188 <StartDisplayTask+0x318>)
 8003024:	4a59      	ldr	r2, [pc, #356]	@ (800318c <StartDisplayTask+0x31c>)
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	2130      	movs	r1, #48	@ 0x30
 800302a:	b21b      	sxth	r3, r3
 800302c:	a81a      	add	r0, sp, #104	@ 0x68
 800302e:	f00d fbff 	bl	8010830 <sniprintf>
				snprintf(display_str, sizeof(display_str), "MOTORS STOPPED");
				ssd1306_SetCursor(1, 24);
				ssd1306_WriteString(display_str, Font_7x10, White);

				snprintf(display_str, sizeof(display_str), "FOR SAFETY");
				ssd1306_SetCursor(1, 36);
 8003032:	2124      	movs	r1, #36	@ 0x24

		case MODE_COUNT:
		default:
			// Handle invalid mode - should never happen
			snprintf(display_str, sizeof(display_str), "INVALID MODE");
			ssd1306_SetCursor(1, 12);
 8003034:	2001      	movs	r0, #1
 8003036:	f000 feab 	bl	8003d90 <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 800303a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800303e:	2301      	movs	r3, #1
 8003040:	a81a      	add	r0, sp, #104	@ 0x68
 8003042:	f000 fe7f 	bl	8003d44 <ssd1306_WriteString>
			break;
		}

		ssd1306_UpdateScreen(&hi2c1);
 8003046:	4852      	ldr	r0, [pc, #328]	@ (8003190 <StartDisplayTask+0x320>)
 8003048:	f000 fd4e 	bl	8003ae8 <ssd1306_UpdateScreen>
		//osDelay(100);
		osDelay(200); // Update display every 200ms (5Hz) for smoother updates
 800304c:	20c8      	movs	r0, #200	@ 0xc8
 800304e:	f009 fcf5 	bl	800ca3c <osDelay>
 8003052:	e723      	b.n	8002e9c <StartDisplayTask+0x2c>
			error_code = uart2_error_code;
 8003054:	4b4f      	ldr	r3, [pc, #316]	@ (8003194 <StartDisplayTask+0x324>)
		osMutexRelease(UARTMutexHandle);
 8003056:	f8d9 0000 	ldr.w	r0, [r9]
			error_code = uart2_error_code;
 800305a:	681f      	ldr	r7, [r3, #0]
			uart2_error_flag = 0; // Clear after displaying
 800305c:	2500      	movs	r5, #0
 800305e:	f88b 5000 	strb.w	r5, [fp]
		osMutexRelease(UARTMutexHandle);
 8003062:	f009 fdd7 	bl	800cc14 <osMutexRelease>
			snprintf(err_str, sizeof(err_str), "UART Err: 0x%lX A:%d",
 8003066:	f89a 2000 	ldrb.w	r2, [sl]
 800306a:	9200      	str	r2, [sp, #0]
 800306c:	463b      	mov	r3, r7
 800306e:	4a4a      	ldr	r2, [pc, #296]	@ (8003198 <StartDisplayTask+0x328>)
 8003070:	2120      	movs	r1, #32
 8003072:	4630      	mov	r0, r6
 8003074:	f00d fbdc 	bl	8010830 <sniprintf>
			ssd1306_Fill(Black);
 8003078:	4628      	mov	r0, r5
 800307a:	f000 fd11 	bl	8003aa0 <ssd1306_Fill>
			ssd1306_SetCursor(1, 0);
 800307e:	4629      	mov	r1, r5
 8003080:	2001      	movs	r0, #1
 8003082:	f000 fe85 	bl	8003d90 <ssd1306_SetCursor>
			ssd1306_WriteString(err_str, Font_7x10, White);
 8003086:	e894 0006 	ldmia.w	r4, {r1, r2}
 800308a:	2301      	movs	r3, #1
 800308c:	4630      	mov	r0, r6
 800308e:	f000 fe59 	bl	8003d44 <ssd1306_WriteString>
			snprintf(err_str, sizeof(err_str), "Recovery: %s",
 8003092:	4d42      	ldr	r5, [pc, #264]	@ (800319c <StartDisplayTask+0x32c>)
					(sbus_recovery_attempts < SBUS_MAX_RECOVERY_ATTEMPTS) ?
 8003094:	f89a 3000 	ldrb.w	r3, [sl]
			snprintf(err_str, sizeof(err_str), "Recovery: %s",
 8003098:	4841      	ldr	r0, [pc, #260]	@ (80031a0 <StartDisplayTask+0x330>)
 800309a:	4a42      	ldr	r2, [pc, #264]	@ (80031a4 <StartDisplayTask+0x334>)
 800309c:	2b04      	cmp	r3, #4
 800309e:	bf98      	it	ls
 80030a0:	4628      	movls	r0, r5
 80030a2:	4603      	mov	r3, r0
 80030a4:	2120      	movs	r1, #32
 80030a6:	4630      	mov	r0, r6
 80030a8:	f00d fbc2 	bl	8010830 <sniprintf>
			ssd1306_SetCursor(1, 12);
 80030ac:	210c      	movs	r1, #12
 80030ae:	2001      	movs	r0, #1
 80030b0:	f000 fe6e 	bl	8003d90 <ssd1306_SetCursor>
			ssd1306_WriteString(err_str, Font_7x10, White);
 80030b4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80030b8:	2301      	movs	r3, #1
 80030ba:	4630      	mov	r0, r6
 80030bc:	f000 fe42 	bl	8003d44 <ssd1306_WriteString>
			ssd1306_UpdateScreen(&hi2c1);
 80030c0:	4833      	ldr	r0, [pc, #204]	@ (8003190 <StartDisplayTask+0x320>)
 80030c2:	f000 fd11 	bl	8003ae8 <ssd1306_UpdateScreen>
			osDelay(2000); // Show error for 2s
 80030c6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80030ca:	f009 fcb7 	bl	800ca3c <osDelay>
			continue;
 80030ce:	e6e5      	b.n	8002e9c <StartDisplayTask+0x2c>
			char recovery_status = sbus_was_lost ? 'R' : ' '; // R = recovering
 80030d0:	4b23      	ldr	r3, [pc, #140]	@ (8003160 <StartDisplayTask+0x2f0>)
 80030d2:	781a      	ldrb	r2, [r3, #0]
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 80030d4:	4b23      	ldr	r3, [pc, #140]	@ (8003164 <StartDisplayTask+0x2f4>)
			char sbus_status = sbus_valid ? 'S' : '!';
 80030d6:	2d00      	cmp	r5, #0
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 80030d8:	7819      	ldrb	r1, [r3, #0]
			char sbus_status = sbus_valid ? 'S' : '!';
 80030da:	bf0c      	ite	eq
 80030dc:	2321      	moveq	r3, #33	@ 0x21
 80030de:	2353      	movne	r3, #83	@ 0x53
			char recovery_status = sbus_was_lost ? 'R' : ' '; // R = recovering
 80030e0:	2a00      	cmp	r2, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2220      	moveq	r2, #32
 80030e6:	2252      	movne	r2, #82	@ 0x52
			char heading_status =
 80030e8:	2900      	cmp	r1, #0
 80030ea:	f000 80c1 	beq.w	8003270 <StartDisplayTask+0x400>
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 80030ee:	2f02      	cmp	r7, #2
 80030f0:	bf0c      	ite	eq
 80030f2:	2148      	moveq	r1, #72	@ 0x48
 80030f4:	2120      	movne	r1, #32
			snprintf(display_str, sizeof(display_str), "%s %s %c%c%c",
 80030f6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	ab26      	add	r3, sp, #152	@ 0x98
 80030fe:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8003102:	4a29      	ldr	r2, [pc, #164]	@ (80031a8 <StartDisplayTask+0x338>)
 8003104:	f858 3c64 	ldr.w	r3, [r8, #-100]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	ab26      	add	r3, sp, #152	@ 0x98
 800310c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8003110:	2130      	movs	r1, #48	@ 0x30
 8003112:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003116:	a81a      	add	r0, sp, #104	@ 0x68
 8003118:	f00d fb8a 	bl	8010830 <sniprintf>
 800311c:	e733      	b.n	8002f86 <StartDisplayTask+0x116>
			snprintf(display_str, sizeof(display_str), "INVALID MODE");
 800311e:	4b23      	ldr	r3, [pc, #140]	@ (80031ac <StartDisplayTask+0x33c>)
 8003120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003122:	ad1a      	add	r5, sp, #104	@ 0x68
 8003124:	c507      	stmia	r5!, {r0, r1, r2}
			ssd1306_SetCursor(1, 12);
 8003126:	210c      	movs	r1, #12
			snprintf(display_str, sizeof(display_str), "INVALID MODE");
 8003128:	702b      	strb	r3, [r5, #0]
			ssd1306_SetCursor(1, 12);
 800312a:	e783      	b.n	8003034 <StartDisplayTask+0x1c4>
 800312c:	08012f68 	.word	0x08012f68
 8003130:	080139dc 	.word	0x080139dc
 8003134:	080139e4 	.word	0x080139e4
 8003138:	20000000 	.word	0x20000000
 800313c:	20000460 	.word	0x20000460
 8003140:	200004cc 	.word	0x200004cc
 8003144:	200004cd 	.word	0x200004cd
 8003148:	200004ce 	.word	0x200004ce
 800314c:	20000450 	.word	0x20000450
 8003150:	200004b4 	.word	0x200004b4
 8003154:	20000458 	.word	0x20000458
 8003158:	200004c0 	.word	0x200004c0
 800315c:	200004b8 	.word	0x200004b8
 8003160:	20000500 	.word	0x20000500
 8003164:	200004de 	.word	0x200004de
 8003168:	08013d1c 	.word	0x08013d1c
 800316c:	200004d2 	.word	0x200004d2
 8003170:	200004d4 	.word	0x200004d4
 8003174:	200004d6 	.word	0x200004d6
 8003178:	08013d84 	.word	0x08013d84
 800317c:	200004d8 	.word	0x200004d8
 8003180:	200004da 	.word	0x200004da
 8003184:	08013db0 	.word	0x08013db0
 8003188:	200004dc 	.word	0x200004dc
 800318c:	08013dd4 	.word	0x08013dd4
 8003190:	20000260 	.word	0x20000260
 8003194:	200004a4 	.word	0x200004a4
 8003198:	08013ce4 	.word	0x08013ce4
 800319c:	08013cd0 	.word	0x08013cd0
 80031a0:	08013cd8 	.word	0x08013cd8
 80031a4:	08013cfc 	.word	0x08013cfc
 80031a8:	08013d0c 	.word	0x08013d0c
 80031ac:	08013e0c 	.word	0x08013e0c
 80031b0:	2000045c 	.word	0x2000045c
 80031b4:	200004a8 	.word	0x200004a8
 80031b8:	200004b1 	.word	0x200004b1
			float robot_front = compass_to_robot_front(heading);
 80031bc:	eeb0 0a48 	vmov.f32	s0, s16
 80031c0:	f7fe fc32 	bl	8001a28 <compass_to_robot_front>
 80031c4:	ee10 0a10 	vmov	r0, s0
			snprintf(display_str, sizeof(display_str), "C:%.0f R:%.0f deg",
 80031c8:	f7fd f9c6 	bl	8000558 <__aeabi_f2d>
 80031cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031d0:	ee18 0a10 	vmov	r0, s16
 80031d4:	f7fd f9c0 	bl	8000558 <__aeabi_f2d>
 80031d8:	4a9a      	ldr	r2, [pc, #616]	@ (8003444 <StartDisplayTask+0x5d4>)
 80031da:	e9cd 0100 	strd	r0, r1, [sp]
 80031de:	2130      	movs	r1, #48	@ 0x30
 80031e0:	a81a      	add	r0, sp, #104	@ 0x68
 80031e2:	f00d fb25 	bl	8010830 <sniprintf>
			ssd1306_SetCursor(1, 12);
 80031e6:	210c      	movs	r1, #12
 80031e8:	2001      	movs	r0, #1
 80031ea:	f000 fdd1 	bl	8003d90 <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 80031ee:	e894 0006 	ldmia.w	r4, {r1, r2}
 80031f2:	2301      	movs	r3, #1
 80031f4:	a81a      	add	r0, sp, #104	@ 0x68
 80031f6:	f000 fda5 	bl	8003d44 <ssd1306_WriteString>
			const char *ch7_names[] = { "MIN", "MID", "MAX", "???" };
 80031fa:	4b93      	ldr	r3, [pc, #588]	@ (8003448 <StartDisplayTask+0x5d8>)
 80031fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031fe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
					sbus_valid ? get_channel7_position() : CH7_POSITION_UNKNOWN;
 8003202:	2d00      	cmp	r5, #0
 8003204:	d166      	bne.n	80032d4 <StartDisplayTask+0x464>
			snprintf(display_str, sizeof(display_str), "SW:%ld ENC:%ld CH7:%s",
 8003206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	4b90      	ldr	r3, [pc, #576]	@ (800344c <StartDisplayTask+0x5dc>)
 800320c:	4a90      	ldr	r2, [pc, #576]	@ (8003450 <StartDisplayTask+0x5e0>)
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	2130      	movs	r1, #48	@ 0x30
 8003212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
				snprintf(display_str, sizeof(display_str), "SBUS SIGNAL LOST");
 8003214:	4f8f      	ldr	r7, [pc, #572]	@ (8003454 <StartDisplayTask+0x5e4>)
			snprintf(display_str, sizeof(display_str), "SW:%ld ENC:%ld CH7:%s",
 8003216:	a81a      	add	r0, sp, #104	@ 0x68
 8003218:	f00d fb0a 	bl	8010830 <sniprintf>
			ssd1306_SetCursor(1, 24);
 800321c:	2118      	movs	r1, #24
 800321e:	2001      	movs	r0, #1
 8003220:	f000 fdb6 	bl	8003d90 <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 8003224:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003228:	2301      	movs	r3, #1
 800322a:	a81a      	add	r0, sp, #104	@ 0x68
 800322c:	f000 fd8a 	bl	8003d44 <ssd1306_WriteString>
				snprintf(display_str, sizeof(display_str), "SBUS SIGNAL LOST");
 8003230:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003232:	ad1a      	add	r5, sp, #104	@ 0x68
 8003234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	702b      	strb	r3, [r5, #0]
			ssd1306_SetCursor(1, 36);
 800323a:	2124      	movs	r1, #36	@ 0x24
 800323c:	2001      	movs	r0, #1
 800323e:	f000 fda7 	bl	8003d90 <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 8003242:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003246:	2301      	movs	r3, #1
 8003248:	a81a      	add	r0, sp, #104	@ 0x68
 800324a:	f000 fd7b 	bl	8003d44 <ssd1306_WriteString>
			if (HAL_I2C_IsDeviceReady(&hi2c1, MB85rc_ADDRESS, 1, 50) == HAL_OK) {
 800324e:	2332      	movs	r3, #50	@ 0x32
 8003250:	4881      	ldr	r0, [pc, #516]	@ (8003458 <StartDisplayTask+0x5e8>)
 8003252:	2201      	movs	r2, #1
 8003254:	21a0      	movs	r1, #160	@ 0xa0
 8003256:	f005 fe35 	bl	8008ec4 <HAL_I2C_IsDeviceReady>
				snprintf(display_str, sizeof(display_str), "FRAM: OK");
 800325a:	ab1a      	add	r3, sp, #104	@ 0x68
			if (HAL_I2C_IsDeviceReady(&hi2c1, MB85rc_ADDRESS, 1, 50) == HAL_OK) {
 800325c:	2800      	cmp	r0, #0
 800325e:	d134      	bne.n	80032ca <StartDisplayTask+0x45a>
				snprintf(display_str, sizeof(display_str), "FRAM: OK");
 8003260:	4a7e      	ldr	r2, [pc, #504]	@ (800345c <StartDisplayTask+0x5ec>)
 8003262:	ca07      	ldmia	r2, {r0, r1, r2}
 8003264:	c303      	stmia	r3!, {r0, r1}
 8003266:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(1, 48);
 8003268:	2130      	movs	r1, #48	@ 0x30
 800326a:	e6e3      	b.n	8003034 <StartDisplayTask+0x1c4>
 800326c:	2020      	movs	r0, #32
 800326e:	e678      	b.n	8002f62 <StartDisplayTask+0xf2>
 8003270:	2120      	movs	r1, #32
 8003272:	e740      	b.n	80030f6 <StartDisplayTask+0x286>
				snprintf(display_str, sizeof(display_str), "SBUS SIGNAL LOST");
 8003274:	4f77      	ldr	r7, [pc, #476]	@ (8003454 <StartDisplayTask+0x5e4>)
 8003276:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003278:	ad1a      	add	r5, sp, #104	@ 0x68
 800327a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	702b      	strb	r3, [r5, #0]
				ssd1306_SetCursor(1, 12);
 8003280:	210c      	movs	r1, #12
 8003282:	2001      	movs	r0, #1
 8003284:	f000 fd84 	bl	8003d90 <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8003288:	e894 0006 	ldmia.w	r4, {r1, r2}
 800328c:	2301      	movs	r3, #1
 800328e:	a81a      	add	r0, sp, #104	@ 0x68
 8003290:	f000 fd58 	bl	8003d44 <ssd1306_WriteString>
				snprintf(display_str, sizeof(display_str), "MOTORS STOPPED");
 8003294:	4b72      	ldr	r3, [pc, #456]	@ (8003460 <StartDisplayTask+0x5f0>)
 8003296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003298:	ad1a      	add	r5, sp, #104	@ 0x68
 800329a:	c507      	stmia	r5!, {r0, r1, r2}
 800329c:	f825 3b02 	strh.w	r3, [r5], #2
				ssd1306_SetCursor(1, 24);
 80032a0:	2118      	movs	r1, #24
				snprintf(display_str, sizeof(display_str), "MOTORS STOPPED");
 80032a2:	0c1b      	lsrs	r3, r3, #16
				ssd1306_SetCursor(1, 24);
 80032a4:	2001      	movs	r0, #1
				snprintf(display_str, sizeof(display_str), "MOTORS STOPPED");
 80032a6:	702b      	strb	r3, [r5, #0]
				ssd1306_SetCursor(1, 24);
 80032a8:	f000 fd72 	bl	8003d90 <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 80032ac:	e894 0006 	ldmia.w	r4, {r1, r2}
 80032b0:	2301      	movs	r3, #1
 80032b2:	a81a      	add	r0, sp, #104	@ 0x68
 80032b4:	f000 fd46 	bl	8003d44 <ssd1306_WriteString>
				snprintf(display_str, sizeof(display_str), "FOR SAFETY");
 80032b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003464 <StartDisplayTask+0x5f4>)
 80032ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80032bc:	ab1a      	add	r3, sp, #104	@ 0x68
 80032be:	c303      	stmia	r3!, {r0, r1}
 80032c0:	f823 2b02 	strh.w	r2, [r3], #2
 80032c4:	0c12      	lsrs	r2, r2, #16
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e6b3      	b.n	8003032 <StartDisplayTask+0x1c2>
				snprintf(display_str, sizeof(display_str), "FRAM: ERR");
 80032ca:	4a67      	ldr	r2, [pc, #412]	@ (8003468 <StartDisplayTask+0x5f8>)
 80032cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80032ce:	c303      	stmia	r3!, {r0, r1}
 80032d0:	801a      	strh	r2, [r3, #0]
 80032d2:	e7c9      	b.n	8003268 <StartDisplayTask+0x3f8>
					sbus_valid ? get_channel7_position() : CH7_POSITION_UNKNOWN;
 80032d4:	f7fe fc90 	bl	8001bf8 <get_channel7_position>
			snprintf(display_str, sizeof(display_str), "SW:%ld ENC:%ld CH7:%s",
 80032d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	ab26      	add	r3, sp, #152	@ 0x98
 80032de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80032e2:	2130      	movs	r1, #48	@ 0x30
 80032e4:	f850 2c50 	ldr.w	r2, [r0, #-80]
 80032e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80032ea:	9201      	str	r2, [sp, #4]
 80032ec:	a81a      	add	r0, sp, #104	@ 0x68
 80032ee:	4a58      	ldr	r2, [pc, #352]	@ (8003450 <StartDisplayTask+0x5e0>)
				int16_t ch2_pct = sbus_to_percentage(sbus_channels[1]);
 80032f0:	4f5e      	ldr	r7, [pc, #376]	@ (800346c <StartDisplayTask+0x5fc>)
			snprintf(display_str, sizeof(display_str), "SW:%ld ENC:%ld CH7:%s",
 80032f2:	f00d fa9d 	bl	8010830 <sniprintf>
			ssd1306_SetCursor(1, 24);
 80032f6:	2118      	movs	r1, #24
 80032f8:	2001      	movs	r0, #1
 80032fa:	f000 fd49 	bl	8003d90 <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 80032fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003302:	2301      	movs	r3, #1
 8003304:	a81a      	add	r0, sp, #104	@ 0x68
 8003306:	f000 fd1d 	bl	8003d44 <ssd1306_WriteString>
				int16_t ch2_pct = sbus_to_percentage(sbus_channels[1]);
 800330a:	8878      	ldrh	r0, [r7, #2]
 800330c:	b280      	uxth	r0, r0
 800330e:	f7fd ff0f 	bl	8001130 <sbus_to_percentage>
 8003312:	4601      	mov	r1, r0
				int16_t ch5_pct = sbus_to_percentage(sbus_channels[4]);
 8003314:	8938      	ldrh	r0, [r7, #8]
 8003316:	b280      	uxth	r0, r0
 8003318:	f7fd ff0a 	bl	8001130 <sbus_to_percentage>
 800331c:	4605      	mov	r5, r0
				int16_t ch4_pct = sbus_to_percentage(sbus_channels[3]);
 800331e:	88f8      	ldrh	r0, [r7, #6]
 8003320:	b280      	uxth	r0, r0
 8003322:	f7fd ff05 	bl	8001130 <sbus_to_percentage>
				snprintf(display_str, sizeof(display_str), "2:%3d 5:%3d 4:%3d",
 8003326:	460b      	mov	r3, r1
 8003328:	e9cd 5000 	strd	r5, r0, [sp]
 800332c:	4a50      	ldr	r2, [pc, #320]	@ (8003470 <StartDisplayTask+0x600>)
 800332e:	2130      	movs	r1, #48	@ 0x30
 8003330:	a81a      	add	r0, sp, #104	@ 0x68
 8003332:	f00d fa7d 	bl	8010830 <sniprintf>
 8003336:	e780      	b.n	800323a <StartDisplayTask+0x3ca>
					snprintf(display_str, sizeof(display_str), "LF:%4d RF:%4d",
 8003338:	4b4e      	ldr	r3, [pc, #312]	@ (8003474 <StartDisplayTask+0x604>)
 800333a:	4a4f      	ldr	r2, [pc, #316]	@ (8003478 <StartDisplayTask+0x608>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	8812      	ldrh	r2, [r2, #0]
 8003340:	b212      	sxth	r2, r2
 8003342:	b21b      	sxth	r3, r3
 8003344:	9200      	str	r2, [sp, #0]
 8003346:	2130      	movs	r1, #48	@ 0x30
 8003348:	4a4c      	ldr	r2, [pc, #304]	@ (800347c <StartDisplayTask+0x60c>)
 800334a:	a81a      	add	r0, sp, #104	@ 0x68
 800334c:	f00d fa70 	bl	8010830 <sniprintf>
				ssd1306_SetCursor(1, 24);
 8003350:	2118      	movs	r1, #24
 8003352:	2001      	movs	r0, #1
 8003354:	f000 fd1c 	bl	8003d90 <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8003358:	2301      	movs	r3, #1
 800335a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800335e:	a81a      	add	r0, sp, #104	@ 0x68
 8003360:	f000 fcf0 	bl	8003d44 <ssd1306_WriteString>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8003364:	4b46      	ldr	r3, [pc, #280]	@ (8003480 <StartDisplayTask+0x610>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	f43f ae5a 	beq.w	8003022 <StartDisplayTask+0x1b2>
 800336e:	2f02      	cmp	r7, #2
 8003370:	f47f ae57 	bne.w	8003022 <StartDisplayTask+0x1b2>
					snprintf(display_str, sizeof(display_str),
 8003374:	4b43      	ldr	r3, [pc, #268]	@ (8003484 <StartDisplayTask+0x614>)
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	f7fd f8ee 	bl	8000558 <__aeabi_f2d>
 800337c:	e9cd 0100 	strd	r0, r1, [sp]
 8003380:	4b41      	ldr	r3, [pc, #260]	@ (8003488 <StartDisplayTask+0x618>)
 8003382:	4a42      	ldr	r2, [pc, #264]	@ (800348c <StartDisplayTask+0x61c>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b21b      	sxth	r3, r3
 8003388:	9302      	str	r3, [sp, #8]
							overshoot_detected ? " OS" : "");
 800338a:	4b41      	ldr	r3, [pc, #260]	@ (8003490 <StartDisplayTask+0x620>)
 800338c:	7819      	ldrb	r1, [r3, #0]
					snprintf(display_str, sizeof(display_str),
 800338e:	4b41      	ldr	r3, [pc, #260]	@ (8003494 <StartDisplayTask+0x624>)
 8003390:	2900      	cmp	r1, #0
 8003392:	bf18      	it	ne
 8003394:	4613      	movne	r3, r2
 8003396:	9303      	str	r3, [sp, #12]
 8003398:	4a3f      	ldr	r2, [pc, #252]	@ (8003498 <StartDisplayTask+0x628>)
 800339a:	2130      	movs	r1, #48	@ 0x30
 800339c:	a81a      	add	r0, sp, #104	@ 0x68
 800339e:	f00d fa47 	bl	8010830 <sniprintf>
 80033a2:	e646      	b.n	8003032 <StartDisplayTask+0x1c2>
					if (oscillation_detected) {
 80033a4:	4b3d      	ldr	r3, [pc, #244]	@ (800349c <StartDisplayTask+0x62c>)
					float current_robot_front = compass_to_robot_front(heading);
 80033a6:	eeb0 0a48 	vmov.f32	s0, s16
 80033aa:	f7fe fb3d 	bl	8001a28 <compass_to_robot_front>
					if (oscillation_detected) {
 80033ae:	781b      	ldrb	r3, [r3, #0]
					float current_robot_front = compass_to_robot_front(heading);
 80033b0:	ee10 7a10 	vmov	r7, s0
					if (oscillation_detected) {
 80033b4:	b33b      	cbz	r3, 8003406 <StartDisplayTask+0x596>
						status_char = '~'; // Oscillation detected
 80033b6:	237e      	movs	r3, #126	@ 0x7e
					snprintf(display_str, sizeof(display_str),
 80033b8:	9306      	str	r3, [sp, #24]
 80033ba:	4b39      	ldr	r3, [pc, #228]	@ (80034a0 <StartDisplayTask+0x630>)
 80033bc:	681d      	ldr	r5, [r3, #0]
 80033be:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <StartDisplayTask+0x634>)
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	f7fd f8c9 	bl	8000558 <__aeabi_f2d>
 80033c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033ca:	4638      	mov	r0, r7
 80033cc:	f7fd f8c4 	bl	8000558 <__aeabi_f2d>
 80033d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033d4:	4628      	mov	r0, r5
 80033d6:	f7fd f8bf 	bl	8000558 <__aeabi_f2d>
 80033da:	4a33      	ldr	r2, [pc, #204]	@ (80034a8 <StartDisplayTask+0x638>)
 80033dc:	e9cd 0100 	strd	r0, r1, [sp]
 80033e0:	2130      	movs	r1, #48	@ 0x30
 80033e2:	a81a      	add	r0, sp, #104	@ 0x68
 80033e4:	f00d fa24 	bl	8010830 <sniprintf>
				ssd1306_SetCursor(1, 24);
 80033e8:	2118      	movs	r1, #24
 80033ea:	2001      	movs	r0, #1
 80033ec:	f000 fcd0 	bl	8003d90 <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 80033f0:	2301      	movs	r3, #1
 80033f2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80033f6:	a81a      	add	r0, sp, #104	@ 0x68
 80033f8:	f000 fca4 	bl	8003d44 <ssd1306_WriteString>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 80033fc:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <StartDisplayTask+0x610>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1b7      	bne.n	8003374 <StartDisplayTask+0x504>
 8003404:	e60d      	b.n	8003022 <StartDisplayTask+0x1b2>
					} else if (overshoot_detected) {
 8003406:	4b22      	ldr	r3, [pc, #136]	@ (8003490 <StartDisplayTask+0x620>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b9b3      	cbnz	r3, 800343a <StartDisplayTask+0x5ca>
					} else if (fabs(heading_error) > 2.0f) { // Reduced threshold
 800340c:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <StartDisplayTask+0x634>)
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003416:	eef0 7ae7 	vabs.f32	s15, s15
 800341a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	dd0c      	ble.n	800343e <StartDisplayTask+0x5ce>
						status_char = (heading_pid_output > 0) ? 'R' : 'L'; // Turning Right/Left
 8003424:	4b17      	ldr	r3, [pc, #92]	@ (8003484 <StartDisplayTask+0x614>)
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	bfcc      	ite	gt
 8003434:	2352      	movgt	r3, #82	@ 0x52
 8003436:	234c      	movle	r3, #76	@ 0x4c
 8003438:	e7be      	b.n	80033b8 <StartDisplayTask+0x548>
						status_char = 'O'; // Overshoot detected
 800343a:	234f      	movs	r3, #79	@ 0x4f
 800343c:	e7bc      	b.n	80033b8 <StartDisplayTask+0x548>
						status_char = '='; // Near target
 800343e:	233d      	movs	r3, #61	@ 0x3d
 8003440:	e7ba      	b.n	80033b8 <StartDisplayTask+0x548>
 8003442:	bf00      	nop
 8003444:	08013d2c 	.word	0x08013d2c
 8003448:	08012f74 	.word	0x08012f74
 800344c:	08013e1c 	.word	0x08013e1c
 8003450:	08013d40 	.word	0x08013d40
 8003454:	08013ddc 	.word	0x08013ddc
 8003458:	20000260 	.word	0x20000260
 800345c:	08013d6c 	.word	0x08013d6c
 8003460:	08013df0 	.word	0x08013df0
 8003464:	08013e00 	.word	0x08013e00
 8003468:	08013d78 	.word	0x08013d78
 800346c:	20000484 	.word	0x20000484
 8003470:	08013d58 	.word	0x08013d58
 8003474:	200004d8 	.word	0x200004d8
 8003478:	200004da 	.word	0x200004da
 800347c:	08013db0 	.word	0x08013db0
 8003480:	200004de 	.word	0x200004de
 8003484:	200004e8 	.word	0x200004e8
 8003488:	200004dc 	.word	0x200004dc
 800348c:	08013ce0 	.word	0x08013ce0
 8003490:	200004f8 	.word	0x200004f8
 8003494:	08013ed8 	.word	0x08013ed8
 8003498:	08013dc0 	.word	0x08013dc0
 800349c:	200004f9 	.word	0x200004f9
 80034a0:	200004e0 	.word	0x200004e0
 80034a4:	200004e4 	.word	0x200004e4
 80034a8:	08013d98 	.word	0x08013d98

080034ac <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80034ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartEncoderTask */
	int32_t last_count = 0;
	robot_mode_t temp_mode = MODE_DISPLAY_SENSORS;
 80034b0:	2500      	movs	r5, #0
 80034b2:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 80035ec <StartEncoderTask+0x140>
 80034b6:	f8df a138 	ldr.w	sl, [pc, #312]	@ 80035f0 <StartEncoderTask+0x144>
 80034ba:	4e45      	ldr	r6, [pc, #276]	@ (80035d0 <StartEncoderTask+0x124>)
 80034bc:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 80035f4 <StartEncoderTask+0x148>
{
 80034c0:	b083      	sub	sp, #12
	int32_t last_count = 0;
 80034c2:	462f      	mov	r7, r5
 80034c4:	e04a      	b.n	800355c <StartEncoderTask+0xb0>
		osMutexAcquire(EncoderMutexHandle, osWaitForever);
		int32_t count = encoder_count;
		uint8_t button = encoder_button_pressed;
		if (button)
			encoder_button_pressed = 0;
		osMutexRelease(EncoderMutexHandle);
 80034c6:	f8d8 0000 	ldr.w	r0, [r8]
 80034ca:	f009 fba3 	bl	800cc14 <osMutexRelease>

		if (count != last_count) {
 80034ce:	42a7      	cmp	r7, r4
 80034d0:	d040      	beq.n	8003554 <StartEncoderTask+0xa8>
			// Handle encoder movement - change mode selection
			int32_t diff = count - last_count;
			last_count = count;

			osMutexAcquire(ModeMutexHandle, osWaitForever);
 80034d2:	f04f 31ff 	mov.w	r1, #4294967295
 80034d6:	6830      	ldr	r0, [r6, #0]
 80034d8:	f009 fb51 	bl	800cb7e <osMutexAcquire>
			robot_state_t state = robot_state;
 80034dc:	f899 3000 	ldrb.w	r3, [r9]
			osMutexRelease(ModeMutexHandle);
 80034e0:	6830      	ldr	r0, [r6, #0]
			robot_state_t state = robot_state;
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	9301      	str	r3, [sp, #4]
			osMutexRelease(ModeMutexHandle);
 80034e6:	f009 fb95 	bl	800cc14 <osMutexRelease>

			// Only allow mode change when robot is idle
			if (state == STATE_IDLE) {
 80034ea:	9b01      	ldr	r3, [sp, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d131      	bne.n	8003554 <StartEncoderTask+0xa8>
			int32_t diff = count - last_count;
 80034f0:	1be7      	subs	r7, r4, r7
				if (diff > 0) {
 80034f2:	2f00      	cmp	r7, #0
					temp_mode = (robot_mode_t) ((temp_mode + 1) % MODE_COUNT);
				} else {
					temp_mode = (robot_mode_t) ((temp_mode + MODE_COUNT - 1)
							% MODE_COUNT);
 80034f4:	4b37      	ldr	r3, [pc, #220]	@ (80035d4 <StartEncoderTask+0x128>)
				}

				// Update the shared selected_mode variable
				osMutexAcquire(ModeMutexHandle, osWaitForever);
 80034f6:	6830      	ldr	r0, [r6, #0]
					temp_mode = (robot_mode_t) ((temp_mode + 1) % MODE_COUNT);
 80034f8:	bfcc      	ite	gt
 80034fa:	3501      	addgt	r5, #1
					temp_mode = (robot_mode_t) ((temp_mode + MODE_COUNT - 1)
 80034fc:	3502      	addle	r5, #2
							% MODE_COUNT);
 80034fe:	fba3 3205 	umull	r3, r2, r3, r5
 8003502:	f022 0301 	bic.w	r3, r2, #1
 8003506:	eb03 0352 	add.w	r3, r3, r2, lsr #1
				osMutexAcquire(ModeMutexHandle, osWaitForever);
 800350a:	f04f 31ff 	mov.w	r1, #4294967295
							% MODE_COUNT);
 800350e:	1aed      	subs	r5, r5, r3
				osMutexAcquire(ModeMutexHandle, osWaitForever);
 8003510:	f009 fb35 	bl	800cb7e <osMutexAcquire>
				selected_mode = temp_mode;
 8003514:	4b30      	ldr	r3, [pc, #192]	@ (80035d8 <StartEncoderTask+0x12c>)
				osMutexRelease(ModeMutexHandle);
 8003516:	6830      	ldr	r0, [r6, #0]
					temp_mode = (robot_mode_t) ((temp_mode + MODE_COUNT - 1)
 8003518:	b2ed      	uxtb	r5, r5
				selected_mode = temp_mode;
 800351a:	701d      	strb	r5, [r3, #0]
				osMutexRelease(ModeMutexHandle);
 800351c:	f009 fb7a 	bl	800cc14 <osMutexRelease>
			}
		}

		if (button) {
 8003520:	f1bb 0f00 	cmp.w	fp, #0
 8003524:	d016      	beq.n	8003554 <StartEncoderTask+0xa8>
			// Handle button press
			osMutexAcquire(ModeMutexHandle, osWaitForever);
 8003526:	f04f 31ff 	mov.w	r1, #4294967295
 800352a:	6830      	ldr	r0, [r6, #0]
 800352c:	f009 fb27 	bl	800cb7e <osMutexAcquire>
			robot_mode_t current = current_mode;
 8003530:	492a      	ldr	r1, [pc, #168]	@ (80035dc <StartEncoderTask+0x130>)
 8003532:	780b      	ldrb	r3, [r1, #0]
			robot_state_t state = robot_state;
 8003534:	f899 2000 	ldrb.w	r2, [r9]
			robot_mode_t current = current_mode;
 8003538:	b2db      	uxtb	r3, r3

			if (state == STATE_IDLE) {
 800353a:	2a00      	cmp	r2, #0
 800353c:	d136      	bne.n	80035ac <StartEncoderTask+0x100>
				// If idle, either change mode or start movement (for movement modes)
				if (temp_mode != current) {
 800353e:	42ab      	cmp	r3, r5
 8003540:	d03c      	beq.n	80035bc <StartEncoderTask+0x110>
					// Change mode
					current_mode = temp_mode;
					selected_mode = temp_mode;  // Keep them in sync
 8003542:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <StartEncoderTask+0x12c>)
					mode_change_request = 1;
 8003544:	4a26      	ldr	r2, [pc, #152]	@ (80035e0 <StartEncoderTask+0x134>)
					current_mode = temp_mode;
 8003546:	700d      	strb	r5, [r1, #0]
					selected_mode = temp_mode;  // Keep them in sync
 8003548:	701d      	strb	r5, [r3, #0]
					mode_change_request = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	7013      	strb	r3, [r2, #0]
			} else {
				// If running, stop movement
				robot_state = STATE_IDLE;
				state_toggle_request = 1;
			}
			osMutexRelease(ModeMutexHandle);
 800354e:	6830      	ldr	r0, [r6, #0]
 8003550:	f009 fb60 	bl	800cc14 <osMutexRelease>
		}
		//osDelay(10);
		osDelay(20); // Update encoder every 20ms (50Hz)
 8003554:	2014      	movs	r0, #20
 8003556:	f009 fa71 	bl	800ca3c <osDelay>
	for (;;) {
 800355a:	4627      	mov	r7, r4
		osMutexAcquire(EncoderMutexHandle, osWaitForever);
 800355c:	f8d8 0000 	ldr.w	r0, [r8]
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	f009 fb0b 	bl	800cb7e <osMutexAcquire>
		int32_t count = encoder_count;
 8003568:	4b1e      	ldr	r3, [pc, #120]	@ (80035e4 <StartEncoderTask+0x138>)
 800356a:	681c      	ldr	r4, [r3, #0]
		uint8_t button = encoder_button_pressed;
 800356c:	f89a 3000 	ldrb.w	r3, [sl]
		if (button)
 8003570:	f003 0bff 	and.w	fp, r3, #255	@ 0xff
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0a6      	beq.n	80034c6 <StartEncoderTask+0x1a>
			encoder_button_pressed = 0;
 8003578:	f04f 0300 	mov.w	r3, #0
		osMutexRelease(EncoderMutexHandle);
 800357c:	f8d8 0000 	ldr.w	r0, [r8]
			encoder_button_pressed = 0;
 8003580:	f88a 3000 	strb.w	r3, [sl]
		osMutexRelease(EncoderMutexHandle);
 8003584:	f009 fb46 	bl	800cc14 <osMutexRelease>
		if (count != last_count) {
 8003588:	42a7      	cmp	r7, r4
 800358a:	d0cc      	beq.n	8003526 <StartEncoderTask+0x7a>
			osMutexAcquire(ModeMutexHandle, osWaitForever);
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	6830      	ldr	r0, [r6, #0]
 8003592:	f009 faf4 	bl	800cb7e <osMutexAcquire>
			robot_state_t state = robot_state;
 8003596:	f899 3000 	ldrb.w	r3, [r9]
			osMutexRelease(ModeMutexHandle);
 800359a:	6830      	ldr	r0, [r6, #0]
			robot_state_t state = robot_state;
 800359c:	b2db      	uxtb	r3, r3
 800359e:	9301      	str	r3, [sp, #4]
			osMutexRelease(ModeMutexHandle);
 80035a0:	f009 fb38 	bl	800cc14 <osMutexRelease>
			if (state == STATE_IDLE) {
 80035a4:	9b01      	ldr	r3, [sp, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1bd      	bne.n	8003526 <StartEncoderTask+0x7a>
 80035aa:	e7a1      	b.n	80034f0 <StartEncoderTask+0x44>
				robot_state = STATE_IDLE;
 80035ac:	f04f 0300 	mov.w	r3, #0
				state_toggle_request = 1;
 80035b0:	4a0d      	ldr	r2, [pc, #52]	@ (80035e8 <StartEncoderTask+0x13c>)
				robot_state = STATE_IDLE;
 80035b2:	f889 3000 	strb.w	r3, [r9]
				state_toggle_request = 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	7013      	strb	r3, [r2, #0]
 80035ba:	e7c8      	b.n	800354e <StartEncoderTask+0xa2>
				} else if (current == MODE_MOVEMENT // UPDATED
 80035bc:	1e6b      	subs	r3, r5, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d8c5      	bhi.n	800354e <StartEncoderTask+0xa2>
					state_toggle_request = 1;
 80035c2:	4a09      	ldr	r2, [pc, #36]	@ (80035e8 <StartEncoderTask+0x13c>)
					robot_state = STATE_RUNNING;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f889 3000 	strb.w	r3, [r9]
					state_toggle_request = 1;
 80035ca:	7013      	strb	r3, [r2, #0]
 80035cc:	e7bf      	b.n	800354e <StartEncoderTask+0xa2>
 80035ce:	bf00      	nop
 80035d0:	20000460 	.word	0x20000460
 80035d4:	aaaaaaab 	.word	0xaaaaaaab
 80035d8:	200004cd 	.word	0x200004cd
 80035dc:	200004cc 	.word	0x200004cc
 80035e0:	200004cf 	.word	0x200004cf
 80035e4:	200004b8 	.word	0x200004b8
 80035e8:	200004d0 	.word	0x200004d0
 80035ec:	20000458 	.word	0x20000458
 80035f0:	200004bc 	.word	0x200004bc
 80035f4:	200004ce 	.word	0x200004ce

080035f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80035f8:	6803      	ldr	r3, [r0, #0]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035fe:	d000      	beq.n	8003602 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003600:	4770      	bx	lr
    HAL_IncTick();
 8003602:	f003 bc8f 	b.w	8006f24 <HAL_IncTick>
 8003606:	bf00      	nop

08003608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003608:	b530      	push	{r4, r5, lr}
 800360a:	b083      	sub	sp, #12
	/* User can add his own implementation to report the HAL error return state */

	// Don't disable interrupts - allow system to continue
	// __disable_irq();  // ❌ REMOVE THIS LINE
	// Enable GPIOC clock if not already enabled
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800360c:	2200      	movs	r2, #0
 800360e:	4b3c      	ldr	r3, [pc, #240]	@ (8003700 <Error_Handler+0xf8>)
 8003610:	9201      	str	r2, [sp, #4]
 8003612:	6b19      	ldr	r1, [r3, #48]	@ 0x30

	// Turn ON internal LED to indicate error (PC13 is active LOW)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003614:	483b      	ldr	r0, [pc, #236]	@ (8003704 <Error_Handler+0xfc>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003616:	f041 0104 	orr.w	r1, r1, #4
 800361a:	6319      	str	r1, [r3, #48]	@ 0x30
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f003 0304 	and.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003622:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800362a:	f004 fc2f 	bl	8007e8c <HAL_GPIO_WritePin>

	// Print detailed error information
	printf("\r\n=== ERROR HANDLER ENTERED ===\r\n");
 800362e:	4836      	ldr	r0, [pc, #216]	@ (8003708 <Error_Handler+0x100>)
 8003630:	f00d f8f6 	bl	8010820 <puts>
	printf("System Tick: %lu ms\r\n", HAL_GetTick());
 8003634:	f003 fc8a 	bl	8006f4c <HAL_GetTick>
 8003638:	4601      	mov	r1, r0
 800363a:	4834      	ldr	r0, [pc, #208]	@ (800370c <Error_Handler+0x104>)
 800363c:	f00d f888 	bl	8010750 <iprintf>

	// Print current task info if FreeRTOS is running
	if (osKernelGetState() == osKernelRunning) {
 8003640:	f009 f8fc 	bl	800c83c <osKernelGetState>
 8003644:	2802      	cmp	r0, #2
 8003646:	d04b      	beq.n	80036e0 <Error_Handler+0xd8>
		printf("Current Task: %s\r\n", osThreadGetName(osThreadGetId()));
		printf("Free Heap: %u bytes\r\n", xPortGetFreeHeapSize());
	} else {
		printf("FreeRTOS State: %d\r\n", osKernelGetState());
 8003648:	f009 f8f8 	bl	800c83c <osKernelGetState>
 800364c:	4601      	mov	r1, r0
 800364e:	4830      	ldr	r0, [pc, #192]	@ (8003710 <Error_Handler+0x108>)
 8003650:	f00d f87e 	bl	8010750 <iprintf>
	}

	// Print peripheral error states
	printf("UART1 Error: 0x%08lX\r\n", huart1.ErrorCode);
 8003654:	4b2f      	ldr	r3, [pc, #188]	@ (8003714 <Error_Handler+0x10c>)
 8003656:	4830      	ldr	r0, [pc, #192]	@ (8003718 <Error_Handler+0x110>)
 8003658:	6c59      	ldr	r1, [r3, #68]	@ 0x44

	printf("=== END ERROR INFO ===\r\n\r\n");

	// Flash LED to indicate error, but don't get stuck
	for (int i = 0; i < 10; i++) {  // Flash 10 times then continue
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800365a:	4d2a      	ldr	r5, [pc, #168]	@ (8003704 <Error_Handler+0xfc>)
	printf("UART1 Error: 0x%08lX\r\n", huart1.ErrorCode);
 800365c:	f00d f878 	bl	8010750 <iprintf>
	printf("UART2 Error: 0x%08lX\r\n", huart2.ErrorCode);
 8003660:	4b2e      	ldr	r3, [pc, #184]	@ (800371c <Error_Handler+0x114>)
 8003662:	482f      	ldr	r0, [pc, #188]	@ (8003720 <Error_Handler+0x118>)
 8003664:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003666:	f00d f873 	bl	8010750 <iprintf>
	printf("I2C1 Error: 0x%08lX\r\n", hi2c1.ErrorCode);
 800366a:	4b2e      	ldr	r3, [pc, #184]	@ (8003724 <Error_Handler+0x11c>)
 800366c:	482e      	ldr	r0, [pc, #184]	@ (8003728 <Error_Handler+0x120>)
 800366e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003670:	f00d f86e 	bl	8010750 <iprintf>
	printf("SBUS Valid: %d\r\n", sbus_signal_valid);
 8003674:	4b2d      	ldr	r3, [pc, #180]	@ (800372c <Error_Handler+0x124>)
 8003676:	482e      	ldr	r0, [pc, #184]	@ (8003730 <Error_Handler+0x128>)
 8003678:	7819      	ldrb	r1, [r3, #0]
 800367a:	f00d f869 	bl	8010750 <iprintf>
	printf("SBUS Last Valid: %lu ms ago\r\n", HAL_GetTick() - sbus_last_valid_time);
 800367e:	f003 fc65 	bl	8006f4c <HAL_GetTick>
 8003682:	4b2c      	ldr	r3, [pc, #176]	@ (8003734 <Error_Handler+0x12c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4601      	mov	r1, r0
 8003688:	1ac9      	subs	r1, r1, r3
 800368a:	482b      	ldr	r0, [pc, #172]	@ (8003738 <Error_Handler+0x130>)
 800368c:	f00d f860 	bl	8010750 <iprintf>
	printf("Current Mode: %d, State: %d\r\n", current_mode, robot_state);
 8003690:	4b2a      	ldr	r3, [pc, #168]	@ (800373c <Error_Handler+0x134>)
 8003692:	4a2b      	ldr	r2, [pc, #172]	@ (8003740 <Error_Handler+0x138>)
 8003694:	482b      	ldr	r0, [pc, #172]	@ (8003744 <Error_Handler+0x13c>)
 8003696:	7811      	ldrb	r1, [r2, #0]
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	f00d f859 	bl	8010750 <iprintf>
	printf("Heading Lock: %d\r\n", heading_lock_enabled);
 800369e:	4b2a      	ldr	r3, [pc, #168]	@ (8003748 <Error_Handler+0x140>)
 80036a0:	482a      	ldr	r0, [pc, #168]	@ (800374c <Error_Handler+0x144>)
 80036a2:	7819      	ldrb	r1, [r3, #0]
 80036a4:	f00d f854 	bl	8010750 <iprintf>
	printf("=== END ERROR INFO ===\r\n\r\n");
 80036a8:	4829      	ldr	r0, [pc, #164]	@ (8003750 <Error_Handler+0x148>)
 80036aa:	f00d f8b9 	bl	8010820 <puts>
 80036ae:	240a      	movs	r4, #10
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80036b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036b4:	4628      	mov	r0, r5
 80036b6:	f004 fc02 	bl	8007ebe <HAL_GPIO_TogglePin>
		HAL_Delay(100);  // Shorter delay
 80036ba:	2064      	movs	r0, #100	@ 0x64
 80036bc:	f003 fc52 	bl	8006f64 <HAL_Delay>
	for (int i = 0; i < 10; i++) {  // Flash 10 times then continue
 80036c0:	3c01      	subs	r4, #1
 80036c2:	d1f5      	bne.n	80036b0 <Error_Handler+0xa8>
	}

	// Keep LED ON after flashing to indicate persistent error state
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80036c4:	4622      	mov	r2, r4
 80036c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036ca:	480e      	ldr	r0, [pc, #56]	@ (8003704 <Error_Handler+0xfc>)
 80036cc:	f004 fbde 	bl	8007e8c <HAL_GPIO_WritePin>

	// Instead of infinite loop, try to recover
	// Reset system if this is a critical error
	printf("Critical error occurred, resetting system...\r\n");
 80036d0:	4820      	ldr	r0, [pc, #128]	@ (8003754 <Error_Handler+0x14c>)
 80036d2:	f00d f8a5 	bl	8010820 <puts>
	HAL_Delay(100); // Give time for printf to complete
 80036d6:	2064      	movs	r0, #100	@ 0x64
 80036d8:	f003 fc44 	bl	8006f64 <HAL_Delay>
	NVIC_SystemReset();
 80036dc:	f7fd fc1c 	bl	8000f18 <__NVIC_SystemReset>
		printf("Current Task: %s\r\n", osThreadGetName(osThreadGetId()));
 80036e0:	f009 f9a1 	bl	800ca26 <osThreadGetId>
 80036e4:	f009 f984 	bl	800c9f0 <osThreadGetName>
 80036e8:	4601      	mov	r1, r0
 80036ea:	481b      	ldr	r0, [pc, #108]	@ (8003758 <Error_Handler+0x150>)
 80036ec:	f00d f830 	bl	8010750 <iprintf>
		printf("Free Heap: %u bytes\r\n", xPortGetFreeHeapSize());
 80036f0:	f00c fa4e 	bl	800fb90 <xPortGetFreeHeapSize>
 80036f4:	4601      	mov	r1, r0
 80036f6:	4819      	ldr	r0, [pc, #100]	@ (800375c <Error_Handler+0x154>)
 80036f8:	f00d f82a 	bl	8010750 <iprintf>
 80036fc:	e7aa      	b.n	8003654 <Error_Handler+0x4c>
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	40020800 	.word	0x40020800
 8003708:	08013e2c 	.word	0x08013e2c
 800370c:	08013e50 	.word	0x08013e50
 8003710:	08013e68 	.word	0x08013e68
 8003714:	20000350 	.word	0x20000350
 8003718:	08013e80 	.word	0x08013e80
 800371c:	20000398 	.word	0x20000398
 8003720:	08013e98 	.word	0x08013e98
 8003724:	20000260 	.word	0x20000260
 8003728:	08013eb0 	.word	0x08013eb0
 800372c:	200004b0 	.word	0x200004b0
 8003730:	08013ec8 	.word	0x08013ec8
 8003734:	200004ac 	.word	0x200004ac
 8003738:	08013edc 	.word	0x08013edc
 800373c:	200004ce 	.word	0x200004ce
 8003740:	200004cc 	.word	0x200004cc
 8003744:	08013efc 	.word	0x08013efc
 8003748:	200004de 	.word	0x200004de
 800374c:	08013f1c 	.word	0x08013f1c
 8003750:	08013f30 	.word	0x08013f30
 8003754:	08013f4c 	.word	0x08013f4c
 8003758:	08013944 	.word	0x08013944
 800375c:	0801392c 	.word	0x0801392c

08003760 <MB85rc_Init>:
I2C_HandleTypeDef *i2c;

/**
  * @brief  Initialize local I2C handle
  */
void MB85rc_Init(I2C_HandleTypeDef *hi2c) {
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 8003768:	4a04      	ldr	r2, [pc, #16]	@ (800377c <MB85rc_Init+0x1c>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6013      	str	r3, [r2, #0]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	2000057c 	.word	0x2000057c

08003780 <MB85rc_Bus_Write>:
  * @param  memAddr  	Internal memory address
  * @param  pData 		Pointer to data buffer
  * @param  Len  		Amount of data to be Write
  */
HAL_StatusTypeDef MB85rc_Bus_Write(uint16_t DevAddr, uint16_t memAddr, uint8_t *pData, uint16_t Len)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	@ 0x28
 8003784:	af04      	add	r7, sp, #16
 8003786:	60ba      	str	r2, [r7, #8]
 8003788:	461a      	mov	r2, r3
 800378a:	4603      	mov	r3, r0
 800378c:	81fb      	strh	r3, [r7, #14]
 800378e:	460b      	mov	r3, r1
 8003790:	81bb      	strh	r3, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef halStatus = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]

	halStatus = HAL_I2C_Mem_Write(i2c, DevAddr, memAddr, I2C_MEMADD_SIZE_16BIT, pData, Len, HAL_MAX_DELAY);
 800379a:	4b0a      	ldr	r3, [pc, #40]	@ (80037c4 <MB85rc_Bus_Write+0x44>)
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	89ba      	ldrh	r2, [r7, #12]
 80037a0:	89f9      	ldrh	r1, [r7, #14]
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2310      	movs	r3, #16
 80037b2:	f005 f85b 	bl	800886c <HAL_I2C_Mem_Write>
 80037b6:	4603      	mov	r3, r0
 80037b8:	75fb      	strb	r3, [r7, #23]

    return halStatus;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000057c 	.word	0x2000057c

080037c8 <MB85rc_Bus_Read>:
  * @param  memAddr  	Internal memory address
  * @param  pData 		Pointer to data buffer
  * @param  Len  		Amount of data to be read
  */
HAL_StatusTypeDef MB85rc_Bus_Read(uint16_t DevAddr, uint16_t memAddr, uint8_t *pData, uint16_t Len)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	@ 0x28
 80037cc:	af04      	add	r7, sp, #16
 80037ce:	60ba      	str	r2, [r7, #8]
 80037d0:	461a      	mov	r2, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	81fb      	strh	r3, [r7, #14]
 80037d6:	460b      	mov	r3, r1
 80037d8:	81bb      	strh	r3, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef halStatus = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]

	halStatus = HAL_I2C_Mem_Read(i2c, DevAddr, memAddr, I2C_MEMADD_SIZE_16BIT, pData, Len, HAL_MAX_DELAY);
 80037e2:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <MB85rc_Bus_Read+0x44>)
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	89ba      	ldrh	r2, [r7, #12]
 80037e8:	89f9      	ldrh	r1, [r7, #14]
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2310      	movs	r3, #16
 80037fa:	f005 f931 	bl	8008a60 <HAL_I2C_Mem_Read>
 80037fe:	4603      	mov	r3, r0
 8003800:	75fb      	strb	r3, [r7, #23]

    return halStatus;
 8003802:	7dfb      	ldrb	r3, [r7, #23]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	2000057c 	.word	0x2000057c

08003810 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af04      	add	r7, sp, #16
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
	osMutexAcquire(I2C1MutexHandle, osWaitForever);
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <ssd1306_WriteCommand+0x4c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f04f 31ff 	mov.w	r1, #4294967295
 8003824:	4618      	mov	r0, r3
 8003826:	f009 f9aa 	bl	800cb7e <osMutexAcquire>
	uint8_t res = HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800382a:	230a      	movs	r3, #10
 800382c:	9302      	str	r3, [sp, #8]
 800382e:	2301      	movs	r3, #1
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	1cfb      	adds	r3, r7, #3
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	2301      	movs	r3, #1
 8003838:	2200      	movs	r2, #0
 800383a:	2178      	movs	r1, #120	@ 0x78
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f005 f815 	bl	800886c <HAL_I2C_Mem_Write>
 8003842:	4603      	mov	r3, r0
 8003844:	73fb      	strb	r3, [r7, #15]
    osMutexRelease(I2C1MutexHandle);
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <ssd1306_WriteCommand+0x4c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f009 f9e2 	bl	800cc14 <osMutexRelease>
    return res;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000454 	.word	0x20000454

08003860 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8003868:	2064      	movs	r0, #100	@ 0x64
 800386a:	f003 fb7b 	bl	8006f64 <HAL_Delay>
    int status = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8003872:	21ae      	movs	r1, #174	@ 0xae
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ffcb 	bl	8003810 <ssd1306_WriteCommand>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8003884:	2120      	movs	r1, #32
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffc2 	bl	8003810 <ssd1306_WriteCommand>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003896:	2110      	movs	r1, #16
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffb9 	bl	8003810 <ssd1306_WriteCommand>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80038a8:	21b0      	movs	r1, #176	@ 0xb0
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ffb0 	bl	8003810 <ssd1306_WriteCommand>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80038ba:	21c8      	movs	r1, #200	@ 0xc8
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ffa7 	bl	8003810 <ssd1306_WriteCommand>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4413      	add	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80038cc:	2100      	movs	r1, #0
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff ff9e 	bl	8003810 <ssd1306_WriteCommand>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80038de:	2110      	movs	r1, #16
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff95 	bl	8003810 <ssd1306_WriteCommand>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80038f0:	2140      	movs	r1, #64	@ 0x40
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ff8c 	bl	8003810 <ssd1306_WriteCommand>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8003902:	2181      	movs	r1, #129	@ 0x81
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff83 	bl	8003810 <ssd1306_WriteCommand>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8003914:	21ff      	movs	r1, #255	@ 0xff
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff7a 	bl	8003810 <ssd1306_WriteCommand>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8003926:	21a1      	movs	r1, #161	@ 0xa1
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff71 	bl	8003810 <ssd1306_WriteCommand>
 800392e:	4603      	mov	r3, r0
 8003930:	461a      	mov	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8003938:	21a6      	movs	r1, #166	@ 0xa6
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff ff68 	bl	8003810 <ssd1306_WriteCommand>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800394a:	21a8      	movs	r1, #168	@ 0xa8
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff5f 	bl	8003810 <ssd1306_WriteCommand>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800395c:	213f      	movs	r1, #63	@ 0x3f
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ff56 	bl	8003810 <ssd1306_WriteCommand>
 8003964:	4603      	mov	r3, r0
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800396e:	21a4      	movs	r1, #164	@ 0xa4
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff4d 	bl	8003810 <ssd1306_WriteCommand>
 8003976:	4603      	mov	r3, r0
 8003978:	461a      	mov	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4413      	add	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8003980:	21d3      	movs	r1, #211	@ 0xd3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff44 	bl	8003810 <ssd1306_WriteCommand>
 8003988:	4603      	mov	r3, r0
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8003992:	2100      	movs	r1, #0
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff3b 	bl	8003810 <ssd1306_WriteCommand>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80039a4:	21d5      	movs	r1, #213	@ 0xd5
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ff32 	bl	8003810 <ssd1306_WriteCommand>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80039b6:	21f0      	movs	r1, #240	@ 0xf0
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff29 	bl	8003810 <ssd1306_WriteCommand>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80039c8:	21d9      	movs	r1, #217	@ 0xd9
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ff20 	bl	8003810 <ssd1306_WriteCommand>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80039da:	2122      	movs	r1, #34	@ 0x22
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff17 	bl	8003810 <ssd1306_WriteCommand>
 80039e2:	4603      	mov	r3, r0
 80039e4:	461a      	mov	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80039ec:	21da      	movs	r1, #218	@ 0xda
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ff0e 	bl	8003810 <ssd1306_WriteCommand>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 80039fe:	2112      	movs	r1, #18
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff05 	bl	8003810 <ssd1306_WriteCommand>
 8003a06:	4603      	mov	r3, r0
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8003a10:	21db      	movs	r1, #219	@ 0xdb
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fefc 	bl	8003810 <ssd1306_WriteCommand>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8003a22:	2120      	movs	r1, #32
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fef3 	bl	8003810 <ssd1306_WriteCommand>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8003a34:	218d      	movs	r1, #141	@ 0x8d
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff feea 	bl	8003810 <ssd1306_WriteCommand>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8003a46:	2114      	movs	r1, #20
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fee1 	bl	8003810 <ssd1306_WriteCommand>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8003a58:	21af      	movs	r1, #175	@ 0xaf
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff fed8 	bl	8003810 <ssd1306_WriteCommand>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <ssd1306_Init+0x214>
        return 1;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e00f      	b.n	8003a94 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8003a74:	2000      	movs	r0, #0
 8003a76:	f000 f813 	bl	8003aa0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f834 	bl	8003ae8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003a80:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <ssd1306_Init+0x23c>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003a86:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <ssd1306_Init+0x23c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003a8c:	4b03      	ldr	r3, [pc, #12]	@ (8003a9c <ssd1306_Init+0x23c>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	715a      	strb	r2, [r3, #5]

    return 0;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000990 	.word	0x20000990

08003aa0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	e00d      	b.n	8003acc <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <ssd1306_Fill+0x1a>
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	e000      	b.n	8003abc <ssd1306_Fill+0x1c>
 8003aba:	21ff      	movs	r1, #255	@ 0xff
 8003abc:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <ssd1306_Fill+0x44>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f5b3 6f82 	cmp.w	r3, #1040	@ 0x410
 8003ad2:	d3ed      	bcc.n	8003ab0 <ssd1306_Fill+0x10>
    }
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000580 	.word	0x20000580

08003ae8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af04      	add	r7, sp, #16
 8003aee:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	e030      	b.n	8003b58 <ssd1306_UpdateScreen+0x70>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	3b50      	subs	r3, #80	@ 0x50
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fe86 	bl	8003810 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8003b04:	2100      	movs	r1, #0
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fe82 	bl	8003810 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8003b0c:	2110      	movs	r1, #16
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff fe7e 	bl	8003810 <ssd1306_WriteCommand>

        osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8003b14:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <ssd1306_UpdateScreen+0x80>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f009 f82e 	bl	800cb7e <osMutexAcquire>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	4613      	mov	r3, r2
 8003b26:	019b      	lsls	r3, r3, #6
 8003b28:	4413      	add	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b6c <ssd1306_UpdateScreen+0x84>)
 8003b30:	4413      	add	r3, r2
 8003b32:	2264      	movs	r2, #100	@ 0x64
 8003b34:	9202      	str	r2, [sp, #8]
 8003b36:	2282      	movs	r2, #130	@ 0x82
 8003b38:	9201      	str	r2, [sp, #4]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	2240      	movs	r2, #64	@ 0x40
 8003b40:	2178      	movs	r1, #120	@ 0x78
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f004 fe92 	bl	800886c <HAL_I2C_Mem_Write>
        osMutexRelease(I2C1MutexHandle);
 8003b48:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <ssd1306_UpdateScreen+0x80>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f009 f861 	bl	800cc14 <osMutexRelease>
    for (i = 0; i < 8; i++) {
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	3301      	adds	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b07      	cmp	r3, #7
 8003b5c:	d9cb      	bls.n	8003af6 <ssd1306_UpdateScreen+0xe>
    }
}
 8003b5e:	bf00      	nop
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000454 	.word	0x20000454
 8003b6c:	20000580 	.word	0x20000580

08003b70 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8003b70:	b490      	push	{r4, r7}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	71bb      	strb	r3, [r7, #6]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	2b81      	cmp	r3, #129	@ 0x81
 8003b86:	d854      	bhi.n	8003c32 <ssd1306_DrawPixel+0xc2>
 8003b88:	79bb      	ldrb	r3, [r7, #6]
 8003b8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b8c:	d851      	bhi.n	8003c32 <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8003b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c3c <ssd1306_DrawPixel+0xcc>)
 8003b90:	791b      	ldrb	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d006      	beq.n	8003ba4 <ssd1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR)!color;
 8003b96:	797b      	ldrb	r3, [r7, #5]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8003ba4:	797b      	ldrb	r3, [r7, #5]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d120      	bne.n	8003bec <ssd1306_DrawPixel+0x7c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003baa:	79fa      	ldrb	r2, [r7, #7]
 8003bac:	79bb      	ldrb	r3, [r7, #6]
 8003bae:	08db      	lsrs	r3, r3, #3
 8003bb0:	b2d8      	uxtb	r0, r3
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	019b      	lsls	r3, r3, #6
 8003bb8:	440b      	add	r3, r1
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4a20      	ldr	r2, [pc, #128]	@ (8003c40 <ssd1306_DrawPixel+0xd0>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	b25a      	sxtb	r2, r3
 8003bc4:	79bb      	ldrb	r3, [r7, #6]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	b25b      	sxtb	r3, r3
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	b25c      	sxtb	r4, r3
 8003bd6:	79fa      	ldrb	r2, [r7, #7]
 8003bd8:	4601      	mov	r1, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	440b      	add	r3, r1
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	b2e1      	uxtb	r1, r4
 8003be6:	4a16      	ldr	r2, [pc, #88]	@ (8003c40 <ssd1306_DrawPixel+0xd0>)
 8003be8:	54d1      	strb	r1, [r2, r3]
 8003bea:	e023      	b.n	8003c34 <ssd1306_DrawPixel+0xc4>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003bec:	79fa      	ldrb	r2, [r7, #7]
 8003bee:	79bb      	ldrb	r3, [r7, #6]
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	b2d8      	uxtb	r0, r3
 8003bf4:	4601      	mov	r1, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	440b      	add	r3, r1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a0f      	ldr	r2, [pc, #60]	@ (8003c40 <ssd1306_DrawPixel+0xd0>)
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	b25a      	sxtb	r2, r3
 8003c06:	79bb      	ldrb	r3, [r7, #6]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	b25b      	sxtb	r3, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	b25b      	sxtb	r3, r3
 8003c18:	4013      	ands	r3, r2
 8003c1a:	b25c      	sxtb	r4, r3
 8003c1c:	79fa      	ldrb	r2, [r7, #7]
 8003c1e:	4601      	mov	r1, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	019b      	lsls	r3, r3, #6
 8003c24:	440b      	add	r3, r1
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	b2e1      	uxtb	r1, r4
 8003c2c:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <ssd1306_DrawPixel+0xd0>)
 8003c2e:	54d1      	strb	r1, [r2, r3]
 8003c30:	e000      	b.n	8003c34 <ssd1306_DrawPixel+0xc4>
        return;
 8003c32:	bf00      	nop
    }
}
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc90      	pop	{r4, r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	20000990 	.word	0x20000990
 8003c40:	20000580 	.word	0x20000580

08003c44 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b089      	sub	sp, #36	@ 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	1d38      	adds	r0, r7, #4
 8003c4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003c52:	461a      	mov	r2, r3
 8003c54:	4623      	mov	r3, r4
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003c5c:	4b38      	ldr	r3, [pc, #224]	@ (8003d40 <ssd1306_WriteChar+0xfc>)
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	793b      	ldrb	r3, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	2b81      	cmp	r3, #129	@ 0x81
 8003c68:	dc06      	bgt.n	8003c78 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8003c6a:	4b35      	ldr	r3, [pc, #212]	@ (8003d40 <ssd1306_WriteChar+0xfc>)
 8003c6c:	885b      	ldrh	r3, [r3, #2]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	797b      	ldrb	r3, [r7, #5]
 8003c72:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003c74:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c76:	dd01      	ble.n	8003c7c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e05c      	b.n	8003d36 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	e04c      	b.n	8003d1c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	3b20      	subs	r3, #32
 8003c88:	7979      	ldrb	r1, [r7, #5]
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4619      	mov	r1, r3
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	440b      	add	r3, r1
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	e034      	b.n	8003d0c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d012      	beq.n	8003cd8 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003cb2:	4b23      	ldr	r3, [pc, #140]	@ (8003d40 <ssd1306_WriteChar+0xfc>)
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	b2d8      	uxtb	r0, r3
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d40 <ssd1306_WriteChar+0xfc>)
 8003cc2:	885b      	ldrh	r3, [r3, #2]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	7bba      	ldrb	r2, [r7, #14]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f7ff ff4d 	bl	8003b70 <ssd1306_DrawPixel>
 8003cd6:	e016      	b.n	8003d06 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	@ (8003d40 <ssd1306_WriteChar+0xfc>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	b2d8      	uxtb	r0, r3
 8003ce6:	4b16      	ldr	r3, [pc, #88]	@ (8003d40 <ssd1306_WriteChar+0xfc>)
 8003ce8:	885b      	ldrh	r3, [r3, #2]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	b2d9      	uxtb	r1, r3
 8003cf4:	7bbb      	ldrb	r3, [r7, #14]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	f7ff ff35 	bl	8003b70 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	793b      	ldrb	r3, [r7, #4]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d3c5      	bcc.n	8003ca2 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	797b      	ldrb	r3, [r7, #5]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d3ad      	bcc.n	8003c82 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <ssd1306_WriteChar+0xfc>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	793a      	ldrb	r2, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <ssd1306_WriteChar+0xfc>)
 8003d32:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3724      	adds	r7, #36	@ 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd90      	pop	{r4, r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000990 	.word	0x20000990

08003d44 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	1d38      	adds	r0, r7, #4
 8003d4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003d52:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8003d54:	e012      	b.n	8003d7c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	7818      	ldrb	r0, [r3, #0]
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	1d3a      	adds	r2, r7, #4
 8003d5e:	ca06      	ldmia	r2, {r1, r2}
 8003d60:	f7ff ff70 	bl	8003c44 <ssd1306_WriteChar>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d002      	beq.n	8003d76 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	e008      	b.n	8003d88 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e8      	bne.n	8003d56 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	781b      	ldrb	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	460a      	mov	r2, r1
 8003d9a:	71fb      	strb	r3, [r7, #7]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <ssd1306_SetCursor+0x2c>)
 8003da6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003da8:	79bb      	ldrb	r3, [r7, #6]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <ssd1306_SetCursor+0x2c>)
 8003dae:	805a      	strh	r2, [r3, #2]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20000990 	.word	0x20000990

08003dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <HAL_MspInit+0x54>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	4a11      	ldr	r2, [pc, #68]	@ (8003e14 <HAL_MspInit+0x54>)
 8003dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e14 <HAL_MspInit+0x54>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_MspInit+0x54>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	4a0a      	ldr	r2, [pc, #40]	@ (8003e14 <HAL_MspInit+0x54>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003df2:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <HAL_MspInit+0x54>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	210f      	movs	r1, #15
 8003e02:	f06f 0001 	mvn.w	r0, #1
 8003e06:	f003 f989 	bl	800711c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800

08003e18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	@ 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a19      	ldr	r2, [pc, #100]	@ (8003e9c <HAL_I2C_MspInit+0x84>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d12b      	bne.n	8003e92 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	4b18      	ldr	r3, [pc, #96]	@ (8003ea0 <HAL_I2C_MspInit+0x88>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <HAL_I2C_MspInit+0x88>)
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <HAL_I2C_MspInit+0x88>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e56:	23c0      	movs	r3, #192	@ 0xc0
 8003e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e5a:	2312      	movs	r3, #18
 8003e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e62:	2303      	movs	r3, #3
 8003e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e66:	2304      	movs	r3, #4
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4619      	mov	r1, r3
 8003e70:	480c      	ldr	r0, [pc, #48]	@ (8003ea4 <HAL_I2C_MspInit+0x8c>)
 8003e72:	f003 fd8b 	bl	800798c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <HAL_I2C_MspInit+0x88>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ea0 <HAL_I2C_MspInit+0x88>)
 8003e80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_I2C_MspInit+0x88>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003e92:	bf00      	nop
 8003e94:	3728      	adds	r7, #40	@ 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40005400 	.word	0x40005400
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020400 	.word	0x40020400

08003ea8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee0 <HAL_I2C_MspDeInit+0x38>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003eba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <HAL_I2C_MspDeInit+0x3c>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	4a09      	ldr	r2, [pc, #36]	@ (8003ee4 <HAL_I2C_MspDeInit+0x3c>)
 8003ec0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ec4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003ec6:	2140      	movs	r1, #64	@ 0x40
 8003ec8:	4807      	ldr	r0, [pc, #28]	@ (8003ee8 <HAL_I2C_MspDeInit+0x40>)
 8003eca:	f003 fee3 	bl	8007c94 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003ece:	2180      	movs	r1, #128	@ 0x80
 8003ed0:	4805      	ldr	r0, [pc, #20]	@ (8003ee8 <HAL_I2C_MspDeInit+0x40>)
 8003ed2:	f003 fedf 	bl	8007c94 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40005400 	.word	0x40005400
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020400 	.word	0x40020400

08003eec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a15      	ldr	r2, [pc, #84]	@ (8003f50 <HAL_TIM_PWM_MspInit+0x64>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10e      	bne.n	8003f1c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b14      	ldr	r3, [pc, #80]	@ (8003f54 <HAL_TIM_PWM_MspInit+0x68>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	4a13      	ldr	r2, [pc, #76]	@ (8003f54 <HAL_TIM_PWM_MspInit+0x68>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f0e:	4b11      	ldr	r3, [pc, #68]	@ (8003f54 <HAL_TIM_PWM_MspInit+0x68>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003f1a:	e012      	b.n	8003f42 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <HAL_TIM_PWM_MspInit+0x6c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10d      	bne.n	8003f42 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <HAL_TIM_PWM_MspInit+0x68>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <HAL_TIM_PWM_MspInit+0x68>)
 8003f30:	f043 0302 	orr.w	r3, r3, #2
 8003f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f36:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <HAL_TIM_PWM_MspInit+0x68>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40000400 	.word	0x40000400

08003f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	@ 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a24      	ldr	r2, [pc, #144]	@ (800400c <HAL_TIM_MspPostInit+0xb0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d11f      	bne.n	8003fbe <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	4b23      	ldr	r3, [pc, #140]	@ (8004010 <HAL_TIM_MspPostInit+0xb4>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	4a22      	ldr	r2, [pc, #136]	@ (8004010 <HAL_TIM_MspPostInit+0xb4>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f8e:	4b20      	ldr	r3, [pc, #128]	@ (8004010 <HAL_TIM_MspPostInit+0xb4>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_1A_PWM_Pin|Motor_1B_PWM_Pin|Motor_2A_PWM_Pin;
 8003f9a:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8003f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fac:	2301      	movs	r3, #1
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4817      	ldr	r0, [pc, #92]	@ (8004014 <HAL_TIM_MspPostInit+0xb8>)
 8003fb8:	f003 fce8 	bl	800798c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003fbc:	e022      	b.n	8004004 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a15      	ldr	r2, [pc, #84]	@ (8004018 <HAL_TIM_MspPostInit+0xbc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d11d      	bne.n	8004004 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	4b10      	ldr	r3, [pc, #64]	@ (8004010 <HAL_TIM_MspPostInit+0xb4>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8004010 <HAL_TIM_MspPostInit+0xb4>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <HAL_TIM_MspPostInit+0xb4>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_2B_PWM_Pin;
 8003fe4:	2380      	movs	r3, #128	@ 0x80
 8003fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Motor_2B_PWM_GPIO_Port, &GPIO_InitStruct);
 8003ff8:	f107 0314 	add.w	r3, r7, #20
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4805      	ldr	r0, [pc, #20]	@ (8004014 <HAL_TIM_MspPostInit+0xb8>)
 8004000:	f003 fcc4 	bl	800798c <HAL_GPIO_Init>
}
 8004004:	bf00      	nop
 8004006:	3728      	adds	r7, #40	@ 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40010000 	.word	0x40010000
 8004010:	40023800 	.word	0x40023800
 8004014:	40020000 	.word	0x40020000
 8004018:	40000400 	.word	0x40000400

0800401c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08c      	sub	sp, #48	@ 0x30
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004024:	f107 031c 	add.w	r3, r7, #28
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a56      	ldr	r2, [pc, #344]	@ (8004194 <HAL_UART_MspInit+0x178>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d12d      	bne.n	800409a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	4b55      	ldr	r3, [pc, #340]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	4a54      	ldr	r2, [pc, #336]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 8004048:	f043 0310 	orr.w	r3, r3, #16
 800404c:	6453      	str	r3, [r2, #68]	@ 0x44
 800404e:	4b52      	ldr	r3, [pc, #328]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	4b4e      	ldr	r3, [pc, #312]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	4a4d      	ldr	r2, [pc, #308]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	6313      	str	r3, [r2, #48]	@ 0x30
 800406a:	4b4b      	ldr	r3, [pc, #300]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8004076:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800407a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407c:	2302      	movs	r3, #2
 800407e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004080:	2300      	movs	r3, #0
 8004082:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004084:	2303      	movs	r3, #3
 8004086:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004088:	2307      	movs	r3, #7
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408c:	f107 031c 	add.w	r3, r7, #28
 8004090:	4619      	mov	r1, r3
 8004092:	4842      	ldr	r0, [pc, #264]	@ (800419c <HAL_UART_MspInit+0x180>)
 8004094:	f003 fc7a 	bl	800798c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8004098:	e078      	b.n	800418c <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a40      	ldr	r2, [pc, #256]	@ (80041a0 <HAL_UART_MspInit+0x184>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d173      	bne.n	800418c <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 80040ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80040b4:	4b38      	ldr	r3, [pc, #224]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	4b34      	ldr	r3, [pc, #208]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 80040c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c8:	4a33      	ldr	r2, [pc, #204]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d0:	4b31      	ldr	r3, [pc, #196]	@ (8004198 <HAL_UART_MspInit+0x17c>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040dc:	2304      	movs	r3, #4
 80040de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e0:	2302      	movs	r3, #2
 80040e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e8:	2303      	movs	r3, #3
 80040ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040ec:	2307      	movs	r3, #7
 80040ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f0:	f107 031c 	add.w	r3, r7, #28
 80040f4:	4619      	mov	r1, r3
 80040f6:	4829      	ldr	r0, [pc, #164]	@ (800419c <HAL_UART_MspInit+0x180>)
 80040f8:	f003 fc48 	bl	800798c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_RX_SBUS_RX_Pin;
 80040fc:	2308      	movs	r3, #8
 80040fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004100:	2302      	movs	r3, #2
 8004102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004104:	2301      	movs	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004108:	2303      	movs	r3, #3
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800410c:	2307      	movs	r3, #7
 800410e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(USART2_RX_SBUS_RX_GPIO_Port, &GPIO_InitStruct);
 8004110:	f107 031c 	add.w	r3, r7, #28
 8004114:	4619      	mov	r1, r3
 8004116:	4821      	ldr	r0, [pc, #132]	@ (800419c <HAL_UART_MspInit+0x180>)
 8004118:	f003 fc38 	bl	800798c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800411c:	4b21      	ldr	r3, [pc, #132]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 800411e:	4a22      	ldr	r2, [pc, #136]	@ (80041a8 <HAL_UART_MspInit+0x18c>)
 8004120:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004122:	4b20      	ldr	r3, [pc, #128]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 8004124:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004128:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800412a:	4b1e      	ldr	r3, [pc, #120]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 800412c:	2200      	movs	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004130:	4b1c      	ldr	r3, [pc, #112]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 8004132:	2200      	movs	r2, #0
 8004134:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004136:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 8004138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800413c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800413e:	4b19      	ldr	r3, [pc, #100]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 8004140:	2200      	movs	r2, #0
 8004142:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004144:	4b17      	ldr	r3, [pc, #92]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 8004146:	2200      	movs	r2, #0
 8004148:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800414a:	4b16      	ldr	r3, [pc, #88]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 800414c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004150:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004152:	4b14      	ldr	r3, [pc, #80]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 8004154:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004158:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800415a:	4b12      	ldr	r3, [pc, #72]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 800415c:	2200      	movs	r2, #0
 800415e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004160:	4810      	ldr	r0, [pc, #64]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 8004162:	f003 f805 	bl	8007170 <HAL_DMA_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_UART_MspInit+0x154>
      Error_Handler();
 800416c:	f7ff fa4c 	bl	8003608 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a0c      	ldr	r2, [pc, #48]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 8004174:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004176:	4a0b      	ldr	r2, [pc, #44]	@ (80041a4 <HAL_UART_MspInit+0x188>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800417c:	2200      	movs	r2, #0
 800417e:	2105      	movs	r1, #5
 8004180:	2026      	movs	r0, #38	@ 0x26
 8004182:	f002 ffcb 	bl	800711c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004186:	2026      	movs	r0, #38	@ 0x26
 8004188:	f002 ffe4 	bl	8007154 <HAL_NVIC_EnableIRQ>
}
 800418c:	bf00      	nop
 800418e:	3730      	adds	r7, #48	@ 0x30
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40011000 	.word	0x40011000
 8004198:	40023800 	.word	0x40023800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40004400 	.word	0x40004400
 80041a4:	200003e0 	.word	0x200003e0
 80041a8:	40026088 	.word	0x40026088

080041ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08e      	sub	sp, #56	@ 0x38
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	4b34      	ldr	r3, [pc, #208]	@ (8004294 <HAL_InitTick+0xe8>)
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	4a33      	ldr	r2, [pc, #204]	@ (8004294 <HAL_InitTick+0xe8>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80041cc:	4b31      	ldr	r3, [pc, #196]	@ (8004294 <HAL_InitTick+0xe8>)
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041d8:	f107 0210 	add.w	r2, r7, #16
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f006 f94c 	bl	800a480 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80041ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80041f2:	f006 f91d 	bl	800a430 <HAL_RCC_GetPCLK1Freq>
 80041f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80041f8:	e004      	b.n	8004204 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80041fa:	f006 f919 	bl	800a430 <HAL_RCC_GetPCLK1Freq>
 80041fe:	4603      	mov	r3, r0
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004206:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <HAL_InitTick+0xec>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	0c9b      	lsrs	r3, r3, #18
 800420e:	3b01      	subs	r3, #1
 8004210:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004212:	4b22      	ldr	r3, [pc, #136]	@ (800429c <HAL_InitTick+0xf0>)
 8004214:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004218:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800421a:	4b20      	ldr	r3, [pc, #128]	@ (800429c <HAL_InitTick+0xf0>)
 800421c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004220:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004222:	4a1e      	ldr	r2, [pc, #120]	@ (800429c <HAL_InitTick+0xf0>)
 8004224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004226:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004228:	4b1c      	ldr	r3, [pc, #112]	@ (800429c <HAL_InitTick+0xf0>)
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800422e:	4b1b      	ldr	r3, [pc, #108]	@ (800429c <HAL_InitTick+0xf0>)
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004234:	4b19      	ldr	r3, [pc, #100]	@ (800429c <HAL_InitTick+0xf0>)
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800423a:	4818      	ldr	r0, [pc, #96]	@ (800429c <HAL_InitTick+0xf0>)
 800423c:	f006 f952 	bl	800a4e4 <HAL_TIM_Base_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004246:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11b      	bne.n	8004286 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800424e:	4813      	ldr	r0, [pc, #76]	@ (800429c <HAL_InitTick+0xf0>)
 8004250:	f006 f9a2 	bl	800a598 <HAL_TIM_Base_Start_IT>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800425a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800425e:	2b00      	cmp	r3, #0
 8004260:	d111      	bne.n	8004286 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004262:	201c      	movs	r0, #28
 8004264:	f002 ff76 	bl	8007154 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d808      	bhi.n	8004280 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800426e:	2200      	movs	r2, #0
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	201c      	movs	r0, #28
 8004274:	f002 ff52 	bl	800711c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004278:	4a09      	ldr	r2, [pc, #36]	@ (80042a0 <HAL_InitTick+0xf4>)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e002      	b.n	8004286 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004286:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800428a:	4618      	mov	r0, r3
 800428c:	3738      	adds	r7, #56	@ 0x38
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40023800 	.word	0x40023800
 8004298:	431bde83 	.word	0x431bde83
 800429c:	20000998 	.word	0x20000998
 80042a0:	20000070 	.word	0x20000070

080042a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <NMI_Handler+0x4>

080042ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042b0:	bf00      	nop
 80042b2:	e7fd      	b.n	80042b0 <HardFault_Handler+0x4>

080042b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042b8:	bf00      	nop
 80042ba:	e7fd      	b.n	80042b8 <MemManage_Handler+0x4>

080042bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <BusFault_Handler+0x4>

080042c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042c8:	bf00      	nop
 80042ca:	e7fd      	b.n	80042c8 <UsageFault_Handler+0x4>

080042cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_for_CLK___SNP00128_Pin);
 80042de:	2010      	movs	r0, #16
 80042e0:	f003 fe08 	bl	8007ef4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80042ec:	4802      	ldr	r0, [pc, #8]	@ (80042f8 <DMA1_Stream5_IRQHandler+0x10>)
 80042ee:	f003 f8d7 	bl	80074a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	200003e0 	.word	0x200003e0

080042fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_for_SW___SNP00128_Pin);
 8004300:	2040      	movs	r0, #64	@ 0x40
 8004302:	f003 fdf7 	bl	8007ef4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_for_BNO085_Pin);
 8004306:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800430a:	f003 fdf3 	bl	8007ef4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004318:	4802      	ldr	r0, [pc, #8]	@ (8004324 <TIM2_IRQHandler+0x10>)
 800431a:	f006 fa9f 	bl	800a85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000998 	.word	0x20000998

08004328 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800432c:	4802      	ldr	r0, [pc, #8]	@ (8004338 <USART2_IRQHandler+0x10>)
 800432e:	f007 f91f 	bl	800b570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000398 	.word	0x20000398

0800433c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return 1;
 8004340:	2301      	movs	r3, #1
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <_kill>:

int _kill(int pid, int sig)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004356:	f00c fc3d 	bl	8010bd4 <__errno>
 800435a:	4603      	mov	r3, r0
 800435c:	2216      	movs	r2, #22
 800435e:	601a      	str	r2, [r3, #0]
  return -1;
 8004360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <_exit>:

void _exit (int status)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004374:	f04f 31ff 	mov.w	r1, #4294967295
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ffe7 	bl	800434c <_kill>
  while (1) {}    /* Make sure we hang here */
 800437e:	bf00      	nop
 8004380:	e7fd      	b.n	800437e <_exit+0x12>

08004382 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e00a      	b.n	80043aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004394:	f3af 8000 	nop.w
 8004398:	4601      	mov	r1, r0
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	60ba      	str	r2, [r7, #8]
 80043a0:	b2ca      	uxtb	r2, r1
 80043a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	3301      	adds	r3, #1
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	dbf0      	blt.n	8004394 <_read+0x12>
  }

  return len;
 80043b2:	687b      	ldr	r3, [r7, #4]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_close>:
  }
  return len;
}

int _close(int file)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043e4:	605a      	str	r2, [r3, #4]
  return 0;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <_isatty>:

int _isatty(int file)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043fc:	2301      	movs	r3, #1
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800442c:	4a14      	ldr	r2, [pc, #80]	@ (8004480 <_sbrk+0x5c>)
 800442e:	4b15      	ldr	r3, [pc, #84]	@ (8004484 <_sbrk+0x60>)
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004438:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <_sbrk+0x64>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004440:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <_sbrk+0x64>)
 8004442:	4a12      	ldr	r2, [pc, #72]	@ (800448c <_sbrk+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004446:	4b10      	ldr	r3, [pc, #64]	@ (8004488 <_sbrk+0x64>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	429a      	cmp	r2, r3
 8004452:	d207      	bcs.n	8004464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004454:	f00c fbbe 	bl	8010bd4 <__errno>
 8004458:	4603      	mov	r3, r0
 800445a:	220c      	movs	r2, #12
 800445c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	e009      	b.n	8004478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004464:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <_sbrk+0x64>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800446a:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <_sbrk+0x64>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	4a05      	ldr	r2, [pc, #20]	@ (8004488 <_sbrk+0x64>)
 8004474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20020000 	.word	0x20020000
 8004484:	00000400 	.word	0x00000400
 8004488:	200009e0 	.word	0x200009e0
 800448c:	20005fe8 	.word	0x20005fe8

08004490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004494:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <SystemInit+0x20>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449a:	4a05      	ldr	r2, [pc, #20]	@ (80044b0 <SystemInit+0x20>)
 800449c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <TB6612FNG_Init>:
    {GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1, &htim1, TIM_CHANNEL_4},
    // MOTOR_2B: PB14, PB15, TIM3_CH2 (PA7)
    {GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_15, &htim3, TIM_CHANNEL_2}
};

void TB6612FNG_Init(void) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
    for (int i = 0; i < MOTOR_COUNT; i++) {
 80044ba:	2300      	movs	r3, #0
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	e042      	b.n	8004546 <TB6612FNG_Init+0x92>
        HAL_GPIO_WritePin(tb6612fng_channels[i].IN1_Port, tb6612fng_channels[i].IN1_Pin, GPIO_PIN_RESET);
 80044c0:	492a      	ldr	r1, [pc, #168]	@ (800456c <TB6612FNG_Init+0xb8>)
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4926      	ldr	r1, [pc, #152]	@ (800456c <TB6612FNG_Init+0xb8>)
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	3304      	adds	r3, #4
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	4619      	mov	r1, r3
 80044e6:	f003 fcd1 	bl	8007e8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(tb6612fng_channels[i].IN2_Port, tb6612fng_channels[i].IN2_Pin, GPIO_PIN_RESET);
 80044ea:	4920      	ldr	r1, [pc, #128]	@ (800456c <TB6612FNG_Init+0xb8>)
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	440b      	add	r3, r1
 80044f8:	3308      	adds	r3, #8
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	491b      	ldr	r1, [pc, #108]	@ (800456c <TB6612FNG_Init+0xb8>)
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	440b      	add	r3, r1
 800450a:	330c      	adds	r3, #12
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	4619      	mov	r1, r3
 8004512:	f003 fcbb 	bl	8007e8c <HAL_GPIO_WritePin>
        HAL_TIM_PWM_Start(tb6612fng_channels[i].PWM_Timer, tb6612fng_channels[i].PWM_Channel);
 8004516:	4915      	ldr	r1, [pc, #84]	@ (800456c <TB6612FNG_Init+0xb8>)
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	440b      	add	r3, r1
 8004524:	3310      	adds	r3, #16
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	4910      	ldr	r1, [pc, #64]	@ (800456c <TB6612FNG_Init+0xb8>)
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	3314      	adds	r3, #20
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4619      	mov	r1, r3
 800453c:	f006 f8de 	bl	800a6fc <HAL_TIM_PWM_Start>
    for (int i = 0; i < MOTOR_COUNT; i++) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3301      	adds	r3, #1
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b03      	cmp	r3, #3
 800454a:	ddb9      	ble.n	80044c0 <TB6612FNG_Init+0xc>
    }
    // Set STBY pins high to enable drivers (if used)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // TB6612 #1 STBY
 800454c:	2201      	movs	r2, #1
 800454e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004552:	4807      	ldr	r0, [pc, #28]	@ (8004570 <TB6612FNG_Init+0xbc>)
 8004554:	f003 fc9a 	bl	8007e8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // TB6612 #2 STBY
 8004558:	2201      	movs	r2, #1
 800455a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800455e:	4804      	ldr	r0, [pc, #16]	@ (8004570 <TB6612FNG_Init+0xbc>)
 8004560:	f003 fc94 	bl	8007e8c <HAL_GPIO_WritePin>
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000010 	.word	0x20000010
 8004570:	40020400 	.word	0x40020400

08004574 <TB6612FNG_Set>:

void TB6612FNG_Set(TB6612FNG_Channel* ch, TB6612FNG_Dir dir, uint16_t speed) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
 8004580:	4613      	mov	r3, r2
 8004582:	803b      	strh	r3, [r7, #0]
    if (!ch) return;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d07c      	beq.n	8004684 <TB6612FNG_Set+0x110>
    // Get timer period
    uint32_t period = ch->PWM_Timer->Instance->ARR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004592:	60fb      	str	r3, [r7, #12]
    if (speed > period) speed = period; // Clamp speed to period
 8004594:	883b      	ldrh	r3, [r7, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	429a      	cmp	r2, r3
 800459a:	d201      	bcs.n	80045a0 <TB6612FNG_Set+0x2c>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	803b      	strh	r3, [r7, #0]

    switch (dir) {
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d028      	beq.n	80045f8 <TB6612FNG_Set+0x84>
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	dc37      	bgt.n	800461a <TB6612FNG_Set+0xa6>
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d002      	beq.n	80045b4 <TB6612FNG_Set+0x40>
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d011      	beq.n	80045d6 <TB6612FNG_Set+0x62>
 80045b2:	e032      	b.n	800461a <TB6612FNG_Set+0xa6>
        case TB6612FNG_FORWARD:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_SET);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	889b      	ldrh	r3, [r3, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	4619      	mov	r1, r3
 80045c0:	f003 fc64 	bl	8007e8c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_RESET);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6898      	ldr	r0, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	899b      	ldrh	r3, [r3, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	4619      	mov	r1, r3
 80045d0:	f003 fc5c 	bl	8007e8c <HAL_GPIO_WritePin>
            break;
 80045d4:	e032      	b.n	800463c <TB6612FNG_Set+0xc8>
        case TB6612FNG_BACKWARD:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_RESET);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	889b      	ldrh	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	4619      	mov	r1, r3
 80045e2:	f003 fc53 	bl	8007e8c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_SET);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6898      	ldr	r0, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	899b      	ldrh	r3, [r3, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	4619      	mov	r1, r3
 80045f2:	f003 fc4b 	bl	8007e8c <HAL_GPIO_WritePin>
            break;
 80045f6:	e021      	b.n	800463c <TB6612FNG_Set+0xc8>
        case TB6612FNG_BRAKE:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_SET);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	889b      	ldrh	r3, [r3, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	4619      	mov	r1, r3
 8004604:	f003 fc42 	bl	8007e8c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_SET);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6898      	ldr	r0, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	899b      	ldrh	r3, [r3, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	4619      	mov	r1, r3
 8004614:	f003 fc3a 	bl	8007e8c <HAL_GPIO_WritePin>
            break;
 8004618:	e010      	b.n	800463c <TB6612FNG_Set+0xc8>
        case TB6612FNG_STOP:
        default:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_RESET);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	889b      	ldrh	r3, [r3, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	4619      	mov	r1, r3
 8004626:	f003 fc31 	bl	8007e8c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_RESET);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6898      	ldr	r0, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	899b      	ldrh	r3, [r3, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	4619      	mov	r1, r3
 8004636:	f003 fc29 	bl	8007e8c <HAL_GPIO_WritePin>
            break;
 800463a:	bf00      	nop
    }
    __HAL_TIM_SET_COMPARE(ch->PWM_Timer, ch->PWM_Channel, speed);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <TB6612FNG_Set+0xdc>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	883a      	ldrh	r2, [r7, #0]
 800464c:	635a      	str	r2, [r3, #52]	@ 0x34
 800464e:	e01a      	b.n	8004686 <TB6612FNG_Set+0x112>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d105      	bne.n	8004664 <TB6612FNG_Set+0xf0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	883b      	ldrh	r3, [r7, #0]
 8004660:	6393      	str	r3, [r2, #56]	@ 0x38
 8004662:	e010      	b.n	8004686 <TB6612FNG_Set+0x112>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d105      	bne.n	8004678 <TB6612FNG_Set+0x104>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	883b      	ldrh	r3, [r7, #0]
 8004674:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004676:	e006      	b.n	8004686 <TB6612FNG_Set+0x112>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	883b      	ldrh	r3, [r7, #0]
 8004680:	6413      	str	r3, [r2, #64]	@ 0x40
 8004682:	e000      	b.n	8004686 <TB6612FNG_Set+0x112>
    if (!ch) return;
 8004684:	bf00      	nop
}
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <tb6612fng_drive>:


void tb6612fng_drive(TB6612FNG_Motor motor, TB6612FNG_Dir dir, uint16_t speed) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
 8004696:	460b      	mov	r3, r1
 8004698:	71bb      	strb	r3, [r7, #6]
 800469a:	4613      	mov	r3, r2
 800469c:	80bb      	strh	r3, [r7, #4]
    if (motor < MOTOR_COUNT)
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d80b      	bhi.n	80046bc <tb6612fng_drive+0x30>
        TB6612FNG_Set(&tb6612fng_channels[motor], dir, speed);
 80046a4:	79fa      	ldrb	r2, [r7, #7]
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4a05      	ldr	r2, [pc, #20]	@ (80046c4 <tb6612fng_drive+0x38>)
 80046b0:	4413      	add	r3, r2
 80046b2:	88ba      	ldrh	r2, [r7, #4]
 80046b4:	79b9      	ldrb	r1, [r7, #6]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff ff5c 	bl	8004574 <TB6612FNG_Set>
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000010 	.word	0x20000010

080046c8 <tb6612fng_stop>:

void tb6612fng_stop(TB6612FNG_Motor motor) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	71fb      	strb	r3, [r7, #7]
    if (motor < MOTOR_COUNT)
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d80b      	bhi.n	80046f0 <tb6612fng_stop+0x28>
        TB6612FNG_Set(&tb6612fng_channels[motor], TB6612FNG_STOP, 0);
 80046d8:	79fa      	ldrb	r2, [r7, #7]
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4a05      	ldr	r2, [pc, #20]	@ (80046f8 <tb6612fng_stop+0x30>)
 80046e4:	4413      	add	r3, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff ff42 	bl	8004574 <TB6612FNG_Set>
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20000010 	.word	0x20000010

080046fc <tb6612fng_brake>:

void tb6612fng_brake(TB6612FNG_Motor motor) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
    if (motor < MOTOR_COUNT)
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d80b      	bhi.n	8004724 <tb6612fng_brake+0x28>
        TB6612FNG_Set(&tb6612fng_channels[motor], TB6612FNG_BRAKE, 0);
 800470c:	79fa      	ldrb	r2, [r7, #7]
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4a05      	ldr	r2, [pc, #20]	@ (800472c <tb6612fng_brake+0x30>)
 8004718:	4413      	add	r3, r2
 800471a:	2200      	movs	r2, #0
 800471c:	2103      	movs	r1, #3
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ff28 	bl	8004574 <TB6612FNG_Set>
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000010 	.word	0x20000010

08004730 <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <opStart+0x18>
 8004742:	f06f 0302 	mvn.w	r3, #2
 8004746:	e014      	b.n	8004772 <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
 800475c:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	61da      	str	r2, [r3, #28]
    }

    return rc;
 8004770:	68fb      	ldr	r3, [r7, #12]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	4613      	mov	r3, r2
 8004786:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	88fa      	ldrh	r2, [r7, #6]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	4798      	blx	r3
    }
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00f      	beq.n	8004804 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 80047f8:	e004      	b.n	8004804 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 80047fa:	f04f 31ff 	mov.w	r1, #4294967295
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff ffd6 	bl	80047b0 <opCompleted>
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e00f      	b.n	800483c <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 800481c:	4a0c      	ldr	r2, [pc, #48]	@ (8004850 <getReportLen+0x44>)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004824:	79fa      	ldrb	r2, [r7, #7]
 8004826:	429a      	cmp	r2, r3
 8004828:	d105      	bne.n	8004836 <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 800482a:	4a09      	ldr	r2, [pc, #36]	@ (8004850 <getReportLen+0x44>)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	e006      	b.n	8004844 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b2f      	cmp	r3, #47	@ 0x2f
 8004840:	d9ec      	bls.n	800481c <getReportLen+0x10>
        }
    }

    return 0;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	08014088 	.word	0x08014088

08004854 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	@ 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint32_t count = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 8094 	bne.w	80049a4 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        return;
 800488a:	e090      	b.n	80049ae <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	3301      	adds	r3, #1
 8004890:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 8004892:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	4413      	add	r3, r2
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff ffb4 	bl	800480c <getReportLen>
 80048a4:	4603      	mov	r3, r0
 80048a6:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 80048a8:	7dbb      	ldrb	r3, [r7, #22]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
            return;
 80048bc:	e077      	b.n	80049ae <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	2bf1      	cmp	r3, #241	@ 0xf1
 80048c2:	d107      	bne.n	80048d4 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 80048c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	4413      	add	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	789b      	ldrb	r3, [r3, #2]
 80048d0:	2b84      	cmp	r3, #132	@ 0x84
 80048d2:	e059      	b.n	8004988 <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2bfc      	cmp	r3, #252	@ 0xfc
 80048d8:	d156      	bne.n	8004988 <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d052      	beq.n	8004988 <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 80048e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	4413      	add	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 80048ea:	4b32      	ldr	r3, [pc, #200]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 80048ec:	2202      	movs	r2, #2
 80048ee:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	785a      	ldrb	r2, [r3, #1]
 80048f4:	4b2f      	ldr	r3, [pc, #188]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 80048f6:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	789b      	ldrb	r3, [r3, #2]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 800490a:	4b2a      	ldr	r3, [pc, #168]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 800490c:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	789b      	ldrb	r3, [r3, #2]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8004920:	4b24      	ldr	r3, [pc, #144]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 8004922:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	789b      	ldrb	r3, [r3, #2]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 8004936:	4b1f      	ldr	r3, [pc, #124]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 8004938:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	789b      	ldrb	r3, [r3, #2]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 800494c:	4b19      	ldr	r3, [pc, #100]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 800494e:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004956:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 8004958:	4b16      	ldr	r3, [pc, #88]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 800495a:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 8004962:	4a14      	ldr	r2, [pc, #80]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 8004964:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 800496c:	4a11      	ldr	r2, [pc, #68]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 800496e:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 8004976:	4a0f      	ldr	r2, [pc, #60]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 8004978:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004982:	490c      	ldr	r1, [pc, #48]	@ (80049b4 <sensorhubControlHdlr+0x160>)
 8004984:	4610      	mov	r0, r2
 8004986:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 8004988:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4413      	add	r3, r2
 800498e:	7dba      	ldrb	r2, [r7, #22]
 8004990:	b292      	uxth	r2, r2
 8004992:	4619      	mov	r1, r3
 8004994:	69f8      	ldr	r0, [r7, #28]
 8004996:	f7ff fef0 	bl	800477a <opRx>
            cursor += reportLen;
 800499a:	7dbb      	ldrb	r3, [r7, #22]
 800499c:	b29a      	uxth	r2, r3
 800499e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049a0:	4413      	add	r3, r2
 80049a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (cursor < len) {
 80049a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f4ff af6f 	bcc.w	800488c <sensorhubControlHdlr+0x38>
        }
    }
}
 80049ae:	3728      	adds	r7, #40	@ 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000b5c 	.word	0x20000b5c

080049b8 <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	4610      	mov	r0, r2
 80049d6:	4798      	blx	r3
 80049d8:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 80049da:	6839      	ldr	r1, [r7, #0]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff fea7 	bl	8004730 <opStart>
 80049e2:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <opProcess+0x36>
        return status;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	e034      	b.n	8004a58 <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 80049f2:	e015      	b.n	8004a20 <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004a02:	621a      	str	r2, [r3, #32]
            break;
 8004a04:	e01b      	b.n	8004a3e <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f002 fa17 	bl	8006e3e <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4798      	blx	r3
 8004a1e:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0e1      	beq.n	80049f4 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad2      	subs	r2, r2, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3da      	bcc.n	80049f4 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f06f 0205 	mvn.w	r2, #5
 8004a52:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 8004a60:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004a64:	b087      	sub	sp, #28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 8004a70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae0 <touSTimestamp+0x80>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d204      	bcs.n	8004a84 <touSTimestamp+0x24>
        rollovers++;
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae4 <touSTimestamp+0x84>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	4a18      	ldr	r2, [pc, #96]	@ (8004ae4 <touSTimestamp+0x84>)
 8004a82:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 8004a84:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <touSTimestamp+0x80>)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 8004a8a:	4b16      	ldr	r3, [pc, #88]	@ (8004ae4 <touSTimestamp+0x84>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	469a      	mov	sl, r3
 8004a92:	4693      	mov	fp, r2
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	4653      	mov	r3, sl
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	2264      	movs	r2, #100	@ 0x64
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	461c      	mov	r4, r3
 8004aba:	4615      	mov	r5, r2
 8004abc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ac0:	eb12 0804 	adds.w	r8, r2, r4
 8004ac4:	eb43 0905 	adc.w	r9, r3, r5
 8004ac8:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8004acc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000b78 	.word	0x20000b78
 8004ae4:	20000b7c 	.word	0x20000b7c

08004ae8 <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004ae8:	b5b0      	push	{r4, r5, r7, lr}
 8004aea:	b0a0      	sub	sp, #128	@ 0x80
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

    int32_t referenceDelta = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (cursor < len) {
 8004b02:	e098      	b.n	8004c36 <sensorhubInputHdlr+0x14e>
        // Get next report id
        uint8_t reportId = payload[cursor];
 8004b04:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8004b12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fe78 	bl	800480c <getReportLen>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        if (reportLen == 0) {
 8004b22:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8004b38:	e083      	b.n	8004c42 <sensorhubInputHdlr+0x15a>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 8004b3a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004b3e:	2bfb      	cmp	r3, #251	@ 0xfb
 8004b40:	d10a      	bne.n	8004b58 <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8004b42:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	667b      	str	r3, [r7, #100]	@ 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 8004b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b4e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004b52:	425b      	negs	r3, r3
 8004b54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b56:	e066      	b.n	8004c26 <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 8004b58:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004b5c:	2bfa      	cmp	r3, #250	@ 0xfa
 8004b5e:	d10b      	bne.n	8004b78 <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 8004b60:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	4413      	add	r3, r2
 8004b68:	66bb      	str	r3, [r7, #104]	@ 0x68

                referenceDelta += rpt->timebase;
 8004b6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b6c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004b70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004b72:	4413      	add	r3, r2
 8004b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b76:	e056      	b.n	8004c26 <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 8004b78:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004b7c:	2bef      	cmp	r3, #239	@ 0xef
 8004b7e:	d10b      	bne.n	8004b98 <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 8004b80:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	4413      	add	r3, r2
 8004b88:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8004b8c:	b292      	uxth	r2, r2
 8004b8e:	4619      	mov	r1, r3
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7ff fdf2 	bl	800477a <opRx>
 8004b96:	e046      	b.n	8004c26 <sensorhubInputHdlr+0x13e>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 8004b98:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	673b      	str	r3, [r7, #112]	@ 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 8004ba2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	019b      	lsls	r3, r3, #6
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004bb4:	3203      	adds	r2, #3
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8004bbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004bc6:	6838      	ldr	r0, [r7, #0]
 8004bc8:	f7ff ff4a 	bl	8004a60 <touSTimestamp>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8004bd4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8004bd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bda:	4413      	add	r3, r2
 8004bdc:	2264      	movs	r2, #100	@ 0x64
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	17da      	asrs	r2, r3, #31
 8004be4:	461c      	mov	r4, r3
 8004be6:	4615      	mov	r5, r2
 8004be8:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8004bec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004bf0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                memcpy(event.report, pReport, reportLen);
 8004bf4:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8004bf8:	f107 0310 	add.w	r3, r7, #16
 8004bfc:	3312      	adds	r3, #18
 8004bfe:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8004c00:	4618      	mov	r0, r3
 8004c02:	f00c f814 	bl	8010c2e <memcpy>
                event.len = reportLen;
 8004c06:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004c0a:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <sensorhubInputHdlr+0x13e>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004c1e:	f107 0110 	add.w	r1, r7, #16
 8004c22:	4610      	mov	r0, r2
 8004c24:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 8004c26:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004c30:	4413      	add	r3, r2
 8004c32:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    while (cursor < len) {
 8004c36:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	f4ff af61 	bcc.w	8004b04 <sensorhubInputHdlr+0x1c>
        }
    }
}
 8004c42:	3780      	adds	r7, #128	@ 0x80
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bdb0      	pop	{r4, r5, r7, pc}

08004c48 <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	6978      	ldr	r0, [r7, #20]
 8004c64:	f7ff ff40 	bl	8004ae8 <sensorhubInputHdlr>
}
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	6978      	ldr	r0, [r7, #20]
 8004c8c:	f7ff ff2c 	bl	8004ae8 <sensorhubInputHdlr>
}
 8004c90:	bf00      	nop
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004c98:	b5b0      	push	{r4, r5, r7, lr}
 8004c9a:	b09c      	sub	sp, #112	@ 0x70
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	66bb      	str	r3, [r7, #104]	@ 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 8004cb2:	232a      	movs	r3, #42	@ 0x2a
 8004cb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    uint8_t reportLen = getReportLen(reportId);
 8004cb8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fda5 	bl	800480c <getReportLen>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    while (cursor < len) {
 8004cc8:	e02d      	b.n	8004d26 <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	461c      	mov	r4, r3
 8004cd0:	4615      	mov	r5, r2
 8004cd2:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8004cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004cda:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        memcpy(event.report, payload+cursor, reportLen);
 8004cde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	18d1      	adds	r1, r2, r3
 8004ce6:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004cea:	f107 0310 	add.w	r3, r7, #16
 8004cee:	3312      	adds	r3, #18
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f00b ff9c 	bl	8010c2e <memcpy>
        event.len = reportLen;
 8004cf6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004cfa:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 8004cfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8004d06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d0c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d0e:	f107 0110 	add.w	r1, r7, #16
 8004d12:	4610      	mov	r0, r2
 8004d14:	4798      	blx	r3
        }

        cursor += reportLen;
 8004d16:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d20:	4413      	add	r3, r2
 8004d22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    while (cursor < len) {
 8004d26:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d3cc      	bcc.n	8004cca <sensorhubInputGyroRvHdlr+0x32>
    }
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3770      	adds	r7, #112	@ 0x70
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d3c <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d007      	beq.n	8004d66 <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        return;
 8004d64:	e021      	b.n	8004daa <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d114      	bne.n	8004d98 <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2201      	movs	r2, #1
 8004d72:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 8004d74:	6978      	ldr	r0, [r7, #20]
 8004d76:	f7ff fd2d 	bl	80047d4 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <executableDeviceHdlr+0x74>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00f      	beq.n	8004da8 <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d90:	4907      	ldr	r1, [pc, #28]	@ (8004db0 <executableDeviceHdlr+0x74>)
 8004d92:	4610      	mov	r0, r2
 8004d94:	4798      	blx	r3
            }
            break;
 8004d96:	e007      	b.n	8004da8 <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            break;
 8004da6:	e000      	b.n	8004daa <executableDeviceHdlr+0x6e>
            break;
 8004da8:	bf00      	nop
    }
}
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000b5c 	.word	0x20000b5c

08004db4 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6858      	ldr	r0, [r3, #4]
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	2102      	movs	r1, #2
 8004dcc:	f002 f806 	bl	8006ddc <shtp_send>
 8004dd0:	4603      	mov	r3, r0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b08a      	sub	sp, #40	@ 0x28
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <setSensorConfigStart+0x28>
 8004df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dfa:	f043 0302 	orr.w	r3, r3, #2
 8004dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <setSensorConfigStart+0x3c>
 8004e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	789b      	ldrb	r3, [r3, #2]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <setSensorConfigStart+0x50>
 8004e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	78db      	ldrb	r3, [r3, #3]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <setSensorConfigStart+0x64>
 8004e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e36:	f043 0308 	orr.w	r3, r3, #8
 8004e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <setSensorConfigStart+0x78>
 8004e46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e4a:	f043 0310 	orr.w	r3, r3, #16
 8004e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    memset(&req, 0, sizeof(req));
 8004e52:	f107 0308 	add.w	r3, r7, #8
 8004e56:	2211      	movs	r2, #17
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f00b fdf6 	bl	8010a4c <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 8004e60:	23fd      	movs	r3, #253	@ 0xfd
 8004e62:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e6a:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 8004e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e70:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	88db      	ldrh	r3, [r3, #6]
 8004e76:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8004e92:	f107 0308 	add.w	r3, r7, #8
 8004e96:	2211      	movs	r2, #17
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff ff8a 	bl	8004db4 <sendCtrl>
 8004ea0:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 8004ea2:	69f9      	ldr	r1, [r7, #28]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff fc83 	bl	80047b0 <opCompleted>

    return rc;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3728      	adds	r7, #40	@ 0x28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <sendCmd>:

// ------------------------------------------------------------------------
// Support for sending commands

static int sendCmd(sh2_t *pSh2, uint8_t cmd, uint8_t p[COMMAND_PARAMS])
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	@ 0x28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	72fb      	strb	r3, [r7, #11]
    int rc = SH2_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
    CommandReq_t req;

    // Clear request structure
    memset(&req, 0, sizeof(req));
 8004ec6:	f107 0314 	add.w	r3, r7, #20
 8004eca:	220c      	movs	r2, #12
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f00b fdbc 	bl	8010a4c <memset>
    
    // Create a command sequence number for this command
    pSh2->lastCmdId = cmd;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	7afa      	ldrb	r2, [r7, #11]
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    pSh2->cmdSeq = pSh2->nextCmdSeq++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	b2d1      	uxtb	r1, r2
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	f882 1036 	strb.w	r1, [r2, #54]	@ 0x36
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
    
    // set up request to issue
    req.reportId = SENSORHUB_COMMAND_REQ;
 8004ef2:	23f2      	movs	r3, #242	@ 0xf2
 8004ef4:	753b      	strb	r3, [r7, #20]
    req.seq = pSh2->cmdSeq;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004efc:	757b      	strb	r3, [r7, #21]
    req.command = cmd;
 8004efe:	7afb      	ldrb	r3, [r7, #11]
 8004f00:	75bb      	strb	r3, [r7, #22]
    for (int n = 0; n < COMMAND_PARAMS; n++) {
 8004f02:	2300      	movs	r3, #0
 8004f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f06:	e00c      	b.n	8004f22 <sendCmd+0x6e>
        req.p[n] = p[n];
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	7819      	ldrb	r1, [r3, #0]
 8004f10:	f107 0217 	add.w	r2, r7, #23
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	4413      	add	r3, r2
 8004f18:	460a      	mov	r2, r1
 8004f1a:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < COMMAND_PARAMS; n++) {
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	3301      	adds	r3, #1
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	ddef      	ble.n	8004f08 <sendCmd+0x54>
    }
    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8004f28:	f107 0314 	add.w	r3, r7, #20
 8004f2c:	220c      	movs	r2, #12
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff ff3f 	bl	8004db4 <sendCtrl>
 8004f36:	6238      	str	r0, [r7, #32]
    
    return rc;
 8004f38:	6a3b      	ldr	r3, [r7, #32]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3728      	adds	r7, #40	@ 0x28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <sendCmdStart>:

// ------------------------------------------------------------------------
// Generic Send Command

static int sendCmdStart(sh2_t *pSh2)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
    int status = sendCmd(pSh2, pSh2->opData.sendCmd.req.command,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
                     pSh2->opData.sendCmd.req.p);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3327      	adds	r3, #39	@ 0x27
    int status = sendCmd(pSh2, pSh2->opData.sendCmd.req.command,
 8004f54:	461a      	mov	r2, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ffac 	bl	8004eb4 <sendCmd>
 8004f5c:	60f8      	str	r0, [r7, #12]

    opCompleted(pSh2, status);
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fc25 	bl	80047b0 <opCompleted>

    return status;
 8004f66:	68fb      	ldr	r3, [r7, #12]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <shtpEventCallback+0x3c>)
 8004f7e:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8004f80:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb0 <shtpEventCallback+0x40>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 8004f86:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb0 <shtpEventCallback+0x40>)
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d006      	beq.n	8004fa2 <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f9c:	4904      	ldr	r1, [pc, #16]	@ (8004fb0 <shtpEventCallback+0x40>)
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	4798      	blx	r3
    }
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	200009e4 	.word	0x200009e4
 8004fb0:	20000b5c 	.word	0x20000b5c

08004fb4 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 8004fc0:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <sh2_open+0x114>)
 8004fc2:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <sh2_open+0x1c>
 8004fca:	f06f 0301 	mvn.w	r3, #1
 8004fce:	e077      	b.n	80050c0 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8004fd0:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	69b8      	ldr	r0, [r7, #24]
 8004fd8:	f00b fd38 	bl	8010a4c <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	639a      	str	r2, [r3, #56]	@ 0x38
    pSh2->eventCookie = eventCookie;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pSh2->sensorCallback = 0;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = 0;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	645a      	str	r2, [r3, #68]	@ 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f001 fe71 	bl	8006cec <shtp_open>
 800500a:	4602      	mov	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 8005018:	f04f 33ff 	mov.w	r3, #4294967295
 800501c:	e050      	b.n	80050c0 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4929      	ldr	r1, [pc, #164]	@ (80050cc <sh2_open+0x118>)
 8005026:	4618      	mov	r0, r3
 8005028:	f001 fe94 	bl	8006d54 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	6858      	ldr	r0, [r3, #4]
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	4a27      	ldr	r2, [pc, #156]	@ (80050d0 <sh2_open+0x11c>)
 8005034:	2102      	movs	r1, #2
 8005036:	f001 fea1 	bl	8006d7c <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	6858      	ldr	r0, [r3, #4]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	4a24      	ldr	r2, [pc, #144]	@ (80050d4 <sh2_open+0x120>)
 8005042:	2103      	movs	r1, #3
 8005044:	f001 fe9a 	bl	8006d7c <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	6858      	ldr	r0, [r3, #4]
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	4a22      	ldr	r2, [pc, #136]	@ (80050d8 <sh2_open+0x124>)
 8005050:	2104      	movs	r1, #4
 8005052:	f001 fe93 	bl	8006d7c <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	6858      	ldr	r0, [r3, #4]
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	4a1f      	ldr	r2, [pc, #124]	@ (80050dc <sh2_open+0x128>)
 800505e:	2105      	movs	r1, #5
 8005060:	f001 fe8c 	bl	8006d7c <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	6858      	ldr	r0, [r3, #4]
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	4a1d      	ldr	r2, [pc, #116]	@ (80050e0 <sh2_open+0x12c>)
 800506c:	2101      	movs	r1, #1
 800506e:	f001 fe85 	bl	8006d7c <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	4610      	mov	r0, r2
 800507e:	4798      	blx	r3
 8005080:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8005086:	e00c      	b.n	80050a2 <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4618      	mov	r0, r3
 800508e:	f001 fed6 	bl	8006e3e <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	4610      	mov	r0, r2
 800509e:	4798      	blx	r3
 80050a0:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	4a0e      	ldr	r2, [pc, #56]	@ (80050e4 <sh2_open+0x130>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d807      	bhi.n	80050be <sh2_open+0x10a>
           (!pSh2->resetComplete))
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	7a1b      	ldrb	r3, [r3, #8]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f083 0301 	eor.w	r3, r3, #1
 80050b8:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e4      	bne.n	8005088 <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	200009e4 	.word	0x200009e4
 80050cc:	08004f71 	.word	0x08004f71
 80050d0:	08004855 	.word	0x08004855
 80050d4:	08004c49 	.word	0x08004c49
 80050d8:	08004c71 	.word	0x08004c71
 80050dc:	08004c99 	.word	0x08004c99
 80050e0:	08004d3d 	.word	0x08004d3d
 80050e4:	00030d3f 	.word	0x00030d3f

080050e8 <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 80050ee:	4b07      	ldr	r3, [pc, #28]	@ (800510c <sh2_service+0x24>)
 80050f0:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d004      	beq.n	8005104 <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fe9d 	bl	8006e3e <shtp_service>
    }
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	200009e4 	.word	0x200009e4

08005110 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 800511a:	4b07      	ldr	r3, [pc, #28]	@ (8005138 <sh2_setSensorCallback+0x28>)
 800511c:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = cookie;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	645a      	str	r2, [r3, #68]	@ 0x44

    return SH2_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	200009e4 	.word	0x200009e4

0800513c <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 8005148:	4b0f      	ldr	r3, [pc, #60]	@ (8005188 <sh2_setSensorConfig+0x4c>)
 800514a:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	e012      	b.n	8005180 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3324      	adds	r3, #36	@ 0x24
 800515e:	2210      	movs	r2, #16
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f00b fc72 	bl	8010a4c <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	79fa      	ldrb	r2, [r7, #7]
 800516c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	625a      	str	r2, [r3, #36]	@ 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 8005176:	4905      	ldr	r1, [pc, #20]	@ (800518c <sh2_setSensorConfig+0x50>)
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff fc1d 	bl	80049b8 <opProcess>
 800517e:	4603      	mov	r3, r0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	200009e4 	.word	0x200009e4
 800518c:	080140e8 	.word	0x080140e8

08005190 <sh2_clearTare>:
 * @brief Clears the previously applied tare operation.
 *
 * @return SH2_OK \n");
 */
int sh2_clearTare(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 8005196:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <sh2_clearTare+0x48>)
 8005198:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp == 0) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d102      	bne.n	80051a8 <sh2_clearTare+0x18>
        return SH2_ERR;  // sh2 API isn't open
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	e013      	b.n	80051d0 <sh2_clearTare+0x40>
    }

    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3324      	adds	r3, #36	@ 0x24
 80051ac:	2210      	movs	r2, #16
 80051ae:	2100      	movs	r1, #0
 80051b0:	4618      	mov	r0, r3
 80051b2:	f00b fc4b 	bl	8010a4c <memset>
    
    
    pSh2->opData.sendCmd.req.command = SH2_CMD_TARE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2203      	movs	r2, #3
 80051ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pSh2->opData.sendCmd.req.p[0] = SH2_TARE_SET_REORIENTATION;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

    return opProcess(pSh2, &sendCmdOp);
 80051c6:	4905      	ldr	r1, [pc, #20]	@ (80051dc <sh2_clearTare+0x4c>)
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff fbf5 	bl	80049b8 <opProcess>
 80051ce:	4603      	mov	r3, r0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	200009e4 	.word	0x200009e4
 80051dc:	080140f8 	.word	0x080140f8

080051e0 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	7c5a      	ldrb	r2, [r3, #17]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b2a      	cmp	r3, #42	@ 0x2a
 8005208:	d00b      	beq.n	8005222 <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	7cda      	ldrb	r2, [r3, #19]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	7d1b      	ldrb	r3, [r3, #20]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	b2da      	uxtb	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	709a      	strb	r2, [r3, #2]
 8005220:	e005      	b.n	800522e <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	3b01      	subs	r3, #1
 8005234:	2b2d      	cmp	r3, #45	@ 0x2d
 8005236:	f200 8155 	bhi.w	80054e4 <sh2_decodeSensorEvent+0x304>
 800523a:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <sh2_decodeSensorEvent+0x60>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005305 	.word	0x08005305
 8005244:	08005335 	.word	0x08005335
 8005248:	08005359 	.word	0x08005359
 800524c:	08005311 	.word	0x08005311
 8005250:	08005371 	.word	0x08005371
 8005254:	0800531d 	.word	0x0800531d
 8005258:	08005341 	.word	0x08005341
 800525c:	0800537d 	.word	0x0800537d
 8005260:	08005389 	.word	0x08005389
 8005264:	08005395 	.word	0x08005395
 8005268:	080053a1 	.word	0x080053a1
 800526c:	080053ad 	.word	0x080053ad
 8005270:	080053b9 	.word	0x080053b9
 8005274:	080053c5 	.word	0x080053c5
 8005278:	08005365 	.word	0x08005365
 800527c:	080053dd 	.word	0x080053dd
 8005280:	080053f5 	.word	0x080053f5
 8005284:	08005401 	.word	0x08005401
 8005288:	0800540d 	.word	0x0800540d
 800528c:	080052f9 	.word	0x080052f9
 8005290:	08005329 	.word	0x08005329
 8005294:	0800534d 	.word	0x0800534d
 8005298:	080053d1 	.word	0x080053d1
 800529c:	080053e9 	.word	0x080053e9
 80052a0:	08005419 	.word	0x08005419
 80052a4:	08005425 	.word	0x08005425
 80052a8:	08005431 	.word	0x08005431
 80052ac:	0800543d 	.word	0x0800543d
 80052b0:	080054e5 	.word	0x080054e5
 80052b4:	08005449 	.word	0x08005449
 80052b8:	08005455 	.word	0x08005455
 80052bc:	08005461 	.word	0x08005461
 80052c0:	0800546d 	.word	0x0800546d
 80052c4:	08005479 	.word	0x08005479
 80052c8:	08005485 	.word	0x08005485
 80052cc:	080054e5 	.word	0x080054e5
 80052d0:	080054e5 	.word	0x080054e5
 80052d4:	080054e5 	.word	0x080054e5
 80052d8:	080054e5 	.word	0x080054e5
 80052dc:	08005491 	.word	0x08005491
 80052e0:	0800549d 	.word	0x0800549d
 80052e4:	080054a9 	.word	0x080054a9
 80052e8:	080054b5 	.word	0x080054b5
 80052ec:	080054c1 	.word	0x080054c1
 80052f0:	080054cd 	.word	0x080054cd
 80052f4:	080054d9 	.word	0x080054d9
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f8fc 	bl	80054f8 <decodeRawAccelerometer>
 8005300:	60f8      	str	r0, [r7, #12]
            break;
 8005302:	e0f3      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f924 	bl	8005554 <decodeAccelerometer>
 800530c:	60f8      	str	r0, [r7, #12]
            break;
 800530e:	e0ed      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f95e 	bl	80055d4 <decodeLinearAcceleration>
 8005318:	60f8      	str	r0, [r7, #12]
            break;
 800531a:	e0e7      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f998 	bl	8005654 <decodeGravity>
 8005324:	60f8      	str	r0, [r7, #12]
            break;
 8005326:	e0e1      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9d2 	bl	80056d4 <decodeRawGyroscope>
 8005330:	60f8      	str	r0, [r7, #12]
            break;
 8005332:	e0db      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa04 	bl	8005744 <decodeGyroscopeCalibrated>
 800533c:	60f8      	str	r0, [r7, #12]
            break;
 800533e:	e0d5      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fa3e 	bl	80057c4 <decodeGyroscopeUncal>
 8005348:	60f8      	str	r0, [r7, #12]
            break;
 800534a:	e0cf      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 faaa 	bl	80058a8 <decodeRawMagnetometer>
 8005354:	60f8      	str	r0, [r7, #12]
            break;
 8005356:	e0c9      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fad2 	bl	8005904 <decodeMagneticFieldCalibrated>
 8005360:	60f8      	str	r0, [r7, #12]
            break;
 8005362:	e0c3      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fb0c 	bl	8005984 <decodeMagneticFieldUncal>
 800536c:	60f8      	str	r0, [r7, #12]
            break;
 800536e:	e0bd      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fb78 	bl	8005a68 <decodeRotationVector>
 8005378:	60f8      	str	r0, [r7, #12]
            break;
 800537a:	e0b7      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fbd6 	bl	8005b30 <decodeGameRotationVector>
 8005384:	60f8      	str	r0, [r7, #12]
            break;
 8005386:	e0b1      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 8005388:	6839      	ldr	r1, [r7, #0]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fc20 	bl	8005bd0 <decodeGeomagneticRotationVector>
 8005390:	60f8      	str	r0, [r7, #12]
            break;
 8005392:	e0ab      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fc7e 	bl	8005c98 <decodePressure>
 800539c:	60f8      	str	r0, [r7, #12]
            break;
 800539e:	e0a5      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fc94 	bl	8005cd0 <decodeAmbientLight>
 80053a8:	60f8      	str	r0, [r7, #12]
            break;
 80053aa:	e09f      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fcaa 	bl	8005d08 <decodeHumidity>
 80053b4:	60f8      	str	r0, [r7, #12]
            break;
 80053b6:	e099      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fcc2 	bl	8005d44 <decodeProximity>
 80053c0:	60f8      	str	r0, [r7, #12]
            break;
 80053c2:	e093      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fcda 	bl	8005d80 <decodeTemperature>
 80053cc:	60f8      	str	r0, [r7, #12]
            break;
 80053ce:	e08d      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fcf2 	bl	8005dbc <decodeReserved>
 80053d8:	60f8      	str	r0, [r7, #12]
            break;
 80053da:	e087      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fd0a 	bl	8005df8 <decodeTapDetector>
 80053e4:	60f8      	str	r0, [r7, #12]
            break;
 80053e6:	e081      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fd14 	bl	8005e18 <decodeStepDetector>
 80053f0:	60f8      	str	r0, [r7, #12]
            break;
 80053f2:	e07b      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fd20 	bl	8005e3c <decodeStepCounter>
 80053fc:	60f8      	str	r0, [r7, #12]
            break;
 80053fe:	e075      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fd35 	bl	8005e72 <decodeSignificantMotion>
 8005408:	60f8      	str	r0, [r7, #12]
            break;
 800540a:	e06f      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fd42 	bl	8005e98 <decodeStabilityClassifier>
 8005414:	60f8      	str	r0, [r7, #12]
            break;
 8005416:	e069      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fd4c 	bl	8005eb8 <decodeShakeDetector>
 8005420:	60f8      	str	r0, [r7, #12]
            break;
 8005422:	e063      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fd59 	bl	8005ede <decodeFlipDetector>
 800542c:	60f8      	str	r0, [r7, #12]
            break;
 800542e:	e05d      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fd66 	bl	8005f04 <decodePickupDetector>
 8005438:	60f8      	str	r0, [r7, #12]
            break;
 800543a:	e057      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fd73 	bl	8005f2a <decodeStabilityDetector>
 8005444:	60f8      	str	r0, [r7, #12]
            break;
 8005446:	e051      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fd80 	bl	8005f50 <decodePersonalActivityClassifier>
 8005450:	60f8      	str	r0, [r7, #12]
            break;
 8005452:	e04b      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8005454:	6839      	ldr	r1, [r7, #0]
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fdad 	bl	8005fb6 <decodeSleepDetector>
 800545c:	60f8      	str	r0, [r7, #12]
            break;
 800545e:	e045      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fdb7 	bl	8005fd6 <decodeTiltDetector>
 8005468:	60f8      	str	r0, [r7, #12]
            break;
 800546a:	e03f      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fdc4 	bl	8005ffc <decodePocketDetector>
 8005474:	60f8      	str	r0, [r7, #12]
            break;
 8005476:	e039      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fdd1 	bl	8006022 <decodeCircleDetector>
 8005480:	60f8      	str	r0, [r7, #12]
            break;
 8005482:	e033      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fdde 	bl	8006048 <decodeHeartRateMonitor>
 800548c:	60f8      	str	r0, [r7, #12]
            break;
 800548e:	e02d      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fdec 	bl	8006070 <decodeArvrStabilizedRV>
 8005498:	60f8      	str	r0, [r7, #12]
            break;
 800549a:	e027      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fe4a 	bl	8006138 <decodeArvrStabilizedGRV>
 80054a4:	60f8      	str	r0, [r7, #12]
            break;
 80054a6:	e021      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fe94 	bl	80061d8 <decodeGyroIntegratedRV>
 80054b0:	60f8      	str	r0, [r7, #12]
            break;
 80054b2:	e01b      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 ff14 	bl	80062e4 <decodeIZroRequest>
 80054bc:	60f8      	str	r0, [r7, #12]
            break;
 80054be:	e015      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 ff22 	bl	800630c <decodeRawOptFlow>
 80054c8:	60f8      	str	r0, [r7, #12]
            break;
 80054ca:	e00f      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 ff9a 	bl	8006408 <decodeDeadReckoningPose>
 80054d4:	60f8      	str	r0, [r7, #12]
            break;
 80054d6:	e009      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 f87e 	bl	80065dc <decodeWheelEncoder>
 80054e0:	60f8      	str	r0, [r7, #12]
            break;
 80054e2:	e003      	b.n	80054ec <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 80054e4:	f04f 33ff 	mov.w	r3, #4294967295
 80054e8:	60fb      	str	r3, [r7, #12]
            break;
 80054ea:	bf00      	nop
    }

    return rc;
 80054ec:	68fb      	ldr	r3, [r7, #12]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop

080054f8 <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	3316      	adds	r3, #22
 8005506:	4618      	mov	r0, r3
 8005508:	f001 f969 	bl	80067de <read16>
 800550c:	4603      	mov	r3, r0
 800550e:	461a      	mov	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	3318      	adds	r3, #24
 8005518:	4618      	mov	r0, r3
 800551a:	f001 f960 	bl	80067de <read16>
 800551e:	4603      	mov	r3, r0
 8005520:	461a      	mov	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	331a      	adds	r3, #26
 800552a:	4618      	mov	r0, r3
 800552c:	f001 f957 	bl	80067de <read16>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	331e      	adds	r3, #30
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f965 	bl	800680c <read32>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	3316      	adds	r3, #22
 8005562:	4618      	mov	r0, r3
 8005564:	f001 f93b 	bl	80067de <read16>
 8005568:	4603      	mov	r3, r0
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005572:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80055d0 <decodeAccelerometer+0x7c>
 8005576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	3318      	adds	r3, #24
 8005584:	4618      	mov	r0, r3
 8005586:	f001 f92a 	bl	80067de <read16>
 800558a:	4603      	mov	r3, r0
 800558c:	ee07 3a90 	vmov	s15, r3
 8005590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005594:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80055d0 <decodeAccelerometer+0x7c>
 8005598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	331a      	adds	r3, #26
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f919 	bl	80067de <read16>
 80055ac:	4603      	mov	r3, r0
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80055d0 <decodeAccelerometer+0x7c>
 80055ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	3b800000 	.word	0x3b800000

080055d4 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	3316      	adds	r3, #22
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 f8fb 	bl	80067de <read16>
 80055e8:	4603      	mov	r3, r0
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005650 <decodeLinearAcceleration+0x7c>
 80055f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	3318      	adds	r3, #24
 8005604:	4618      	mov	r0, r3
 8005606:	f001 f8ea 	bl	80067de <read16>
 800560a:	4603      	mov	r3, r0
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005614:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005650 <decodeLinearAcceleration+0x7c>
 8005618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	331a      	adds	r3, #26
 8005626:	4618      	mov	r0, r3
 8005628:	f001 f8d9 	bl	80067de <read16>
 800562c:	4603      	mov	r3, r0
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005636:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005650 <decodeLinearAcceleration+0x7c>
 800563a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	3b800000 	.word	0x3b800000

08005654 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	3316      	adds	r3, #22
 8005662:	4618      	mov	r0, r3
 8005664:	f001 f8bb 	bl	80067de <read16>
 8005668:	4603      	mov	r3, r0
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005672:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80056d0 <decodeGravity+0x7c>
 8005676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	3318      	adds	r3, #24
 8005684:	4618      	mov	r0, r3
 8005686:	f001 f8aa 	bl	80067de <read16>
 800568a:	4603      	mov	r3, r0
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005694:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80056d0 <decodeGravity+0x7c>
 8005698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	331a      	adds	r3, #26
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 f899 	bl	80067de <read16>
 80056ac:	4603      	mov	r3, r0
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80056d0 <decodeGravity+0x7c>
 80056ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	3b800000 	.word	0x3b800000

080056d4 <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	3316      	adds	r3, #22
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 f87b 	bl	80067de <read16>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	3318      	adds	r3, #24
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 f872 	bl	80067de <read16>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	331a      	adds	r3, #26
 8005706:	4618      	mov	r0, r3
 8005708:	f001 f869 	bl	80067de <read16>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	331c      	adds	r3, #28
 8005718:	4618      	mov	r0, r3
 800571a:	f001 f860 	bl	80067de <read16>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	331e      	adds	r3, #30
 800572a:	4618      	mov	r0, r3
 800572c:	f001 f86e 	bl	800680c <read32>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	3316      	adds	r3, #22
 8005752:	4618      	mov	r0, r3
 8005754:	f001 f843 	bl	80067de <read16>
 8005758:	4603      	mov	r3, r0
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005762:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80057c0 <decodeGyroscopeCalibrated+0x7c>
 8005766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	3318      	adds	r3, #24
 8005774:	4618      	mov	r0, r3
 8005776:	f001 f832 	bl	80067de <read16>
 800577a:	4603      	mov	r3, r0
 800577c:	ee07 3a90 	vmov	s15, r3
 8005780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005784:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80057c0 <decodeGyroscopeCalibrated+0x7c>
 8005788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	331a      	adds	r3, #26
 8005796:	4618      	mov	r0, r3
 8005798:	f001 f821 	bl	80067de <read16>
 800579c:	4603      	mov	r3, r0
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057a6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80057c0 <decodeGyroscopeCalibrated+0x7c>
 80057aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	3b000000 	.word	0x3b000000

080057c4 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	3316      	adds	r3, #22
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 f803 	bl	80067de <read16>
 80057d8:	4603      	mov	r3, r0
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80058a4 <decodeGyroscopeUncal+0xe0>
 80057e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	3318      	adds	r3, #24
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fff2 	bl	80067de <read16>
 80057fa:	4603      	mov	r3, r0
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005804:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80058a4 <decodeGyroscopeUncal+0xe0>
 8005808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	331a      	adds	r3, #26
 8005816:	4618      	mov	r0, r3
 8005818:	f000 ffe1 	bl	80067de <read16>
 800581c:	4603      	mov	r3, r0
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005826:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80058a4 <decodeGyroscopeUncal+0xe0>
 800582a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	331c      	adds	r3, #28
 8005838:	4618      	mov	r0, r3
 800583a:	f000 ffd0 	bl	80067de <read16>
 800583e:	4603      	mov	r3, r0
 8005840:	ee07 3a90 	vmov	s15, r3
 8005844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005848:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80058a4 <decodeGyroscopeUncal+0xe0>
 800584c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	331e      	adds	r3, #30
 800585a:	4618      	mov	r0, r3
 800585c:	f000 ffbf 	bl	80067de <read16>
 8005860:	4603      	mov	r3, r0
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800586a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80058a4 <decodeGyroscopeUncal+0xe0>
 800586e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	3320      	adds	r3, #32
 800587c:	4618      	mov	r0, r3
 800587e:	f000 ffae 	bl	80067de <read16>
 8005882:	4603      	mov	r3, r0
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800588c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80058a4 <decodeGyroscopeUncal+0xe0>
 8005890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	3b000000 	.word	0x3b000000

080058a8 <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	3316      	adds	r3, #22
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 ff91 	bl	80067de <read16>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	3318      	adds	r3, #24
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 ff88 	bl	80067de <read16>
 80058ce:	4603      	mov	r3, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	331a      	adds	r3, #26
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 ff7f 	bl	80067de <read16>
 80058e0:	4603      	mov	r3, r0
 80058e2:	461a      	mov	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	331e      	adds	r3, #30
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 ff8d 	bl	800680c <read32>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	3316      	adds	r3, #22
 8005912:	4618      	mov	r0, r3
 8005914:	f000 ff63 	bl	80067de <read16>
 8005918:	4603      	mov	r3, r0
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005922:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005980 <decodeMagneticFieldCalibrated+0x7c>
 8005926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	3318      	adds	r3, #24
 8005934:	4618      	mov	r0, r3
 8005936:	f000 ff52 	bl	80067de <read16>
 800593a:	4603      	mov	r3, r0
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005944:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005980 <decodeMagneticFieldCalibrated+0x7c>
 8005948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	331a      	adds	r3, #26
 8005956:	4618      	mov	r0, r3
 8005958:	f000 ff41 	bl	80067de <read16>
 800595c:	4603      	mov	r3, r0
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005966:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005980 <decodeMagneticFieldCalibrated+0x7c>
 800596a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	3d800000 	.word	0x3d800000

08005984 <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	3316      	adds	r3, #22
 8005992:	4618      	mov	r0, r3
 8005994:	f000 ff23 	bl	80067de <read16>
 8005998:	4603      	mov	r3, r0
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059a2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005a64 <decodeMagneticFieldUncal+0xe0>
 80059a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	3318      	adds	r3, #24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 ff12 	bl	80067de <read16>
 80059ba:	4603      	mov	r3, r0
 80059bc:	ee07 3a90 	vmov	s15, r3
 80059c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059c4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8005a64 <decodeMagneticFieldUncal+0xe0>
 80059c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	331a      	adds	r3, #26
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 ff01 	bl	80067de <read16>
 80059dc:	4603      	mov	r3, r0
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005a64 <decodeMagneticFieldUncal+0xe0>
 80059ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	331c      	adds	r3, #28
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fef0 	bl	80067de <read16>
 80059fe:	4603      	mov	r3, r0
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a08:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005a64 <decodeMagneticFieldUncal+0xe0>
 8005a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	331e      	adds	r3, #30
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fedf 	bl	80067de <read16>
 8005a20:	4603      	mov	r3, r0
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005a64 <decodeMagneticFieldUncal+0xe0>
 8005a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	3320      	adds	r3, #32
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fece 	bl	80067de <read16>
 8005a42:	4603      	mov	r3, r0
 8005a44:	ee07 3a90 	vmov	s15, r3
 8005a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005a64 <decodeMagneticFieldUncal+0xe0>
 8005a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	3d800000 	.word	0x3d800000

08005a68 <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	3316      	adds	r3, #22
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 feb1 	bl	80067de <read16>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a86:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005b28 <decodeRotationVector+0xc0>
 8005a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	3318      	adds	r3, #24
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fea0 	bl	80067de <read16>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	ee07 3a90 	vmov	s15, r3
 8005aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aa8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005b28 <decodeRotationVector+0xc0>
 8005aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	331a      	adds	r3, #26
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fe8f 	bl	80067de <read16>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aca:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005b28 <decodeRotationVector+0xc0>
 8005ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	331c      	adds	r3, #28
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fe7e 	bl	80067de <read16>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	ee07 3a90 	vmov	s15, r3
 8005ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aec:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005b28 <decodeRotationVector+0xc0>
 8005af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	331e      	adds	r3, #30
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fe6d 	bl	80067de <read16>
 8005b04:	4603      	mov	r3, r0
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b0e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005b2c <decodeRotationVector+0xc4>
 8005b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	38800000 	.word	0x38800000
 8005b2c:	39800000 	.word	0x39800000

08005b30 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	3316      	adds	r3, #22
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fe4d 	bl	80067de <read16>
 8005b44:	4603      	mov	r3, r0
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b4e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005bcc <decodeGameRotationVector+0x9c>
 8005b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	3318      	adds	r3, #24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fe3c 	bl	80067de <read16>
 8005b66:	4603      	mov	r3, r0
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b70:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005bcc <decodeGameRotationVector+0x9c>
 8005b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	331a      	adds	r3, #26
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fe2b 	bl	80067de <read16>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b92:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005bcc <decodeGameRotationVector+0x9c>
 8005b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	331c      	adds	r3, #28
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fe1a 	bl	80067de <read16>
 8005baa:	4603      	mov	r3, r0
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005bcc <decodeGameRotationVector+0x9c>
 8005bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	38800000 	.word	0x38800000

08005bd0 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	3316      	adds	r3, #22
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fdfd 	bl	80067de <read16>
 8005be4:	4603      	mov	r3, r0
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bee:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005c90 <decodeGeomagneticRotationVector+0xc0>
 8005bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	3318      	adds	r3, #24
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fdec 	bl	80067de <read16>
 8005c06:	4603      	mov	r3, r0
 8005c08:	ee07 3a90 	vmov	s15, r3
 8005c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c10:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005c90 <decodeGeomagneticRotationVector+0xc0>
 8005c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	331a      	adds	r3, #26
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fddb 	bl	80067de <read16>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c32:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005c90 <decodeGeomagneticRotationVector+0xc0>
 8005c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	331c      	adds	r3, #28
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fdca 	bl	80067de <read16>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c54:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005c90 <decodeGeomagneticRotationVector+0xc0>
 8005c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	331e      	adds	r3, #30
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fdb9 	bl	80067de <read16>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c76:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005c94 <decodeGeomagneticRotationVector+0xc4>
 8005c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	38800000 	.word	0x38800000
 8005c94:	39800000 	.word	0x39800000

08005c98 <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	3316      	adds	r3, #22
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fdb0 	bl	800680c <read32>
 8005cac:	ee07 0a90 	vmov	s15, r0
 8005cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005ccc <decodePressure+0x34>
 8005cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	35800000 	.word	0x35800000

08005cd0 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	3316      	adds	r3, #22
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fd94 	bl	800680c <read32>
 8005ce4:	ee07 0a90 	vmov	s15, r0
 8005ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cec:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005d04 <decodeAmbientLight+0x34>
 8005cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	3b800000 	.word	0x3b800000

08005d08 <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	3316      	adds	r3, #22
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fd61 	bl	80067de <read16>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d26:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005d40 <decodeHumidity+0x38>
 8005d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	3b800000 	.word	0x3b800000

08005d44 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	3316      	adds	r3, #22
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fd43 	bl	80067de <read16>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d62:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005d7c <decodeProximity+0x38>
 8005d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	3d800000 	.word	0x3d800000

08005d80 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	3316      	adds	r3, #22
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fd25 	bl	80067de <read16>
 8005d94:	4603      	mov	r3, r0
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d9e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005db8 <decodeTemperature+0x38>
 8005da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	3c000000 	.word	0x3c000000

08005dbc <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	3316      	adds	r3, #22
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fd07 	bl	80067de <read16>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dda:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005df4 <decodeReserved+0x38>
 8005dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	3c000000 	.word	0x3c000000

08005df8 <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	7d9a      	ldrb	r2, [r3, #22]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	3316      	adds	r3, #22
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fcac 	bl	8006784 <readu32>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	3316      	adds	r3, #22
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fc9a 	bl	8006784 <readu32>
 8005e50:	4602      	mov	r2, r0
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	331a      	adds	r3, #26
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fc92 	bl	8006784 <readu32>
 8005e60:	4603      	mov	r3, r0
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	3316      	adds	r3, #22
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fc68 	bl	8006756 <readu16>
 8005e86:	4603      	mov	r3, r0
 8005e88:	461a      	mov	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	7d9a      	ldrb	r2, [r3, #22]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	3316      	adds	r3, #22
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fc45 	bl	8006756 <readu16>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	3316      	adds	r3, #22
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fc32 	bl	8006756 <readu16>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	3316      	adds	r3, #22
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fc1f 	bl	8006756 <readu16>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	3316      	adds	r3, #22
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fc0c 	bl	8006756 <readu16>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	7d9b      	ldrb	r3, [r3, #22]
 8005f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	7d9b      	ldrb	r3, [r3, #22]
 8005f6c:	b25b      	sxtb	r3, r3
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	09db      	lsrs	r3, r3, #7
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	7dda      	ldrb	r2, [r3, #23]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e00d      	b.n	8005fa2 <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3306      	adds	r3, #6
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	7c99      	ldrb	r1, [r3, #18]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	3317      	adds	r3, #23
 8005f98:	460a      	mov	r2, r1
 8005f9a:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b09      	cmp	r3, #9
 8005fa6:	ddee      	ble.n	8005f86 <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	7d9a      	ldrb	r2, [r3, #22]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	3316      	adds	r3, #22
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fbb6 	bl	8006756 <readu16>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	3316      	adds	r3, #22
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fba3 	bl	8006756 <readu16>
 8006010:	4603      	mov	r3, r0
 8006012:	461a      	mov	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	3316      	adds	r3, #22
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fb90 	bl	8006756 <readu16>
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	3316      	adds	r3, #22
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fb7d 	bl	8006756 <readu16>
 800605c:	4603      	mov	r3, r0
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	3316      	adds	r3, #22
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fbad 	bl	80067de <read16>
 8006084:	4603      	mov	r3, r0
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800608e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006130 <decodeArvrStabilizedRV+0xc0>
 8006092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	3318      	adds	r3, #24
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fb9c 	bl	80067de <read16>
 80060a6:	4603      	mov	r3, r0
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8006130 <decodeArvrStabilizedRV+0xc0>
 80060b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	331a      	adds	r3, #26
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fb8b 	bl	80067de <read16>
 80060c8:	4603      	mov	r3, r0
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060d2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006130 <decodeArvrStabilizedRV+0xc0>
 80060d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	331c      	adds	r3, #28
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fb7a 	bl	80067de <read16>
 80060ea:	4603      	mov	r3, r0
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060f4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8006130 <decodeArvrStabilizedRV+0xc0>
 80060f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	331e      	adds	r3, #30
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fb69 	bl	80067de <read16>
 800610c:	4603      	mov	r3, r0
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006116:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006134 <decodeArvrStabilizedRV+0xc4>
 800611a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	38800000 	.word	0x38800000
 8006134:	39800000 	.word	0x39800000

08006138 <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	3316      	adds	r3, #22
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fb49 	bl	80067de <read16>
 800614c:	4603      	mov	r3, r0
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006156:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80061d4 <decodeArvrStabilizedGRV+0x9c>
 800615a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	3318      	adds	r3, #24
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fb38 	bl	80067de <read16>
 800616e:	4603      	mov	r3, r0
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006178:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80061d4 <decodeArvrStabilizedGRV+0x9c>
 800617c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	331a      	adds	r3, #26
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fb27 	bl	80067de <read16>
 8006190:	4603      	mov	r3, r0
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800619a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80061d4 <decodeArvrStabilizedGRV+0x9c>
 800619e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	331c      	adds	r3, #28
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fb16 	bl	80067de <read16>
 80061b2:	4603      	mov	r3, r0
 80061b4:	ee07 3a90 	vmov	s15, r3
 80061b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061bc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80061d4 <decodeArvrStabilizedGRV+0x9c>
 80061c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	38800000 	.word	0x38800000

080061d8 <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	3312      	adds	r3, #18
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 faf9 	bl	80067de <read16>
 80061ec:	4603      	mov	r3, r0
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061f6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80062dc <decodeGyroIntegratedRV+0x104>
 80061fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	3314      	adds	r3, #20
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fae8 	bl	80067de <read16>
 800620e:	4603      	mov	r3, r0
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006218:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80062dc <decodeGyroIntegratedRV+0x104>
 800621c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	3316      	adds	r3, #22
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fad7 	bl	80067de <read16>
 8006230:	4603      	mov	r3, r0
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800623a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80062dc <decodeGyroIntegratedRV+0x104>
 800623e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	3318      	adds	r3, #24
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fac6 	bl	80067de <read16>
 8006252:	4603      	mov	r3, r0
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800625c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80062dc <decodeGyroIntegratedRV+0x104>
 8006260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	331a      	adds	r3, #26
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fab5 	bl	80067de <read16>
 8006274:	4603      	mov	r3, r0
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800627e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80062e0 <decodeGyroIntegratedRV+0x108>
 8006282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	331c      	adds	r3, #28
 8006290:	4618      	mov	r0, r3
 8006292:	f000 faa4 	bl	80067de <read16>
 8006296:	4603      	mov	r3, r0
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80062e0 <decodeGyroIntegratedRV+0x108>
 80062a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	331e      	adds	r3, #30
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fa93 	bl	80067de <read16>
 80062b8:	4603      	mov	r3, r0
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80062e0 <decodeGyroIntegratedRV+0x108>
 80062c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    return SH2_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	38800000 	.word	0x38800000
 80062e0:	3a800000 	.word	0x3a800000

080062e4 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	7d9a      	ldrb	r2, [r3, #22]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	7dda      	ldrb	r2, [r3, #23]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	3316      	adds	r3, #22
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fa5f 	bl	80067de <read16>
 8006320:	4603      	mov	r3, r0
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	3318      	adds	r3, #24
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fa56 	bl	80067de <read16>
 8006332:	4603      	mov	r3, r0
 8006334:	461a      	mov	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	331a      	adds	r3, #26
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fa4d 	bl	80067de <read16>
 8006344:	4603      	mov	r3, r0
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	331c      	adds	r3, #28
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fa35 	bl	80067c0 <read8>
 8006356:	4603      	mov	r3, r0
 8006358:	b2da      	uxtb	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	331d      	adds	r3, #29
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fa2b 	bl	80067c0 <read8>
 800636a:	4603      	mov	r3, r0
 800636c:	b2da      	uxtb	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	331e      	adds	r3, #30
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fa21 	bl	80067c0 <read8>
 800637e:	4603      	mov	r3, r0
 8006380:	b2da      	uxtb	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	331f      	adds	r3, #31
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fa17 	bl	80067c0 <read8>
 8006392:	4603      	mov	r3, r0
 8006394:	b2da      	uxtb	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	3320      	adds	r3, #32
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fa0d 	bl	80067c0 <read8>
 80063a6:	4603      	mov	r3, r0
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	3321      	adds	r3, #33	@ 0x21
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fa03 	bl	80067c0 <read8>
 80063ba:	4603      	mov	r3, r0
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	3322      	adds	r3, #34	@ 0x22
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f9f9 	bl	80067c0 <read8>
 80063ce:	4603      	mov	r3, r0
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	3324      	adds	r3, #36	@ 0x24
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 f9fe 	bl	80067de <read16>
 80063e2:	4603      	mov	r3, r0
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	3326      	adds	r3, #38	@ 0x26
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fa0c 	bl	800680c <read32>
 80063f4:	4603      	mov	r3, r0
 80063f6:	461a      	mov	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	3316      	adds	r3, #22
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f9f8 	bl	800680c <read32>
 800641c:	4603      	mov	r3, r0
 800641e:	461a      	mov	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	331a      	adds	r3, #26
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f9ef 	bl	800680c <read32>
 800642e:	ee07 0a90 	vmov	s15, r0
 8006432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006436:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80065d0 <decodeDeadReckoningPose+0x1c8>
 800643a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	331e      	adds	r3, #30
 8006448:	4618      	mov	r0, r3
 800644a:	f000 f9df 	bl	800680c <read32>
 800644e:	ee07 0a90 	vmov	s15, r0
 8006452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006456:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80065d0 <decodeDeadReckoningPose+0x1c8>
 800645a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	3322      	adds	r3, #34	@ 0x22
 8006468:	4618      	mov	r0, r3
 800646a:	f000 f9cf 	bl	800680c <read32>
 800646e:	ee07 0a90 	vmov	s15, r0
 8006472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006476:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80065d0 <decodeDeadReckoningPose+0x1c8>
 800647a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	3326      	adds	r3, #38	@ 0x26
 8006488:	4618      	mov	r0, r3
 800648a:	f000 f9bf 	bl	800680c <read32>
 800648e:	ee07 0a90 	vmov	s15, r0
 8006492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006496:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80065d4 <decodeDeadReckoningPose+0x1cc>
 800649a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	332a      	adds	r3, #42	@ 0x2a
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 f9af 	bl	800680c <read32>
 80064ae:	ee07 0a90 	vmov	s15, r0
 80064b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064b6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80065d4 <decodeDeadReckoningPose+0x1cc>
 80064ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	332e      	adds	r3, #46	@ 0x2e
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 f99f 	bl	800680c <read32>
 80064ce:	ee07 0a90 	vmov	s15, r0
 80064d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064d6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80065d4 <decodeDeadReckoningPose+0x1cc>
 80064da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	3332      	adds	r3, #50	@ 0x32
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f98f 	bl	800680c <read32>
 80064ee:	ee07 0a90 	vmov	s15, r0
 80064f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064f6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80065d4 <decodeDeadReckoningPose+0x1cc>
 80064fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	3336      	adds	r3, #54	@ 0x36
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f97f 	bl	800680c <read32>
 800650e:	ee07 0a90 	vmov	s15, r0
 8006512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006516:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80065d8 <decodeDeadReckoningPose+0x1d0>
 800651a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	333a      	adds	r3, #58	@ 0x3a
 8006528:	4618      	mov	r0, r3
 800652a:	f000 f96f 	bl	800680c <read32>
 800652e:	ee07 0a90 	vmov	s15, r0
 8006532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006536:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80065d8 <decodeDeadReckoningPose+0x1d0>
 800653a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	333e      	adds	r3, #62	@ 0x3e
 8006548:	4618      	mov	r0, r3
 800654a:	f000 f95f 	bl	800680c <read32>
 800654e:	ee07 0a90 	vmov	s15, r0
 8006552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006556:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80065d8 <decodeDeadReckoningPose+0x1d0>
 800655a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	3342      	adds	r3, #66	@ 0x42
 8006568:	4618      	mov	r0, r3
 800656a:	f000 f94f 	bl	800680c <read32>
 800656e:	ee07 0a90 	vmov	s15, r0
 8006572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006576:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80065d8 <decodeDeadReckoningPose+0x1d0>
 800657a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	3346      	adds	r3, #70	@ 0x46
 8006588:	4618      	mov	r0, r3
 800658a:	f000 f93f 	bl	800680c <read32>
 800658e:	ee07 0a90 	vmov	s15, r0
 8006592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006596:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80065d8 <decodeDeadReckoningPose+0x1d0>
 800659a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	334a      	adds	r3, #74	@ 0x4a
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f92f 	bl	800680c <read32>
 80065ae:	ee07 0a90 	vmov	s15, r0
 80065b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065b6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80065d8 <decodeDeadReckoningPose+0x1d0>
 80065ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    return SH2_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	37000000 	.word	0x37000000
 80065d4:	30800000 	.word	0x30800000
 80065d8:	33000000 	.word	0x33000000

080065dc <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	3316      	adds	r3, #22
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 f90e 	bl	800680c <read32>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	331a      	adds	r3, #26
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 f8df 	bl	80067c0 <read8>
 8006602:	4603      	mov	r3, r0
 8006604:	b2da      	uxtb	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	331b      	adds	r3, #27
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f8d6 	bl	80067c0 <read8>
 8006614:	4603      	mov	r3, r0
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	331c      	adds	r3, #28
 8006620:	4618      	mov	r0, r3
 8006622:	f000 f8dc 	bl	80067de <read16>
 8006626:	4603      	mov	r3, r0
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <sh2_hal_open>:

extern I2C_HandleTypeDef hi2c1;
extern osMutexId_t I2C1MutexHandle; // Use the same mutex for accessing I2C1
#define BNO085_I2C_ADDR   (0x4A << 1)

int sh2_hal_open(sh2_Hal_t *self)   { return 0; }
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	2300      	movs	r3, #0
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <sh2_hal_close>:
void sh2_hal_close(sh2_Hal_t *self) { }
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
	...

08006664 <sh2_hal_read>:

int sh2_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t_us) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
    osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8006676:	4b17      	ldr	r3, [pc, #92]	@ (80066d4 <sh2_hal_read+0x70>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f04f 31ff 	mov.w	r1, #4294967295
 800667e:	4618      	mov	r0, r3
 8006680:	f006 fa7d 	bl	800cb7e <osMutexAcquire>
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c1, BNO085_I2C_ADDR, pBuffer, len, 1000);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800668c:	9200      	str	r2, [sp, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	2194      	movs	r1, #148	@ 0x94
 8006692:	4811      	ldr	r0, [pc, #68]	@ (80066d8 <sh2_hal_read+0x74>)
 8006694:	f001 feb8 	bl	8008408 <HAL_I2C_Master_Receive>
 8006698:	4603      	mov	r3, r0
 800669a:	74fb      	strb	r3, [r7, #19]
    osMutexRelease(I2C1MutexHandle);
 800669c:	4b0d      	ldr	r3, [pc, #52]	@ (80066d4 <sh2_hal_read+0x70>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f006 fab7 	bl	800cc14 <osMutexRelease>
    if (status == HAL_OK) {
 80066a6:	7cfb      	ldrb	r3, [r7, #19]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10d      	bne.n	80066c8 <sh2_hal_read+0x64>
        if (t_us) *t_us = HAL_GetTick() * 1000;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d008      	beq.n	80066c4 <sh2_hal_read+0x60>
 80066b2:	f000 fc4b 	bl	8006f4c <HAL_GetTick>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80066bc:	fb03 f202 	mul.w	r2, r3, r2
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	601a      	str	r2, [r3, #0]
        ret = len;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	617b      	str	r3, [r7, #20]
    }
    return ret;
 80066c8:	697b      	ldr	r3, [r7, #20]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000454 	.word	0x20000454
 80066d8:	20000260 	.word	0x20000260

080066dc <sh2_hal_write>:

int sh2_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
    int ret = 0;
 80066e8:	2300      	movs	r3, #0
 80066ea:	617b      	str	r3, [r7, #20]
    osMutexAcquire(I2C1MutexHandle, osWaitForever);
 80066ec:	4b10      	ldr	r3, [pc, #64]	@ (8006730 <sh2_hal_write+0x54>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f04f 31ff 	mov.w	r1, #4294967295
 80066f4:	4618      	mov	r0, r3
 80066f6:	f006 fa42 	bl	800cb7e <osMutexAcquire>
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BNO085_I2C_ADDR, pBuffer, len, 1000);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006702:	9200      	str	r2, [sp, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	2194      	movs	r1, #148	@ 0x94
 8006708:	480a      	ldr	r0, [pc, #40]	@ (8006734 <sh2_hal_write+0x58>)
 800670a:	f001 fd7f 	bl	800820c <HAL_I2C_Master_Transmit>
 800670e:	4603      	mov	r3, r0
 8006710:	74fb      	strb	r3, [r7, #19]
    osMutexRelease(I2C1MutexHandle);
 8006712:	4b07      	ldr	r3, [pc, #28]	@ (8006730 <sh2_hal_write+0x54>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f006 fa7c 	bl	800cc14 <osMutexRelease>
    if (status == HAL_OK) ret = len;
 800671c:	7cfb      	ldrb	r3, [r7, #19]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <sh2_hal_write+0x4a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	617b      	str	r3, [r7, #20]
    return ret;
 8006726:	697b      	ldr	r3, [r7, #20]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000454 	.word	0x20000454
 8006734:	20000260 	.word	0x20000260

08006738 <sh2_hal_getTimeUs>:

uint32_t sh2_hal_getTimeUs(sh2_Hal_t *self) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
    return HAL_GetTick() * 1000;
 8006740:	f000 fc04 	bl	8006f4c <HAL_GetTick>
 8006744:	4603      	mov	r3, r0
 8006746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800674a:	fb02 f303 	mul.w	r3, r2, r3
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 8006756:	b480      	push	{r7}
 8006758:	b085      	sub	sp, #20
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	b21a      	sxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3301      	adds	r3, #1
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	b21b      	sxth	r3, r3
 800676c:	021b      	lsls	r3, r3, #8
 800676e:	b21b      	sxth	r3, r3
 8006770:	4313      	orrs	r3, r2
 8006772:	b21b      	sxth	r3, r3
 8006774:	81fb      	strh	r3, [r7, #14]
    return retval;
 8006776:	89fb      	ldrh	r3, [r7, #14]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3301      	adds	r3, #1
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3302      	adds	r3, #2
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3303      	adds	r3, #3
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	061b      	lsls	r3, r3, #24
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
    return retval;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	73fb      	strb	r3, [r7, #15]
    return retval;
 80067ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b21a      	sxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3301      	adds	r3, #1
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b21b      	sxth	r3, r3
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	b21b      	sxth	r3, r3
 80067f8:	4313      	orrs	r3, r2
 80067fa:	81fb      	strh	r3, [r7, #14]
    return retval;
 80067fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3301      	adds	r3, #1
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3302      	adds	r3, #2
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	041b      	lsls	r3, r3, #16
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3303      	adds	r3, #3
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	061b      	lsls	r3, r3, #24
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
    return retval;
 800683a:	68fb      	ldr	r3, [r7, #12]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 800684e:	2300      	movs	r3, #0
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	e00b      	b.n	800686c <shtp_init+0x24>
        instances[n].pHal = 0;
 8006854:	4a0b      	ldr	r2, [pc, #44]	@ (8006884 <shtp_init+0x3c>)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f640 1114 	movw	r1, #2324	@ 0x914
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	4413      	add	r3, r2
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3301      	adds	r3, #1
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	ddf0      	ble.n	8006854 <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 8006872:	4b05      	ldr	r3, [pc, #20]	@ (8006888 <shtp_init+0x40>)
 8006874:	2201      	movs	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	20000b80 	.word	0x20000b80
 8006888:	20001494 	.word	0x20001494

0800688c <getInstance>:

static shtp_t *getInstance(void)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	e014      	b.n	80068c2 <getInstance+0x36>
        if (instances[n].pHal == 0) {
 8006898:	4a0f      	ldr	r2, [pc, #60]	@ (80068d8 <getInstance+0x4c>)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f640 1114 	movw	r1, #2324	@ 0x914
 80068a0:	fb01 f303 	mul.w	r3, r1, r3
 80068a4:	4413      	add	r3, r2
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d107      	bne.n	80068bc <getInstance+0x30>
            // This instance is free
            return &instances[n];
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f640 1214 	movw	r2, #2324	@ 0x914
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
 80068b6:	4a08      	ldr	r2, [pc, #32]	@ (80068d8 <getInstance+0x4c>)
 80068b8:	4413      	add	r3, r2
 80068ba:	e006      	b.n	80068ca <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3301      	adds	r3, #1
 80068c0:	607b      	str	r3, [r7, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dde7      	ble.n	8006898 <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	20000b80 	.word	0x20000b80

080068dc <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	460a      	mov	r2, r1
 80068e6:	80fb      	strh	r3, [r7, #6]
 80068e8:	4613      	mov	r3, r2
 80068ea:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 80068ec:	88fa      	ldrh	r2, [r7, #6]
 80068ee:	88bb      	ldrh	r3, [r7, #4]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d201      	bcs.n	80068f8 <min_u16+0x1c>
        return a;
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	e000      	b.n	80068fa <min_u16+0x1e>
    }
    else {
        return b;
 80068f8:	88bb      	ldrh	r3, [r7, #4]
    }
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 8006906:	b590      	push	{r4, r7, lr}
 8006908:	b089      	sub	sp, #36	@ 0x24
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	460b      	mov	r3, r1
 8006914:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 800691a:	2300      	movs	r3, #0
 800691c:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	833b      	strh	r3, [r7, #24]
    remaining = len;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 800692a:	e079      	b.n	8006a20 <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 800692c:	8afb      	ldrh	r3, [r7, #22]
 800692e:	217c      	movs	r1, #124	@ 0x7c
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff ffd3 	bl	80068dc <min_u16>
 8006936:	4603      	mov	r3, r0
 8006938:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 800693a:	8abb      	ldrh	r3, [r7, #20]
 800693c:	3304      	adds	r3, #4
 800693e:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 8006940:	8a7b      	ldrh	r3, [r7, #18]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 8006948:	8a7b      	ldrh	r3, [r7, #18]
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	b29b      	uxth	r3, r3
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006954:	b2da      	uxtb	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 800695a:	7efb      	ldrb	r3, [r7, #27]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d006      	beq.n	800696e <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	7b5b      	ldrb	r3, [r3, #13]
 8006964:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006968:	b2da      	uxtb	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	7afa      	ldrb	r2, [r7, #11]
 8006972:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8006974:	7afa      	ldrb	r2, [r7, #11]
 8006976:	68f9      	ldr	r1, [r7, #12]
 8006978:	4613      	mov	r3, r2
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 8006986:	7819      	ldrb	r1, [r3, #0]
 8006988:	1c4b      	adds	r3, r1, #1
 800698a:	b2dc      	uxtb	r4, r3
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	4613      	mov	r3, r2
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4403      	add	r3, r0
 8006998:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 800699c:	4622      	mov	r2, r4
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	460a      	mov	r2, r1
 80069a4:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	330c      	adds	r3, #12
 80069aa:	1d18      	adds	r0, r3, #4
 80069ac:	8b3b      	ldrh	r3, [r7, #24]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	8aba      	ldrh	r2, [r7, #20]
 80069b4:	4619      	mov	r1, r3
 80069b6:	f00a f93a 	bl	8010c2e <memcpy>
        remaining -= transferLen;
 80069ba:	8afa      	ldrh	r2, [r7, #22]
 80069bc:	8abb      	ldrh	r3, [r7, #20]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 80069c2:	8b3a      	ldrh	r2, [r7, #24]
 80069c4:	8abb      	ldrh	r3, [r7, #20]
 80069c6:	4413      	add	r3, r2
 80069c8:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	6810      	ldr	r0, [r2, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	f102 010c 	add.w	r1, r2, #12
 80069da:	8a7a      	ldrh	r2, [r7, #18]
 80069dc:	4798      	blx	r3
 80069de:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 80069e0:	e00d      	b.n	80069fe <txProcess+0xf8>
        {
            shtp_service(pShtp);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fa2b 	bl	8006e3e <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	6810      	ldr	r0, [r2, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	f102 010c 	add.w	r1, r2, #12
 80069f8:	8a7a      	ldrh	r2, [r7, #18]
 80069fa:	4798      	blx	r3
 80069fc:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0ee      	beq.n	80069e2 <txProcess+0xdc>
        }
        
        if (status < 0)
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da08      	bge.n	8006a1c <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
            return status;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	e005      	b.n	8006a28 <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 8006a20:	8afb      	ldrh	r3, [r7, #22]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d182      	bne.n	800692c <txProcess+0x26>
    }

    return SH2_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3724      	adds	r7, #36	@ 0x24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd90      	pop	{r4, r7, pc}

08006a30 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8006a30:	b590      	push	{r4, r7, lr}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 8006a48:	88fb      	ldrh	r3, [r7, #6]
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d813      	bhi.n	8006a76 <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8139 	beq.w	8006cd8 <rxAssemble+0x2a8>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	6892      	ldr	r2, [r2, #8]
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4610      	mov	r0, r2
 8006a72:	4798      	blx	r3
        }
        return;
 8006a74:	e130      	b.n	8006cd8 <rxAssemble+0x2a8>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	4413      	add	r3, r2
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a8e:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3301      	adds	r3, #1
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	b25b      	sxtb	r3, r3
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	09db      	lsrs	r3, r3, #7
 8006a9c:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	789b      	ldrb	r3, [r3, #2]
 8006aa2:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	78db      	ldrb	r3, [r3, #3]
 8006aa8:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 8006aaa:	7dfa      	ldrb	r2, [r7, #23]
 8006aac:	68f9      	ldr	r1, [r7, #12]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	7dba      	ldrb	r2, [r7, #22]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d00a      	beq.n	8006ada <rxAssemble+0xaa>
        if (pShtp->eventCallback) {
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <rxAssemble+0xaa>
            pShtp->eventCallback(pShtp->eventCookie,
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	6892      	ldr	r2, [r2, #8]
 8006ad4:	2106      	movs	r1, #6
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 8006ada:	8abb      	ldrh	r3, [r7, #20]
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d813      	bhi.n	8006b08 <rxAssemble+0xd8>
        pShtp->rxShortFragments++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 80f2 	beq.w	8006cdc <rxAssemble+0x2ac>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	6892      	ldr	r2, [r2, #8]
 8006b00:	2101      	movs	r1, #1
 8006b02:	4610      	mov	r0, r2
 8006b04:	4798      	blx	r3
        }
        return;
 8006b06:	e0e9      	b.n	8006cdc <rxAssemble+0x2ac>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	d913      	bls.n	8006b36 <rxAssemble+0x106>
        // Invalid channel id.
        pShtp->rxBadChan++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

        if (pShtp->eventCallback) {
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80dd 	beq.w	8006ce0 <rxAssemble+0x2b0>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	6892      	ldr	r2, [r2, #8]
 8006b2e:	2103      	movs	r1, #3
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
        }
        return;
 8006b34:	e0d4      	b.n	8006ce0 <rxAssemble+0x2b0>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d040      	beq.n	8006bc2 <rxAssemble+0x192>
        // Check this against previously received data.
        if (!continuation ||
 8006b40:	7cfb      	ldrb	r3, [r7, #19]
 8006b42:	f083 0301 	eor.w	r3, r3, #1
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d119      	bne.n	8006b80 <rxAssemble+0x150>
            (chan != pShtp->inChan) ||
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
        if (!continuation ||
 8006b52:	7dfa      	ldrb	r2, [r7, #23]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d113      	bne.n	8006b80 <rxAssemble+0x150>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8006b58:	7dfa      	ldrb	r2, [r7, #23]
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8006b6a:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8006b6c:	7dba      	ldrb	r2, [r7, #22]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d106      	bne.n	8006b80 <rxAssemble+0x150>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 8006b72:	8abb      	ldrh	r3, [r7, #20]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	f8b2 208c 	ldrh.w	r2, [r2, #140]	@ 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d020      	beq.n	8006bc2 <rxAssemble+0x192>
            
            if (pShtp->eventCallback) {
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <rxAssemble+0x166>
                pShtp->eventCallback(pShtp->eventCookie,
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	6892      	ldr	r2, [r2, #8]
 8006b90:	2105      	movs	r1, #5
 8006b92:	4610      	mov	r0, r2
 8006b94:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

            pShtp->rxInterruptedPayloads++;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            if (pShtp->eventCallback) {
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d006      	beq.n	8006bc2 <rxAssemble+0x192>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	6892      	ldr	r2, [r2, #8]
 8006bbc:	2107      	movs	r1, #7
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 8006bc2:	7dfa      	ldrb	r2, [r7, #23]
 8006bc4:	7dbb      	ldrb	r3, [r7, #22]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	b2d8      	uxtb	r0, r3
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8006bda:	4602      	mov	r2, r0
 8006bdc:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d122      	bne.n	8006c2e <rxAssemble+0x1fe>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 8006be8:	8abb      	ldrh	r3, [r7, #20]
 8006bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bee:	d912      	bls.n	8006c16 <rxAssemble+0x1e6>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
            
            if (pShtp->eventCallback) {
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d06e      	beq.n	8006ce4 <rxAssemble+0x2b4>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	6892      	ldr	r2, [r2, #8]
 8006c0e:	2102      	movs	r1, #2
 8006c10:	4610      	mov	r0, r2
 8006c12:	4798      	blx	r3
            }

            return;
 8006c14:	e066      	b.n	8006ce4 <rxAssemble+0x2b4>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
        pShtp->inChan = chan;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	7dfa      	ldrb	r2, [r7, #23]
 8006c2a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8006c2e:	88fa      	ldrh	r2, [r7, #6]
 8006c30:	8abb      	ldrh	r3, [r7, #20]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d901      	bls.n	8006c3a <rxAssemble+0x20a>
        // Only use the valid portion of the transfer
        len = payloadLen;
 8006c36:	8abb      	ldrh	r3, [r7, #20]
 8006c38:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	338f      	adds	r3, #143	@ 0x8f
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	@ 0x490
 8006c44:	1898      	adds	r0, r3, r2
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	1d19      	adds	r1, r3, #4
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	3b04      	subs	r3, #4
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f009 ffed 	bl	8010c2e <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b04      	subs	r3, #4
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
    pShtp->inRemaining = payloadLen - len;
 8006c6a:	8aba      	ldrh	r2, [r7, #20]
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d131      	bne.n	8006ce6 <rxAssemble+0x2b6>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 8006c82:	7dfa      	ldrb	r2, [r7, #23]
 8006c84:	68f9      	ldr	r1, [r7, #12]
 8006c86:	4613      	mov	r3, r2
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d025      	beq.n	8006ce6 <rxAssemble+0x2b6>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006c9a:	7dfa      	ldrb	r2, [r7, #23]
 8006c9c:	68f9      	ldr	r1, [r7, #12]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8006cac:	681c      	ldr	r4, [r3, #0]
 8006cae:	7dfa      	ldrb	r2, [r7, #23]
 8006cb0:	68f9      	ldr	r1, [r7, #12]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006cc0:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f103 018f 	add.w	r1, r3, #143	@ 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8006cd4:	47a0      	blx	r4
 8006cd6:	e006      	b.n	8006ce6 <rxAssemble+0x2b6>
        return;
 8006cd8:	bf00      	nop
 8006cda:	e004      	b.n	8006ce6 <rxAssemble+0x2b6>
        return;
 8006cdc:	bf00      	nop
 8006cde:	e002      	b.n	8006ce6 <rxAssemble+0x2b6>
        return;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <rxAssemble+0x2b6>
            return;
 8006ce4:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd90      	pop	{r4, r7, pc}

08006cec <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8006cf4:	4b16      	ldr	r3, [pc, #88]	@ (8006d50 <shtp_open+0x64>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f083 0301 	eor.w	r3, r3, #1
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 8006d02:	f7ff fda1 	bl	8006848 <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <shtp_open+0x24>
        // Error
        return 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e01b      	b.n	8006d48 <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8006d10:	f7ff fdbc 	bl	800688c <getInstance>
 8006d14:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	e013      	b.n	8006d48 <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8006d20:	f640 1214 	movw	r2, #2324	@ 0x914
 8006d24:	2100      	movs	r1, #0
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f009 fe90 	bl	8010a4c <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
 8006d34:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <shtp_open+0x54>
        return 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e003      	b.n	8006d48 <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]

    return pShtp;
 8006d46:	68fb      	ldr	r3, [r7, #12]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20001494 	.word	0x20001494

08006d54 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	609a      	str	r2, [r3, #8]
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <shtp_listenChan+0x20>
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	2b07      	cmp	r3, #7
 8006d9a:	d902      	bls.n	8006da2 <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8006d9c:	f06f 0301 	mvn.w	r3, #1
 8006da0:	e016      	b.n	8006dd0 <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 8006da2:	7afa      	ldrb	r2, [r7, #11]
 8006da4:	6979      	ldr	r1, [r7, #20]
 8006da6:	4613      	mov	r3, r2
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 8006db8:	7afa      	ldrb	r2, [r7, #11]
 8006dba:	6979      	ldr	r1, [r7, #20]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	371c      	adds	r7, #28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	461a      	mov	r2, r3
 8006de8:	460b      	mov	r3, r1
 8006dea:	72fb      	strb	r3, [r7, #11]
 8006dec:	4613      	mov	r3, r2
 8006dee:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 8006df4:	893b      	ldrh	r3, [r7, #8]
 8006df6:	2b80      	cmp	r3, #128	@ 0x80
 8006df8:	d909      	bls.n	8006e0e <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
        return SH2_ERR_BAD_PARAM;
 8006e08:	f06f 0301 	mvn.w	r3, #1
 8006e0c:	e013      	b.n	8006e36 <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	2b07      	cmp	r3, #7
 8006e12:	d909      	bls.n	8006e28 <shtp_send+0x4c>
        pShtp->badTxChan++;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
        return SH2_ERR_BAD_PARAM;
 8006e22:	f06f 0301 	mvn.w	r3, #1
 8006e26:	e006      	b.n	8006e36 <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8006e28:	893b      	ldrh	r3, [r7, #8]
 8006e2a:	7af9      	ldrb	r1, [r7, #11]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f7ff fd69 	bl	8006906 <txProcess>
 8006e34:	4603      	mov	r3, r0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8006e3e:	b590      	push	{r4, r7, lr}
 8006e40:	b087      	sub	sp, #28
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689c      	ldr	r4, [r3, #8]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8006e5e:	f107 030c 	add.w	r3, r7, #12
 8006e62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e66:	47a0      	blx	r4
 8006e68:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dd08      	ble.n	8006e82 <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6978      	ldr	r0, [r7, #20]
 8006e7e:	f7ff fdd7 	bl	8006a30 <rxAssemble>
    }
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd90      	pop	{r4, r7, pc}
	...

08006e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006ec4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006e90:	f7fd fafe 	bl	8004490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006e94:	480c      	ldr	r0, [pc, #48]	@ (8006ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006e96:	490d      	ldr	r1, [pc, #52]	@ (8006ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006e98:	4a0d      	ldr	r2, [pc, #52]	@ (8006ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e9c:	e002      	b.n	8006ea4 <LoopCopyDataInit>

08006e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ea2:	3304      	adds	r3, #4

08006ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ea8:	d3f9      	bcc.n	8006e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006eac:	4c0a      	ldr	r4, [pc, #40]	@ (8006ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006eb0:	e001      	b.n	8006eb6 <LoopFillZerobss>

08006eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006eb4:	3204      	adds	r2, #4

08006eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006eb8:	d3fb      	bcc.n	8006eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006eba:	f009 fe91 	bl	8010be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ebe:	f7fa ffa9 	bl	8001e14 <main>
  bx  lr    
 8006ec2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ecc:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8006ed0:	080144cc 	.word	0x080144cc
  ldr r2, =_sbss
 8006ed4:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8006ed8:	20005fe8 	.word	0x20005fe8

08006edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006edc:	e7fe      	b.n	8006edc <ADC_IRQHandler>
	...

08006ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8006f20 <HAL_Init+0x40>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8006f20 <HAL_Init+0x40>)
 8006eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f20 <HAL_Init+0x40>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8006f20 <HAL_Init+0x40>)
 8006ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006efc:	4b08      	ldr	r3, [pc, #32]	@ (8006f20 <HAL_Init+0x40>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a07      	ldr	r2, [pc, #28]	@ (8006f20 <HAL_Init+0x40>)
 8006f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f08:	2003      	movs	r0, #3
 8006f0a:	f000 f8fc 	bl	8007106 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f0e:	200f      	movs	r0, #15
 8006f10:	f7fd f94c 	bl	80041ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f14:	f7fc ff54 	bl	8003dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40023c00 	.word	0x40023c00

08006f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f28:	4b06      	ldr	r3, [pc, #24]	@ (8006f44 <HAL_IncTick+0x20>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4b06      	ldr	r3, [pc, #24]	@ (8006f48 <HAL_IncTick+0x24>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4413      	add	r3, r2
 8006f34:	4a04      	ldr	r2, [pc, #16]	@ (8006f48 <HAL_IncTick+0x24>)
 8006f36:	6013      	str	r3, [r2, #0]
}
 8006f38:	bf00      	nop
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000074 	.word	0x20000074
 8006f48:	20001498 	.word	0x20001498

08006f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8006f50:	4b03      	ldr	r3, [pc, #12]	@ (8006f60 <HAL_GetTick+0x14>)
 8006f52:	681b      	ldr	r3, [r3, #0]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20001498 	.word	0x20001498

08006f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f6c:	f7ff ffee 	bl	8006f4c <HAL_GetTick>
 8006f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d005      	beq.n	8006f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa8 <HAL_Delay+0x44>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f8a:	bf00      	nop
 8006f8c:	f7ff ffde 	bl	8006f4c <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d8f7      	bhi.n	8006f8c <HAL_Delay+0x28>
  {
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000074 	.word	0x20000074

08006fac <__NVIC_SetPriorityGrouping>:
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fde:	4a04      	ldr	r2, [pc, #16]	@ (8006ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	60d3      	str	r3, [r2, #12]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	e000ed00 	.word	0xe000ed00

08006ff4 <__NVIC_GetPriorityGrouping>:
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ff8:	4b04      	ldr	r3, [pc, #16]	@ (800700c <__NVIC_GetPriorityGrouping+0x18>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	f003 0307 	and.w	r3, r3, #7
}
 8007002:	4618      	mov	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	e000ed00 	.word	0xe000ed00

08007010 <__NVIC_EnableIRQ>:
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800701a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701e:	2b00      	cmp	r3, #0
 8007020:	db0b      	blt.n	800703a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	f003 021f 	and.w	r2, r3, #31
 8007028:	4907      	ldr	r1, [pc, #28]	@ (8007048 <__NVIC_EnableIRQ+0x38>)
 800702a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	2001      	movs	r0, #1
 8007032:	fa00 f202 	lsl.w	r2, r0, r2
 8007036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	e000e100 	.word	0xe000e100

0800704c <__NVIC_SetPriority>:
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705c:	2b00      	cmp	r3, #0
 800705e:	db0a      	blt.n	8007076 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	490c      	ldr	r1, [pc, #48]	@ (8007098 <__NVIC_SetPriority+0x4c>)
 8007066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800706a:	0112      	lsls	r2, r2, #4
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	440b      	add	r3, r1
 8007070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007074:	e00a      	b.n	800708c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	4908      	ldr	r1, [pc, #32]	@ (800709c <__NVIC_SetPriority+0x50>)
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	3b04      	subs	r3, #4
 8007084:	0112      	lsls	r2, r2, #4
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	440b      	add	r3, r1
 800708a:	761a      	strb	r2, [r3, #24]
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	e000e100 	.word	0xe000e100
 800709c:	e000ed00 	.word	0xe000ed00

080070a0 <NVIC_EncodePriority>:
{
 80070a0:	b480      	push	{r7}
 80070a2:	b089      	sub	sp, #36	@ 0x24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f1c3 0307 	rsb	r3, r3, #7
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	bf28      	it	cs
 80070be:	2304      	movcs	r3, #4
 80070c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3304      	adds	r3, #4
 80070c6:	2b06      	cmp	r3, #6
 80070c8:	d902      	bls.n	80070d0 <NVIC_EncodePriority+0x30>
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	3b03      	subs	r3, #3
 80070ce:	e000      	b.n	80070d2 <NVIC_EncodePriority+0x32>
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070d4:	f04f 32ff 	mov.w	r2, #4294967295
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43da      	mvns	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	401a      	ands	r2, r3
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070e8:	f04f 31ff 	mov.w	r1, #4294967295
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	43d9      	mvns	r1, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070f8:	4313      	orrs	r3, r2
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3724      	adds	r7, #36	@ 0x24
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff ff4c 	bl	8006fac <__NVIC_SetPriorityGrouping>
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800712e:	f7ff ff61 	bl	8006ff4 <__NVIC_GetPriorityGrouping>
 8007132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	6978      	ldr	r0, [r7, #20]
 800713a:	f7ff ffb1 	bl	80070a0 <NVIC_EncodePriority>
 800713e:	4602      	mov	r2, r0
 8007140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007144:	4611      	mov	r1, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff ff80 	bl	800704c <__NVIC_SetPriority>
}
 800714c:	bf00      	nop
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800715e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007162:	4618      	mov	r0, r3
 8007164:	f7ff ff54 	bl	8007010 <__NVIC_EnableIRQ>
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800717c:	f7ff fee6 	bl	8006f4c <HAL_GetTick>
 8007180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e099      	b.n	80072c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071ac:	e00f      	b.n	80071ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071ae:	f7ff fecd 	bl	8006f4c <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b05      	cmp	r3, #5
 80071ba:	d908      	bls.n	80071ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2203      	movs	r2, #3
 80071c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e078      	b.n	80072c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e8      	bne.n	80071ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	4b38      	ldr	r3, [pc, #224]	@ (80072c8 <HAL_DMA_Init+0x158>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007224:	2b04      	cmp	r3, #4
 8007226:	d107      	bne.n	8007238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007230:	4313      	orrs	r3, r2
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0307 	bic.w	r3, r3, #7
 800724e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725e:	2b04      	cmp	r3, #4
 8007260:	d117      	bne.n	8007292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00e      	beq.n	8007292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb0d 	bl	8007894 <DMA_CheckFifoParam>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2240      	movs	r2, #64	@ 0x40
 8007284:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800728e:	2301      	movs	r3, #1
 8007290:	e016      	b.n	80072c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fac4 	bl	8007828 <DMA_CalcBaseAndBitshift>
 80072a0:	4603      	mov	r3, r0
 80072a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a8:	223f      	movs	r2, #63	@ 0x3f
 80072aa:	409a      	lsls	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	f010803f 	.word	0xf010803f

080072cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_DMA_Start_IT+0x26>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e040      	b.n	8007374 <HAL_DMA_Start_IT+0xa8>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d12f      	bne.n	8007366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fa56 	bl	80077cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007324:	223f      	movs	r2, #63	@ 0x3f
 8007326:	409a      	lsls	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0216 	orr.w	r2, r2, #22
 800733a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d007      	beq.n	8007354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0208 	orr.w	r2, r2, #8
 8007352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e005      	b.n	8007372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800736e:	2302      	movs	r3, #2
 8007370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007388:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800738a:	f7ff fddf 	bl	8006f4c <HAL_GetTick>
 800738e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d008      	beq.n	80073ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2280      	movs	r2, #128	@ 0x80
 80073a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e052      	b.n	8007454 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0216 	bic.w	r2, r2, #22
 80073bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695a      	ldr	r2, [r3, #20]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <HAL_DMA_Abort+0x62>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0208 	bic.w	r2, r2, #8
 80073ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0201 	bic.w	r2, r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073fe:	e013      	b.n	8007428 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007400:	f7ff fda4 	bl	8006f4c <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b05      	cmp	r3, #5
 800740c:	d90c      	bls.n	8007428 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2203      	movs	r2, #3
 8007418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e015      	b.n	8007454 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e4      	bne.n	8007400 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800743a:	223f      	movs	r2, #63	@ 0x3f
 800743c:	409a      	lsls	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d004      	beq.n	800747a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2280      	movs	r2, #128	@ 0x80
 8007474:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e00c      	b.n	8007494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2205      	movs	r2, #5
 800747e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074ac:	4b8e      	ldr	r3, [pc, #568]	@ (80076e8 <HAL_DMA_IRQHandler+0x248>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a8e      	ldr	r2, [pc, #568]	@ (80076ec <HAL_DMA_IRQHandler+0x24c>)
 80074b2:	fba2 2303 	umull	r2, r3, r2, r3
 80074b6:	0a9b      	lsrs	r3, r3, #10
 80074b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ca:	2208      	movs	r2, #8
 80074cc:	409a      	lsls	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4013      	ands	r3, r2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01a      	beq.n	800750c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d013      	beq.n	800750c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0204 	bic.w	r2, r2, #4
 80074f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f8:	2208      	movs	r2, #8
 80074fa:	409a      	lsls	r2, r3
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007504:	f043 0201 	orr.w	r2, r3, #1
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007510:	2201      	movs	r2, #1
 8007512:	409a      	lsls	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4013      	ands	r3, r2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d012      	beq.n	8007542 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00b      	beq.n	8007542 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752e:	2201      	movs	r2, #1
 8007530:	409a      	lsls	r2, r3
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800753a:	f043 0202 	orr.w	r2, r3, #2
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007546:	2204      	movs	r2, #4
 8007548:	409a      	lsls	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4013      	ands	r3, r2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d012      	beq.n	8007578 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007564:	2204      	movs	r2, #4
 8007566:	409a      	lsls	r2, r3
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007570:	f043 0204 	orr.w	r2, r3, #4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757c:	2210      	movs	r2, #16
 800757e:	409a      	lsls	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4013      	ands	r3, r2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d043      	beq.n	8007610 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	2b00      	cmp	r3, #0
 8007594:	d03c      	beq.n	8007610 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800759a:	2210      	movs	r2, #16
 800759c:	409a      	lsls	r2, r3
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d018      	beq.n	80075e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d024      	beq.n	8007610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
 80075ce:	e01f      	b.n	8007610 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01b      	beq.n	8007610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
 80075e0:	e016      	b.n	8007610 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d107      	bne.n	8007600 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0208 	bic.w	r2, r2, #8
 80075fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007614:	2220      	movs	r2, #32
 8007616:	409a      	lsls	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4013      	ands	r3, r2
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 808f 	beq.w	8007740 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8087 	beq.w	8007740 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007636:	2220      	movs	r2, #32
 8007638:	409a      	lsls	r2, r3
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b05      	cmp	r3, #5
 8007648:	d136      	bne.n	80076b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0216 	bic.w	r2, r2, #22
 8007658:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695a      	ldr	r2, [r3, #20]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007668:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <HAL_DMA_IRQHandler+0x1da>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007676:	2b00      	cmp	r3, #0
 8007678:	d007      	beq.n	800768a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0208 	bic.w	r2, r2, #8
 8007688:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800768e:	223f      	movs	r2, #63	@ 0x3f
 8007690:	409a      	lsls	r2, r3
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d07e      	beq.n	80077ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
        }
        return;
 80076b6:	e079      	b.n	80077ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d01d      	beq.n	8007702 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10d      	bne.n	80076f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d031      	beq.n	8007740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
 80076e4:	e02c      	b.n	8007740 <HAL_DMA_IRQHandler+0x2a0>
 80076e6:	bf00      	nop
 80076e8:	2000000c 	.word	0x2000000c
 80076ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d023      	beq.n	8007740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
 8007700:	e01e      	b.n	8007740 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10f      	bne.n	8007730 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0210 	bic.w	r2, r2, #16
 800771e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007744:	2b00      	cmp	r3, #0
 8007746:	d032      	beq.n	80077ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d022      	beq.n	800779a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2205      	movs	r2, #5
 8007758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	3301      	adds	r3, #1
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	429a      	cmp	r2, r3
 8007776:	d307      	bcc.n	8007788 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1f2      	bne.n	800776c <HAL_DMA_IRQHandler+0x2cc>
 8007786:	e000      	b.n	800778a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007788:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	4798      	blx	r3
 80077aa:	e000      	b.n	80077ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80077ac:	bf00      	nop
    }
  }
}
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	2b40      	cmp	r3, #64	@ 0x40
 80077f8:	d108      	bne.n	800780c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800780a:	e007      	b.n	800781c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	60da      	str	r2, [r3, #12]
}
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	3b10      	subs	r3, #16
 8007838:	4a14      	ldr	r2, [pc, #80]	@ (800788c <DMA_CalcBaseAndBitshift+0x64>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	091b      	lsrs	r3, r3, #4
 8007840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007842:	4a13      	ldr	r2, [pc, #76]	@ (8007890 <DMA_CalcBaseAndBitshift+0x68>)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b03      	cmp	r3, #3
 8007854:	d909      	bls.n	800786a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800785e:	f023 0303 	bic.w	r3, r3, #3
 8007862:	1d1a      	adds	r2, r3, #4
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	659a      	str	r2, [r3, #88]	@ 0x58
 8007868:	e007      	b.n	800787a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007872:	f023 0303 	bic.w	r3, r3, #3
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	aaaaaaab 	.word	0xaaaaaaab
 8007890:	08014108 	.word	0x08014108

08007894 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d11f      	bne.n	80078ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d856      	bhi.n	8007962 <DMA_CheckFifoParam+0xce>
 80078b4:	a201      	add	r2, pc, #4	@ (adr r2, 80078bc <DMA_CheckFifoParam+0x28>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078cd 	.word	0x080078cd
 80078c0:	080078df 	.word	0x080078df
 80078c4:	080078cd 	.word	0x080078cd
 80078c8:	08007963 	.word	0x08007963
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d046      	beq.n	8007966 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078dc:	e043      	b.n	8007966 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80078e6:	d140      	bne.n	800796a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078ec:	e03d      	b.n	800796a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078f6:	d121      	bne.n	800793c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d837      	bhi.n	800796e <DMA_CheckFifoParam+0xda>
 80078fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007904 <DMA_CheckFifoParam+0x70>)
 8007900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007904:	08007915 	.word	0x08007915
 8007908:	0800791b 	.word	0x0800791b
 800790c:	08007915 	.word	0x08007915
 8007910:	0800792d 	.word	0x0800792d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	73fb      	strb	r3, [r7, #15]
      break;
 8007918:	e030      	b.n	800797c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d025      	beq.n	8007972 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800792a:	e022      	b.n	8007972 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007934:	d11f      	bne.n	8007976 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800793a:	e01c      	b.n	8007976 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d903      	bls.n	800794a <DMA_CheckFifoParam+0xb6>
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d003      	beq.n	8007950 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007948:	e018      	b.n	800797c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	73fb      	strb	r3, [r7, #15]
      break;
 800794e:	e015      	b.n	800797c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00e      	beq.n	800797a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	73fb      	strb	r3, [r7, #15]
      break;
 8007960:	e00b      	b.n	800797a <DMA_CheckFifoParam+0xe6>
      break;
 8007962:	bf00      	nop
 8007964:	e00a      	b.n	800797c <DMA_CheckFifoParam+0xe8>
      break;
 8007966:	bf00      	nop
 8007968:	e008      	b.n	800797c <DMA_CheckFifoParam+0xe8>
      break;
 800796a:	bf00      	nop
 800796c:	e006      	b.n	800797c <DMA_CheckFifoParam+0xe8>
      break;
 800796e:	bf00      	nop
 8007970:	e004      	b.n	800797c <DMA_CheckFifoParam+0xe8>
      break;
 8007972:	bf00      	nop
 8007974:	e002      	b.n	800797c <DMA_CheckFifoParam+0xe8>
      break;   
 8007976:	bf00      	nop
 8007978:	e000      	b.n	800797c <DMA_CheckFifoParam+0xe8>
      break;
 800797a:	bf00      	nop
    }
  } 
  
  return status; 
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop

0800798c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800798c:	b480      	push	{r7}
 800798e:	b089      	sub	sp, #36	@ 0x24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800799a:	2300      	movs	r3, #0
 800799c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800799e:	2300      	movs	r3, #0
 80079a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	e159      	b.n	8007c5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80079a8:	2201      	movs	r2, #1
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4013      	ands	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	f040 8148 	bne.w	8007c56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d005      	beq.n	80079de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d130      	bne.n	8007a40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	2203      	movs	r2, #3
 80079ea:	fa02 f303 	lsl.w	r3, r2, r3
 80079ee:	43db      	mvns	r3, r3
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	4013      	ands	r3, r2
 80079f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a14:	2201      	movs	r2, #1
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	43db      	mvns	r3, r3
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	4013      	ands	r3, r2
 8007a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	091b      	lsrs	r3, r3, #4
 8007a2a:	f003 0201 	and.w	r2, r3, #1
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	fa02 f303 	lsl.w	r3, r2, r3
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f003 0303 	and.w	r3, r3, #3
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d017      	beq.n	8007a7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	2203      	movs	r2, #3
 8007a58:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5c:	43db      	mvns	r3, r3
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	4013      	ands	r3, r2
 8007a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d123      	bne.n	8007ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	08da      	lsrs	r2, r3, #3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3208      	adds	r2, #8
 8007a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	220f      	movs	r2, #15
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	08da      	lsrs	r2, r3, #3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3208      	adds	r2, #8
 8007aca:	69b9      	ldr	r1, [r7, #24]
 8007acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	2203      	movs	r2, #3
 8007adc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae0:	43db      	mvns	r3, r3
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f003 0203 	and.w	r2, r3, #3
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	fa02 f303 	lsl.w	r3, r2, r3
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80a2 	beq.w	8007c56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	4b57      	ldr	r3, [pc, #348]	@ (8007c74 <HAL_GPIO_Init+0x2e8>)
 8007b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1a:	4a56      	ldr	r2, [pc, #344]	@ (8007c74 <HAL_GPIO_Init+0x2e8>)
 8007b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b22:	4b54      	ldr	r3, [pc, #336]	@ (8007c74 <HAL_GPIO_Init+0x2e8>)
 8007b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b2e:	4a52      	ldr	r2, [pc, #328]	@ (8007c78 <HAL_GPIO_Init+0x2ec>)
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	089b      	lsrs	r3, r3, #2
 8007b34:	3302      	adds	r3, #2
 8007b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	220f      	movs	r2, #15
 8007b46:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4a:	43db      	mvns	r3, r3
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a49      	ldr	r2, [pc, #292]	@ (8007c7c <HAL_GPIO_Init+0x2f0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d019      	beq.n	8007b8e <HAL_GPIO_Init+0x202>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a48      	ldr	r2, [pc, #288]	@ (8007c80 <HAL_GPIO_Init+0x2f4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d013      	beq.n	8007b8a <HAL_GPIO_Init+0x1fe>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a47      	ldr	r2, [pc, #284]	@ (8007c84 <HAL_GPIO_Init+0x2f8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00d      	beq.n	8007b86 <HAL_GPIO_Init+0x1fa>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a46      	ldr	r2, [pc, #280]	@ (8007c88 <HAL_GPIO_Init+0x2fc>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d007      	beq.n	8007b82 <HAL_GPIO_Init+0x1f6>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a45      	ldr	r2, [pc, #276]	@ (8007c8c <HAL_GPIO_Init+0x300>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d101      	bne.n	8007b7e <HAL_GPIO_Init+0x1f2>
 8007b7a:	2304      	movs	r3, #4
 8007b7c:	e008      	b.n	8007b90 <HAL_GPIO_Init+0x204>
 8007b7e:	2307      	movs	r3, #7
 8007b80:	e006      	b.n	8007b90 <HAL_GPIO_Init+0x204>
 8007b82:	2303      	movs	r3, #3
 8007b84:	e004      	b.n	8007b90 <HAL_GPIO_Init+0x204>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e002      	b.n	8007b90 <HAL_GPIO_Init+0x204>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <HAL_GPIO_Init+0x204>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	f002 0203 	and.w	r2, r2, #3
 8007b96:	0092      	lsls	r2, r2, #2
 8007b98:	4093      	lsls	r3, r2
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ba0:	4935      	ldr	r1, [pc, #212]	@ (8007c78 <HAL_GPIO_Init+0x2ec>)
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	089b      	lsrs	r3, r3, #2
 8007ba6:	3302      	adds	r3, #2
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007bae:	4b38      	ldr	r3, [pc, #224]	@ (8007c90 <HAL_GPIO_Init+0x304>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	43db      	mvns	r3, r3
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8007c90 <HAL_GPIO_Init+0x304>)
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8007c90 <HAL_GPIO_Init+0x304>)
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	43db      	mvns	r3, r3
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	4013      	ands	r3, r2
 8007be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bfc:	4a24      	ldr	r2, [pc, #144]	@ (8007c90 <HAL_GPIO_Init+0x304>)
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007c02:	4b23      	ldr	r3, [pc, #140]	@ (8007c90 <HAL_GPIO_Init+0x304>)
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c26:	4a1a      	ldr	r2, [pc, #104]	@ (8007c90 <HAL_GPIO_Init+0x304>)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c2c:	4b18      	ldr	r3, [pc, #96]	@ (8007c90 <HAL_GPIO_Init+0x304>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	43db      	mvns	r3, r3
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c50:	4a0f      	ldr	r2, [pc, #60]	@ (8007c90 <HAL_GPIO_Init+0x304>)
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b0f      	cmp	r3, #15
 8007c60:	f67f aea2 	bls.w	80079a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	3724      	adds	r7, #36	@ 0x24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40023800 	.word	0x40023800
 8007c78:	40013800 	.word	0x40013800
 8007c7c:	40020000 	.word	0x40020000
 8007c80:	40020400 	.word	0x40020400
 8007c84:	40020800 	.word	0x40020800
 8007c88:	40020c00 	.word	0x40020c00
 8007c8c:	40021000 	.word	0x40021000
 8007c90:	40013c00 	.word	0x40013c00

08007c94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	e0bb      	b.n	8007e28 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	f040 80ab 	bne.w	8007e22 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007ccc:	4a5c      	ldr	r2, [pc, #368]	@ (8007e40 <HAL_GPIO_DeInit+0x1ac>)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	089b      	lsrs	r3, r3, #2
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	220f      	movs	r2, #15
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	4013      	ands	r3, r2
 8007cec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a54      	ldr	r2, [pc, #336]	@ (8007e44 <HAL_GPIO_DeInit+0x1b0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d019      	beq.n	8007d2a <HAL_GPIO_DeInit+0x96>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a53      	ldr	r2, [pc, #332]	@ (8007e48 <HAL_GPIO_DeInit+0x1b4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d013      	beq.n	8007d26 <HAL_GPIO_DeInit+0x92>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a52      	ldr	r2, [pc, #328]	@ (8007e4c <HAL_GPIO_DeInit+0x1b8>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d00d      	beq.n	8007d22 <HAL_GPIO_DeInit+0x8e>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a51      	ldr	r2, [pc, #324]	@ (8007e50 <HAL_GPIO_DeInit+0x1bc>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d007      	beq.n	8007d1e <HAL_GPIO_DeInit+0x8a>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a50      	ldr	r2, [pc, #320]	@ (8007e54 <HAL_GPIO_DeInit+0x1c0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d101      	bne.n	8007d1a <HAL_GPIO_DeInit+0x86>
 8007d16:	2304      	movs	r3, #4
 8007d18:	e008      	b.n	8007d2c <HAL_GPIO_DeInit+0x98>
 8007d1a:	2307      	movs	r3, #7
 8007d1c:	e006      	b.n	8007d2c <HAL_GPIO_DeInit+0x98>
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e004      	b.n	8007d2c <HAL_GPIO_DeInit+0x98>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e002      	b.n	8007d2c <HAL_GPIO_DeInit+0x98>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <HAL_GPIO_DeInit+0x98>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	f002 0203 	and.w	r2, r2, #3
 8007d32:	0092      	lsls	r2, r2, #2
 8007d34:	4093      	lsls	r3, r2
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d132      	bne.n	8007da2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007d3c:	4b46      	ldr	r3, [pc, #280]	@ (8007e58 <HAL_GPIO_DeInit+0x1c4>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	43db      	mvns	r3, r3
 8007d44:	4944      	ldr	r1, [pc, #272]	@ (8007e58 <HAL_GPIO_DeInit+0x1c4>)
 8007d46:	4013      	ands	r3, r2
 8007d48:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007d4a:	4b43      	ldr	r3, [pc, #268]	@ (8007e58 <HAL_GPIO_DeInit+0x1c4>)
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	43db      	mvns	r3, r3
 8007d52:	4941      	ldr	r1, [pc, #260]	@ (8007e58 <HAL_GPIO_DeInit+0x1c4>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007d58:	4b3f      	ldr	r3, [pc, #252]	@ (8007e58 <HAL_GPIO_DeInit+0x1c4>)
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	493d      	ldr	r1, [pc, #244]	@ (8007e58 <HAL_GPIO_DeInit+0x1c4>)
 8007d62:	4013      	ands	r3, r2
 8007d64:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007d66:	4b3c      	ldr	r3, [pc, #240]	@ (8007e58 <HAL_GPIO_DeInit+0x1c4>)
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	43db      	mvns	r3, r3
 8007d6e:	493a      	ldr	r1, [pc, #232]	@ (8007e58 <HAL_GPIO_DeInit+0x1c4>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	220f      	movs	r2, #15
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007d84:	4a2e      	ldr	r2, [pc, #184]	@ (8007e40 <HAL_GPIO_DeInit+0x1ac>)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	089b      	lsrs	r3, r3, #2
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	43da      	mvns	r2, r3
 8007d94:	482a      	ldr	r0, [pc, #168]	@ (8007e40 <HAL_GPIO_DeInit+0x1ac>)
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	089b      	lsrs	r3, r3, #2
 8007d9a:	400a      	ands	r2, r1
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	2103      	movs	r1, #3
 8007dac:	fa01 f303 	lsl.w	r3, r1, r3
 8007db0:	43db      	mvns	r3, r3
 8007db2:	401a      	ands	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	08da      	lsrs	r2, r3, #3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3208      	adds	r2, #8
 8007dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	220f      	movs	r2, #15
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	08d2      	lsrs	r2, r2, #3
 8007dd8:	4019      	ands	r1, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3208      	adds	r2, #8
 8007dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	2103      	movs	r1, #3
 8007dec:	fa01 f303 	lsl.w	r3, r1, r3
 8007df0:	43db      	mvns	r3, r3
 8007df2:	401a      	ands	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	fa01 f303 	lsl.w	r3, r1, r3
 8007e04:	43db      	mvns	r3, r3
 8007e06:	401a      	ands	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	2103      	movs	r1, #3
 8007e16:	fa01 f303 	lsl.w	r3, r1, r3
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	401a      	ands	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	3301      	adds	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2b0f      	cmp	r3, #15
 8007e2c:	f67f af40 	bls.w	8007cb0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40013800 	.word	0x40013800
 8007e44:	40020000 	.word	0x40020000
 8007e48:	40020400 	.word	0x40020400
 8007e4c:	40020800 	.word	0x40020800
 8007e50:	40020c00 	.word	0x40020c00
 8007e54:	40021000 	.word	0x40021000
 8007e58:	40013c00 	.word	0x40013c00

08007e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	887b      	ldrh	r3, [r7, #2]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e74:	2301      	movs	r3, #1
 8007e76:	73fb      	strb	r3, [r7, #15]
 8007e78:	e001      	b.n	8007e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	807b      	strh	r3, [r7, #2]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e9c:	787b      	ldrb	r3, [r7, #1]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ea2:	887a      	ldrh	r2, [r7, #2]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ea8:	e003      	b.n	8007eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007eaa:	887b      	ldrh	r3, [r7, #2]
 8007eac:	041a      	lsls	r2, r3, #16
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	619a      	str	r2, [r3, #24]
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b085      	sub	sp, #20
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ed0:	887a      	ldrh	r2, [r7, #2]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	041a      	lsls	r2, r3, #16
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	43d9      	mvns	r1, r3
 8007edc:	887b      	ldrh	r3, [r7, #2]
 8007ede:	400b      	ands	r3, r1
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	619a      	str	r2, [r3, #24]
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
	...

08007ef4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007efe:	4b08      	ldr	r3, [pc, #32]	@ (8007f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f00:	695a      	ldr	r2, [r3, #20]
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	4013      	ands	r3, r2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d006      	beq.n	8007f18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f0a:	4a05      	ldr	r2, [pc, #20]	@ (8007f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f10:	88fb      	ldrh	r3, [r7, #6]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fa fb4e 	bl	80025b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40013c00 	.word	0x40013c00

08007f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e12b      	b.n	800818e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fb ff64 	bl	8003e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2224      	movs	r2, #36	@ 0x24
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0201 	bic.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f88:	f002 fa52 	bl	800a430 <HAL_RCC_GetPCLK1Freq>
 8007f8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	4a81      	ldr	r2, [pc, #516]	@ (8008198 <HAL_I2C_Init+0x274>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d807      	bhi.n	8007fa8 <HAL_I2C_Init+0x84>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4a80      	ldr	r2, [pc, #512]	@ (800819c <HAL_I2C_Init+0x278>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	bf94      	ite	ls
 8007fa0:	2301      	movls	r3, #1
 8007fa2:	2300      	movhi	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	e006      	b.n	8007fb6 <HAL_I2C_Init+0x92>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4a7d      	ldr	r2, [pc, #500]	@ (80081a0 <HAL_I2C_Init+0x27c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	bf94      	ite	ls
 8007fb0:	2301      	movls	r3, #1
 8007fb2:	2300      	movhi	r3, #0
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e0e7      	b.n	800818e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4a78      	ldr	r2, [pc, #480]	@ (80081a4 <HAL_I2C_Init+0x280>)
 8007fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc6:	0c9b      	lsrs	r3, r3, #18
 8007fc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4a6a      	ldr	r2, [pc, #424]	@ (8008198 <HAL_I2C_Init+0x274>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d802      	bhi.n	8007ff8 <HAL_I2C_Init+0xd4>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	e009      	b.n	800800c <HAL_I2C_Init+0xe8>
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	4a69      	ldr	r2, [pc, #420]	@ (80081a8 <HAL_I2C_Init+0x284>)
 8008004:	fba2 2303 	umull	r2, r3, r2, r3
 8008008:	099b      	lsrs	r3, r3, #6
 800800a:	3301      	adds	r3, #1
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6812      	ldr	r2, [r2, #0]
 8008010:	430b      	orrs	r3, r1
 8008012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800801e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	495c      	ldr	r1, [pc, #368]	@ (8008198 <HAL_I2C_Init+0x274>)
 8008028:	428b      	cmp	r3, r1
 800802a:	d819      	bhi.n	8008060 <HAL_I2C_Init+0x13c>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	1e59      	subs	r1, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	fbb1 f3f3 	udiv	r3, r1, r3
 800803a:	1c59      	adds	r1, r3, #1
 800803c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008040:	400b      	ands	r3, r1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_I2C_Init+0x138>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1e59      	subs	r1, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	fbb1 f3f3 	udiv	r3, r1, r3
 8008054:	3301      	adds	r3, #1
 8008056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800805a:	e051      	b.n	8008100 <HAL_I2C_Init+0x1dc>
 800805c:	2304      	movs	r3, #4
 800805e:	e04f      	b.n	8008100 <HAL_I2C_Init+0x1dc>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d111      	bne.n	800808c <HAL_I2C_Init+0x168>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	1e58      	subs	r0, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6859      	ldr	r1, [r3, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	440b      	add	r3, r1
 8008076:	fbb0 f3f3 	udiv	r3, r0, r3
 800807a:	3301      	adds	r3, #1
 800807c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008080:	2b00      	cmp	r3, #0
 8008082:	bf0c      	ite	eq
 8008084:	2301      	moveq	r3, #1
 8008086:	2300      	movne	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	e012      	b.n	80080b2 <HAL_I2C_Init+0x18e>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	1e58      	subs	r0, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6859      	ldr	r1, [r3, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	0099      	lsls	r1, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	fbb0 f3f3 	udiv	r3, r0, r3
 80080a2:	3301      	adds	r3, #1
 80080a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <HAL_I2C_Init+0x196>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e022      	b.n	8008100 <HAL_I2C_Init+0x1dc>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10e      	bne.n	80080e0 <HAL_I2C_Init+0x1bc>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	1e58      	subs	r0, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6859      	ldr	r1, [r3, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	440b      	add	r3, r1
 80080d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80080d4:	3301      	adds	r3, #1
 80080d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080de:	e00f      	b.n	8008100 <HAL_I2C_Init+0x1dc>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	1e58      	subs	r0, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6859      	ldr	r1, [r3, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	0099      	lsls	r1, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80080f6:	3301      	adds	r3, #1
 80080f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	6809      	ldr	r1, [r1, #0]
 8008104:	4313      	orrs	r3, r2
 8008106:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69da      	ldr	r2, [r3, #28]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800812e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6911      	ldr	r1, [r2, #16]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68d2      	ldr	r2, [r2, #12]
 800813a:	4311      	orrs	r1, r2
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	6812      	ldr	r2, [r2, #0]
 8008140:	430b      	orrs	r3, r1
 8008142:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	000186a0 	.word	0x000186a0
 800819c:	001e847f 	.word	0x001e847f
 80081a0:	003d08ff 	.word	0x003d08ff
 80081a4:	431bde83 	.word	0x431bde83
 80081a8:	10624dd3 	.word	0x10624dd3

080081ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e021      	b.n	8008202 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2224      	movs	r2, #36	@ 0x24
 80081c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0201 	bic.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7fb fe66 	bl	8003ea8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af02      	add	r7, sp, #8
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	607a      	str	r2, [r7, #4]
 8008216:	461a      	mov	r2, r3
 8008218:	460b      	mov	r3, r1
 800821a:	817b      	strh	r3, [r7, #10]
 800821c:	4613      	mov	r3, r2
 800821e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008220:	f7fe fe94 	bl	8006f4c <HAL_GetTick>
 8008224:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b20      	cmp	r3, #32
 8008230:	f040 80e0 	bne.w	80083f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	2319      	movs	r3, #25
 800823a:	2201      	movs	r2, #1
 800823c:	4970      	ldr	r1, [pc, #448]	@ (8008400 <HAL_I2C_Master_Transmit+0x1f4>)
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f001 fa3c 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800824a:	2302      	movs	r3, #2
 800824c:	e0d3      	b.n	80083f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_I2C_Master_Transmit+0x50>
 8008258:	2302      	movs	r3, #2
 800825a:	e0cc      	b.n	80083f6 <HAL_I2C_Master_Transmit+0x1ea>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b01      	cmp	r3, #1
 8008270:	d007      	beq.n	8008282 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0201 	orr.w	r2, r2, #1
 8008280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008290:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2221      	movs	r2, #33	@ 0x21
 8008296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2210      	movs	r2, #16
 800829e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	893a      	ldrh	r2, [r7, #8]
 80082b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4a50      	ldr	r2, [pc, #320]	@ (8008404 <HAL_I2C_Master_Transmit+0x1f8>)
 80082c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80082c4:	8979      	ldrh	r1, [r7, #10]
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	6a3a      	ldr	r2, [r7, #32]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 ff28 	bl	8009120 <I2C_MasterRequestWrite>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e08d      	b.n	80083f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082da:	2300      	movs	r3, #0
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80082f0:	e066      	b.n	80083c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	6a39      	ldr	r1, [r7, #32]
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f001 fafa 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00d      	beq.n	800831e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008306:	2b04      	cmp	r3, #4
 8008308:	d107      	bne.n	800831a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e06b      	b.n	80083f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008322:	781a      	ldrb	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b04      	cmp	r3, #4
 800835a:	d11b      	bne.n	8008394 <HAL_I2C_Master_Transmit+0x188>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008360:	2b00      	cmp	r3, #0
 8008362:	d017      	beq.n	8008394 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	781a      	ldrb	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800837e:	b29b      	uxth	r3, r3
 8008380:	3b01      	subs	r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	6a39      	ldr	r1, [r7, #32]
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f001 faf1 	bl	8009980 <I2C_WaitOnBTFFlagUntilTimeout>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00d      	beq.n	80083c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d107      	bne.n	80083bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e01a      	b.n	80083f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d194      	bne.n	80082f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2220      	movs	r2, #32
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e000      	b.n	80083f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80083f4:	2302      	movs	r3, #2
  }
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	00100002 	.word	0x00100002
 8008404:	ffff0000 	.word	0xffff0000

08008408 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08c      	sub	sp, #48	@ 0x30
 800840c:	af02      	add	r7, sp, #8
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	607a      	str	r2, [r7, #4]
 8008412:	461a      	mov	r2, r3
 8008414:	460b      	mov	r3, r1
 8008416:	817b      	strh	r3, [r7, #10]
 8008418:	4613      	mov	r3, r2
 800841a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800841c:	f7fe fd96 	bl	8006f4c <HAL_GetTick>
 8008420:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b20      	cmp	r3, #32
 800842c:	f040 8217 	bne.w	800885e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	2319      	movs	r3, #25
 8008436:	2201      	movs	r2, #1
 8008438:	497c      	ldr	r1, [pc, #496]	@ (800862c <HAL_I2C_Master_Receive+0x224>)
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f001 f93e 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008446:	2302      	movs	r3, #2
 8008448:	e20a      	b.n	8008860 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_I2C_Master_Receive+0x50>
 8008454:	2302      	movs	r3, #2
 8008456:	e203      	b.n	8008860 <HAL_I2C_Master_Receive+0x458>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b01      	cmp	r3, #1
 800846c:	d007      	beq.n	800847e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f042 0201 	orr.w	r2, r2, #1
 800847c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800848c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2222      	movs	r2, #34	@ 0x22
 8008492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2210      	movs	r2, #16
 800849a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	893a      	ldrh	r2, [r7, #8]
 80084ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4a5c      	ldr	r2, [pc, #368]	@ (8008630 <HAL_I2C_Master_Receive+0x228>)
 80084be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80084c0:	8979      	ldrh	r1, [r7, #10]
 80084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 feac 	bl	8009224 <I2C_MasterRequestRead>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e1c4      	b.n	8008860 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d113      	bne.n	8008506 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084de:	2300      	movs	r3, #0
 80084e0:	623b      	str	r3, [r7, #32]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	623b      	str	r3, [r7, #32]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	623b      	str	r3, [r7, #32]
 80084f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	e198      	b.n	8008838 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800850a:	2b01      	cmp	r3, #1
 800850c:	d11b      	bne.n	8008546 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800851c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800851e:	2300      	movs	r3, #0
 8008520:	61fb      	str	r3, [r7, #28]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	61fb      	str	r3, [r7, #28]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e178      	b.n	8008838 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800854a:	2b02      	cmp	r3, #2
 800854c:	d11b      	bne.n	8008586 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800855c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800856c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800856e:	2300      	movs	r3, #0
 8008570:	61bb      	str	r3, [r7, #24]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	61bb      	str	r3, [r7, #24]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	e158      	b.n	8008838 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80085ac:	e144      	b.n	8008838 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	f200 80f1 	bhi.w	800879a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d123      	bne.n	8008608 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f001 fa23 	bl	8009a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e145      	b.n	8008860 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691a      	ldr	r2, [r3, #16]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085f0:	3b01      	subs	r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008606:	e117      	b.n	8008838 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800860c:	2b02      	cmp	r3, #2
 800860e:	d14e      	bne.n	80086ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	2200      	movs	r2, #0
 8008618:	4906      	ldr	r1, [pc, #24]	@ (8008634 <HAL_I2C_Master_Receive+0x22c>)
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f001 f84e 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d008      	beq.n	8008638 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e11a      	b.n	8008860 <HAL_I2C_Master_Receive+0x458>
 800862a:	bf00      	nop
 800862c:	00100002 	.word	0x00100002
 8008630:	ffff0000 	.word	0xffff0000
 8008634:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691a      	ldr	r2, [r3, #16]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	691a      	ldr	r2, [r3, #16]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008684:	b2d2      	uxtb	r2, r2
 8008686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008696:	3b01      	subs	r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086ac:	e0c4      	b.n	8008838 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	2200      	movs	r2, #0
 80086b6:	496c      	ldr	r1, [pc, #432]	@ (8008868 <HAL_I2C_Master_Receive+0x460>)
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 ffff 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e0cb      	b.n	8008860 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691a      	ldr	r2, [r3, #16]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	2200      	movs	r2, #0
 8008712:	4955      	ldr	r1, [pc, #340]	@ (8008868 <HAL_I2C_Master_Receive+0x460>)
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 ffd1 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e09d      	b.n	8008860 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	691a      	ldr	r2, [r3, #16]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008750:	3b01      	subs	r3, #1
 8008752:	b29a      	uxth	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800875c:	b29b      	uxth	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008782:	3b01      	subs	r3, #1
 8008784:	b29a      	uxth	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008798:	e04e      	b.n	8008838 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800879a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800879c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f001 f936 	bl	8009a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e058      	b.n	8008860 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	691a      	ldr	r2, [r3, #16]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	b2d2      	uxtb	r2, r2
 80087ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087ca:	3b01      	subs	r3, #1
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	3b01      	subs	r3, #1
 80087da:	b29a      	uxth	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d124      	bne.n	8008838 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d107      	bne.n	8008806 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008804:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800882e:	b29b      	uxth	r3, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800883c:	2b00      	cmp	r3, #0
 800883e:	f47f aeb6 	bne.w	80085ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	e000      	b.n	8008860 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800885e:	2302      	movs	r3, #2
  }
}
 8008860:	4618      	mov	r0, r3
 8008862:	3728      	adds	r7, #40	@ 0x28
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	00010004 	.word	0x00010004

0800886c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af02      	add	r7, sp, #8
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	4608      	mov	r0, r1
 8008876:	4611      	mov	r1, r2
 8008878:	461a      	mov	r2, r3
 800887a:	4603      	mov	r3, r0
 800887c:	817b      	strh	r3, [r7, #10]
 800887e:	460b      	mov	r3, r1
 8008880:	813b      	strh	r3, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008886:	f7fe fb61 	bl	8006f4c <HAL_GetTick>
 800888a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b20      	cmp	r3, #32
 8008896:	f040 80d9 	bne.w	8008a4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	2319      	movs	r3, #25
 80088a0:	2201      	movs	r2, #1
 80088a2:	496d      	ldr	r1, [pc, #436]	@ (8008a58 <HAL_I2C_Mem_Write+0x1ec>)
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 ff09 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80088b0:	2302      	movs	r3, #2
 80088b2:	e0cc      	b.n	8008a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_I2C_Mem_Write+0x56>
 80088be:	2302      	movs	r3, #2
 80088c0:	e0c5      	b.n	8008a4e <HAL_I2C_Mem_Write+0x1e2>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d007      	beq.n	80088e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0201 	orr.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80088f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2221      	movs	r2, #33	@ 0x21
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2240      	movs	r2, #64	@ 0x40
 8008904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a3a      	ldr	r2, [r7, #32]
 8008912:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008918:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4a4d      	ldr	r2, [pc, #308]	@ (8008a5c <HAL_I2C_Mem_Write+0x1f0>)
 8008928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800892a:	88f8      	ldrh	r0, [r7, #6]
 800892c:	893a      	ldrh	r2, [r7, #8]
 800892e:	8979      	ldrh	r1, [r7, #10]
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	4603      	mov	r3, r0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 fd40 	bl	80093c0 <I2C_RequestMemoryWrite>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d052      	beq.n	80089ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e081      	b.n	8008a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 ffce 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00d      	beq.n	8008976 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895e:	2b04      	cmp	r3, #4
 8008960:	d107      	bne.n	8008972 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e06b      	b.n	8008a4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897a:	781a      	ldrb	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	d11b      	bne.n	80089ec <HAL_I2C_Mem_Write+0x180>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d017      	beq.n	80089ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c0:	781a      	ldrb	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089d6:	3b01      	subs	r3, #1
 80089d8:	b29a      	uxth	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1aa      	bne.n	800894a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 ffc1 	bl	8009980 <I2C_WaitOnBTFFlagUntilTimeout>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00d      	beq.n	8008a20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d107      	bne.n	8008a1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e016      	b.n	8008a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e000      	b.n	8008a4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008a4c:	2302      	movs	r3, #2
  }
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	00100002 	.word	0x00100002
 8008a5c:	ffff0000 	.word	0xffff0000

08008a60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08c      	sub	sp, #48	@ 0x30
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	4608      	mov	r0, r1
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	817b      	strh	r3, [r7, #10]
 8008a72:	460b      	mov	r3, r1
 8008a74:	813b      	strh	r3, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a7a:	f7fe fa67 	bl	8006f4c <HAL_GetTick>
 8008a7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b20      	cmp	r3, #32
 8008a8a:	f040 8214 	bne.w	8008eb6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	2319      	movs	r3, #25
 8008a94:	2201      	movs	r2, #1
 8008a96:	497b      	ldr	r1, [pc, #492]	@ (8008c84 <HAL_I2C_Mem_Read+0x224>)
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 fe0f 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e207      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d101      	bne.n	8008ab6 <HAL_I2C_Mem_Read+0x56>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	e200      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x458>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d007      	beq.n	8008adc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0201 	orr.w	r2, r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2222      	movs	r2, #34	@ 0x22
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2240      	movs	r2, #64	@ 0x40
 8008af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4a5b      	ldr	r2, [pc, #364]	@ (8008c88 <HAL_I2C_Mem_Read+0x228>)
 8008b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b1e:	88f8      	ldrh	r0, [r7, #6]
 8008b20:	893a      	ldrh	r2, [r7, #8]
 8008b22:	8979      	ldrh	r1, [r7, #10]
 8008b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fcdc 	bl	80094ec <I2C_RequestMemoryRead>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e1bc      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d113      	bne.n	8008b6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b46:	2300      	movs	r3, #0
 8008b48:	623b      	str	r3, [r7, #32]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	623b      	str	r3, [r7, #32]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	623b      	str	r3, [r7, #32]
 8008b5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	e190      	b.n	8008e90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d11b      	bne.n	8008bae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	61fb      	str	r3, [r7, #28]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	61fb      	str	r3, [r7, #28]
 8008b9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	e170      	b.n	8008e90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d11b      	bne.n	8008bee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	61bb      	str	r3, [r7, #24]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	61bb      	str	r3, [r7, #24]
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	e150      	b.n	8008e90 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bee:	2300      	movs	r3, #0
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008c04:	e144      	b.n	8008e90 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	f200 80f1 	bhi.w	8008df2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d123      	bne.n	8008c60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 fef7 	bl	8009a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e145      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	691a      	ldr	r2, [r3, #16]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c36:	b2d2      	uxtb	r2, r2
 8008c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008c5e:	e117      	b.n	8008e90 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d14e      	bne.n	8008d06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	2200      	movs	r2, #0
 8008c70:	4906      	ldr	r1, [pc, #24]	@ (8008c8c <HAL_I2C_Mem_Read+0x22c>)
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 fd22 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d008      	beq.n	8008c90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e11a      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x458>
 8008c82:	bf00      	nop
 8008c84:	00100002 	.word	0x00100002
 8008c88:	ffff0000 	.word	0xffff0000
 8008c8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	691a      	ldr	r2, [r3, #16]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008caa:	b2d2      	uxtb	r2, r2
 8008cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	691a      	ldr	r2, [r3, #16]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cdc:	b2d2      	uxtb	r2, r2
 8008cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d04:	e0c4      	b.n	8008e90 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	496c      	ldr	r1, [pc, #432]	@ (8008ec0 <HAL_I2C_Mem_Read+0x460>)
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fcd3 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e0cb      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	691a      	ldr	r2, [r3, #16]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4955      	ldr	r1, [pc, #340]	@ (8008ec0 <HAL_I2C_Mem_Read+0x460>)
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 fca5 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e09d      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	691a      	ldr	r2, [r3, #16]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008da8:	3b01      	subs	r3, #1
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	691a      	ldr	r2, [r3, #16]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	3b01      	subs	r3, #1
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008df0:	e04e      	b.n	8008e90 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 fe0a 	bl	8009a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e058      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e10:	b2d2      	uxtb	r2, r2
 8008e12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e18:	1c5a      	adds	r2, r3, #1
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e22:	3b01      	subs	r3, #1
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	3b01      	subs	r3, #1
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	d124      	bne.n	8008e90 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d107      	bne.n	8008e5e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	691a      	ldr	r2, [r3, #16]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f47f aeb6 	bne.w	8008c06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e000      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008eb6:	2302      	movs	r3, #2
  }
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3728      	adds	r7, #40	@ 0x28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	00010004 	.word	0x00010004

08008ec4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	@ 0x28
 8008ec8:	af02      	add	r7, sp, #8
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	603b      	str	r3, [r7, #0]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008ed4:	f7fe f83a 	bl	8006f4c <HAL_GetTick>
 8008ed8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	f040 8111 	bne.w	800910e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	2319      	movs	r3, #25
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	4988      	ldr	r1, [pc, #544]	@ (8009118 <HAL_I2C_IsDeviceReady+0x254>)
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 fbe0 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008f02:	2302      	movs	r3, #2
 8008f04:	e104      	b.n	8009110 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_I2C_IsDeviceReady+0x50>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e0fd      	b.n	8009110 <HAL_I2C_IsDeviceReady+0x24c>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d007      	beq.n	8008f3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f042 0201 	orr.w	r2, r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2224      	movs	r2, #36	@ 0x24
 8008f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4a70      	ldr	r2, [pc, #448]	@ (800911c <HAL_I2C_IsDeviceReady+0x258>)
 8008f5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fb9e 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00d      	beq.n	8008fa2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f94:	d103      	bne.n	8008f9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f9c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e0b6      	b.n	8009110 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fa2:	897b      	ldrh	r3, [r7, #10]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008fb0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008fb2:	f7fd ffcb 	bl	8006f4c <HAL_GetTick>
 8008fb6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	bf0c      	ite	eq
 8008fc6:	2301      	moveq	r3, #1
 8008fc8:	2300      	movne	r3, #0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fdc:	bf0c      	ite	eq
 8008fde:	2301      	moveq	r3, #1
 8008fe0:	2300      	movne	r3, #0
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008fe6:	e025      	b.n	8009034 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008fe8:	f7fd ffb0 	bl	8006f4c <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d302      	bcc.n	8008ffe <HAL_I2C_IsDeviceReady+0x13a>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d103      	bne.n	8009006 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	22a0      	movs	r2, #160	@ 0xa0
 8009002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b02      	cmp	r3, #2
 8009012:	bf0c      	ite	eq
 8009014:	2301      	moveq	r3, #1
 8009016:	2300      	movne	r3, #0
 8009018:	b2db      	uxtb	r3, r3
 800901a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800902a:	bf0c      	ite	eq
 800902c:	2301      	moveq	r3, #1
 800902e:	2300      	movne	r3, #0
 8009030:	b2db      	uxtb	r3, r3
 8009032:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2ba0      	cmp	r3, #160	@ 0xa0
 800903e:	d005      	beq.n	800904c <HAL_I2C_IsDeviceReady+0x188>
 8009040:	7dfb      	ldrb	r3, [r7, #23]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <HAL_I2C_IsDeviceReady+0x188>
 8009046:	7dbb      	ldrb	r3, [r7, #22]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0cd      	beq.n	8008fe8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2220      	movs	r2, #32
 8009050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b02      	cmp	r3, #2
 8009060:	d129      	bne.n	80090b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009070:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	613b      	str	r3, [r7, #16]
 8009086:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2319      	movs	r3, #25
 800908e:	2201      	movs	r2, #1
 8009090:	4921      	ldr	r1, [pc, #132]	@ (8009118 <HAL_I2C_IsDeviceReady+0x254>)
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fb12 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e036      	b.n	8009110 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	e02c      	b.n	8009110 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80090ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	2319      	movs	r3, #25
 80090d6:	2201      	movs	r2, #1
 80090d8:	490f      	ldr	r1, [pc, #60]	@ (8009118 <HAL_I2C_IsDeviceReady+0x254>)
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 faee 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e012      	b.n	8009110 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	3301      	adds	r3, #1
 80090ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	f4ff af32 	bcc.w	8008f5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e000      	b.n	8009110 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800910e:	2302      	movs	r3, #2
  }
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	00100002 	.word	0x00100002
 800911c:	ffff0000 	.word	0xffff0000

08009120 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af02      	add	r7, sp, #8
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	607a      	str	r2, [r7, #4]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	460b      	mov	r3, r1
 800912e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009134:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b08      	cmp	r3, #8
 800913a:	d006      	beq.n	800914a <I2C_MasterRequestWrite+0x2a>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d003      	beq.n	800914a <I2C_MasterRequestWrite+0x2a>
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009148:	d108      	bne.n	800915c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	e00b      	b.n	8009174 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009160:	2b12      	cmp	r3, #18
 8009162:	d107      	bne.n	8009174 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009172:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 fa9b 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00d      	beq.n	80091a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800919a:	d103      	bne.n	80091a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e035      	b.n	8009214 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091b0:	d108      	bne.n	80091c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091b2:	897b      	ldrh	r3, [r7, #10]
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	461a      	mov	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80091c0:	611a      	str	r2, [r3, #16]
 80091c2:	e01b      	b.n	80091fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80091c4:	897b      	ldrh	r3, [r7, #10]
 80091c6:	11db      	asrs	r3, r3, #7
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 0306 	and.w	r3, r3, #6
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	f063 030f 	orn	r3, r3, #15
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	490e      	ldr	r1, [pc, #56]	@ (800921c <I2C_MasterRequestWrite+0xfc>)
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 fae4 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e010      	b.n	8009214 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80091f2:	897b      	ldrh	r3, [r7, #10]
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	4907      	ldr	r1, [pc, #28]	@ (8009220 <I2C_MasterRequestWrite+0x100>)
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 fad4 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	00010008 	.word	0x00010008
 8009220:	00010002 	.word	0x00010002

08009224 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af02      	add	r7, sp, #8
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	460b      	mov	r3, r1
 8009232:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009238:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009248:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b08      	cmp	r3, #8
 800924e:	d006      	beq.n	800925e <I2C_MasterRequestRead+0x3a>
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d003      	beq.n	800925e <I2C_MasterRequestRead+0x3a>
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800925c:	d108      	bne.n	8009270 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	e00b      	b.n	8009288 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009274:	2b11      	cmp	r3, #17
 8009276:	d107      	bne.n	8009288 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f000 fa11 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00d      	beq.n	80092bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092ae:	d103      	bne.n	80092b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e079      	b.n	80093b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c4:	d108      	bne.n	80092d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80092c6:	897b      	ldrh	r3, [r7, #10]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	f043 0301 	orr.w	r3, r3, #1
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	611a      	str	r2, [r3, #16]
 80092d6:	e05f      	b.n	8009398 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80092d8:	897b      	ldrh	r3, [r7, #10]
 80092da:	11db      	asrs	r3, r3, #7
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 0306 	and.w	r3, r3, #6
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f063 030f 	orn	r3, r3, #15
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	4930      	ldr	r1, [pc, #192]	@ (80093b8 <I2C_MasterRequestRead+0x194>)
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 fa5a 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e054      	b.n	80093b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009306:	897b      	ldrh	r3, [r7, #10]
 8009308:	b2da      	uxtb	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	4929      	ldr	r1, [pc, #164]	@ (80093bc <I2C_MasterRequestRead+0x198>)
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fa4a 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e044      	b.n	80093b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009326:	2300      	movs	r3, #0
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800934a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 f9af 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00d      	beq.n	8009380 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800936e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009372:	d103      	bne.n	800937c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800937a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e017      	b.n	80093b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009380:	897b      	ldrh	r3, [r7, #10]
 8009382:	11db      	asrs	r3, r3, #7
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f003 0306 	and.w	r3, r3, #6
 800938a:	b2db      	uxtb	r3, r3
 800938c:	f063 030e 	orn	r3, r3, #14
 8009390:	b2da      	uxtb	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	4907      	ldr	r1, [pc, #28]	@ (80093bc <I2C_MasterRequestRead+0x198>)
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 fa06 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	00010008 	.word	0x00010008
 80093bc:	00010002 	.word	0x00010002

080093c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	4608      	mov	r0, r1
 80093ca:	4611      	mov	r1, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	817b      	strh	r3, [r7, #10]
 80093d2:	460b      	mov	r3, r1
 80093d4:	813b      	strh	r3, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 f960 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00d      	beq.n	800941e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800940c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009410:	d103      	bne.n	800941a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009418:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e05f      	b.n	80094de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800941e:	897b      	ldrh	r3, [r7, #10]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800942c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	6a3a      	ldr	r2, [r7, #32]
 8009432:	492d      	ldr	r1, [pc, #180]	@ (80094e8 <I2C_RequestMemoryWrite+0x128>)
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f9bb 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e04c      	b.n	80094de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800945a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945c:	6a39      	ldr	r1, [r7, #32]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 fa46 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00d      	beq.n	8009486 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946e:	2b04      	cmp	r3, #4
 8009470:	d107      	bne.n	8009482 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e02b      	b.n	80094de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009486:	88fb      	ldrh	r3, [r7, #6]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d105      	bne.n	8009498 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800948c:	893b      	ldrh	r3, [r7, #8]
 800948e:	b2da      	uxtb	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	611a      	str	r2, [r3, #16]
 8009496:	e021      	b.n	80094dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009498:	893b      	ldrh	r3, [r7, #8]
 800949a:	0a1b      	lsrs	r3, r3, #8
 800949c:	b29b      	uxth	r3, r3
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094a8:	6a39      	ldr	r1, [r7, #32]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 fa20 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d107      	bne.n	80094ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e005      	b.n	80094de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094d2:	893b      	ldrh	r3, [r7, #8]
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	00010002 	.word	0x00010002

080094ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	461a      	mov	r2, r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	817b      	strh	r3, [r7, #10]
 80094fe:	460b      	mov	r3, r1
 8009500:	813b      	strh	r3, [r7, #8]
 8009502:	4613      	mov	r3, r2
 8009504:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009514:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	2200      	movs	r2, #0
 800952e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 f8c2 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00d      	beq.n	800955a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800954c:	d103      	bne.n	8009556 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009554:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e0aa      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800955a:	897b      	ldrh	r3, [r7, #10]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	6a3a      	ldr	r2, [r7, #32]
 800956e:	4952      	ldr	r1, [pc, #328]	@ (80096b8 <I2C_RequestMemoryRead+0x1cc>)
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f91d 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e097      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009598:	6a39      	ldr	r1, [r7, #32]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 f9a8 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00d      	beq.n	80095c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	d107      	bne.n	80095be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e076      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d105      	bne.n	80095d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095c8:	893b      	ldrh	r3, [r7, #8]
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	611a      	str	r2, [r3, #16]
 80095d2:	e021      	b.n	8009618 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80095d4:	893b      	ldrh	r3, [r7, #8]
 80095d6:	0a1b      	lsrs	r3, r3, #8
 80095d8:	b29b      	uxth	r3, r3
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095e4:	6a39      	ldr	r1, [r7, #32]
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f982 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00d      	beq.n	800960e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f6:	2b04      	cmp	r3, #4
 80095f8:	d107      	bne.n	800960a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e050      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800960e:	893b      	ldrh	r3, [r7, #8]
 8009610:	b2da      	uxtb	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800961a:	6a39      	ldr	r1, [r7, #32]
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 f967 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00d      	beq.n	8009644 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962c:	2b04      	cmp	r3, #4
 800962e:	d107      	bne.n	8009640 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800963e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e035      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009652:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	2200      	movs	r2, #0
 800965c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f82b 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00d      	beq.n	8009688 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800967a:	d103      	bne.n	8009684 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009682:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e013      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009688:	897b      	ldrh	r3, [r7, #10]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f043 0301 	orr.w	r3, r3, #1
 8009690:	b2da      	uxtb	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969a:	6a3a      	ldr	r2, [r7, #32]
 800969c:	4906      	ldr	r1, [pc, #24]	@ (80096b8 <I2C_RequestMemoryRead+0x1cc>)
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 f886 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	00010002 	.word	0x00010002

080096bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	603b      	str	r3, [r7, #0]
 80096c8:	4613      	mov	r3, r2
 80096ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096cc:	e048      	b.n	8009760 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d4:	d044      	beq.n	8009760 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096d6:	f7fd fc39 	bl	8006f4c <HAL_GetTick>
 80096da:	4602      	mov	r2, r0
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d302      	bcc.n	80096ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d139      	bne.n	8009760 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	0c1b      	lsrs	r3, r3, #16
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d10d      	bne.n	8009712 <I2C_WaitOnFlagUntilTimeout+0x56>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	43da      	mvns	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	4013      	ands	r3, r2
 8009702:	b29b      	uxth	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	bf0c      	ite	eq
 8009708:	2301      	moveq	r3, #1
 800970a:	2300      	movne	r3, #0
 800970c:	b2db      	uxtb	r3, r3
 800970e:	461a      	mov	r2, r3
 8009710:	e00c      	b.n	800972c <I2C_WaitOnFlagUntilTimeout+0x70>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	43da      	mvns	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	4013      	ands	r3, r2
 800971e:	b29b      	uxth	r3, r3
 8009720:	2b00      	cmp	r3, #0
 8009722:	bf0c      	ite	eq
 8009724:	2301      	moveq	r3, #1
 8009726:	2300      	movne	r3, #0
 8009728:	b2db      	uxtb	r3, r3
 800972a:	461a      	mov	r2, r3
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	429a      	cmp	r2, r3
 8009730:	d116      	bne.n	8009760 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2220      	movs	r2, #32
 800973c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974c:	f043 0220 	orr.w	r2, r3, #32
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e023      	b.n	80097a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	0c1b      	lsrs	r3, r3, #16
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b01      	cmp	r3, #1
 8009768:	d10d      	bne.n	8009786 <I2C_WaitOnFlagUntilTimeout+0xca>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	43da      	mvns	r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	4013      	ands	r3, r2
 8009776:	b29b      	uxth	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	bf0c      	ite	eq
 800977c:	2301      	moveq	r3, #1
 800977e:	2300      	movne	r3, #0
 8009780:	b2db      	uxtb	r3, r3
 8009782:	461a      	mov	r2, r3
 8009784:	e00c      	b.n	80097a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	43da      	mvns	r2, r3
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	4013      	ands	r3, r2
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	bf0c      	ite	eq
 8009798:	2301      	moveq	r3, #1
 800979a:	2300      	movne	r3, #0
 800979c:	b2db      	uxtb	r3, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d093      	beq.n	80096ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097be:	e071      	b.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ce:	d123      	bne.n	8009818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80097e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009804:	f043 0204 	orr.w	r2, r3, #4
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e067      	b.n	80098e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981e:	d041      	beq.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009820:	f7fd fb94 	bl	8006f4c <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	429a      	cmp	r2, r3
 800982e:	d302      	bcc.n	8009836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d136      	bne.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	0c1b      	lsrs	r3, r3, #16
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b01      	cmp	r3, #1
 800983e:	d10c      	bne.n	800985a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	43da      	mvns	r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	4013      	ands	r3, r2
 800984c:	b29b      	uxth	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	bf14      	ite	ne
 8009852:	2301      	movne	r3, #1
 8009854:	2300      	moveq	r3, #0
 8009856:	b2db      	uxtb	r3, r3
 8009858:	e00b      	b.n	8009872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	43da      	mvns	r2, r3
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4013      	ands	r3, r2
 8009866:	b29b      	uxth	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	bf14      	ite	ne
 800986c:	2301      	movne	r3, #1
 800986e:	2300      	moveq	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d016      	beq.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009890:	f043 0220 	orr.w	r2, r3, #32
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e021      	b.n	80098e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	0c1b      	lsrs	r3, r3, #16
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d10c      	bne.n	80098c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	43da      	mvns	r2, r3
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	4013      	ands	r3, r2
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bf14      	ite	ne
 80098c0:	2301      	movne	r3, #1
 80098c2:	2300      	moveq	r3, #0
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	e00b      	b.n	80098e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	43da      	mvns	r2, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	4013      	ands	r3, r2
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bf14      	ite	ne
 80098da:	2301      	movne	r3, #1
 80098dc:	2300      	moveq	r3, #0
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f47f af6d 	bne.w	80097c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098fc:	e034      	b.n	8009968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 f8e3 	bl	8009aca <I2C_IsAcknowledgeFailed>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e034      	b.n	8009978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d028      	beq.n	8009968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009916:	f7fd fb19 	bl	8006f4c <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	d302      	bcc.n	800992c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d11d      	bne.n	8009968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009936:	2b80      	cmp	r3, #128	@ 0x80
 8009938:	d016      	beq.n	8009968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2220      	movs	r2, #32
 8009944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009954:	f043 0220 	orr.w	r2, r3, #32
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e007      	b.n	8009978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009972:	2b80      	cmp	r3, #128	@ 0x80
 8009974:	d1c3      	bne.n	80098fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800998c:	e034      	b.n	80099f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 f89b 	bl	8009aca <I2C_IsAcknowledgeFailed>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e034      	b.n	8009a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a4:	d028      	beq.n	80099f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099a6:	f7fd fad1 	bl	8006f4c <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d302      	bcc.n	80099bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d11d      	bne.n	80099f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f003 0304 	and.w	r3, r3, #4
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	d016      	beq.n	80099f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e4:	f043 0220 	orr.w	r2, r3, #32
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e007      	b.n	8009a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	f003 0304 	and.w	r3, r3, #4
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	d1c3      	bne.n	800998e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a1c:	e049      	b.n	8009ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d119      	bne.n	8009a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f06f 0210 	mvn.w	r2, #16
 8009a34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e030      	b.n	8009ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a60:	f7fd fa74 	bl	8006f4c <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d302      	bcc.n	8009a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d11d      	bne.n	8009ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a80:	2b40      	cmp	r3, #64	@ 0x40
 8009a82:	d016      	beq.n	8009ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9e:	f043 0220 	orr.w	r2, r3, #32
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e007      	b.n	8009ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009abc:	2b40      	cmp	r3, #64	@ 0x40
 8009abe:	d1ae      	bne.n	8009a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ae0:	d11b      	bne.n	8009b1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009aea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b06:	f043 0204 	orr.w	r2, r3, #4
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e000      	b.n	8009b1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e036      	b.n	8009ba8 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8009b42:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f245 5255 	movw	r2, #21845	@ 0x5555
 8009b4c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	6852      	ldr	r2, [r2, #4]
 8009b56:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6892      	ldr	r2, [r2, #8]
 8009b60:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009b62:	f7fd f9f3 	bl	8006f4c <HAL_GetTick>
 8009b66:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009b68:	e011      	b.n	8009b8e <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009b6a:	f7fd f9ef 	bl	8006f4c <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	f641 0201 	movw	r2, #6145	@ 0x1801
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d908      	bls.n	8009b8e <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e00c      	b.n	8009ba8 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f003 0303 	and.w	r3, r3, #3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e6      	bne.n	8009b6a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8009ba4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8009bc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e267      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d075      	beq.n	8009cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009bee:	4b88      	ldr	r3, [pc, #544]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f003 030c 	and.w	r3, r3, #12
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d00c      	beq.n	8009c14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009bfa:	4b85      	ldr	r3, [pc, #532]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009c02:	2b08      	cmp	r3, #8
 8009c04:	d112      	bne.n	8009c2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c06:	4b82      	ldr	r3, [pc, #520]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c12:	d10b      	bne.n	8009c2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c14:	4b7e      	ldr	r3, [pc, #504]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d05b      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x108>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d157      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e242      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c34:	d106      	bne.n	8009c44 <HAL_RCC_OscConfig+0x74>
 8009c36:	4b76      	ldr	r3, [pc, #472]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a75      	ldr	r2, [pc, #468]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	e01d      	b.n	8009c80 <HAL_RCC_OscConfig+0xb0>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c4c:	d10c      	bne.n	8009c68 <HAL_RCC_OscConfig+0x98>
 8009c4e:	4b70      	ldr	r3, [pc, #448]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a6f      	ldr	r2, [pc, #444]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	e00b      	b.n	8009c80 <HAL_RCC_OscConfig+0xb0>
 8009c68:	4b69      	ldr	r3, [pc, #420]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a68      	ldr	r2, [pc, #416]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	4b66      	ldr	r3, [pc, #408]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a65      	ldr	r2, [pc, #404]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d013      	beq.n	8009cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c88:	f7fd f960 	bl	8006f4c <HAL_GetTick>
 8009c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c8e:	e008      	b.n	8009ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c90:	f7fd f95c 	bl	8006f4c <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	2b64      	cmp	r3, #100	@ 0x64
 8009c9c:	d901      	bls.n	8009ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e207      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0f0      	beq.n	8009c90 <HAL_RCC_OscConfig+0xc0>
 8009cae:	e014      	b.n	8009cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cb0:	f7fd f94c 	bl	8006f4c <HAL_GetTick>
 8009cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cb6:	e008      	b.n	8009cca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cb8:	f7fd f948 	bl	8006f4c <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	2b64      	cmp	r3, #100	@ 0x64
 8009cc4:	d901      	bls.n	8009cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e1f3      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cca:	4b51      	ldr	r3, [pc, #324]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1f0      	bne.n	8009cb8 <HAL_RCC_OscConfig+0xe8>
 8009cd6:	e000      	b.n	8009cda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d063      	beq.n	8009dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f003 030c 	and.w	r3, r3, #12
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00b      	beq.n	8009d0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009cf2:	4b47      	ldr	r3, [pc, #284]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009cfa:	2b08      	cmp	r3, #8
 8009cfc:	d11c      	bne.n	8009d38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009cfe:	4b44      	ldr	r3, [pc, #272]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d116      	bne.n	8009d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d0a:	4b41      	ldr	r3, [pc, #260]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d005      	beq.n	8009d22 <HAL_RCC_OscConfig+0x152>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d001      	beq.n	8009d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e1c7      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d22:	4b3b      	ldr	r3, [pc, #236]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	4937      	ldr	r1, [pc, #220]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d36:	e03a      	b.n	8009dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d020      	beq.n	8009d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d40:	4b34      	ldr	r3, [pc, #208]	@ (8009e14 <HAL_RCC_OscConfig+0x244>)
 8009d42:	2201      	movs	r2, #1
 8009d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d46:	f7fd f901 	bl	8006f4c <HAL_GetTick>
 8009d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d4c:	e008      	b.n	8009d60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d4e:	f7fd f8fd 	bl	8006f4c <HAL_GetTick>
 8009d52:	4602      	mov	r2, r0
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d901      	bls.n	8009d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e1a8      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d60:	4b2b      	ldr	r3, [pc, #172]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0302 	and.w	r3, r3, #2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d0f0      	beq.n	8009d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d6c:	4b28      	ldr	r3, [pc, #160]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	00db      	lsls	r3, r3, #3
 8009d7a:	4925      	ldr	r1, [pc, #148]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	600b      	str	r3, [r1, #0]
 8009d80:	e015      	b.n	8009dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d82:	4b24      	ldr	r3, [pc, #144]	@ (8009e14 <HAL_RCC_OscConfig+0x244>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d88:	f7fd f8e0 	bl	8006f4c <HAL_GetTick>
 8009d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d8e:	e008      	b.n	8009da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d90:	f7fd f8dc 	bl	8006f4c <HAL_GetTick>
 8009d94:	4602      	mov	r2, r0
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d901      	bls.n	8009da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e187      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009da2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1f0      	bne.n	8009d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0308 	and.w	r3, r3, #8
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d036      	beq.n	8009e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d016      	beq.n	8009df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dc2:	4b15      	ldr	r3, [pc, #84]	@ (8009e18 <HAL_RCC_OscConfig+0x248>)
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc8:	f7fd f8c0 	bl	8006f4c <HAL_GetTick>
 8009dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009dce:	e008      	b.n	8009de2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dd0:	f7fd f8bc 	bl	8006f4c <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e167      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009de2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e10 <HAL_RCC_OscConfig+0x240>)
 8009de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0f0      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x200>
 8009dee:	e01b      	b.n	8009e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009df0:	4b09      	ldr	r3, [pc, #36]	@ (8009e18 <HAL_RCC_OscConfig+0x248>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009df6:	f7fd f8a9 	bl	8006f4c <HAL_GetTick>
 8009dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009dfc:	e00e      	b.n	8009e1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dfe:	f7fd f8a5 	bl	8006f4c <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d907      	bls.n	8009e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e150      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
 8009e10:	40023800 	.word	0x40023800
 8009e14:	42470000 	.word	0x42470000
 8009e18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e1c:	4b88      	ldr	r3, [pc, #544]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1ea      	bne.n	8009dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0304 	and.w	r3, r3, #4
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 8097 	beq.w	8009f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e3a:	4b81      	ldr	r3, [pc, #516]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10f      	bne.n	8009e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e46:	2300      	movs	r3, #0
 8009e48:	60bb      	str	r3, [r7, #8]
 8009e4a:	4b7d      	ldr	r3, [pc, #500]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e4e:	4a7c      	ldr	r2, [pc, #496]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8009e56:	4b7a      	ldr	r3, [pc, #488]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e5e:	60bb      	str	r3, [r7, #8]
 8009e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e62:	2301      	movs	r3, #1
 8009e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e66:	4b77      	ldr	r3, [pc, #476]	@ (800a044 <HAL_RCC_OscConfig+0x474>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d118      	bne.n	8009ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e72:	4b74      	ldr	r3, [pc, #464]	@ (800a044 <HAL_RCC_OscConfig+0x474>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a73      	ldr	r2, [pc, #460]	@ (800a044 <HAL_RCC_OscConfig+0x474>)
 8009e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e7e:	f7fd f865 	bl	8006f4c <HAL_GetTick>
 8009e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e84:	e008      	b.n	8009e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e86:	f7fd f861 	bl	8006f4c <HAL_GetTick>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d901      	bls.n	8009e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e10c      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e98:	4b6a      	ldr	r3, [pc, #424]	@ (800a044 <HAL_RCC_OscConfig+0x474>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0f0      	beq.n	8009e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d106      	bne.n	8009eba <HAL_RCC_OscConfig+0x2ea>
 8009eac:	4b64      	ldr	r3, [pc, #400]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eb0:	4a63      	ldr	r2, [pc, #396]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009eb2:	f043 0301 	orr.w	r3, r3, #1
 8009eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009eb8:	e01c      	b.n	8009ef4 <HAL_RCC_OscConfig+0x324>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	2b05      	cmp	r3, #5
 8009ec0:	d10c      	bne.n	8009edc <HAL_RCC_OscConfig+0x30c>
 8009ec2:	4b5f      	ldr	r3, [pc, #380]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ec6:	4a5e      	ldr	r2, [pc, #376]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009ec8:	f043 0304 	orr.w	r3, r3, #4
 8009ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ece:	4b5c      	ldr	r3, [pc, #368]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ed2:	4a5b      	ldr	r2, [pc, #364]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009ed4:	f043 0301 	orr.w	r3, r3, #1
 8009ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009eda:	e00b      	b.n	8009ef4 <HAL_RCC_OscConfig+0x324>
 8009edc:	4b58      	ldr	r3, [pc, #352]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ee0:	4a57      	ldr	r2, [pc, #348]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009ee2:	f023 0301 	bic.w	r3, r3, #1
 8009ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ee8:	4b55      	ldr	r3, [pc, #340]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eec:	4a54      	ldr	r2, [pc, #336]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009eee:	f023 0304 	bic.w	r3, r3, #4
 8009ef2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d015      	beq.n	8009f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009efc:	f7fd f826 	bl	8006f4c <HAL_GetTick>
 8009f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f02:	e00a      	b.n	8009f1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f04:	f7fd f822 	bl	8006f4c <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d901      	bls.n	8009f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e0cb      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f1a:	4b49      	ldr	r3, [pc, #292]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0ee      	beq.n	8009f04 <HAL_RCC_OscConfig+0x334>
 8009f26:	e014      	b.n	8009f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f28:	f7fd f810 	bl	8006f4c <HAL_GetTick>
 8009f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f2e:	e00a      	b.n	8009f46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f30:	f7fd f80c 	bl	8006f4c <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d901      	bls.n	8009f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e0b5      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f46:	4b3e      	ldr	r3, [pc, #248]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1ee      	bne.n	8009f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d105      	bne.n	8009f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f58:	4b39      	ldr	r3, [pc, #228]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5c:	4a38      	ldr	r2, [pc, #224]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 80a1 	beq.w	800a0b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f6e:	4b34      	ldr	r3, [pc, #208]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f003 030c 	and.w	r3, r3, #12
 8009f76:	2b08      	cmp	r3, #8
 8009f78:	d05c      	beq.n	800a034 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d141      	bne.n	800a006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f82:	4b31      	ldr	r3, [pc, #196]	@ (800a048 <HAL_RCC_OscConfig+0x478>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f88:	f7fc ffe0 	bl	8006f4c <HAL_GetTick>
 8009f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f8e:	e008      	b.n	8009fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f90:	f7fc ffdc 	bl	8006f4c <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d901      	bls.n	8009fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e087      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fa2:	4b27      	ldr	r3, [pc, #156]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1f0      	bne.n	8009f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69da      	ldr	r2, [r3, #28]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fbc:	019b      	lsls	r3, r3, #6
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc4:	085b      	lsrs	r3, r3, #1
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	041b      	lsls	r3, r3, #16
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd0:	061b      	lsls	r3, r3, #24
 8009fd2:	491b      	ldr	r1, [pc, #108]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fd8:	4b1b      	ldr	r3, [pc, #108]	@ (800a048 <HAL_RCC_OscConfig+0x478>)
 8009fda:	2201      	movs	r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fde:	f7fc ffb5 	bl	8006f4c <HAL_GetTick>
 8009fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fe4:	e008      	b.n	8009ff8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fe6:	f7fc ffb1 	bl	8006f4c <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d901      	bls.n	8009ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e05c      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ff8:	4b11      	ldr	r3, [pc, #68]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d0f0      	beq.n	8009fe6 <HAL_RCC_OscConfig+0x416>
 800a004:	e054      	b.n	800a0b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a006:	4b10      	ldr	r3, [pc, #64]	@ (800a048 <HAL_RCC_OscConfig+0x478>)
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a00c:	f7fc ff9e 	bl	8006f4c <HAL_GetTick>
 800a010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a012:	e008      	b.n	800a026 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a014:	f7fc ff9a 	bl	8006f4c <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d901      	bls.n	800a026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e045      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a026:	4b06      	ldr	r3, [pc, #24]	@ (800a040 <HAL_RCC_OscConfig+0x470>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1f0      	bne.n	800a014 <HAL_RCC_OscConfig+0x444>
 800a032:	e03d      	b.n	800a0b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d107      	bne.n	800a04c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e038      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
 800a040:	40023800 	.word	0x40023800
 800a044:	40007000 	.word	0x40007000
 800a048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a04c:	4b1b      	ldr	r3, [pc, #108]	@ (800a0bc <HAL_RCC_OscConfig+0x4ec>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d028      	beq.n	800a0ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a064:	429a      	cmp	r2, r3
 800a066:	d121      	bne.n	800a0ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a072:	429a      	cmp	r2, r3
 800a074:	d11a      	bne.n	800a0ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a07c:	4013      	ands	r3, r2
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a084:	4293      	cmp	r3, r2
 800a086:	d111      	bne.n	800a0ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a092:	085b      	lsrs	r3, r3, #1
 800a094:	3b01      	subs	r3, #1
 800a096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a098:	429a      	cmp	r2, r3
 800a09a:	d107      	bne.n	800a0ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d001      	beq.n	800a0b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e000      	b.n	800a0b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	40023800 	.word	0x40023800

0800a0c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e0cc      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0d4:	4b68      	ldr	r3, [pc, #416]	@ (800a278 <HAL_RCC_ClockConfig+0x1b8>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d90c      	bls.n	800a0fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0e2:	4b65      	ldr	r3, [pc, #404]	@ (800a278 <HAL_RCC_ClockConfig+0x1b8>)
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0ea:	4b63      	ldr	r3, [pc, #396]	@ (800a278 <HAL_RCC_ClockConfig+0x1b8>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0307 	and.w	r3, r3, #7
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d001      	beq.n	800a0fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e0b8      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0302 	and.w	r3, r3, #2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d020      	beq.n	800a14a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a114:	4b59      	ldr	r3, [pc, #356]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	4a58      	ldr	r2, [pc, #352]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a11a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a11e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0308 	and.w	r3, r3, #8
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a12c:	4b53      	ldr	r3, [pc, #332]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	4a52      	ldr	r2, [pc, #328]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a132:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a138:	4b50      	ldr	r3, [pc, #320]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	494d      	ldr	r1, [pc, #308]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a146:	4313      	orrs	r3, r2
 800a148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	2b00      	cmp	r3, #0
 800a154:	d044      	beq.n	800a1e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d107      	bne.n	800a16e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a15e:	4b47      	ldr	r3, [pc, #284]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d119      	bne.n	800a19e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e07f      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	2b02      	cmp	r3, #2
 800a174:	d003      	beq.n	800a17e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d107      	bne.n	800a18e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a17e:	4b3f      	ldr	r3, [pc, #252]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a186:	2b00      	cmp	r3, #0
 800a188:	d109      	bne.n	800a19e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e06f      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a18e:	4b3b      	ldr	r3, [pc, #236]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0302 	and.w	r3, r3, #2
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e067      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a19e:	4b37      	ldr	r3, [pc, #220]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f023 0203 	bic.w	r2, r3, #3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	4934      	ldr	r1, [pc, #208]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a1b0:	f7fc fecc 	bl	8006f4c <HAL_GetTick>
 800a1b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1b6:	e00a      	b.n	800a1ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1b8:	f7fc fec8 	bl	8006f4c <HAL_GetTick>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d901      	bls.n	800a1ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e04f      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1ce:	4b2b      	ldr	r3, [pc, #172]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f003 020c 	and.w	r2, r3, #12
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d1eb      	bne.n	800a1b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1e0:	4b25      	ldr	r3, [pc, #148]	@ (800a278 <HAL_RCC_ClockConfig+0x1b8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d20c      	bcs.n	800a208 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1ee:	4b22      	ldr	r3, [pc, #136]	@ (800a278 <HAL_RCC_ClockConfig+0x1b8>)
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f6:	4b20      	ldr	r3, [pc, #128]	@ (800a278 <HAL_RCC_ClockConfig+0x1b8>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0307 	and.w	r3, r3, #7
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d001      	beq.n	800a208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e032      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a214:	4b19      	ldr	r3, [pc, #100]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	4916      	ldr	r1, [pc, #88]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a222:	4313      	orrs	r3, r2
 800a224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0308 	and.w	r3, r3, #8
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d009      	beq.n	800a246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a232:	4b12      	ldr	r3, [pc, #72]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	490e      	ldr	r1, [pc, #56]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a242:	4313      	orrs	r3, r2
 800a244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a246:	f000 f821 	bl	800a28c <HAL_RCC_GetSysClockFreq>
 800a24a:	4602      	mov	r2, r0
 800a24c:	4b0b      	ldr	r3, [pc, #44]	@ (800a27c <HAL_RCC_ClockConfig+0x1bc>)
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	091b      	lsrs	r3, r3, #4
 800a252:	f003 030f 	and.w	r3, r3, #15
 800a256:	490a      	ldr	r1, [pc, #40]	@ (800a280 <HAL_RCC_ClockConfig+0x1c0>)
 800a258:	5ccb      	ldrb	r3, [r1, r3]
 800a25a:	fa22 f303 	lsr.w	r3, r2, r3
 800a25e:	4a09      	ldr	r2, [pc, #36]	@ (800a284 <HAL_RCC_ClockConfig+0x1c4>)
 800a260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a262:	4b09      	ldr	r3, [pc, #36]	@ (800a288 <HAL_RCC_ClockConfig+0x1c8>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4618      	mov	r0, r3
 800a268:	f7f9 ffa0 	bl	80041ac <HAL_InitTick>

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	40023c00 	.word	0x40023c00
 800a27c:	40023800 	.word	0x40023800
 800a280:	08014070 	.word	0x08014070
 800a284:	2000000c 	.word	0x2000000c
 800a288:	20000070 	.word	0x20000070

0800a28c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a28c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a290:	b090      	sub	sp, #64	@ 0x40
 800a292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a294:	2300      	movs	r3, #0
 800a296:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2a4:	4b59      	ldr	r3, [pc, #356]	@ (800a40c <HAL_RCC_GetSysClockFreq+0x180>)
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	f003 030c 	and.w	r3, r3, #12
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d00d      	beq.n	800a2cc <HAL_RCC_GetSysClockFreq+0x40>
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	f200 80a1 	bhi.w	800a3f8 <HAL_RCC_GetSysClockFreq+0x16c>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d002      	beq.n	800a2c0 <HAL_RCC_GetSysClockFreq+0x34>
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d003      	beq.n	800a2c6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a2be:	e09b      	b.n	800a3f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a2c0:	4b53      	ldr	r3, [pc, #332]	@ (800a410 <HAL_RCC_GetSysClockFreq+0x184>)
 800a2c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a2c4:	e09b      	b.n	800a3fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a2c6:	4b53      	ldr	r3, [pc, #332]	@ (800a414 <HAL_RCC_GetSysClockFreq+0x188>)
 800a2c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a2ca:	e098      	b.n	800a3fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a2cc:	4b4f      	ldr	r3, [pc, #316]	@ (800a40c <HAL_RCC_GetSysClockFreq+0x180>)
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a2d6:	4b4d      	ldr	r3, [pc, #308]	@ (800a40c <HAL_RCC_GetSysClockFreq+0x180>)
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d028      	beq.n	800a334 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2e2:	4b4a      	ldr	r3, [pc, #296]	@ (800a40c <HAL_RCC_GetSysClockFreq+0x180>)
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	099b      	lsrs	r3, r3, #6
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	623b      	str	r3, [r7, #32]
 800a2ec:	627a      	str	r2, [r7, #36]	@ 0x24
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4b47      	ldr	r3, [pc, #284]	@ (800a414 <HAL_RCC_GetSysClockFreq+0x188>)
 800a2f8:	fb03 f201 	mul.w	r2, r3, r1
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	fb00 f303 	mul.w	r3, r0, r3
 800a302:	4413      	add	r3, r2
 800a304:	4a43      	ldr	r2, [pc, #268]	@ (800a414 <HAL_RCC_GetSysClockFreq+0x188>)
 800a306:	fba0 1202 	umull	r1, r2, r0, r2
 800a30a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a30c:	460a      	mov	r2, r1
 800a30e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a312:	4413      	add	r3, r2
 800a314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a318:	2200      	movs	r2, #0
 800a31a:	61bb      	str	r3, [r7, #24]
 800a31c:	61fa      	str	r2, [r7, #28]
 800a31e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a326:	f7f6 fc47 	bl	8000bb8 <__aeabi_uldivmod>
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	4613      	mov	r3, r2
 800a330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a332:	e053      	b.n	800a3dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a334:	4b35      	ldr	r3, [pc, #212]	@ (800a40c <HAL_RCC_GetSysClockFreq+0x180>)
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	099b      	lsrs	r3, r3, #6
 800a33a:	2200      	movs	r2, #0
 800a33c:	613b      	str	r3, [r7, #16]
 800a33e:	617a      	str	r2, [r7, #20]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a346:	f04f 0b00 	mov.w	fp, #0
 800a34a:	4652      	mov	r2, sl
 800a34c:	465b      	mov	r3, fp
 800a34e:	f04f 0000 	mov.w	r0, #0
 800a352:	f04f 0100 	mov.w	r1, #0
 800a356:	0159      	lsls	r1, r3, #5
 800a358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a35c:	0150      	lsls	r0, r2, #5
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	ebb2 080a 	subs.w	r8, r2, sl
 800a366:	eb63 090b 	sbc.w	r9, r3, fp
 800a36a:	f04f 0200 	mov.w	r2, #0
 800a36e:	f04f 0300 	mov.w	r3, #0
 800a372:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a376:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a37a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a37e:	ebb2 0408 	subs.w	r4, r2, r8
 800a382:	eb63 0509 	sbc.w	r5, r3, r9
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	f04f 0300 	mov.w	r3, #0
 800a38e:	00eb      	lsls	r3, r5, #3
 800a390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a394:	00e2      	lsls	r2, r4, #3
 800a396:	4614      	mov	r4, r2
 800a398:	461d      	mov	r5, r3
 800a39a:	eb14 030a 	adds.w	r3, r4, sl
 800a39e:	603b      	str	r3, [r7, #0]
 800a3a0:	eb45 030b 	adc.w	r3, r5, fp
 800a3a4:	607b      	str	r3, [r7, #4]
 800a3a6:	f04f 0200 	mov.w	r2, #0
 800a3aa:	f04f 0300 	mov.w	r3, #0
 800a3ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	028b      	lsls	r3, r1, #10
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a3bc:	4621      	mov	r1, r4
 800a3be:	028a      	lsls	r2, r1, #10
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	60bb      	str	r3, [r7, #8]
 800a3ca:	60fa      	str	r2, [r7, #12]
 800a3cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3d0:	f7f6 fbf2 	bl	8000bb8 <__aeabi_uldivmod>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4613      	mov	r3, r2
 800a3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a3dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a40c <HAL_RCC_GetSysClockFreq+0x180>)
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	0c1b      	lsrs	r3, r3, #16
 800a3e2:	f003 0303 	and.w	r3, r3, #3
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a3ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a3f6:	e002      	b.n	800a3fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a3f8:	4b05      	ldr	r3, [pc, #20]	@ (800a410 <HAL_RCC_GetSysClockFreq+0x184>)
 800a3fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a3fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a400:	4618      	mov	r0, r3
 800a402:	3740      	adds	r7, #64	@ 0x40
 800a404:	46bd      	mov	sp, r7
 800a406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a40a:	bf00      	nop
 800a40c:	40023800 	.word	0x40023800
 800a410:	00f42400 	.word	0x00f42400
 800a414:	017d7840 	.word	0x017d7840

0800a418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a418:	b480      	push	{r7}
 800a41a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a41c:	4b03      	ldr	r3, [pc, #12]	@ (800a42c <HAL_RCC_GetHCLKFreq+0x14>)
 800a41e:	681b      	ldr	r3, [r3, #0]
}
 800a420:	4618      	mov	r0, r3
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	2000000c 	.word	0x2000000c

0800a430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a434:	f7ff fff0 	bl	800a418 <HAL_RCC_GetHCLKFreq>
 800a438:	4602      	mov	r2, r0
 800a43a:	4b05      	ldr	r3, [pc, #20]	@ (800a450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	0a9b      	lsrs	r3, r3, #10
 800a440:	f003 0307 	and.w	r3, r3, #7
 800a444:	4903      	ldr	r1, [pc, #12]	@ (800a454 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a446:	5ccb      	ldrb	r3, [r1, r3]
 800a448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	40023800 	.word	0x40023800
 800a454:	08014080 	.word	0x08014080

0800a458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a45c:	f7ff ffdc 	bl	800a418 <HAL_RCC_GetHCLKFreq>
 800a460:	4602      	mov	r2, r0
 800a462:	4b05      	ldr	r3, [pc, #20]	@ (800a478 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	0b5b      	lsrs	r3, r3, #13
 800a468:	f003 0307 	and.w	r3, r3, #7
 800a46c:	4903      	ldr	r1, [pc, #12]	@ (800a47c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a46e:	5ccb      	ldrb	r3, [r1, r3]
 800a470:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a474:	4618      	mov	r0, r3
 800a476:	bd80      	pop	{r7, pc}
 800a478:	40023800 	.word	0x40023800
 800a47c:	08014080 	.word	0x08014080

0800a480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	220f      	movs	r2, #15
 800a48e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a490:	4b12      	ldr	r3, [pc, #72]	@ (800a4dc <HAL_RCC_GetClockConfig+0x5c>)
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f003 0203 	and.w	r2, r3, #3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a49c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4dc <HAL_RCC_GetClockConfig+0x5c>)
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a4a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a4dc <HAL_RCC_GetClockConfig+0x5c>)
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a4b4:	4b09      	ldr	r3, [pc, #36]	@ (800a4dc <HAL_RCC_GetClockConfig+0x5c>)
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	08db      	lsrs	r3, r3, #3
 800a4ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a4c2:	4b07      	ldr	r3, [pc, #28]	@ (800a4e0 <HAL_RCC_GetClockConfig+0x60>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 0207 	and.w	r2, r3, #7
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	601a      	str	r2, [r3, #0]
}
 800a4ce:	bf00      	nop
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	40023800 	.word	0x40023800
 800a4e0:	40023c00 	.word	0x40023c00

0800a4e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e041      	b.n	800a57a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f839 	bl	800a582 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3304      	adds	r3, #4
 800a520:	4619      	mov	r1, r3
 800a522:	4610      	mov	r0, r2
 800a524:	f000 fb74 	bl	800ac10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a582:	b480      	push	{r7}
 800a584:	b083      	sub	sp, #12
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a58a:	bf00      	nop
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d001      	beq.n	800a5b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e044      	b.n	800a63a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f042 0201 	orr.w	r2, r2, #1
 800a5c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a648 <HAL_TIM_Base_Start_IT+0xb0>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d018      	beq.n	800a604 <HAL_TIM_Base_Start_IT+0x6c>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5da:	d013      	beq.n	800a604 <HAL_TIM_Base_Start_IT+0x6c>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a1a      	ldr	r2, [pc, #104]	@ (800a64c <HAL_TIM_Base_Start_IT+0xb4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d00e      	beq.n	800a604 <HAL_TIM_Base_Start_IT+0x6c>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a19      	ldr	r2, [pc, #100]	@ (800a650 <HAL_TIM_Base_Start_IT+0xb8>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d009      	beq.n	800a604 <HAL_TIM_Base_Start_IT+0x6c>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a17      	ldr	r2, [pc, #92]	@ (800a654 <HAL_TIM_Base_Start_IT+0xbc>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d004      	beq.n	800a604 <HAL_TIM_Base_Start_IT+0x6c>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a16      	ldr	r2, [pc, #88]	@ (800a658 <HAL_TIM_Base_Start_IT+0xc0>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d111      	bne.n	800a628 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f003 0307 	and.w	r3, r3, #7
 800a60e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b06      	cmp	r3, #6
 800a614:	d010      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f042 0201 	orr.w	r2, r2, #1
 800a624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a626:	e007      	b.n	800a638 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f042 0201 	orr.w	r2, r2, #1
 800a636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	40010000 	.word	0x40010000
 800a64c:	40000400 	.word	0x40000400
 800a650:	40000800 	.word	0x40000800
 800a654:	40000c00 	.word	0x40000c00
 800a658:	40014000 	.word	0x40014000

0800a65c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e041      	b.n	800a6f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7f9 fc32 	bl	8003eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3304      	adds	r3, #4
 800a698:	4619      	mov	r1, r3
 800a69a:	4610      	mov	r0, r2
 800a69c:	f000 fab8 	bl	800ac10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
	...

0800a6fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d109      	bne.n	800a720 <HAL_TIM_PWM_Start+0x24>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b01      	cmp	r3, #1
 800a716:	bf14      	ite	ne
 800a718:	2301      	movne	r3, #1
 800a71a:	2300      	moveq	r3, #0
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	e022      	b.n	800a766 <HAL_TIM_PWM_Start+0x6a>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	2b04      	cmp	r3, #4
 800a724:	d109      	bne.n	800a73a <HAL_TIM_PWM_Start+0x3e>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b01      	cmp	r3, #1
 800a730:	bf14      	ite	ne
 800a732:	2301      	movne	r3, #1
 800a734:	2300      	moveq	r3, #0
 800a736:	b2db      	uxtb	r3, r3
 800a738:	e015      	b.n	800a766 <HAL_TIM_PWM_Start+0x6a>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	d109      	bne.n	800a754 <HAL_TIM_PWM_Start+0x58>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b01      	cmp	r3, #1
 800a74a:	bf14      	ite	ne
 800a74c:	2301      	movne	r3, #1
 800a74e:	2300      	moveq	r3, #0
 800a750:	b2db      	uxtb	r3, r3
 800a752:	e008      	b.n	800a766 <HAL_TIM_PWM_Start+0x6a>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	bf14      	ite	ne
 800a760:	2301      	movne	r3, #1
 800a762:	2300      	moveq	r3, #0
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	e068      	b.n	800a840 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d104      	bne.n	800a77e <HAL_TIM_PWM_Start+0x82>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2202      	movs	r2, #2
 800a778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a77c:	e013      	b.n	800a7a6 <HAL_TIM_PWM_Start+0xaa>
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	2b04      	cmp	r3, #4
 800a782:	d104      	bne.n	800a78e <HAL_TIM_PWM_Start+0x92>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a78c:	e00b      	b.n	800a7a6 <HAL_TIM_PWM_Start+0xaa>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b08      	cmp	r3, #8
 800a792:	d104      	bne.n	800a79e <HAL_TIM_PWM_Start+0xa2>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a79c:	e003      	b.n	800a7a6 <HAL_TIM_PWM_Start+0xaa>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2202      	movs	r2, #2
 800a7a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 fc40 	bl	800b034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a23      	ldr	r2, [pc, #140]	@ (800a848 <HAL_TIM_PWM_Start+0x14c>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d107      	bne.n	800a7ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a848 <HAL_TIM_PWM_Start+0x14c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d018      	beq.n	800a80a <HAL_TIM_PWM_Start+0x10e>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7e0:	d013      	beq.n	800a80a <HAL_TIM_PWM_Start+0x10e>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a19      	ldr	r2, [pc, #100]	@ (800a84c <HAL_TIM_PWM_Start+0x150>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d00e      	beq.n	800a80a <HAL_TIM_PWM_Start+0x10e>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a17      	ldr	r2, [pc, #92]	@ (800a850 <HAL_TIM_PWM_Start+0x154>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d009      	beq.n	800a80a <HAL_TIM_PWM_Start+0x10e>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a16      	ldr	r2, [pc, #88]	@ (800a854 <HAL_TIM_PWM_Start+0x158>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d004      	beq.n	800a80a <HAL_TIM_PWM_Start+0x10e>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a14      	ldr	r2, [pc, #80]	@ (800a858 <HAL_TIM_PWM_Start+0x15c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d111      	bne.n	800a82e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f003 0307 	and.w	r3, r3, #7
 800a814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2b06      	cmp	r3, #6
 800a81a:	d010      	beq.n	800a83e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f042 0201 	orr.w	r2, r2, #1
 800a82a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a82c:	e007      	b.n	800a83e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f042 0201 	orr.w	r2, r2, #1
 800a83c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	40010000 	.word	0x40010000
 800a84c:	40000400 	.word	0x40000400
 800a850:	40000800 	.word	0x40000800
 800a854:	40000c00 	.word	0x40000c00
 800a858:	40014000 	.word	0x40014000

0800a85c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d020      	beq.n	800a8c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d01b      	beq.n	800a8c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f06f 0202 	mvn.w	r2, #2
 800a890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	f003 0303 	and.w	r3, r3, #3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f994 	bl	800abd4 <HAL_TIM_IC_CaptureCallback>
 800a8ac:	e005      	b.n	800a8ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f986 	bl	800abc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f997 	bl	800abe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	f003 0304 	and.w	r3, r3, #4
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d020      	beq.n	800a90c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f003 0304 	and.w	r3, r3, #4
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d01b      	beq.n	800a90c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f06f 0204 	mvn.w	r2, #4
 800a8dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f96e 	bl	800abd4 <HAL_TIM_IC_CaptureCallback>
 800a8f8:	e005      	b.n	800a906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f960 	bl	800abc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f971 	bl	800abe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	f003 0308 	and.w	r3, r3, #8
 800a912:	2b00      	cmp	r3, #0
 800a914:	d020      	beq.n	800a958 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f003 0308 	and.w	r3, r3, #8
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d01b      	beq.n	800a958 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f06f 0208 	mvn.w	r2, #8
 800a928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2204      	movs	r2, #4
 800a92e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f948 	bl	800abd4 <HAL_TIM_IC_CaptureCallback>
 800a944:	e005      	b.n	800a952 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f93a 	bl	800abc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f94b 	bl	800abe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f003 0310 	and.w	r3, r3, #16
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d020      	beq.n	800a9a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f003 0310 	and.w	r3, r3, #16
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01b      	beq.n	800a9a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f06f 0210 	mvn.w	r2, #16
 800a974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2208      	movs	r2, #8
 800a97a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f922 	bl	800abd4 <HAL_TIM_IC_CaptureCallback>
 800a990:	e005      	b.n	800a99e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f914 	bl	800abc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f925 	bl	800abe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00c      	beq.n	800a9c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f06f 0201 	mvn.w	r2, #1
 800a9c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7f8 fe18 	bl	80035f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00c      	beq.n	800a9ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d007      	beq.n	800a9ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a9e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fc14 	bl	800b214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00c      	beq.n	800aa10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d007      	beq.n	800aa10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aa08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f8f6 	bl	800abfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00c      	beq.n	800aa34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f003 0320 	and.w	r3, r3, #32
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d007      	beq.n	800aa34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f06f 0220 	mvn.w	r2, #32
 800aa2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fbe6 	bl	800b200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa34:	bf00      	nop
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d101      	bne.n	800aa5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa56:	2302      	movs	r3, #2
 800aa58:	e0ae      	b.n	800abb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b0c      	cmp	r3, #12
 800aa66:	f200 809f 	bhi.w	800aba8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aa6a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800aaa5 	.word	0x0800aaa5
 800aa74:	0800aba9 	.word	0x0800aba9
 800aa78:	0800aba9 	.word	0x0800aba9
 800aa7c:	0800aba9 	.word	0x0800aba9
 800aa80:	0800aae5 	.word	0x0800aae5
 800aa84:	0800aba9 	.word	0x0800aba9
 800aa88:	0800aba9 	.word	0x0800aba9
 800aa8c:	0800aba9 	.word	0x0800aba9
 800aa90:	0800ab27 	.word	0x0800ab27
 800aa94:	0800aba9 	.word	0x0800aba9
 800aa98:	0800aba9 	.word	0x0800aba9
 800aa9c:	0800aba9 	.word	0x0800aba9
 800aaa0:	0800ab67 	.word	0x0800ab67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68b9      	ldr	r1, [r7, #8]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f936 	bl	800ad1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	699a      	ldr	r2, [r3, #24]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f042 0208 	orr.w	r2, r2, #8
 800aabe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	699a      	ldr	r2, [r3, #24]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 0204 	bic.w	r2, r2, #4
 800aace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6999      	ldr	r1, [r3, #24]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	691a      	ldr	r2, [r3, #16]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	619a      	str	r2, [r3, #24]
      break;
 800aae2:	e064      	b.n	800abae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 f97c 	bl	800ade8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aafe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	699a      	ldr	r2, [r3, #24]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6999      	ldr	r1, [r3, #24]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	021a      	lsls	r2, r3, #8
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	619a      	str	r2, [r3, #24]
      break;
 800ab24:	e043      	b.n	800abae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68b9      	ldr	r1, [r7, #8]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 f9c7 	bl	800aec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	69da      	ldr	r2, [r3, #28]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f042 0208 	orr.w	r2, r2, #8
 800ab40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	69da      	ldr	r2, [r3, #28]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0204 	bic.w	r2, r2, #4
 800ab50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	69d9      	ldr	r1, [r3, #28]
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	691a      	ldr	r2, [r3, #16]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	430a      	orrs	r2, r1
 800ab62:	61da      	str	r2, [r3, #28]
      break;
 800ab64:	e023      	b.n	800abae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68b9      	ldr	r1, [r7, #8]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 fa11 	bl	800af94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	69da      	ldr	r2, [r3, #28]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	69da      	ldr	r2, [r3, #28]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	69d9      	ldr	r1, [r3, #28]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	021a      	lsls	r2, r3, #8
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	61da      	str	r2, [r3, #28]
      break;
 800aba6:	e002      	b.n	800abae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	75fb      	strb	r3, [r7, #23]
      break;
 800abac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac04:	bf00      	nop
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a37      	ldr	r2, [pc, #220]	@ (800ad00 <TIM_Base_SetConfig+0xf0>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00f      	beq.n	800ac48 <TIM_Base_SetConfig+0x38>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac2e:	d00b      	beq.n	800ac48 <TIM_Base_SetConfig+0x38>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a34      	ldr	r2, [pc, #208]	@ (800ad04 <TIM_Base_SetConfig+0xf4>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d007      	beq.n	800ac48 <TIM_Base_SetConfig+0x38>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a33      	ldr	r2, [pc, #204]	@ (800ad08 <TIM_Base_SetConfig+0xf8>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d003      	beq.n	800ac48 <TIM_Base_SetConfig+0x38>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a32      	ldr	r2, [pc, #200]	@ (800ad0c <TIM_Base_SetConfig+0xfc>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d108      	bne.n	800ac5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a28      	ldr	r2, [pc, #160]	@ (800ad00 <TIM_Base_SetConfig+0xf0>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d01b      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac68:	d017      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a25      	ldr	r2, [pc, #148]	@ (800ad04 <TIM_Base_SetConfig+0xf4>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d013      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a24      	ldr	r2, [pc, #144]	@ (800ad08 <TIM_Base_SetConfig+0xf8>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d00f      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a23      	ldr	r2, [pc, #140]	@ (800ad0c <TIM_Base_SetConfig+0xfc>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d00b      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a22      	ldr	r2, [pc, #136]	@ (800ad10 <TIM_Base_SetConfig+0x100>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d007      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a21      	ldr	r2, [pc, #132]	@ (800ad14 <TIM_Base_SetConfig+0x104>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d003      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a20      	ldr	r2, [pc, #128]	@ (800ad18 <TIM_Base_SetConfig+0x108>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d108      	bne.n	800acac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	689a      	ldr	r2, [r3, #8]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a0c      	ldr	r2, [pc, #48]	@ (800ad00 <TIM_Base_SetConfig+0xf0>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d103      	bne.n	800acda <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f043 0204 	orr.w	r2, r3, #4
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	601a      	str	r2, [r3, #0]
}
 800acf2:	bf00      	nop
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	40010000 	.word	0x40010000
 800ad04:	40000400 	.word	0x40000400
 800ad08:	40000800 	.word	0x40000800
 800ad0c:	40000c00 	.word	0x40000c00
 800ad10:	40014000 	.word	0x40014000
 800ad14:	40014400 	.word	0x40014400
 800ad18:	40014800 	.word	0x40014800

0800ad1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	f023 0201 	bic.w	r2, r3, #1
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f023 0303 	bic.w	r3, r3, #3
 800ad52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f023 0302 	bic.w	r3, r3, #2
 800ad64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a1c      	ldr	r2, [pc, #112]	@ (800ade4 <TIM_OC1_SetConfig+0xc8>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d10c      	bne.n	800ad92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f023 0308 	bic.w	r3, r3, #8
 800ad7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f023 0304 	bic.w	r3, r3, #4
 800ad90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a13      	ldr	r2, [pc, #76]	@ (800ade4 <TIM_OC1_SetConfig+0xc8>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d111      	bne.n	800adbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ada0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ada8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	4313      	orrs	r3, r2
 800adbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	621a      	str	r2, [r3, #32]
}
 800add8:	bf00      	nop
 800adda:	371c      	adds	r7, #28
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	40010000 	.word	0x40010000

0800ade8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	f023 0210 	bic.w	r2, r3, #16
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	021b      	lsls	r3, r3, #8
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f023 0320 	bic.w	r3, r3, #32
 800ae32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	011b      	lsls	r3, r3, #4
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a1e      	ldr	r2, [pc, #120]	@ (800aebc <TIM_OC2_SetConfig+0xd4>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d10d      	bne.n	800ae64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a15      	ldr	r2, [pc, #84]	@ (800aebc <TIM_OC2_SetConfig+0xd4>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d113      	bne.n	800ae94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	621a      	str	r2, [r3, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	371c      	adds	r7, #28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	40010000 	.word	0x40010000

0800aec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b087      	sub	sp, #28
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f023 0303 	bic.w	r3, r3, #3
 800aef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	4313      	orrs	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	021b      	lsls	r3, r3, #8
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	4313      	orrs	r3, r2
 800af14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a1d      	ldr	r2, [pc, #116]	@ (800af90 <TIM_OC3_SetConfig+0xd0>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d10d      	bne.n	800af3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	021b      	lsls	r3, r3, #8
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	4313      	orrs	r3, r2
 800af30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a14      	ldr	r2, [pc, #80]	@ (800af90 <TIM_OC3_SetConfig+0xd0>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d113      	bne.n	800af6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	621a      	str	r2, [r3, #32]
}
 800af84:	bf00      	nop
 800af86:	371c      	adds	r7, #28
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	40010000 	.word	0x40010000

0800af94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af94:	b480      	push	{r7}
 800af96:	b087      	sub	sp, #28
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	021b      	lsls	r3, r3, #8
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	031b      	lsls	r3, r3, #12
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	4313      	orrs	r3, r2
 800afea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a10      	ldr	r2, [pc, #64]	@ (800b030 <TIM_OC4_SetConfig+0x9c>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d109      	bne.n	800b008 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800affa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	019b      	lsls	r3, r3, #6
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	4313      	orrs	r3, r2
 800b006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	621a      	str	r2, [r3, #32]
}
 800b022:	bf00      	nop
 800b024:	371c      	adds	r7, #28
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	40010000 	.word	0x40010000

0800b034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f003 031f 	and.w	r3, r3, #31
 800b046:	2201      	movs	r2, #1
 800b048:	fa02 f303 	lsl.w	r3, r2, r3
 800b04c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6a1a      	ldr	r2, [r3, #32]
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	43db      	mvns	r3, r3
 800b056:	401a      	ands	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6a1a      	ldr	r2, [r3, #32]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f003 031f 	and.w	r3, r3, #31
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	fa01 f303 	lsl.w	r3, r1, r3
 800b06c:	431a      	orrs	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	621a      	str	r2, [r3, #32]
}
 800b072:	bf00      	nop
 800b074:	371c      	adds	r7, #28
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
	...

0800b080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b090:	2b01      	cmp	r3, #1
 800b092:	d101      	bne.n	800b098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b094:	2302      	movs	r3, #2
 800b096:	e050      	b.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a1c      	ldr	r2, [pc, #112]	@ (800b148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d018      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0e4:	d013      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a18      	ldr	r2, [pc, #96]	@ (800b14c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00e      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a16      	ldr	r2, [pc, #88]	@ (800b150 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d009      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a15      	ldr	r2, [pc, #84]	@ (800b154 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d004      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a13      	ldr	r2, [pc, #76]	@ (800b158 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d10c      	bne.n	800b128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	40010000 	.word	0x40010000
 800b14c:	40000400 	.word	0x40000400
 800b150:	40000800 	.word	0x40000800
 800b154:	40000c00 	.word	0x40000c00
 800b158:	40014000 	.word	0x40014000

0800b15c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b174:	2302      	movs	r3, #2
 800b176:	e03d      	b.n	800b1f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	4313      	orrs	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e042      	b.n	800b2c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7f8 fee4 	bl	800401c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2224      	movs	r2, #36	@ 0x24
 800b258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68da      	ldr	r2, [r3, #12]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b26a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f001 f809 	bl	800c284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	691a      	ldr	r2, [r3, #16]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	695a      	ldr	r2, [r3, #20]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68da      	ldr	r2, [r3, #12]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b2a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2220      	movs	r2, #32
 800b2ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08a      	sub	sp, #40	@ 0x28
 800b2cc:	af02      	add	r7, sp, #8
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	603b      	str	r3, [r7, #0]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b20      	cmp	r3, #32
 800b2e6:	d175      	bne.n	800b3d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <HAL_UART_Transmit+0x2c>
 800b2ee:	88fb      	ldrh	r3, [r7, #6]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e06e      	b.n	800b3d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2221      	movs	r2, #33	@ 0x21
 800b302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b306:	f7fb fe21 	bl	8006f4c <HAL_GetTick>
 800b30a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	88fa      	ldrh	r2, [r7, #6]
 800b310:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	88fa      	ldrh	r2, [r7, #6]
 800b316:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b320:	d108      	bne.n	800b334 <HAL_UART_Transmit+0x6c>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d104      	bne.n	800b334 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	61bb      	str	r3, [r7, #24]
 800b332:	e003      	b.n	800b33c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b338:	2300      	movs	r3, #0
 800b33a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b33c:	e02e      	b.n	800b39c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	2200      	movs	r2, #0
 800b346:	2180      	movs	r1, #128	@ 0x80
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fcd9 	bl	800bd00 <UART_WaitOnFlagUntilTimeout>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d005      	beq.n	800b360 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2220      	movs	r2, #32
 800b358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e03a      	b.n	800b3d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10b      	bne.n	800b37e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	881b      	ldrh	r3, [r3, #0]
 800b36a:	461a      	mov	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b374:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	3302      	adds	r3, #2
 800b37a:	61bb      	str	r3, [r7, #24]
 800b37c:	e007      	b.n	800b38e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	781a      	ldrb	r2, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	3301      	adds	r3, #1
 800b38c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b392:	b29b      	uxth	r3, r3
 800b394:	3b01      	subs	r3, #1
 800b396:	b29a      	uxth	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1cb      	bne.n	800b33e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2140      	movs	r1, #64	@ 0x40
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 fca5 	bl	800bd00 <UART_WaitOnFlagUntilTimeout>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d005      	beq.n	800b3c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2220      	movs	r2, #32
 800b3c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e006      	b.n	800b3d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2220      	movs	r2, #32
 800b3cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e000      	b.n	800b3d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b3d4:	2302      	movs	r3, #2
  }
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3720      	adds	r7, #32
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	60f8      	str	r0, [r7, #12]
 800b3e6:	60b9      	str	r1, [r7, #8]
 800b3e8:	4613      	mov	r3, r2
 800b3ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b20      	cmp	r3, #32
 800b3f6:	d112      	bne.n	800b41e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <HAL_UART_Receive_DMA+0x26>
 800b3fe:	88fb      	ldrh	r3, [r7, #6]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e00b      	b.n	800b420 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b40e:	88fb      	ldrh	r3, [r7, #6]
 800b410:	461a      	mov	r2, r3
 800b412:	68b9      	ldr	r1, [r7, #8]
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f000 fccd 	bl	800bdb4 <UART_Start_Receive_DMA>
 800b41a:	4603      	mov	r3, r0
 800b41c:	e000      	b.n	800b420 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b41e:	2302      	movs	r3, #2
  }
}
 800b420:	4618      	mov	r0, r3
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b09a      	sub	sp, #104	@ 0x68
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	330c      	adds	r3, #12
 800b436:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b446:	667b      	str	r3, [r7, #100]	@ 0x64
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	330c      	adds	r3, #12
 800b44e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b450:	657a      	str	r2, [r7, #84]	@ 0x54
 800b452:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b456:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b458:	e841 2300 	strex	r3, r2, [r1]
 800b45c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b45e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e5      	bne.n	800b430 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3314      	adds	r3, #20
 800b46a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46e:	e853 3f00 	ldrex	r3, [r3]
 800b472:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b476:	f023 0301 	bic.w	r3, r3, #1
 800b47a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3314      	adds	r3, #20
 800b482:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b484:	643a      	str	r2, [r7, #64]	@ 0x40
 800b486:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b488:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b48a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b48c:	e841 2300 	strex	r3, r2, [r1]
 800b490:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1e5      	bne.n	800b464 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d119      	bne.n	800b4d4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	330c      	adds	r3, #12
 800b4a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	f023 0310 	bic.w	r3, r3, #16
 800b4b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b4c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4c8:	e841 2300 	strex	r3, r2, [r1]
 800b4cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1e5      	bne.n	800b4a0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4de:	2b40      	cmp	r3, #64	@ 0x40
 800b4e0:	d136      	bne.n	800b550 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3314      	adds	r3, #20
 800b4e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	e853 3f00 	ldrex	r3, [r3]
 800b4f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3314      	adds	r3, #20
 800b500:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b502:	61ba      	str	r2, [r7, #24]
 800b504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b506:	6979      	ldr	r1, [r7, #20]
 800b508:	69ba      	ldr	r2, [r7, #24]
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	613b      	str	r3, [r7, #16]
   return(result);
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1e5      	bne.n	800b4e2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d018      	beq.n	800b550 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b522:	2200      	movs	r2, #0
 800b524:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fb ff26 	bl	800737c <HAL_DMA_Abort>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00c      	beq.n	800b550 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fc f93a 	bl	80077b4 <HAL_DMA_GetError>
 800b540:	4603      	mov	r3, r0
 800b542:	2b20      	cmp	r3, #32
 800b544:	d104      	bne.n	800b550 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2210      	movs	r2, #16
 800b54a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800b54c:	2303      	movs	r3, #3
 800b54e:	e00a      	b.n	800b566 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2220      	movs	r2, #32
 800b55a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3768      	adds	r7, #104	@ 0x68
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
	...

0800b570 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b0ba      	sub	sp, #232	@ 0xe8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	695b      	ldr	r3, [r3, #20]
 800b592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b596:	2300      	movs	r3, #0
 800b598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5a6:	f003 030f 	and.w	r3, r3, #15
 800b5aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b5ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10f      	bne.n	800b5d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <HAL_UART_IRQHandler+0x66>
 800b5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5c6:	f003 0320 	and.w	r3, r3, #32
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fd9a 	bl	800c108 <UART_Receive_IT>
      return;
 800b5d4:	e273      	b.n	800babe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b5d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f000 80de 	beq.w	800b79c <HAL_UART_IRQHandler+0x22c>
 800b5e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 80d1 	beq.w	800b79c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00b      	beq.n	800b61e <HAL_UART_IRQHandler+0xae>
 800b606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b60a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d005      	beq.n	800b61e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b616:	f043 0201 	orr.w	r2, r3, #1
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b622:	f003 0304 	and.w	r3, r3, #4
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00b      	beq.n	800b642 <HAL_UART_IRQHandler+0xd2>
 800b62a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b63a:	f043 0202 	orr.w	r2, r3, #2
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b646:	f003 0302 	and.w	r3, r3, #2
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <HAL_UART_IRQHandler+0xf6>
 800b64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	2b00      	cmp	r3, #0
 800b658:	d005      	beq.n	800b666 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b65e:	f043 0204 	orr.w	r2, r3, #4
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b66a:	f003 0308 	and.w	r3, r3, #8
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d011      	beq.n	800b696 <HAL_UART_IRQHandler+0x126>
 800b672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b676:	f003 0320 	and.w	r3, r3, #32
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d105      	bne.n	800b68a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b67e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d005      	beq.n	800b696 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b68e:	f043 0208 	orr.w	r2, r3, #8
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 820a 	beq.w	800bab4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6a4:	f003 0320 	and.w	r3, r3, #32
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d008      	beq.n	800b6be <HAL_UART_IRQHandler+0x14e>
 800b6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6b0:	f003 0320 	and.w	r3, r3, #32
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fd25 	bl	800c108 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6c8:	2b40      	cmp	r3, #64	@ 0x40
 800b6ca:	bf0c      	ite	eq
 800b6cc:	2301      	moveq	r3, #1
 800b6ce:	2300      	movne	r3, #0
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6da:	f003 0308 	and.w	r3, r3, #8
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d103      	bne.n	800b6ea <HAL_UART_IRQHandler+0x17a>
 800b6e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d04f      	beq.n	800b78a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fc30 	bl	800bf50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6fa:	2b40      	cmp	r3, #64	@ 0x40
 800b6fc:	d141      	bne.n	800b782 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3314      	adds	r3, #20
 800b704:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b708:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b70c:	e853 3f00 	ldrex	r3, [r3]
 800b710:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b714:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b71c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3314      	adds	r3, #20
 800b726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b72a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b72e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b73a:	e841 2300 	strex	r3, r2, [r1]
 800b73e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1d9      	bne.n	800b6fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d013      	beq.n	800b77a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b756:	4a8a      	ldr	r2, [pc, #552]	@ (800b980 <HAL_UART_IRQHandler+0x410>)
 800b758:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fb fe7c 	bl	800745c <HAL_DMA_Abort_IT>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d016      	beq.n	800b798 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b76e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b774:	4610      	mov	r0, r2
 800b776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b778:	e00e      	b.n	800b798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7f7 f86e 	bl	800285c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b780:	e00a      	b.n	800b798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7f7 f86a 	bl	800285c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b788:	e006      	b.n	800b798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7f7 f866 	bl	800285c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b796:	e18d      	b.n	800bab4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b798:	bf00      	nop
    return;
 800b79a:	e18b      	b.n	800bab4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	f040 8167 	bne.w	800ba74 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7aa:	f003 0310 	and.w	r3, r3, #16
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 8160 	beq.w	800ba74 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7b8:	f003 0310 	and.w	r3, r3, #16
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 8159 	beq.w	800ba74 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60bb      	str	r3, [r7, #8]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	60bb      	str	r3, [r7, #8]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	60bb      	str	r3, [r7, #8]
 800b7d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7e2:	2b40      	cmp	r3, #64	@ 0x40
 800b7e4:	f040 80ce 	bne.w	800b984 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 80a9 	beq.w	800b950 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b806:	429a      	cmp	r2, r3
 800b808:	f080 80a2 	bcs.w	800b950 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b812:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b818:	69db      	ldr	r3, [r3, #28]
 800b81a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b81e:	f000 8088 	beq.w	800b932 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	330c      	adds	r3, #12
 800b828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b830:	e853 3f00 	ldrex	r3, [r3]
 800b834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b838:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b83c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	330c      	adds	r3, #12
 800b84a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b84e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b85a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b85e:	e841 2300 	strex	r3, r2, [r1]
 800b862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1d9      	bne.n	800b822 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3314      	adds	r3, #20
 800b874:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b87e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b880:	f023 0301 	bic.w	r3, r3, #1
 800b884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3314      	adds	r3, #20
 800b88e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b892:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b896:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b898:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b89a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b8a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e1      	bne.n	800b86e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3314      	adds	r3, #20
 800b8ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b8ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b8d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b8d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b8dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e3      	bne.n	800b8aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2220      	movs	r2, #32
 800b8e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	330c      	adds	r3, #12
 800b8f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8fa:	e853 3f00 	ldrex	r3, [r3]
 800b8fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b902:	f023 0310 	bic.w	r3, r3, #16
 800b906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	330c      	adds	r3, #12
 800b910:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b914:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b916:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b918:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b91a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b91c:	e841 2300 	strex	r3, r2, [r1]
 800b920:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1e3      	bne.n	800b8f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fb fd25 	bl	800737c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2202      	movs	r2, #2
 800b936:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b940:	b29b      	uxth	r3, r3
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	b29b      	uxth	r3, r3
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f8cf 	bl	800baec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b94e:	e0b3      	b.n	800bab8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b954:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b958:	429a      	cmp	r2, r3
 800b95a:	f040 80ad 	bne.w	800bab8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b962:	69db      	ldr	r3, [r3, #28]
 800b964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b968:	f040 80a6 	bne.w	800bab8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2202      	movs	r2, #2
 800b970:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b976:	4619      	mov	r1, r3
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f8b7 	bl	800baec <HAL_UARTEx_RxEventCallback>
      return;
 800b97e:	e09b      	b.n	800bab8 <HAL_UART_IRQHandler+0x548>
 800b980:	0800c017 	.word	0x0800c017
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b998:	b29b      	uxth	r3, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 808e 	beq.w	800babc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b9a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 8089 	beq.w	800babc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	330c      	adds	r3, #12
 800b9b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b4:	e853 3f00 	ldrex	r3, [r3]
 800b9b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	330c      	adds	r3, #12
 800b9ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b9ce:	647a      	str	r2, [r7, #68]	@ 0x44
 800b9d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9d6:	e841 2300 	strex	r3, r2, [r1]
 800b9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1e3      	bne.n	800b9aa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3314      	adds	r3, #20
 800b9e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ec:	e853 3f00 	ldrex	r3, [r3]
 800b9f0:	623b      	str	r3, [r7, #32]
   return(result);
 800b9f2:	6a3b      	ldr	r3, [r7, #32]
 800b9f4:	f023 0301 	bic.w	r3, r3, #1
 800b9f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3314      	adds	r3, #20
 800ba02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ba06:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba0e:	e841 2300 	strex	r3, r2, [r1]
 800ba12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1e3      	bne.n	800b9e2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2220      	movs	r2, #32
 800ba1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	330c      	adds	r3, #12
 800ba2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	e853 3f00 	ldrex	r3, [r3]
 800ba36:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f023 0310 	bic.w	r3, r3, #16
 800ba3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	330c      	adds	r3, #12
 800ba48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ba4c:	61fa      	str	r2, [r7, #28]
 800ba4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba50:	69b9      	ldr	r1, [r7, #24]
 800ba52:	69fa      	ldr	r2, [r7, #28]
 800ba54:	e841 2300 	strex	r3, r2, [r1]
 800ba58:	617b      	str	r3, [r7, #20]
   return(result);
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1e3      	bne.n	800ba28 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2202      	movs	r2, #2
 800ba64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f83d 	bl	800baec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba72:	e023      	b.n	800babc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d009      	beq.n	800ba94 <HAL_UART_IRQHandler+0x524>
 800ba80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d003      	beq.n	800ba94 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fad3 	bl	800c038 <UART_Transmit_IT>
    return;
 800ba92:	e014      	b.n	800babe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00e      	beq.n	800babe <HAL_UART_IRQHandler+0x54e>
 800baa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d008      	beq.n	800babe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fb13 	bl	800c0d8 <UART_EndTransmit_IT>
    return;
 800bab2:	e004      	b.n	800babe <HAL_UART_IRQHandler+0x54e>
    return;
 800bab4:	bf00      	nop
 800bab6:	e002      	b.n	800babe <HAL_UART_IRQHandler+0x54e>
      return;
 800bab8:	bf00      	nop
 800baba:	e000      	b.n	800babe <HAL_UART_IRQHandler+0x54e>
      return;
 800babc:	bf00      	nop
  }
}
 800babe:	37e8      	adds	r7, #232	@ 0xe8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bacc:	bf00      	nop
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b09c      	sub	sp, #112	@ 0x70
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb10:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d172      	bne.n	800bc06 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bb20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb22:	2200      	movs	r2, #0
 800bb24:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	330c      	adds	r3, #12
 800bb2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb30:	e853 3f00 	ldrex	r3, [r3]
 800bb34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bb36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	330c      	adds	r3, #12
 800bb44:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bb46:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bb48:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bb4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb4e:	e841 2300 	strex	r3, r2, [r1]
 800bb52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bb54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1e5      	bne.n	800bb26 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3314      	adds	r3, #20
 800bb60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	e853 3f00 	ldrex	r3, [r3]
 800bb68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb6c:	f023 0301 	bic.w	r3, r3, #1
 800bb70:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	3314      	adds	r3, #20
 800bb78:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bb7a:	647a      	str	r2, [r7, #68]	@ 0x44
 800bb7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb82:	e841 2300 	strex	r3, r2, [r1]
 800bb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1e5      	bne.n	800bb5a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3314      	adds	r3, #20
 800bb94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb98:	e853 3f00 	ldrex	r3, [r3]
 800bb9c:	623b      	str	r3, [r7, #32]
   return(result);
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bba4:	663b      	str	r3, [r7, #96]	@ 0x60
 800bba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3314      	adds	r3, #20
 800bbac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bbae:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbb6:	e841 2300 	strex	r3, r2, [r1]
 800bbba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1e5      	bne.n	800bb8e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bbc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbc4:	2220      	movs	r2, #32
 800bbc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d119      	bne.n	800bc06 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	330c      	adds	r3, #12
 800bbd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	e853 3f00 	ldrex	r3, [r3]
 800bbe0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f023 0310 	bic.w	r3, r3, #16
 800bbe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bbea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	330c      	adds	r3, #12
 800bbf0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bbf2:	61fa      	str	r2, [r7, #28]
 800bbf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf6:	69b9      	ldr	r1, [r7, #24]
 800bbf8:	69fa      	ldr	r2, [r7, #28]
 800bbfa:	e841 2300 	strex	r3, r2, [r1]
 800bbfe:	617b      	str	r3, [r7, #20]
   return(result);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1e5      	bne.n	800bbd2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc08:	2200      	movs	r2, #0
 800bc0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d106      	bne.n	800bc22 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bc1c:	f7ff ff66 	bl	800baec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc20:	e002      	b.n	800bc28 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bc22:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bc24:	f7f6 fd3a 	bl	800269c <HAL_UART_RxCpltCallback>
}
 800bc28:	bf00      	nop
 800bc2a:	3770      	adds	r7, #112	@ 0x70
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2201      	movs	r2, #1
 800bc42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d108      	bne.n	800bc5e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bc50:	085b      	lsrs	r3, r3, #1
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	4619      	mov	r1, r3
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f7ff ff48 	bl	800baec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc5c:	e002      	b.n	800bc64 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f7ff ff3a 	bl	800bad8 <HAL_UART_RxHalfCpltCallback>
}
 800bc64:	bf00      	nop
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bc74:	2300      	movs	r3, #0
 800bc76:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc7c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc88:	2b80      	cmp	r3, #128	@ 0x80
 800bc8a:	bf0c      	ite	eq
 800bc8c:	2301      	moveq	r3, #1
 800bc8e:	2300      	movne	r3, #0
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b21      	cmp	r3, #33	@ 0x21
 800bc9e:	d108      	bne.n	800bcb2 <UART_DMAError+0x46>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d005      	beq.n	800bcb2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800bcac:	68b8      	ldr	r0, [r7, #8]
 800bcae:	f000 f927 	bl	800bf00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcbc:	2b40      	cmp	r3, #64	@ 0x40
 800bcbe:	bf0c      	ite	eq
 800bcc0:	2301      	moveq	r3, #1
 800bcc2:	2300      	movne	r3, #0
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	2b22      	cmp	r3, #34	@ 0x22
 800bcd2:	d108      	bne.n	800bce6 <UART_DMAError+0x7a>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d005      	beq.n	800bce6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800bce0:	68b8      	ldr	r0, [r7, #8]
 800bce2:	f000 f935 	bl	800bf50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcea:	f043 0210 	orr.w	r2, r3, #16
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcf2:	68b8      	ldr	r0, [r7, #8]
 800bcf4:	f7f6 fdb2 	bl	800285c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcf8:	bf00      	nop
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	603b      	str	r3, [r7, #0]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd10:	e03b      	b.n	800bd8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d037      	beq.n	800bd8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd1a:	f7fb f917 	bl	8006f4c <HAL_GetTick>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	6a3a      	ldr	r2, [r7, #32]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d302      	bcc.n	800bd30 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd2a:	6a3b      	ldr	r3, [r7, #32]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd30:	2303      	movs	r3, #3
 800bd32:	e03a      	b.n	800bdaa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	f003 0304 	and.w	r3, r3, #4
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d023      	beq.n	800bd8a <UART_WaitOnFlagUntilTimeout+0x8a>
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	2b80      	cmp	r3, #128	@ 0x80
 800bd46:	d020      	beq.n	800bd8a <UART_WaitOnFlagUntilTimeout+0x8a>
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2b40      	cmp	r3, #64	@ 0x40
 800bd4c:	d01d      	beq.n	800bd8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 0308 	and.w	r3, r3, #8
 800bd58:	2b08      	cmp	r3, #8
 800bd5a:	d116      	bne.n	800bd8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	617b      	str	r3, [r7, #20]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	617b      	str	r3, [r7, #20]
 800bd70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f000 f8ec 	bl	800bf50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2208      	movs	r2, #8
 800bd7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e00f      	b.n	800bdaa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	4013      	ands	r3, r2
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	bf0c      	ite	eq
 800bd9a:	2301      	moveq	r3, #1
 800bd9c:	2300      	movne	r3, #0
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	461a      	mov	r2, r3
 800bda2:	79fb      	ldrb	r3, [r7, #7]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d0b4      	beq.n	800bd12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b098      	sub	sp, #96	@ 0x60
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	88fa      	ldrh	r2, [r7, #6]
 800bdcc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2222      	movs	r2, #34	@ 0x22
 800bdd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bde0:	4a44      	ldr	r2, [pc, #272]	@ (800bef4 <UART_Start_Receive_DMA+0x140>)
 800bde2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bde8:	4a43      	ldr	r2, [pc, #268]	@ (800bef8 <UART_Start_Receive_DMA+0x144>)
 800bdea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdf0:	4a42      	ldr	r2, [pc, #264]	@ (800befc <UART_Start_Receive_DMA+0x148>)
 800bdf2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bdfc:	f107 0308 	add.w	r3, r7, #8
 800be00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3304      	adds	r3, #4
 800be0c:	4619      	mov	r1, r3
 800be0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	88fb      	ldrh	r3, [r7, #6]
 800be14:	f7fb fa5a 	bl	80072cc <HAL_DMA_Start_IT>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d008      	beq.n	800be30 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2210      	movs	r2, #16
 800be22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2220      	movs	r2, #32
 800be28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e05d      	b.n	800beec <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800be30:	2300      	movs	r3, #0
 800be32:	613b      	str	r3, [r7, #16]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	613b      	str	r3, [r7, #16]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	613b      	str	r3, [r7, #16]
 800be44:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d019      	beq.n	800be82 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	330c      	adds	r3, #12
 800be54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be58:	e853 3f00 	ldrex	r3, [r3]
 800be5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be64:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	330c      	adds	r3, #12
 800be6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be6e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800be70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800be74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be76:	e841 2300 	strex	r3, r2, [r1]
 800be7a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800be7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e5      	bne.n	800be4e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3314      	adds	r3, #20
 800be88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8c:	e853 3f00 	ldrex	r3, [r3]
 800be90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be94:	f043 0301 	orr.w	r3, r3, #1
 800be98:	657b      	str	r3, [r7, #84]	@ 0x54
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3314      	adds	r3, #20
 800bea0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bea2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bea4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800beb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1e5      	bne.n	800be82 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3314      	adds	r3, #20
 800bebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	e853 3f00 	ldrex	r3, [r3]
 800bec4:	617b      	str	r3, [r7, #20]
   return(result);
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800becc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3314      	adds	r3, #20
 800bed4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bed6:	627a      	str	r2, [r7, #36]	@ 0x24
 800bed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beda:	6a39      	ldr	r1, [r7, #32]
 800bedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bede:	e841 2300 	strex	r3, r2, [r1]
 800bee2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1e5      	bne.n	800beb6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3760      	adds	r7, #96	@ 0x60
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	0800bb05 	.word	0x0800bb05
 800bef8:	0800bc31 	.word	0x0800bc31
 800befc:	0800bc6d 	.word	0x0800bc6d

0800bf00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b089      	sub	sp, #36	@ 0x24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	330c      	adds	r3, #12
 800bf0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	e853 3f00 	ldrex	r3, [r3]
 800bf16:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bf1e:	61fb      	str	r3, [r7, #28]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	330c      	adds	r3, #12
 800bf26:	69fa      	ldr	r2, [r7, #28]
 800bf28:	61ba      	str	r2, [r7, #24]
 800bf2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2c:	6979      	ldr	r1, [r7, #20]
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	e841 2300 	strex	r3, r2, [r1]
 800bf34:	613b      	str	r3, [r7, #16]
   return(result);
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1e5      	bne.n	800bf08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2220      	movs	r2, #32
 800bf40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bf44:	bf00      	nop
 800bf46:	3724      	adds	r7, #36	@ 0x24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b095      	sub	sp, #84	@ 0x54
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	330c      	adds	r3, #12
 800bf5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf62:	e853 3f00 	ldrex	r3, [r3]
 800bf66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	330c      	adds	r3, #12
 800bf76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bf78:	643a      	str	r2, [r7, #64]	@ 0x40
 800bf7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf80:	e841 2300 	strex	r3, r2, [r1]
 800bf84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1e5      	bne.n	800bf58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	3314      	adds	r3, #20
 800bf92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	f023 0301 	bic.w	r3, r3, #1
 800bfa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	3314      	adds	r3, #20
 800bfaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bfae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfb4:	e841 2300 	strex	r3, r2, [r1]
 800bfb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1e5      	bne.n	800bf8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d119      	bne.n	800bffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	330c      	adds	r3, #12
 800bfce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	e853 3f00 	ldrex	r3, [r3]
 800bfd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	f023 0310 	bic.w	r3, r3, #16
 800bfde:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	330c      	adds	r3, #12
 800bfe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfe8:	61ba      	str	r2, [r7, #24]
 800bfea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfec:	6979      	ldr	r1, [r7, #20]
 800bfee:	69ba      	ldr	r2, [r7, #24]
 800bff0:	e841 2300 	strex	r3, r2, [r1]
 800bff4:	613b      	str	r3, [r7, #16]
   return(result);
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e5      	bne.n	800bfc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2220      	movs	r2, #32
 800c000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c00a:	bf00      	nop
 800c00c:	3754      	adds	r7, #84	@ 0x54
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr

0800c016 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b084      	sub	sp, #16
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2200      	movs	r2, #0
 800c028:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7f6 fc16 	bl	800285c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c030:	bf00      	nop
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b21      	cmp	r3, #33	@ 0x21
 800c04a:	d13e      	bne.n	800c0ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c054:	d114      	bne.n	800c080 <UART_Transmit_IT+0x48>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d110      	bne.n	800c080 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	461a      	mov	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c072:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a1b      	ldr	r3, [r3, #32]
 800c078:	1c9a      	adds	r2, r3, #2
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	621a      	str	r2, [r3, #32]
 800c07e:	e008      	b.n	800c092 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	1c59      	adds	r1, r3, #1
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	6211      	str	r1, [r2, #32]
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c096:	b29b      	uxth	r3, r3
 800c098:	3b01      	subs	r3, #1
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10f      	bne.n	800c0c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	68da      	ldr	r2, [r3, #12]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c0b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	e000      	b.n	800c0cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0ca:	2302      	movs	r3, #2
  }
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68da      	ldr	r2, [r3, #12]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c0ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2220      	movs	r2, #32
 800c0f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7ff fce3 	bl	800bac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08c      	sub	sp, #48	@ 0x30
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800c110:	2300      	movs	r3, #0
 800c112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800c114:	2300      	movs	r3, #0
 800c116:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b22      	cmp	r3, #34	@ 0x22
 800c122:	f040 80aa 	bne.w	800c27a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c12e:	d115      	bne.n	800c15c <UART_Receive_IT+0x54>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d111      	bne.n	800c15c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c13c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	b29b      	uxth	r3, r3
 800c146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c154:	1c9a      	adds	r2, r3, #2
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	629a      	str	r2, [r3, #40]	@ 0x28
 800c15a:	e024      	b.n	800c1a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c160:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c16a:	d007      	beq.n	800c17c <UART_Receive_IT+0x74>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10a      	bne.n	800c18a <UART_Receive_IT+0x82>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	b2da      	uxtb	r2, r3
 800c184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	e008      	b.n	800c19c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	b2db      	uxtb	r3, r3
 800c192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c196:	b2da      	uxtb	r2, r3
 800c198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c19a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a0:	1c5a      	adds	r2, r3, #1
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d15d      	bne.n	800c276 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68da      	ldr	r2, [r3, #12]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f022 0220 	bic.w	r2, r2, #32
 800c1c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68da      	ldr	r2, [r3, #12]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c1d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	695a      	ldr	r2, [r3, #20]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f022 0201 	bic.w	r2, r2, #1
 800c1e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d135      	bne.n	800c26c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	330c      	adds	r3, #12
 800c20c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	e853 3f00 	ldrex	r3, [r3]
 800c214:	613b      	str	r3, [r7, #16]
   return(result);
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	f023 0310 	bic.w	r3, r3, #16
 800c21c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	330c      	adds	r3, #12
 800c224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c226:	623a      	str	r2, [r7, #32]
 800c228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22a:	69f9      	ldr	r1, [r7, #28]
 800c22c:	6a3a      	ldr	r2, [r7, #32]
 800c22e:	e841 2300 	strex	r3, r2, [r1]
 800c232:	61bb      	str	r3, [r7, #24]
   return(result);
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1e5      	bne.n	800c206 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 0310 	and.w	r3, r3, #16
 800c244:	2b10      	cmp	r3, #16
 800c246:	d10a      	bne.n	800c25e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c248:	2300      	movs	r3, #0
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	60fb      	str	r3, [r7, #12]
 800c25c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f7ff fc41 	bl	800baec <HAL_UARTEx_RxEventCallback>
 800c26a:	e002      	b.n	800c272 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f7f6 fa15 	bl	800269c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	e002      	b.n	800c27c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c276:	2300      	movs	r3, #0
 800c278:	e000      	b.n	800c27c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c27a:	2302      	movs	r3, #2
  }
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3730      	adds	r7, #48	@ 0x30
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c288:	b0c0      	sub	sp, #256	@ 0x100
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2a0:	68d9      	ldr	r1, [r3, #12]
 800c2a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	ea40 0301 	orr.w	r3, r0, r1
 800c2ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2b2:	689a      	ldr	r2, [r3, #8]
 800c2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2c0:	695b      	ldr	r3, [r3, #20]
 800c2c2:	431a      	orrs	r2, r3
 800c2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2c8:	69db      	ldr	r3, [r3, #28]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c2dc:	f021 010c 	bic.w	r1, r1, #12
 800c2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c2ea:	430b      	orrs	r3, r1
 800c2ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2fe:	6999      	ldr	r1, [r3, #24]
 800c300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	ea40 0301 	orr.w	r3, r0, r1
 800c30a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	4b8f      	ldr	r3, [pc, #572]	@ (800c550 <UART_SetConfig+0x2cc>)
 800c314:	429a      	cmp	r2, r3
 800c316:	d005      	beq.n	800c324 <UART_SetConfig+0xa0>
 800c318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	4b8d      	ldr	r3, [pc, #564]	@ (800c554 <UART_SetConfig+0x2d0>)
 800c320:	429a      	cmp	r2, r3
 800c322:	d104      	bne.n	800c32e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c324:	f7fe f898 	bl	800a458 <HAL_RCC_GetPCLK2Freq>
 800c328:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c32c:	e003      	b.n	800c336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c32e:	f7fe f87f 	bl	800a430 <HAL_RCC_GetPCLK1Freq>
 800c332:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c33a:	69db      	ldr	r3, [r3, #28]
 800c33c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c340:	f040 810c 	bne.w	800c55c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c348:	2200      	movs	r2, #0
 800c34a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c34e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c356:	4622      	mov	r2, r4
 800c358:	462b      	mov	r3, r5
 800c35a:	1891      	adds	r1, r2, r2
 800c35c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c35e:	415b      	adcs	r3, r3
 800c360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c366:	4621      	mov	r1, r4
 800c368:	eb12 0801 	adds.w	r8, r2, r1
 800c36c:	4629      	mov	r1, r5
 800c36e:	eb43 0901 	adc.w	r9, r3, r1
 800c372:	f04f 0200 	mov.w	r2, #0
 800c376:	f04f 0300 	mov.w	r3, #0
 800c37a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c37e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c386:	4690      	mov	r8, r2
 800c388:	4699      	mov	r9, r3
 800c38a:	4623      	mov	r3, r4
 800c38c:	eb18 0303 	adds.w	r3, r8, r3
 800c390:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c394:	462b      	mov	r3, r5
 800c396:	eb49 0303 	adc.w	r3, r9, r3
 800c39a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c39e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c3aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c3ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	18db      	adds	r3, r3, r3
 800c3b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	eb42 0303 	adc.w	r3, r2, r3
 800c3be:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c3c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c3c8:	f7f4 fbf6 	bl	8000bb8 <__aeabi_uldivmod>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	4b61      	ldr	r3, [pc, #388]	@ (800c558 <UART_SetConfig+0x2d4>)
 800c3d2:	fba3 2302 	umull	r2, r3, r3, r2
 800c3d6:	095b      	lsrs	r3, r3, #5
 800c3d8:	011c      	lsls	r4, r3, #4
 800c3da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c3e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c3e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c3ec:	4642      	mov	r2, r8
 800c3ee:	464b      	mov	r3, r9
 800c3f0:	1891      	adds	r1, r2, r2
 800c3f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c3f4:	415b      	adcs	r3, r3
 800c3f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c3fc:	4641      	mov	r1, r8
 800c3fe:	eb12 0a01 	adds.w	sl, r2, r1
 800c402:	4649      	mov	r1, r9
 800c404:	eb43 0b01 	adc.w	fp, r3, r1
 800c408:	f04f 0200 	mov.w	r2, #0
 800c40c:	f04f 0300 	mov.w	r3, #0
 800c410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c41c:	4692      	mov	sl, r2
 800c41e:	469b      	mov	fp, r3
 800c420:	4643      	mov	r3, r8
 800c422:	eb1a 0303 	adds.w	r3, sl, r3
 800c426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c42a:	464b      	mov	r3, r9
 800c42c:	eb4b 0303 	adc.w	r3, fp, r3
 800c430:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c440:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c448:	460b      	mov	r3, r1
 800c44a:	18db      	adds	r3, r3, r3
 800c44c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c44e:	4613      	mov	r3, r2
 800c450:	eb42 0303 	adc.w	r3, r2, r3
 800c454:	647b      	str	r3, [r7, #68]	@ 0x44
 800c456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c45a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c45e:	f7f4 fbab 	bl	8000bb8 <__aeabi_uldivmod>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	4611      	mov	r1, r2
 800c468:	4b3b      	ldr	r3, [pc, #236]	@ (800c558 <UART_SetConfig+0x2d4>)
 800c46a:	fba3 2301 	umull	r2, r3, r3, r1
 800c46e:	095b      	lsrs	r3, r3, #5
 800c470:	2264      	movs	r2, #100	@ 0x64
 800c472:	fb02 f303 	mul.w	r3, r2, r3
 800c476:	1acb      	subs	r3, r1, r3
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c47e:	4b36      	ldr	r3, [pc, #216]	@ (800c558 <UART_SetConfig+0x2d4>)
 800c480:	fba3 2302 	umull	r2, r3, r3, r2
 800c484:	095b      	lsrs	r3, r3, #5
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c48c:	441c      	add	r4, r3
 800c48e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c492:	2200      	movs	r2, #0
 800c494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c498:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c49c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c4a0:	4642      	mov	r2, r8
 800c4a2:	464b      	mov	r3, r9
 800c4a4:	1891      	adds	r1, r2, r2
 800c4a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c4a8:	415b      	adcs	r3, r3
 800c4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c4b0:	4641      	mov	r1, r8
 800c4b2:	1851      	adds	r1, r2, r1
 800c4b4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	414b      	adcs	r3, r1
 800c4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4bc:	f04f 0200 	mov.w	r2, #0
 800c4c0:	f04f 0300 	mov.w	r3, #0
 800c4c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c4c8:	4659      	mov	r1, fp
 800c4ca:	00cb      	lsls	r3, r1, #3
 800c4cc:	4651      	mov	r1, sl
 800c4ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4d2:	4651      	mov	r1, sl
 800c4d4:	00ca      	lsls	r2, r1, #3
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4603      	mov	r3, r0
 800c4dc:	4642      	mov	r2, r8
 800c4de:	189b      	adds	r3, r3, r2
 800c4e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4e4:	464b      	mov	r3, r9
 800c4e6:	460a      	mov	r2, r1
 800c4e8:	eb42 0303 	adc.w	r3, r2, r3
 800c4ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c4f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c4fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c504:	460b      	mov	r3, r1
 800c506:	18db      	adds	r3, r3, r3
 800c508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c50a:	4613      	mov	r3, r2
 800c50c:	eb42 0303 	adc.w	r3, r2, r3
 800c510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c51a:	f7f4 fb4d 	bl	8000bb8 <__aeabi_uldivmod>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4b0d      	ldr	r3, [pc, #52]	@ (800c558 <UART_SetConfig+0x2d4>)
 800c524:	fba3 1302 	umull	r1, r3, r3, r2
 800c528:	095b      	lsrs	r3, r3, #5
 800c52a:	2164      	movs	r1, #100	@ 0x64
 800c52c:	fb01 f303 	mul.w	r3, r1, r3
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	3332      	adds	r3, #50	@ 0x32
 800c536:	4a08      	ldr	r2, [pc, #32]	@ (800c558 <UART_SetConfig+0x2d4>)
 800c538:	fba2 2303 	umull	r2, r3, r2, r3
 800c53c:	095b      	lsrs	r3, r3, #5
 800c53e:	f003 0207 	and.w	r2, r3, #7
 800c542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4422      	add	r2, r4
 800c54a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c54c:	e106      	b.n	800c75c <UART_SetConfig+0x4d8>
 800c54e:	bf00      	nop
 800c550:	40011000 	.word	0x40011000
 800c554:	40011400 	.word	0x40011400
 800c558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c55c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c560:	2200      	movs	r2, #0
 800c562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c566:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c56a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c56e:	4642      	mov	r2, r8
 800c570:	464b      	mov	r3, r9
 800c572:	1891      	adds	r1, r2, r2
 800c574:	6239      	str	r1, [r7, #32]
 800c576:	415b      	adcs	r3, r3
 800c578:	627b      	str	r3, [r7, #36]	@ 0x24
 800c57a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c57e:	4641      	mov	r1, r8
 800c580:	1854      	adds	r4, r2, r1
 800c582:	4649      	mov	r1, r9
 800c584:	eb43 0501 	adc.w	r5, r3, r1
 800c588:	f04f 0200 	mov.w	r2, #0
 800c58c:	f04f 0300 	mov.w	r3, #0
 800c590:	00eb      	lsls	r3, r5, #3
 800c592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c596:	00e2      	lsls	r2, r4, #3
 800c598:	4614      	mov	r4, r2
 800c59a:	461d      	mov	r5, r3
 800c59c:	4643      	mov	r3, r8
 800c59e:	18e3      	adds	r3, r4, r3
 800c5a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c5a4:	464b      	mov	r3, r9
 800c5a6:	eb45 0303 	adc.w	r3, r5, r3
 800c5aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c5be:	f04f 0200 	mov.w	r2, #0
 800c5c2:	f04f 0300 	mov.w	r3, #0
 800c5c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	008b      	lsls	r3, r1, #2
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5d4:	4621      	mov	r1, r4
 800c5d6:	008a      	lsls	r2, r1, #2
 800c5d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c5dc:	f7f4 faec 	bl	8000bb8 <__aeabi_uldivmod>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4b60      	ldr	r3, [pc, #384]	@ (800c768 <UART_SetConfig+0x4e4>)
 800c5e6:	fba3 2302 	umull	r2, r3, r3, r2
 800c5ea:	095b      	lsrs	r3, r3, #5
 800c5ec:	011c      	lsls	r4, r3, #4
 800c5ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c5f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c5fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c600:	4642      	mov	r2, r8
 800c602:	464b      	mov	r3, r9
 800c604:	1891      	adds	r1, r2, r2
 800c606:	61b9      	str	r1, [r7, #24]
 800c608:	415b      	adcs	r3, r3
 800c60a:	61fb      	str	r3, [r7, #28]
 800c60c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c610:	4641      	mov	r1, r8
 800c612:	1851      	adds	r1, r2, r1
 800c614:	6139      	str	r1, [r7, #16]
 800c616:	4649      	mov	r1, r9
 800c618:	414b      	adcs	r3, r1
 800c61a:	617b      	str	r3, [r7, #20]
 800c61c:	f04f 0200 	mov.w	r2, #0
 800c620:	f04f 0300 	mov.w	r3, #0
 800c624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c628:	4659      	mov	r1, fp
 800c62a:	00cb      	lsls	r3, r1, #3
 800c62c:	4651      	mov	r1, sl
 800c62e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c632:	4651      	mov	r1, sl
 800c634:	00ca      	lsls	r2, r1, #3
 800c636:	4610      	mov	r0, r2
 800c638:	4619      	mov	r1, r3
 800c63a:	4603      	mov	r3, r0
 800c63c:	4642      	mov	r2, r8
 800c63e:	189b      	adds	r3, r3, r2
 800c640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c644:	464b      	mov	r3, r9
 800c646:	460a      	mov	r2, r1
 800c648:	eb42 0303 	adc.w	r3, r2, r3
 800c64c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c65a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c65c:	f04f 0200 	mov.w	r2, #0
 800c660:	f04f 0300 	mov.w	r3, #0
 800c664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c668:	4649      	mov	r1, r9
 800c66a:	008b      	lsls	r3, r1, #2
 800c66c:	4641      	mov	r1, r8
 800c66e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c672:	4641      	mov	r1, r8
 800c674:	008a      	lsls	r2, r1, #2
 800c676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c67a:	f7f4 fa9d 	bl	8000bb8 <__aeabi_uldivmod>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4611      	mov	r1, r2
 800c684:	4b38      	ldr	r3, [pc, #224]	@ (800c768 <UART_SetConfig+0x4e4>)
 800c686:	fba3 2301 	umull	r2, r3, r3, r1
 800c68a:	095b      	lsrs	r3, r3, #5
 800c68c:	2264      	movs	r2, #100	@ 0x64
 800c68e:	fb02 f303 	mul.w	r3, r2, r3
 800c692:	1acb      	subs	r3, r1, r3
 800c694:	011b      	lsls	r3, r3, #4
 800c696:	3332      	adds	r3, #50	@ 0x32
 800c698:	4a33      	ldr	r2, [pc, #204]	@ (800c768 <UART_SetConfig+0x4e4>)
 800c69a:	fba2 2303 	umull	r2, r3, r2, r3
 800c69e:	095b      	lsrs	r3, r3, #5
 800c6a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6a4:	441c      	add	r4, r3
 800c6a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800c6ae:	677a      	str	r2, [r7, #116]	@ 0x74
 800c6b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c6b4:	4642      	mov	r2, r8
 800c6b6:	464b      	mov	r3, r9
 800c6b8:	1891      	adds	r1, r2, r2
 800c6ba:	60b9      	str	r1, [r7, #8]
 800c6bc:	415b      	adcs	r3, r3
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6c4:	4641      	mov	r1, r8
 800c6c6:	1851      	adds	r1, r2, r1
 800c6c8:	6039      	str	r1, [r7, #0]
 800c6ca:	4649      	mov	r1, r9
 800c6cc:	414b      	adcs	r3, r1
 800c6ce:	607b      	str	r3, [r7, #4]
 800c6d0:	f04f 0200 	mov.w	r2, #0
 800c6d4:	f04f 0300 	mov.w	r3, #0
 800c6d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c6dc:	4659      	mov	r1, fp
 800c6de:	00cb      	lsls	r3, r1, #3
 800c6e0:	4651      	mov	r1, sl
 800c6e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6e6:	4651      	mov	r1, sl
 800c6e8:	00ca      	lsls	r2, r1, #3
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	189b      	adds	r3, r3, r2
 800c6f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	460a      	mov	r2, r1
 800c6fa:	eb42 0303 	adc.w	r3, r2, r3
 800c6fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	663b      	str	r3, [r7, #96]	@ 0x60
 800c70a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c70c:	f04f 0200 	mov.w	r2, #0
 800c710:	f04f 0300 	mov.w	r3, #0
 800c714:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c718:	4649      	mov	r1, r9
 800c71a:	008b      	lsls	r3, r1, #2
 800c71c:	4641      	mov	r1, r8
 800c71e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c722:	4641      	mov	r1, r8
 800c724:	008a      	lsls	r2, r1, #2
 800c726:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c72a:	f7f4 fa45 	bl	8000bb8 <__aeabi_uldivmod>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4b0d      	ldr	r3, [pc, #52]	@ (800c768 <UART_SetConfig+0x4e4>)
 800c734:	fba3 1302 	umull	r1, r3, r3, r2
 800c738:	095b      	lsrs	r3, r3, #5
 800c73a:	2164      	movs	r1, #100	@ 0x64
 800c73c:	fb01 f303 	mul.w	r3, r1, r3
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	011b      	lsls	r3, r3, #4
 800c744:	3332      	adds	r3, #50	@ 0x32
 800c746:	4a08      	ldr	r2, [pc, #32]	@ (800c768 <UART_SetConfig+0x4e4>)
 800c748:	fba2 2303 	umull	r2, r3, r2, r3
 800c74c:	095b      	lsrs	r3, r3, #5
 800c74e:	f003 020f 	and.w	r2, r3, #15
 800c752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4422      	add	r2, r4
 800c75a:	609a      	str	r2, [r3, #8]
}
 800c75c:	bf00      	nop
 800c75e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c762:	46bd      	mov	sp, r7
 800c764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c768:	51eb851f 	.word	0x51eb851f

0800c76c <__NVIC_SetPriority>:
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	4603      	mov	r3, r0
 800c774:	6039      	str	r1, [r7, #0]
 800c776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	db0a      	blt.n	800c796 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	b2da      	uxtb	r2, r3
 800c784:	490c      	ldr	r1, [pc, #48]	@ (800c7b8 <__NVIC_SetPriority+0x4c>)
 800c786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c78a:	0112      	lsls	r2, r2, #4
 800c78c:	b2d2      	uxtb	r2, r2
 800c78e:	440b      	add	r3, r1
 800c790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c794:	e00a      	b.n	800c7ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	4908      	ldr	r1, [pc, #32]	@ (800c7bc <__NVIC_SetPriority+0x50>)
 800c79c:	79fb      	ldrb	r3, [r7, #7]
 800c79e:	f003 030f 	and.w	r3, r3, #15
 800c7a2:	3b04      	subs	r3, #4
 800c7a4:	0112      	lsls	r2, r2, #4
 800c7a6:	b2d2      	uxtb	r2, r2
 800c7a8:	440b      	add	r3, r1
 800c7aa:	761a      	strb	r2, [r3, #24]
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	e000e100 	.word	0xe000e100
 800c7bc:	e000ed00 	.word	0xe000ed00

0800c7c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c7c4:	4b05      	ldr	r3, [pc, #20]	@ (800c7dc <SysTick_Handler+0x1c>)
 800c7c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c7c8:	f002 f922 	bl	800ea10 <xTaskGetSchedulerState>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d001      	beq.n	800c7d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c7d2:	f003 f819 	bl	800f808 <xPortSysTickHandler>
  }
}
 800c7d6:	bf00      	nop
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	e000e010 	.word	0xe000e010

0800c7e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	f06f 0004 	mvn.w	r0, #4
 800c7ea:	f7ff ffbf 	bl	800c76c <__NVIC_SetPriority>
#endif
}
 800c7ee:	bf00      	nop
 800c7f0:	bd80      	pop	{r7, pc}
	...

0800c7f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7fa:	f3ef 8305 	mrs	r3, IPSR
 800c7fe:	603b      	str	r3, [r7, #0]
  return(result);
 800c800:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c806:	f06f 0305 	mvn.w	r3, #5
 800c80a:	607b      	str	r3, [r7, #4]
 800c80c:	e00c      	b.n	800c828 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c80e:	4b0a      	ldr	r3, [pc, #40]	@ (800c838 <osKernelInitialize+0x44>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d105      	bne.n	800c822 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c816:	4b08      	ldr	r3, [pc, #32]	@ (800c838 <osKernelInitialize+0x44>)
 800c818:	2201      	movs	r2, #1
 800c81a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c81c:	2300      	movs	r3, #0
 800c81e:	607b      	str	r3, [r7, #4]
 800c820:	e002      	b.n	800c828 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c822:	f04f 33ff 	mov.w	r3, #4294967295
 800c826:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c828:	687b      	ldr	r3, [r7, #4]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	370c      	adds	r7, #12
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	2000149c 	.word	0x2000149c

0800c83c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c842:	f002 f8e5 	bl	800ea10 <xTaskGetSchedulerState>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d004      	beq.n	800c856 <osKernelGetState+0x1a>
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d105      	bne.n	800c85c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c850:	2302      	movs	r3, #2
 800c852:	607b      	str	r3, [r7, #4]
      break;
 800c854:	e00c      	b.n	800c870 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c856:	2303      	movs	r3, #3
 800c858:	607b      	str	r3, [r7, #4]
      break;
 800c85a:	e009      	b.n	800c870 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c85c:	4b07      	ldr	r3, [pc, #28]	@ (800c87c <osKernelGetState+0x40>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d102      	bne.n	800c86a <osKernelGetState+0x2e>
        state = osKernelReady;
 800c864:	2301      	movs	r3, #1
 800c866:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c868:	e001      	b.n	800c86e <osKernelGetState+0x32>
        state = osKernelInactive;
 800c86a:	2300      	movs	r3, #0
 800c86c:	607b      	str	r3, [r7, #4]
      break;
 800c86e:	bf00      	nop
  }

  return (state);
 800c870:	687b      	ldr	r3, [r7, #4]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	2000149c 	.word	0x2000149c

0800c880 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c886:	f3ef 8305 	mrs	r3, IPSR
 800c88a:	603b      	str	r3, [r7, #0]
  return(result);
 800c88c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d003      	beq.n	800c89a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c892:	f06f 0305 	mvn.w	r3, #5
 800c896:	607b      	str	r3, [r7, #4]
 800c898:	e010      	b.n	800c8bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c89a:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c8 <osKernelStart+0x48>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d109      	bne.n	800c8b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c8a2:	f7ff ff9d 	bl	800c7e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c8a6:	4b08      	ldr	r3, [pc, #32]	@ (800c8c8 <osKernelStart+0x48>)
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c8ac:	f001 fbe8 	bl	800e080 <vTaskStartScheduler>
      stat = osOK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	607b      	str	r3, [r7, #4]
 800c8b4:	e002      	b.n	800c8bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8bc:	687b      	ldr	r3, [r7, #4]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	2000149c 	.word	0x2000149c

0800c8cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08e      	sub	sp, #56	@ 0x38
 800c8d0:	af04      	add	r7, sp, #16
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8dc:	f3ef 8305 	mrs	r3, IPSR
 800c8e0:	617b      	str	r3, [r7, #20]
  return(result);
 800c8e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d17e      	bne.n	800c9e6 <osThreadNew+0x11a>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d07b      	beq.n	800c9e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c8ee:	2380      	movs	r3, #128	@ 0x80
 800c8f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c8f2:	2318      	movs	r3, #24
 800c8f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d045      	beq.n	800c992 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d002      	beq.n	800c914 <osThreadNew+0x48>
        name = attr->name;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d008      	beq.n	800c93a <osThreadNew+0x6e>
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	2b38      	cmp	r3, #56	@ 0x38
 800c92c:	d805      	bhi.n	800c93a <osThreadNew+0x6e>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b00      	cmp	r3, #0
 800c938:	d001      	beq.n	800c93e <osThreadNew+0x72>
        return (NULL);
 800c93a:	2300      	movs	r3, #0
 800c93c:	e054      	b.n	800c9e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d003      	beq.n	800c94e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	089b      	lsrs	r3, r3, #2
 800c94c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00e      	beq.n	800c974 <osThreadNew+0xa8>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	2baf      	cmp	r3, #175	@ 0xaf
 800c95c:	d90a      	bls.n	800c974 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <osThreadNew+0xa8>
        mem = 1;
 800c96e:	2301      	movs	r3, #1
 800c970:	61bb      	str	r3, [r7, #24]
 800c972:	e010      	b.n	800c996 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10c      	bne.n	800c996 <osThreadNew+0xca>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d108      	bne.n	800c996 <osThreadNew+0xca>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d104      	bne.n	800c996 <osThreadNew+0xca>
          mem = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	61bb      	str	r3, [r7, #24]
 800c990:	e001      	b.n	800c996 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d110      	bne.n	800c9be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9a4:	9202      	str	r2, [sp, #8]
 800c9a6:	9301      	str	r3, [sp, #4]
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	6a3a      	ldr	r2, [r7, #32]
 800c9b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f001 f96a 	bl	800dc8c <xTaskCreateStatic>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	613b      	str	r3, [r7, #16]
 800c9bc:	e013      	b.n	800c9e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d110      	bne.n	800c9e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	f107 0310 	add.w	r3, r7, #16
 800c9cc:	9301      	str	r3, [sp, #4]
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f001 f9b8 	bl	800dd4c <xTaskCreate>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d001      	beq.n	800c9e6 <osThreadNew+0x11a>
            hTask = NULL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c9e6:	693b      	ldr	r3, [r7, #16]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3728      	adds	r7, #40	@ 0x28
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9fc:	f3ef 8305 	mrs	r3, IPSR
 800ca00:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca02:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <osThreadGetName+0x1e>
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d102      	bne.n	800ca14 <osThreadGetName+0x24>
    name = NULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	617b      	str	r3, [r7, #20]
 800ca12:	e003      	b.n	800ca1c <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 800ca14:	6938      	ldr	r0, [r7, #16]
 800ca16:	f001 fc61 	bl	800e2dc <pcTaskGetName>
 800ca1a:	6178      	str	r0, [r7, #20]
  }

  return (name);
 800ca1c:	697b      	ldr	r3, [r7, #20]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3718      	adds	r7, #24
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <osThreadGetId>:

osThreadId_t osThreadGetId (void) {
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b082      	sub	sp, #8
 800ca2a:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800ca2c:	f001 ffe0 	bl	800e9f0 <xTaskGetCurrentTaskHandle>
 800ca30:	6078      	str	r0, [r7, #4]

  return (id);
 800ca32:	687b      	ldr	r3, [r7, #4]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca44:	f3ef 8305 	mrs	r3, IPSR
 800ca48:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <osDelay+0x1c>
    stat = osErrorISR;
 800ca50:	f06f 0305 	mvn.w	r3, #5
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	e007      	b.n	800ca68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d002      	beq.n	800ca68 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f001 fad6 	bl	800e014 <vTaskDelay>
    }
  }

  return (stat);
 800ca68:	68fb      	ldr	r3, [r7, #12]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b088      	sub	sp, #32
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca7e:	f3ef 8305 	mrs	r3, IPSR
 800ca82:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca84:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d174      	bne.n	800cb74 <osMutexNew+0x102>
    if (attr != NULL) {
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d003      	beq.n	800ca98 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	61bb      	str	r3, [r7, #24]
 800ca96:	e001      	b.n	800ca9c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d002      	beq.n	800caac <osMutexNew+0x3a>
      rmtx = 1U;
 800caa6:	2301      	movs	r3, #1
 800caa8:	617b      	str	r3, [r7, #20]
 800caaa:	e001      	b.n	800cab0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800caac:	2300      	movs	r3, #0
 800caae:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	f003 0308 	and.w	r3, r3, #8
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d15c      	bne.n	800cb74 <osMutexNew+0x102>
      mem = -1;
 800caba:	f04f 33ff 	mov.w	r3, #4294967295
 800cabe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d015      	beq.n	800caf2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d006      	beq.n	800cadc <osMutexNew+0x6a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	2b4f      	cmp	r3, #79	@ 0x4f
 800cad4:	d902      	bls.n	800cadc <osMutexNew+0x6a>
          mem = 1;
 800cad6:	2301      	movs	r3, #1
 800cad8:	613b      	str	r3, [r7, #16]
 800cada:	e00c      	b.n	800caf6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d108      	bne.n	800caf6 <osMutexNew+0x84>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d104      	bne.n	800caf6 <osMutexNew+0x84>
            mem = 0;
 800caec:	2300      	movs	r3, #0
 800caee:	613b      	str	r3, [r7, #16]
 800caf0:	e001      	b.n	800caf6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d112      	bne.n	800cb22 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d007      	beq.n	800cb12 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	4619      	mov	r1, r3
 800cb08:	2004      	movs	r0, #4
 800cb0a:	f000 fb20 	bl	800d14e <xQueueCreateMutexStatic>
 800cb0e:	61f8      	str	r0, [r7, #28]
 800cb10:	e016      	b.n	800cb40 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	4619      	mov	r1, r3
 800cb18:	2001      	movs	r0, #1
 800cb1a:	f000 fb18 	bl	800d14e <xQueueCreateMutexStatic>
 800cb1e:	61f8      	str	r0, [r7, #28]
 800cb20:	e00e      	b.n	800cb40 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10b      	bne.n	800cb40 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d004      	beq.n	800cb38 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cb2e:	2004      	movs	r0, #4
 800cb30:	f000 faf5 	bl	800d11e <xQueueCreateMutex>
 800cb34:	61f8      	str	r0, [r7, #28]
 800cb36:	e003      	b.n	800cb40 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cb38:	2001      	movs	r0, #1
 800cb3a:	f000 faf0 	bl	800d11e <xQueueCreateMutex>
 800cb3e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00c      	beq.n	800cb60 <osMutexNew+0xee>
        if (attr != NULL) {
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d003      	beq.n	800cb54 <osMutexNew+0xe2>
          name = attr->name;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	60fb      	str	r3, [r7, #12]
 800cb52:	e001      	b.n	800cb58 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cb54:	2300      	movs	r3, #0
 800cb56:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cb58:	68f9      	ldr	r1, [r7, #12]
 800cb5a:	69f8      	ldr	r0, [r7, #28]
 800cb5c:	f001 f838 	bl	800dbd0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d006      	beq.n	800cb74 <osMutexNew+0x102>
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d003      	beq.n	800cb74 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	f043 0301 	orr.w	r3, r3, #1
 800cb72:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cb74:	69fb      	ldr	r3, [r7, #28]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3720      	adds	r7, #32
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b086      	sub	sp, #24
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f023 0301 	bic.w	r3, r3, #1
 800cb8e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb9c:	f3ef 8305 	mrs	r3, IPSR
 800cba0:	60bb      	str	r3, [r7, #8]
  return(result);
 800cba2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d003      	beq.n	800cbb0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cba8:	f06f 0305 	mvn.w	r3, #5
 800cbac:	617b      	str	r3, [r7, #20]
 800cbae:	e02c      	b.n	800cc0a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d103      	bne.n	800cbbe <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cbb6:	f06f 0303 	mvn.w	r3, #3
 800cbba:	617b      	str	r3, [r7, #20]
 800cbbc:	e025      	b.n	800cc0a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d011      	beq.n	800cbe8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6938      	ldr	r0, [r7, #16]
 800cbc8:	f000 fb11 	bl	800d1ee <xQueueTakeMutexRecursive>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d01b      	beq.n	800cc0a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d003      	beq.n	800cbe0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cbd8:	f06f 0301 	mvn.w	r3, #1
 800cbdc:	617b      	str	r3, [r7, #20]
 800cbde:	e014      	b.n	800cc0a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cbe0:	f06f 0302 	mvn.w	r3, #2
 800cbe4:	617b      	str	r3, [r7, #20]
 800cbe6:	e010      	b.n	800cc0a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	6938      	ldr	r0, [r7, #16]
 800cbec:	f000 fdb8 	bl	800d760 <xQueueSemaphoreTake>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d009      	beq.n	800cc0a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d003      	beq.n	800cc04 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800cbfc:	f06f 0301 	mvn.w	r3, #1
 800cc00:	617b      	str	r3, [r7, #20]
 800cc02:	e002      	b.n	800cc0a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cc04:	f06f 0302 	mvn.w	r3, #2
 800cc08:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800cc0a:	697b      	ldr	r3, [r7, #20]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3718      	adds	r7, #24
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f023 0301 	bic.w	r3, r3, #1
 800cc22:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc30:	f3ef 8305 	mrs	r3, IPSR
 800cc34:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc36:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d003      	beq.n	800cc44 <osMutexRelease+0x30>
    stat = osErrorISR;
 800cc3c:	f06f 0305 	mvn.w	r3, #5
 800cc40:	617b      	str	r3, [r7, #20]
 800cc42:	e01f      	b.n	800cc84 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d103      	bne.n	800cc52 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cc4a:	f06f 0303 	mvn.w	r3, #3
 800cc4e:	617b      	str	r3, [r7, #20]
 800cc50:	e018      	b.n	800cc84 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d009      	beq.n	800cc6c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cc58:	6938      	ldr	r0, [r7, #16]
 800cc5a:	f000 fa93 	bl	800d184 <xQueueGiveMutexRecursive>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d00f      	beq.n	800cc84 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cc64:	f06f 0302 	mvn.w	r3, #2
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	e00b      	b.n	800cc84 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	2200      	movs	r2, #0
 800cc70:	2100      	movs	r1, #0
 800cc72:	6938      	ldr	r0, [r7, #16]
 800cc74:	f000 faf2 	bl	800d25c <xQueueGenericSend>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d002      	beq.n	800cc84 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cc7e:	f06f 0302 	mvn.w	r3, #2
 800cc82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cc84:	697b      	ldr	r3, [r7, #20]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3718      	adds	r7, #24
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
	...

0800cc90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4a07      	ldr	r2, [pc, #28]	@ (800ccbc <vApplicationGetIdleTaskMemory+0x2c>)
 800cca0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	4a06      	ldr	r2, [pc, #24]	@ (800ccc0 <vApplicationGetIdleTaskMemory+0x30>)
 800cca6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2280      	movs	r2, #128	@ 0x80
 800ccac:	601a      	str	r2, [r3, #0]
}
 800ccae:	bf00      	nop
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	200014a0 	.word	0x200014a0
 800ccc0:	20001550 	.word	0x20001550

0800ccc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	4a07      	ldr	r2, [pc, #28]	@ (800ccf0 <vApplicationGetTimerTaskMemory+0x2c>)
 800ccd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	4a06      	ldr	r2, [pc, #24]	@ (800ccf4 <vApplicationGetTimerTaskMemory+0x30>)
 800ccda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cce2:	601a      	str	r2, [r3, #0]
}
 800cce4:	bf00      	nop
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	20001750 	.word	0x20001750
 800ccf4:	20001800 	.word	0x20001800

0800ccf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f103 0208 	add.w	r2, r3, #8
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f103 0208 	add.w	r2, r3, #8
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f103 0208 	add.w	r2, r3, #8
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd46:	bf00      	nop
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd52:	b480      	push	{r7}
 800cd54:	b085      	sub	sp, #20
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	689a      	ldr	r2, [r3, #8]
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	683a      	ldr	r2, [r7, #0]
 800cd76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	601a      	str	r2, [r3, #0]
}
 800cd8e:	bf00      	nop
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b085      	sub	sp, #20
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb0:	d103      	bne.n	800cdba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	e00c      	b.n	800cdd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	3308      	adds	r3, #8
 800cdbe:	60fb      	str	r3, [r7, #12]
 800cdc0:	e002      	b.n	800cdc8 <vListInsert+0x2e>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	60fb      	str	r3, [r7, #12]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d2f6      	bcs.n	800cdc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	685a      	ldr	r2, [r3, #4]
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	601a      	str	r2, [r3, #0]
}
 800ce00:	bf00      	nop
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	6892      	ldr	r2, [r2, #8]
 800ce22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	6852      	ldr	r2, [r2, #4]
 800ce2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d103      	bne.n	800ce40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	689a      	ldr	r2, [r3, #8]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	1e5a      	subs	r2, r3, #1
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d10b      	bne.n	800ce8c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce86:	bf00      	nop
 800ce88:	bf00      	nop
 800ce8a:	e7fd      	b.n	800ce88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce8c:	f002 fc2c 	bl	800f6e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce98:	68f9      	ldr	r1, [r7, #12]
 800ce9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ce9c:	fb01 f303 	mul.w	r3, r1, r3
 800cea0:	441a      	add	r2, r3
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cebc:	3b01      	subs	r3, #1
 800cebe:	68f9      	ldr	r1, [r7, #12]
 800cec0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cec2:	fb01 f303 	mul.w	r3, r1, r3
 800cec6:	441a      	add	r2, r3
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	22ff      	movs	r2, #255	@ 0xff
 800ced0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	22ff      	movs	r2, #255	@ 0xff
 800ced8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d114      	bne.n	800cf0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d01a      	beq.n	800cf20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3310      	adds	r3, #16
 800ceee:	4618      	mov	r0, r3
 800cef0:	f001 fbb8 	bl	800e664 <xTaskRemoveFromEventList>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d012      	beq.n	800cf20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cefa:	4b0d      	ldr	r3, [pc, #52]	@ (800cf30 <xQueueGenericReset+0xd0>)
 800cefc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	e009      	b.n	800cf20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	3310      	adds	r3, #16
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff fef1 	bl	800ccf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	3324      	adds	r3, #36	@ 0x24
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7ff feec 	bl	800ccf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf20:	f002 fc14 	bl	800f74c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf24:	2301      	movs	r3, #1
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	e000ed04 	.word	0xe000ed04

0800cf34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b08e      	sub	sp, #56	@ 0x38
 800cf38:	af02      	add	r7, sp, #8
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10b      	bne.n	800cf60 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf5a:	bf00      	nop
 800cf5c:	bf00      	nop
 800cf5e:	e7fd      	b.n	800cf5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10b      	bne.n	800cf7e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cf66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cf78:	bf00      	nop
 800cf7a:	bf00      	nop
 800cf7c:	e7fd      	b.n	800cf7a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <xQueueGenericCreateStatic+0x56>
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <xQueueGenericCreateStatic+0x5a>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e000      	b.n	800cf90 <xQueueGenericCreateStatic+0x5c>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10b      	bne.n	800cfac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	623b      	str	r3, [r7, #32]
}
 800cfa6:	bf00      	nop
 800cfa8:	bf00      	nop
 800cfaa:	e7fd      	b.n	800cfa8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d102      	bne.n	800cfb8 <xQueueGenericCreateStatic+0x84>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d101      	bne.n	800cfbc <xQueueGenericCreateStatic+0x88>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e000      	b.n	800cfbe <xQueueGenericCreateStatic+0x8a>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10b      	bne.n	800cfda <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	61fb      	str	r3, [r7, #28]
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop
 800cfd8:	e7fd      	b.n	800cfd6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cfda:	2350      	movs	r3, #80	@ 0x50
 800cfdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2b50      	cmp	r3, #80	@ 0x50
 800cfe2:	d00b      	beq.n	800cffc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cfe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	61bb      	str	r3, [r7, #24]
}
 800cff6:	bf00      	nop
 800cff8:	bf00      	nop
 800cffa:	e7fd      	b.n	800cff8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cffc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00d      	beq.n	800d024 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d010:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	4613      	mov	r3, r2
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	68b9      	ldr	r1, [r7, #8]
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f000 f840 	bl	800d0a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d026:	4618      	mov	r0, r3
 800d028:	3730      	adds	r7, #48	@ 0x30
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b08a      	sub	sp, #40	@ 0x28
 800d032:	af02      	add	r7, sp, #8
 800d034:	60f8      	str	r0, [r7, #12]
 800d036:	60b9      	str	r1, [r7, #8]
 800d038:	4613      	mov	r3, r2
 800d03a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10b      	bne.n	800d05a <xQueueGenericCreate+0x2c>
	__asm volatile
 800d042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	613b      	str	r3, [r7, #16]
}
 800d054:	bf00      	nop
 800d056:	bf00      	nop
 800d058:	e7fd      	b.n	800d056 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	fb02 f303 	mul.w	r3, r2, r3
 800d062:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	3350      	adds	r3, #80	@ 0x50
 800d068:	4618      	mov	r0, r3
 800d06a:	f002 fc5f 	bl	800f92c <pvPortMalloc>
 800d06e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d011      	beq.n	800d09a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	3350      	adds	r3, #80	@ 0x50
 800d07e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d088:	79fa      	ldrb	r2, [r7, #7]
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	4613      	mov	r3, r2
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	68b9      	ldr	r1, [r7, #8]
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 f805 	bl	800d0a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d09a:	69bb      	ldr	r3, [r7, #24]
	}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3720      	adds	r7, #32
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
 800d0b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d103      	bne.n	800d0c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	69ba      	ldr	r2, [r7, #24]
 800d0bc:	601a      	str	r2, [r3, #0]
 800d0be:	e002      	b.n	800d0c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0d2:	2101      	movs	r1, #1
 800d0d4:	69b8      	ldr	r0, [r7, #24]
 800d0d6:	f7ff fec3 	bl	800ce60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	78fa      	ldrb	r2, [r7, #3]
 800d0de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0e2:	bf00      	nop
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b082      	sub	sp, #8
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00e      	beq.n	800d116 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d10a:	2300      	movs	r3, #0
 800d10c:	2200      	movs	r2, #0
 800d10e:	2100      	movs	r1, #0
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f8a3 	bl	800d25c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d116:	bf00      	nop
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b086      	sub	sp, #24
 800d122:	af00      	add	r7, sp, #0
 800d124:	4603      	mov	r3, r0
 800d126:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d128:	2301      	movs	r3, #1
 800d12a:	617b      	str	r3, [r7, #20]
 800d12c:	2300      	movs	r3, #0
 800d12e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	461a      	mov	r2, r3
 800d134:	6939      	ldr	r1, [r7, #16]
 800d136:	6978      	ldr	r0, [r7, #20]
 800d138:	f7ff ff79 	bl	800d02e <xQueueGenericCreate>
 800d13c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f7ff ffd3 	bl	800d0ea <prvInitialiseMutex>

		return xNewQueue;
 800d144:	68fb      	ldr	r3, [r7, #12]
	}
 800d146:	4618      	mov	r0, r3
 800d148:	3718      	adds	r7, #24
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b088      	sub	sp, #32
 800d152:	af02      	add	r7, sp, #8
 800d154:	4603      	mov	r3, r0
 800d156:	6039      	str	r1, [r7, #0]
 800d158:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d15a:	2301      	movs	r3, #1
 800d15c:	617b      	str	r3, [r7, #20]
 800d15e:	2300      	movs	r3, #0
 800d160:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d162:	79fb      	ldrb	r3, [r7, #7]
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2200      	movs	r2, #0
 800d16a:	6939      	ldr	r1, [r7, #16]
 800d16c:	6978      	ldr	r0, [r7, #20]
 800d16e:	f7ff fee1 	bl	800cf34 <xQueueGenericCreateStatic>
 800d172:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f7ff ffb8 	bl	800d0ea <prvInitialiseMutex>

		return xNewQueue;
 800d17a:	68fb      	ldr	r3, [r7, #12]
	}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3718      	adds	r7, #24
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d184:	b590      	push	{r4, r7, lr}
 800d186:	b087      	sub	sp, #28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d10b      	bne.n	800d1ae <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	60fb      	str	r3, [r7, #12]
}
 800d1a8:	bf00      	nop
 800d1aa:	bf00      	nop
 800d1ac:	e7fd      	b.n	800d1aa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	689c      	ldr	r4, [r3, #8]
 800d1b2:	f001 fc1d 	bl	800e9f0 <xTaskGetCurrentTaskHandle>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	429c      	cmp	r4, r3
 800d1ba:	d111      	bne.n	800d1e0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	1e5a      	subs	r2, r3, #1
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d105      	bne.n	800d1da <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	6938      	ldr	r0, [r7, #16]
 800d1d6:	f000 f841 	bl	800d25c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	e001      	b.n	800d1e4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d1e4:	697b      	ldr	r3, [r7, #20]
	}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	371c      	adds	r7, #28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd90      	pop	{r4, r7, pc}

0800d1ee <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d1ee:	b590      	push	{r4, r7, lr}
 800d1f0:	b087      	sub	sp, #28
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10b      	bne.n	800d21a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	60fb      	str	r3, [r7, #12]
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop
 800d218:	e7fd      	b.n	800d216 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	689c      	ldr	r4, [r3, #8]
 800d21e:	f001 fbe7 	bl	800e9f0 <xTaskGetCurrentTaskHandle>
 800d222:	4603      	mov	r3, r0
 800d224:	429c      	cmp	r4, r3
 800d226:	d107      	bne.n	800d238 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	1c5a      	adds	r2, r3, #1
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d232:	2301      	movs	r3, #1
 800d234:	617b      	str	r3, [r7, #20]
 800d236:	e00c      	b.n	800d252 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	6938      	ldr	r0, [r7, #16]
 800d23c:	f000 fa90 	bl	800d760 <xQueueSemaphoreTake>
 800d240:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d004      	beq.n	800d252 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d252:	697b      	ldr	r3, [r7, #20]
	}
 800d254:	4618      	mov	r0, r3
 800d256:	371c      	adds	r7, #28
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd90      	pop	{r4, r7, pc}

0800d25c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b08e      	sub	sp, #56	@ 0x38
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
 800d268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d26a:	2300      	movs	r3, #0
 800d26c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10b      	bne.n	800d290 <xQueueGenericSend+0x34>
	__asm volatile
 800d278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d28a:	bf00      	nop
 800d28c:	bf00      	nop
 800d28e:	e7fd      	b.n	800d28c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d103      	bne.n	800d29e <xQueueGenericSend+0x42>
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <xQueueGenericSend+0x46>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e000      	b.n	800d2a4 <xQueueGenericSend+0x48>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10b      	bne.n	800d2c0 <xQueueGenericSend+0x64>
	__asm volatile
 800d2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d2ba:	bf00      	nop
 800d2bc:	bf00      	nop
 800d2be:	e7fd      	b.n	800d2bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d103      	bne.n	800d2ce <xQueueGenericSend+0x72>
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d101      	bne.n	800d2d2 <xQueueGenericSend+0x76>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <xQueueGenericSend+0x78>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10b      	bne.n	800d2f0 <xQueueGenericSend+0x94>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	623b      	str	r3, [r7, #32]
}
 800d2ea:	bf00      	nop
 800d2ec:	bf00      	nop
 800d2ee:	e7fd      	b.n	800d2ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2f0:	f001 fb8e 	bl	800ea10 <xTaskGetSchedulerState>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d102      	bne.n	800d300 <xQueueGenericSend+0xa4>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <xQueueGenericSend+0xa8>
 800d300:	2301      	movs	r3, #1
 800d302:	e000      	b.n	800d306 <xQueueGenericSend+0xaa>
 800d304:	2300      	movs	r3, #0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10b      	bne.n	800d322 <xQueueGenericSend+0xc6>
	__asm volatile
 800d30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	61fb      	str	r3, [r7, #28]
}
 800d31c:	bf00      	nop
 800d31e:	bf00      	nop
 800d320:	e7fd      	b.n	800d31e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d322:	f002 f9e1 	bl	800f6e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d32e:	429a      	cmp	r2, r3
 800d330:	d302      	bcc.n	800d338 <xQueueGenericSend+0xdc>
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2b02      	cmp	r3, #2
 800d336:	d129      	bne.n	800d38c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	68b9      	ldr	r1, [r7, #8]
 800d33c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d33e:	f000 fb37 	bl	800d9b0 <prvCopyDataToQueue>
 800d342:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d010      	beq.n	800d36e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34e:	3324      	adds	r3, #36	@ 0x24
 800d350:	4618      	mov	r0, r3
 800d352:	f001 f987 	bl	800e664 <xTaskRemoveFromEventList>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d013      	beq.n	800d384 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d35c:	4b3f      	ldr	r3, [pc, #252]	@ (800d45c <xQueueGenericSend+0x200>)
 800d35e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	e00a      	b.n	800d384 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d370:	2b00      	cmp	r3, #0
 800d372:	d007      	beq.n	800d384 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d374:	4b39      	ldr	r3, [pc, #228]	@ (800d45c <xQueueGenericSend+0x200>)
 800d376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d37a:	601a      	str	r2, [r3, #0]
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d384:	f002 f9e2 	bl	800f74c <vPortExitCritical>
				return pdPASS;
 800d388:	2301      	movs	r3, #1
 800d38a:	e063      	b.n	800d454 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d103      	bne.n	800d39a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d392:	f002 f9db 	bl	800f74c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d396:	2300      	movs	r3, #0
 800d398:	e05c      	b.n	800d454 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d106      	bne.n	800d3ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3a0:	f107 0314 	add.w	r3, r7, #20
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f001 f9c1 	bl	800e72c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3ae:	f002 f9cd 	bl	800f74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3b2:	f000 fed7 	bl	800e164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3b6:	f002 f997 	bl	800f6e8 <vPortEnterCritical>
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d3c0:	b25b      	sxtb	r3, r3
 800d3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c6:	d103      	bne.n	800d3d0 <xQueueGenericSend+0x174>
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3d6:	b25b      	sxtb	r3, r3
 800d3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3dc:	d103      	bne.n	800d3e6 <xQueueGenericSend+0x18a>
 800d3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3e6:	f002 f9b1 	bl	800f74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3ea:	1d3a      	adds	r2, r7, #4
 800d3ec:	f107 0314 	add.w	r3, r7, #20
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f001 f9b0 	bl	800e758 <xTaskCheckForTimeOut>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d124      	bne.n	800d448 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d3fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d400:	f000 fbce 	bl	800dba0 <prvIsQueueFull>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d018      	beq.n	800d43c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40c:	3310      	adds	r3, #16
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	4611      	mov	r1, r2
 800d412:	4618      	mov	r0, r3
 800d414:	f001 f8d4 	bl	800e5c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d41a:	f000 fb59 	bl	800dad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d41e:	f000 feaf 	bl	800e180 <xTaskResumeAll>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	f47f af7c 	bne.w	800d322 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d42a:	4b0c      	ldr	r3, [pc, #48]	@ (800d45c <xQueueGenericSend+0x200>)
 800d42c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	e772      	b.n	800d322 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d43c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d43e:	f000 fb47 	bl	800dad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d442:	f000 fe9d 	bl	800e180 <xTaskResumeAll>
 800d446:	e76c      	b.n	800d322 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d44a:	f000 fb41 	bl	800dad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d44e:	f000 fe97 	bl	800e180 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d454:	4618      	mov	r0, r3
 800d456:	3738      	adds	r7, #56	@ 0x38
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	e000ed04 	.word	0xe000ed04

0800d460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b090      	sub	sp, #64	@ 0x40
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
 800d46c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10b      	bne.n	800d490 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d48a:	bf00      	nop
 800d48c:	bf00      	nop
 800d48e:	e7fd      	b.n	800d48c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d103      	bne.n	800d49e <xQueueGenericSendFromISR+0x3e>
 800d496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d101      	bne.n	800d4a2 <xQueueGenericSendFromISR+0x42>
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e000      	b.n	800d4a4 <xQueueGenericSendFromISR+0x44>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10b      	bne.n	800d4c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ac:	f383 8811 	msr	BASEPRI, r3
 800d4b0:	f3bf 8f6f 	isb	sy
 800d4b4:	f3bf 8f4f 	dsb	sy
 800d4b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4ba:	bf00      	nop
 800d4bc:	bf00      	nop
 800d4be:	e7fd      	b.n	800d4bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d103      	bne.n	800d4ce <xQueueGenericSendFromISR+0x6e>
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d101      	bne.n	800d4d2 <xQueueGenericSendFromISR+0x72>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e000      	b.n	800d4d4 <xQueueGenericSendFromISR+0x74>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10b      	bne.n	800d4f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4dc:	f383 8811 	msr	BASEPRI, r3
 800d4e0:	f3bf 8f6f 	isb	sy
 800d4e4:	f3bf 8f4f 	dsb	sy
 800d4e8:	623b      	str	r3, [r7, #32]
}
 800d4ea:	bf00      	nop
 800d4ec:	bf00      	nop
 800d4ee:	e7fd      	b.n	800d4ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4f0:	f002 f9da 	bl	800f8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d4f4:	f3ef 8211 	mrs	r2, BASEPRI
 800d4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	61fa      	str	r2, [r7, #28]
 800d50a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d50c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d50e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d518:	429a      	cmp	r2, r3
 800d51a:	d302      	bcc.n	800d522 <xQueueGenericSendFromISR+0xc2>
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d12f      	bne.n	800d582 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d528:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d530:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	68b9      	ldr	r1, [r7, #8]
 800d536:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d538:	f000 fa3a 	bl	800d9b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d53c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d544:	d112      	bne.n	800d56c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d016      	beq.n	800d57c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d550:	3324      	adds	r3, #36	@ 0x24
 800d552:	4618      	mov	r0, r3
 800d554:	f001 f886 	bl	800e664 <xTaskRemoveFromEventList>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00e      	beq.n	800d57c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00b      	beq.n	800d57c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	e007      	b.n	800d57c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d56c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d570:	3301      	adds	r3, #1
 800d572:	b2db      	uxtb	r3, r3
 800d574:	b25a      	sxtb	r2, r3
 800d576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d57c:	2301      	movs	r3, #1
 800d57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d580:	e001      	b.n	800d586 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d582:	2300      	movs	r3, #0
 800d584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d588:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d590:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d594:	4618      	mov	r0, r3
 800d596:	3740      	adds	r7, #64	@ 0x40
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b08c      	sub	sp, #48	@ 0x30
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10b      	bne.n	800d5ce <xQueueReceive+0x32>
	__asm volatile
 800d5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ba:	f383 8811 	msr	BASEPRI, r3
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f3bf 8f4f 	dsb	sy
 800d5c6:	623b      	str	r3, [r7, #32]
}
 800d5c8:	bf00      	nop
 800d5ca:	bf00      	nop
 800d5cc:	e7fd      	b.n	800d5ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d103      	bne.n	800d5dc <xQueueReceive+0x40>
 800d5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d101      	bne.n	800d5e0 <xQueueReceive+0x44>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e000      	b.n	800d5e2 <xQueueReceive+0x46>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d10b      	bne.n	800d5fe <xQueueReceive+0x62>
	__asm volatile
 800d5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	61fb      	str	r3, [r7, #28]
}
 800d5f8:	bf00      	nop
 800d5fa:	bf00      	nop
 800d5fc:	e7fd      	b.n	800d5fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5fe:	f001 fa07 	bl	800ea10 <xTaskGetSchedulerState>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d102      	bne.n	800d60e <xQueueReceive+0x72>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <xQueueReceive+0x76>
 800d60e:	2301      	movs	r3, #1
 800d610:	e000      	b.n	800d614 <xQueueReceive+0x78>
 800d612:	2300      	movs	r3, #0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d10b      	bne.n	800d630 <xQueueReceive+0x94>
	__asm volatile
 800d618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61c:	f383 8811 	msr	BASEPRI, r3
 800d620:	f3bf 8f6f 	isb	sy
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	61bb      	str	r3, [r7, #24]
}
 800d62a:	bf00      	nop
 800d62c:	bf00      	nop
 800d62e:	e7fd      	b.n	800d62c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d630:	f002 f85a 	bl	800f6e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d638:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d01f      	beq.n	800d680 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d640:	68b9      	ldr	r1, [r7, #8]
 800d642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d644:	f000 fa1e 	bl	800da84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64a:	1e5a      	subs	r2, r3, #1
 800d64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d652:	691b      	ldr	r3, [r3, #16]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00f      	beq.n	800d678 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d65a:	3310      	adds	r3, #16
 800d65c:	4618      	mov	r0, r3
 800d65e:	f001 f801 	bl	800e664 <xTaskRemoveFromEventList>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d007      	beq.n	800d678 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d668:	4b3c      	ldr	r3, [pc, #240]	@ (800d75c <xQueueReceive+0x1c0>)
 800d66a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d66e:	601a      	str	r2, [r3, #0]
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d678:	f002 f868 	bl	800f74c <vPortExitCritical>
				return pdPASS;
 800d67c:	2301      	movs	r3, #1
 800d67e:	e069      	b.n	800d754 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d103      	bne.n	800d68e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d686:	f002 f861 	bl	800f74c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d68a:	2300      	movs	r3, #0
 800d68c:	e062      	b.n	800d754 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d690:	2b00      	cmp	r3, #0
 800d692:	d106      	bne.n	800d6a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d694:	f107 0310 	add.w	r3, r7, #16
 800d698:	4618      	mov	r0, r3
 800d69a:	f001 f847 	bl	800e72c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6a2:	f002 f853 	bl	800f74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6a6:	f000 fd5d 	bl	800e164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6aa:	f002 f81d 	bl	800f6e8 <vPortEnterCritical>
 800d6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6b4:	b25b      	sxtb	r3, r3
 800d6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ba:	d103      	bne.n	800d6c4 <xQueueReceive+0x128>
 800d6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6ca:	b25b      	sxtb	r3, r3
 800d6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d0:	d103      	bne.n	800d6da <xQueueReceive+0x13e>
 800d6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6da:	f002 f837 	bl	800f74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6de:	1d3a      	adds	r2, r7, #4
 800d6e0:	f107 0310 	add.w	r3, r7, #16
 800d6e4:	4611      	mov	r1, r2
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f001 f836 	bl	800e758 <xTaskCheckForTimeOut>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d123      	bne.n	800d73a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6f4:	f000 fa3e 	bl	800db74 <prvIsQueueEmpty>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d017      	beq.n	800d72e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d700:	3324      	adds	r3, #36	@ 0x24
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	4611      	mov	r1, r2
 800d706:	4618      	mov	r0, r3
 800d708:	f000 ff5a 	bl	800e5c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d70c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d70e:	f000 f9df 	bl	800dad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d712:	f000 fd35 	bl	800e180 <xTaskResumeAll>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d189      	bne.n	800d630 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d71c:	4b0f      	ldr	r3, [pc, #60]	@ (800d75c <xQueueReceive+0x1c0>)
 800d71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	e780      	b.n	800d630 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d72e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d730:	f000 f9ce 	bl	800dad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d734:	f000 fd24 	bl	800e180 <xTaskResumeAll>
 800d738:	e77a      	b.n	800d630 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d73a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d73c:	f000 f9c8 	bl	800dad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d740:	f000 fd1e 	bl	800e180 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d746:	f000 fa15 	bl	800db74 <prvIsQueueEmpty>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f43f af6f 	beq.w	800d630 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d752:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d754:	4618      	mov	r0, r3
 800d756:	3730      	adds	r7, #48	@ 0x30
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	e000ed04 	.word	0xe000ed04

0800d760 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b08e      	sub	sp, #56	@ 0x38
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d76a:	2300      	movs	r3, #0
 800d76c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d772:	2300      	movs	r3, #0
 800d774:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d10b      	bne.n	800d794 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d780:	f383 8811 	msr	BASEPRI, r3
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	623b      	str	r3, [r7, #32]
}
 800d78e:	bf00      	nop
 800d790:	bf00      	nop
 800d792:	e7fd      	b.n	800d790 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00b      	beq.n	800d7b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a0:	f383 8811 	msr	BASEPRI, r3
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	f3bf 8f4f 	dsb	sy
 800d7ac:	61fb      	str	r3, [r7, #28]
}
 800d7ae:	bf00      	nop
 800d7b0:	bf00      	nop
 800d7b2:	e7fd      	b.n	800d7b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7b4:	f001 f92c 	bl	800ea10 <xTaskGetSchedulerState>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d102      	bne.n	800d7c4 <xQueueSemaphoreTake+0x64>
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d101      	bne.n	800d7c8 <xQueueSemaphoreTake+0x68>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e000      	b.n	800d7ca <xQueueSemaphoreTake+0x6a>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10b      	bne.n	800d7e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	61bb      	str	r3, [r7, #24]
}
 800d7e0:	bf00      	nop
 800d7e2:	bf00      	nop
 800d7e4:	e7fd      	b.n	800d7e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7e6:	f001 ff7f 	bl	800f6e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d024      	beq.n	800d840 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f8:	1e5a      	subs	r2, r3, #1
 800d7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d104      	bne.n	800d810 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d806:	f001 fa7d 	bl	800ed04 <pvTaskIncrementMutexHeldCount>
 800d80a:	4602      	mov	r2, r0
 800d80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d812:	691b      	ldr	r3, [r3, #16]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00f      	beq.n	800d838 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81a:	3310      	adds	r3, #16
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 ff21 	bl	800e664 <xTaskRemoveFromEventList>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d007      	beq.n	800d838 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d828:	4b54      	ldr	r3, [pc, #336]	@ (800d97c <xQueueSemaphoreTake+0x21c>)
 800d82a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d82e:	601a      	str	r2, [r3, #0]
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d838:	f001 ff88 	bl	800f74c <vPortExitCritical>
				return pdPASS;
 800d83c:	2301      	movs	r3, #1
 800d83e:	e098      	b.n	800d972 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d112      	bne.n	800d86c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00b      	beq.n	800d864 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	617b      	str	r3, [r7, #20]
}
 800d85e:	bf00      	nop
 800d860:	bf00      	nop
 800d862:	e7fd      	b.n	800d860 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d864:	f001 ff72 	bl	800f74c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d868:	2300      	movs	r3, #0
 800d86a:	e082      	b.n	800d972 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d872:	f107 030c 	add.w	r3, r7, #12
 800d876:	4618      	mov	r0, r3
 800d878:	f000 ff58 	bl	800e72c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d87c:	2301      	movs	r3, #1
 800d87e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d880:	f001 ff64 	bl	800f74c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d884:	f000 fc6e 	bl	800e164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d888:	f001 ff2e 	bl	800f6e8 <vPortEnterCritical>
 800d88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d892:	b25b      	sxtb	r3, r3
 800d894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d898:	d103      	bne.n	800d8a2 <xQueueSemaphoreTake+0x142>
 800d89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8a8:	b25b      	sxtb	r3, r3
 800d8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ae:	d103      	bne.n	800d8b8 <xQueueSemaphoreTake+0x158>
 800d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8b8:	f001 ff48 	bl	800f74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8bc:	463a      	mov	r2, r7
 800d8be:	f107 030c 	add.w	r3, r7, #12
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 ff47 	bl	800e758 <xTaskCheckForTimeOut>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d132      	bne.n	800d936 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8d2:	f000 f94f 	bl	800db74 <prvIsQueueEmpty>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d026      	beq.n	800d92a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d109      	bne.n	800d8f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d8e4:	f001 ff00 	bl	800f6e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f001 f8ad 	bl	800ea4c <xTaskPriorityInherit>
 800d8f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d8f4:	f001 ff2a 	bl	800f74c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8fa:	3324      	adds	r3, #36	@ 0x24
 800d8fc:	683a      	ldr	r2, [r7, #0]
 800d8fe:	4611      	mov	r1, r2
 800d900:	4618      	mov	r0, r3
 800d902:	f000 fe5d 	bl	800e5c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d906:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d908:	f000 f8e2 	bl	800dad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d90c:	f000 fc38 	bl	800e180 <xTaskResumeAll>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	f47f af67 	bne.w	800d7e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d918:	4b18      	ldr	r3, [pc, #96]	@ (800d97c <xQueueSemaphoreTake+0x21c>)
 800d91a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d91e:	601a      	str	r2, [r3, #0]
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	e75d      	b.n	800d7e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d92a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d92c:	f000 f8d0 	bl	800dad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d930:	f000 fc26 	bl	800e180 <xTaskResumeAll>
 800d934:	e757      	b.n	800d7e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d936:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d938:	f000 f8ca 	bl	800dad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d93c:	f000 fc20 	bl	800e180 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d942:	f000 f917 	bl	800db74 <prvIsQueueEmpty>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f43f af4c 	beq.w	800d7e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00d      	beq.n	800d970 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d954:	f001 fec8 	bl	800f6e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d958:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d95a:	f000 f811 	bl	800d980 <prvGetDisinheritPriorityAfterTimeout>
 800d95e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d966:	4618      	mov	r0, r3
 800d968:	f001 f948 	bl	800ebfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d96c:	f001 feee 	bl	800f74c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d970:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d972:	4618      	mov	r0, r3
 800d974:	3738      	adds	r7, #56	@ 0x38
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	e000ed04 	.word	0xe000ed04

0800d980 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d006      	beq.n	800d99e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d99a:	60fb      	str	r3, [r7, #12]
 800d99c:	e001      	b.n	800d9a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
	}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10d      	bne.n	800d9ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d14d      	bne.n	800da72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f001 f89e 	bl	800eb1c <xTaskPriorityDisinherit>
 800d9e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	609a      	str	r2, [r3, #8]
 800d9e8:	e043      	b.n	800da72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d119      	bne.n	800da24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6858      	ldr	r0, [r3, #4]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	68b9      	ldr	r1, [r7, #8]
 800d9fc:	f003 f917 	bl	8010c2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	685a      	ldr	r2, [r3, #4]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da08:	441a      	add	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	685a      	ldr	r2, [r3, #4]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	429a      	cmp	r2, r3
 800da18:	d32b      	bcc.n	800da72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	605a      	str	r2, [r3, #4]
 800da22:	e026      	b.n	800da72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	68d8      	ldr	r0, [r3, #12]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da2c:	461a      	mov	r2, r3
 800da2e:	68b9      	ldr	r1, [r7, #8]
 800da30:	f003 f8fd 	bl	8010c2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	68da      	ldr	r2, [r3, #12]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da3c:	425b      	negs	r3, r3
 800da3e:	441a      	add	r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	68da      	ldr	r2, [r3, #12]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d207      	bcs.n	800da60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	689a      	ldr	r2, [r3, #8]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da58:	425b      	negs	r3, r3
 800da5a:	441a      	add	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b02      	cmp	r3, #2
 800da64:	d105      	bne.n	800da72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	3b01      	subs	r3, #1
 800da70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	1c5a      	adds	r2, r3, #1
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800da7a:	697b      	ldr	r3, [r7, #20]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da92:	2b00      	cmp	r3, #0
 800da94:	d018      	beq.n	800dac8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da9e:	441a      	add	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68da      	ldr	r2, [r3, #12]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	429a      	cmp	r2, r3
 800daae:	d303      	bcc.n	800dab8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	68d9      	ldr	r1, [r3, #12]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dac0:	461a      	mov	r2, r3
 800dac2:	6838      	ldr	r0, [r7, #0]
 800dac4:	f003 f8b3 	bl	8010c2e <memcpy>
	}
}
 800dac8:	bf00      	nop
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dad8:	f001 fe06 	bl	800f6e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dae4:	e011      	b.n	800db0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daea:	2b00      	cmp	r3, #0
 800daec:	d012      	beq.n	800db14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	3324      	adds	r3, #36	@ 0x24
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 fdb6 	bl	800e664 <xTaskRemoveFromEventList>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dafe:	f000 fe8f 	bl	800e820 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db02:	7bfb      	ldrb	r3, [r7, #15]
 800db04:	3b01      	subs	r3, #1
 800db06:	b2db      	uxtb	r3, r3
 800db08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	dce9      	bgt.n	800dae6 <prvUnlockQueue+0x16>
 800db12:	e000      	b.n	800db16 <prvUnlockQueue+0x46>
					break;
 800db14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	22ff      	movs	r2, #255	@ 0xff
 800db1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800db1e:	f001 fe15 	bl	800f74c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db22:	f001 fde1 	bl	800f6e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db2e:	e011      	b.n	800db54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d012      	beq.n	800db5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3310      	adds	r3, #16
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 fd91 	bl	800e664 <xTaskRemoveFromEventList>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d001      	beq.n	800db4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db48:	f000 fe6a 	bl	800e820 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db4c:	7bbb      	ldrb	r3, [r7, #14]
 800db4e:	3b01      	subs	r3, #1
 800db50:	b2db      	uxtb	r3, r3
 800db52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	dce9      	bgt.n	800db30 <prvUnlockQueue+0x60>
 800db5c:	e000      	b.n	800db60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	22ff      	movs	r2, #255	@ 0xff
 800db64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800db68:	f001 fdf0 	bl	800f74c <vPortExitCritical>
}
 800db6c:	bf00      	nop
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db7c:	f001 fdb4 	bl	800f6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db84:	2b00      	cmp	r3, #0
 800db86:	d102      	bne.n	800db8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db88:	2301      	movs	r3, #1
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	e001      	b.n	800db92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db8e:	2300      	movs	r3, #0
 800db90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db92:	f001 fddb 	bl	800f74c <vPortExitCritical>

	return xReturn;
 800db96:	68fb      	ldr	r3, [r7, #12]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dba8:	f001 fd9e 	bl	800f6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d102      	bne.n	800dbbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	e001      	b.n	800dbc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbc2:	f001 fdc3 	bl	800f74c <vPortExitCritical>

	return xReturn;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60fb      	str	r3, [r7, #12]
 800dbde:	e014      	b.n	800dc0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dbe0:	4a0f      	ldr	r2, [pc, #60]	@ (800dc20 <vQueueAddToRegistry+0x50>)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10b      	bne.n	800dc04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dbec:	490c      	ldr	r1, [pc, #48]	@ (800dc20 <vQueueAddToRegistry+0x50>)
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dbf6:	4a0a      	ldr	r2, [pc, #40]	@ (800dc20 <vQueueAddToRegistry+0x50>)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	4413      	add	r3, r2
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc02:	e006      	b.n	800dc12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	3301      	adds	r3, #1
 800dc08:	60fb      	str	r3, [r7, #12]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2b07      	cmp	r3, #7
 800dc0e:	d9e7      	bls.n	800dbe0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc10:	bf00      	nop
 800dc12:	bf00      	nop
 800dc14:	3714      	adds	r7, #20
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	20001c00 	.word	0x20001c00

0800dc24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc34:	f001 fd58 	bl	800f6e8 <vPortEnterCritical>
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc3e:	b25b      	sxtb	r3, r3
 800dc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc44:	d103      	bne.n	800dc4e <vQueueWaitForMessageRestricted+0x2a>
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc54:	b25b      	sxtb	r3, r3
 800dc56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc5a:	d103      	bne.n	800dc64 <vQueueWaitForMessageRestricted+0x40>
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc64:	f001 fd72 	bl	800f74c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d106      	bne.n	800dc7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	3324      	adds	r3, #36	@ 0x24
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	68b9      	ldr	r1, [r7, #8]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 fcc7 	bl	800e60c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dc7e:	6978      	ldr	r0, [r7, #20]
 800dc80:	f7ff ff26 	bl	800dad0 <prvUnlockQueue>
	}
 800dc84:	bf00      	nop
 800dc86:	3718      	adds	r7, #24
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08e      	sub	sp, #56	@ 0x38
 800dc90:	af04      	add	r7, sp, #16
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10b      	bne.n	800dcb8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	623b      	str	r3, [r7, #32]
}
 800dcb2:	bf00      	nop
 800dcb4:	bf00      	nop
 800dcb6:	e7fd      	b.n	800dcb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10b      	bne.n	800dcd6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800dcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc2:	f383 8811 	msr	BASEPRI, r3
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	f3bf 8f4f 	dsb	sy
 800dcce:	61fb      	str	r3, [r7, #28]
}
 800dcd0:	bf00      	nop
 800dcd2:	bf00      	nop
 800dcd4:	e7fd      	b.n	800dcd2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dcd6:	23b0      	movs	r3, #176	@ 0xb0
 800dcd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	2bb0      	cmp	r3, #176	@ 0xb0
 800dcde:	d00b      	beq.n	800dcf8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce4:	f383 8811 	msr	BASEPRI, r3
 800dce8:	f3bf 8f6f 	isb	sy
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	61bb      	str	r3, [r7, #24]
}
 800dcf2:	bf00      	nop
 800dcf4:	bf00      	nop
 800dcf6:	e7fd      	b.n	800dcf4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dcf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d01e      	beq.n	800dd3e <xTaskCreateStatic+0xb2>
 800dd00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d01b      	beq.n	800dd3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd12:	2202      	movs	r2, #2
 800dd14:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd18:	2300      	movs	r3, #0
 800dd1a:	9303      	str	r3, [sp, #12]
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1e:	9302      	str	r3, [sp, #8]
 800dd20:	f107 0314 	add.w	r3, r7, #20
 800dd24:	9301      	str	r3, [sp, #4]
 800dd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd28:	9300      	str	r3, [sp, #0]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	68b9      	ldr	r1, [r7, #8]
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f000 f851 	bl	800ddd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd38:	f000 f8fc 	bl	800df34 <prvAddNewTaskToReadyList>
 800dd3c:	e001      	b.n	800dd42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd42:	697b      	ldr	r3, [r7, #20]
	}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3728      	adds	r7, #40	@ 0x28
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08c      	sub	sp, #48	@ 0x30
 800dd50:	af04      	add	r7, sp, #16
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	603b      	str	r3, [r7, #0]
 800dd58:	4613      	mov	r3, r2
 800dd5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd5c:	88fb      	ldrh	r3, [r7, #6]
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	4618      	mov	r0, r3
 800dd62:	f001 fde3 	bl	800f92c <pvPortMalloc>
 800dd66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00e      	beq.n	800dd8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd6e:	20b0      	movs	r0, #176	@ 0xb0
 800dd70:	f001 fddc 	bl	800f92c <pvPortMalloc>
 800dd74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d003      	beq.n	800dd84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	631a      	str	r2, [r3, #48]	@ 0x30
 800dd82:	e005      	b.n	800dd90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dd84:	6978      	ldr	r0, [r7, #20]
 800dd86:	f001 fe9f 	bl	800fac8 <vPortFree>
 800dd8a:	e001      	b.n	800dd90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d017      	beq.n	800ddc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd9e:	88fa      	ldrh	r2, [r7, #6]
 800dda0:	2300      	movs	r3, #0
 800dda2:	9303      	str	r3, [sp, #12]
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	9302      	str	r3, [sp, #8]
 800dda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	68b9      	ldr	r1, [r7, #8]
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f000 f80f 	bl	800ddd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddba:	69f8      	ldr	r0, [r7, #28]
 800ddbc:	f000 f8ba 	bl	800df34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	61bb      	str	r3, [r7, #24]
 800ddc4:	e002      	b.n	800ddcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ddc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ddcc:	69bb      	ldr	r3, [r7, #24]
	}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3720      	adds	r7, #32
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
	...

0800ddd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b088      	sub	sp, #32
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
 800dde4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	461a      	mov	r2, r3
 800ddf0:	21a5      	movs	r1, #165	@ 0xa5
 800ddf2:	f002 fe2b 	bl	8010a4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de00:	3b01      	subs	r3, #1
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	4413      	add	r3, r2
 800de06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	f023 0307 	bic.w	r3, r3, #7
 800de0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	f003 0307 	and.w	r3, r3, #7
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00b      	beq.n	800de32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800de1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de1e:	f383 8811 	msr	BASEPRI, r3
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	f3bf 8f4f 	dsb	sy
 800de2a:	617b      	str	r3, [r7, #20]
}
 800de2c:	bf00      	nop
 800de2e:	bf00      	nop
 800de30:	e7fd      	b.n	800de2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01f      	beq.n	800de78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de38:	2300      	movs	r3, #0
 800de3a:	61fb      	str	r3, [r7, #28]
 800de3c:	e012      	b.n	800de64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	4413      	add	r3, r2
 800de44:	7819      	ldrb	r1, [r3, #0]
 800de46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	4413      	add	r3, r2
 800de4c:	3334      	adds	r3, #52	@ 0x34
 800de4e:	460a      	mov	r2, r1
 800de50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	4413      	add	r3, r2
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d006      	beq.n	800de6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	3301      	adds	r3, #1
 800de62:	61fb      	str	r3, [r7, #28]
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	2b0f      	cmp	r3, #15
 800de68:	d9e9      	bls.n	800de3e <prvInitialiseNewTask+0x66>
 800de6a:	e000      	b.n	800de6e <prvInitialiseNewTask+0x96>
			{
				break;
 800de6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800de76:	e003      	b.n	800de80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de7a:	2200      	movs	r2, #0
 800de7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de82:	2b37      	cmp	r3, #55	@ 0x37
 800de84:	d901      	bls.n	800de8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de86:	2337      	movs	r3, #55	@ 0x37
 800de88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800de96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de98:	2200      	movs	r2, #0
 800de9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de9e:	3304      	adds	r3, #4
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fe ff49 	bl	800cd38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea8:	3318      	adds	r3, #24
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fe ff44 	bl	800cd38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800deb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800debc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dec4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800dec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec8:	2200      	movs	r2, #0
 800deca:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800decc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dece:	2200      	movs	r2, #0
 800ded0:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ded2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded4:	2200      	movs	r2, #0
 800ded6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800deda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee4:	335c      	adds	r3, #92	@ 0x5c
 800dee6:	224c      	movs	r2, #76	@ 0x4c
 800dee8:	2100      	movs	r1, #0
 800deea:	4618      	mov	r0, r3
 800deec:	f002 fdae 	bl	8010a4c <memset>
 800def0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def2:	4a0d      	ldr	r2, [pc, #52]	@ (800df28 <prvInitialiseNewTask+0x150>)
 800def4:	661a      	str	r2, [r3, #96]	@ 0x60
 800def6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def8:	4a0c      	ldr	r2, [pc, #48]	@ (800df2c <prvInitialiseNewTask+0x154>)
 800defa:	665a      	str	r2, [r3, #100]	@ 0x64
 800defc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defe:	4a0c      	ldr	r2, [pc, #48]	@ (800df30 <prvInitialiseNewTask+0x158>)
 800df00:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df02:	683a      	ldr	r2, [r7, #0]
 800df04:	68f9      	ldr	r1, [r7, #12]
 800df06:	69b8      	ldr	r0, [r7, #24]
 800df08:	f001 fabe 	bl	800f488 <pxPortInitialiseStack>
 800df0c:	4602      	mov	r2, r0
 800df0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df14:	2b00      	cmp	r3, #0
 800df16:	d002      	beq.n	800df1e <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df1e:	bf00      	nop
 800df20:	3720      	adds	r7, #32
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	20005e9c 	.word	0x20005e9c
 800df2c:	20005f04 	.word	0x20005f04
 800df30:	20005f6c 	.word	0x20005f6c

0800df34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df3c:	f001 fbd4 	bl	800f6e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df40:	4b2d      	ldr	r3, [pc, #180]	@ (800dff8 <prvAddNewTaskToReadyList+0xc4>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	4a2c      	ldr	r2, [pc, #176]	@ (800dff8 <prvAddNewTaskToReadyList+0xc4>)
 800df48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df4a:	4b2c      	ldr	r3, [pc, #176]	@ (800dffc <prvAddNewTaskToReadyList+0xc8>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d109      	bne.n	800df66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df52:	4a2a      	ldr	r2, [pc, #168]	@ (800dffc <prvAddNewTaskToReadyList+0xc8>)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df58:	4b27      	ldr	r3, [pc, #156]	@ (800dff8 <prvAddNewTaskToReadyList+0xc4>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d110      	bne.n	800df82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df60:	f000 fc82 	bl	800e868 <prvInitialiseTaskLists>
 800df64:	e00d      	b.n	800df82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df66:	4b26      	ldr	r3, [pc, #152]	@ (800e000 <prvAddNewTaskToReadyList+0xcc>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d109      	bne.n	800df82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df6e:	4b23      	ldr	r3, [pc, #140]	@ (800dffc <prvAddNewTaskToReadyList+0xc8>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df78:	429a      	cmp	r2, r3
 800df7a:	d802      	bhi.n	800df82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df7c:	4a1f      	ldr	r2, [pc, #124]	@ (800dffc <prvAddNewTaskToReadyList+0xc8>)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800df82:	4b20      	ldr	r3, [pc, #128]	@ (800e004 <prvAddNewTaskToReadyList+0xd0>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	3301      	adds	r3, #1
 800df88:	4a1e      	ldr	r2, [pc, #120]	@ (800e004 <prvAddNewTaskToReadyList+0xd0>)
 800df8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800df8c:	4b1d      	ldr	r3, [pc, #116]	@ (800e004 <prvAddNewTaskToReadyList+0xd0>)
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df98:	4b1b      	ldr	r3, [pc, #108]	@ (800e008 <prvAddNewTaskToReadyList+0xd4>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d903      	bls.n	800dfa8 <prvAddNewTaskToReadyList+0x74>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfa4:	4a18      	ldr	r2, [pc, #96]	@ (800e008 <prvAddNewTaskToReadyList+0xd4>)
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfac:	4613      	mov	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	4413      	add	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4a15      	ldr	r2, [pc, #84]	@ (800e00c <prvAddNewTaskToReadyList+0xd8>)
 800dfb6:	441a      	add	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	4610      	mov	r0, r2
 800dfc0:	f7fe fec7 	bl	800cd52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dfc4:	f001 fbc2 	bl	800f74c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dfc8:	4b0d      	ldr	r3, [pc, #52]	@ (800e000 <prvAddNewTaskToReadyList+0xcc>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00e      	beq.n	800dfee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dfd0:	4b0a      	ldr	r3, [pc, #40]	@ (800dffc <prvAddNewTaskToReadyList+0xc8>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d207      	bcs.n	800dfee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dfde:	4b0c      	ldr	r3, [pc, #48]	@ (800e010 <prvAddNewTaskToReadyList+0xdc>)
 800dfe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfe4:	601a      	str	r2, [r3, #0]
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfee:	bf00      	nop
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	20002114 	.word	0x20002114
 800dffc:	20001c40 	.word	0x20001c40
 800e000:	20002120 	.word	0x20002120
 800e004:	20002130 	.word	0x20002130
 800e008:	2000211c 	.word	0x2000211c
 800e00c:	20001c44 	.word	0x20001c44
 800e010:	e000ed04 	.word	0xe000ed04

0800e014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e01c:	2300      	movs	r3, #0
 800e01e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d018      	beq.n	800e058 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e026:	4b14      	ldr	r3, [pc, #80]	@ (800e078 <vTaskDelay+0x64>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00b      	beq.n	800e046 <vTaskDelay+0x32>
	__asm volatile
 800e02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	60bb      	str	r3, [r7, #8]
}
 800e040:	bf00      	nop
 800e042:	bf00      	nop
 800e044:	e7fd      	b.n	800e042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e046:	f000 f88d 	bl	800e164 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e04a:	2100      	movs	r1, #0
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 fe6d 	bl	800ed2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e052:	f000 f895 	bl	800e180 <xTaskResumeAll>
 800e056:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d107      	bne.n	800e06e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e05e:	4b07      	ldr	r3, [pc, #28]	@ (800e07c <vTaskDelay+0x68>)
 800e060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e06e:	bf00      	nop
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	2000213c 	.word	0x2000213c
 800e07c:	e000ed04 	.word	0xe000ed04

0800e080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b08a      	sub	sp, #40	@ 0x28
 800e084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e086:	2300      	movs	r3, #0
 800e088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e08a:	2300      	movs	r3, #0
 800e08c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e08e:	463a      	mov	r2, r7
 800e090:	1d39      	adds	r1, r7, #4
 800e092:	f107 0308 	add.w	r3, r7, #8
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe fdfa 	bl	800cc90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	9202      	str	r2, [sp, #8]
 800e0a4:	9301      	str	r3, [sp, #4]
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	460a      	mov	r2, r1
 800e0ae:	4925      	ldr	r1, [pc, #148]	@ (800e144 <vTaskStartScheduler+0xc4>)
 800e0b0:	4825      	ldr	r0, [pc, #148]	@ (800e148 <vTaskStartScheduler+0xc8>)
 800e0b2:	f7ff fdeb 	bl	800dc8c <xTaskCreateStatic>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	4a24      	ldr	r2, [pc, #144]	@ (800e14c <vTaskStartScheduler+0xcc>)
 800e0ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e0bc:	4b23      	ldr	r3, [pc, #140]	@ (800e14c <vTaskStartScheduler+0xcc>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	617b      	str	r3, [r7, #20]
 800e0c8:	e001      	b.n	800e0ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d102      	bne.n	800e0da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e0d4:	f000 fe7e 	bl	800edd4 <xTimerCreateTimerTask>
 800e0d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d11d      	bne.n	800e11c <vTaskStartScheduler+0x9c>
	__asm volatile
 800e0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e4:	f383 8811 	msr	BASEPRI, r3
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	613b      	str	r3, [r7, #16]
}
 800e0f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e0f4:	4b16      	ldr	r3, [pc, #88]	@ (800e150 <vTaskStartScheduler+0xd0>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	335c      	adds	r3, #92	@ 0x5c
 800e0fa:	4a16      	ldr	r2, [pc, #88]	@ (800e154 <vTaskStartScheduler+0xd4>)
 800e0fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e0fe:	4b16      	ldr	r3, [pc, #88]	@ (800e158 <vTaskStartScheduler+0xd8>)
 800e100:	f04f 32ff 	mov.w	r2, #4294967295
 800e104:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e106:	4b15      	ldr	r3, [pc, #84]	@ (800e15c <vTaskStartScheduler+0xdc>)
 800e108:	2201      	movs	r2, #1
 800e10a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e10c:	4b14      	ldr	r3, [pc, #80]	@ (800e160 <vTaskStartScheduler+0xe0>)
 800e10e:	2200      	movs	r2, #0
 800e110:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e112:	f7f2 fee7 	bl	8000ee4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e116:	f001 fa43 	bl	800f5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e11a:	e00f      	b.n	800e13c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e122:	d10b      	bne.n	800e13c <vTaskStartScheduler+0xbc>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	60fb      	str	r3, [r7, #12]
}
 800e136:	bf00      	nop
 800e138:	bf00      	nop
 800e13a:	e7fd      	b.n	800e138 <vTaskStartScheduler+0xb8>
}
 800e13c:	bf00      	nop
 800e13e:	3718      	adds	r7, #24
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	08012f84 	.word	0x08012f84
 800e148:	0800e839 	.word	0x0800e839
 800e14c:	20002138 	.word	0x20002138
 800e150:	20001c40 	.word	0x20001c40
 800e154:	20000088 	.word	0x20000088
 800e158:	20002134 	.word	0x20002134
 800e15c:	20002120 	.word	0x20002120
 800e160:	20002118 	.word	0x20002118

0800e164 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e164:	b480      	push	{r7}
 800e166:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e168:	4b04      	ldr	r3, [pc, #16]	@ (800e17c <vTaskSuspendAll+0x18>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	3301      	adds	r3, #1
 800e16e:	4a03      	ldr	r2, [pc, #12]	@ (800e17c <vTaskSuspendAll+0x18>)
 800e170:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e172:	bf00      	nop
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	2000213c 	.word	0x2000213c

0800e180 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e186:	2300      	movs	r3, #0
 800e188:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e18a:	2300      	movs	r3, #0
 800e18c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e18e:	4b42      	ldr	r3, [pc, #264]	@ (800e298 <xTaskResumeAll+0x118>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d10b      	bne.n	800e1ae <xTaskResumeAll+0x2e>
	__asm volatile
 800e196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	603b      	str	r3, [r7, #0]
}
 800e1a8:	bf00      	nop
 800e1aa:	bf00      	nop
 800e1ac:	e7fd      	b.n	800e1aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e1ae:	f001 fa9b 	bl	800f6e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e1b2:	4b39      	ldr	r3, [pc, #228]	@ (800e298 <xTaskResumeAll+0x118>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	4a37      	ldr	r2, [pc, #220]	@ (800e298 <xTaskResumeAll+0x118>)
 800e1ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1bc:	4b36      	ldr	r3, [pc, #216]	@ (800e298 <xTaskResumeAll+0x118>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d162      	bne.n	800e28a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e1c4:	4b35      	ldr	r3, [pc, #212]	@ (800e29c <xTaskResumeAll+0x11c>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d05e      	beq.n	800e28a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1cc:	e02f      	b.n	800e22e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ce:	4b34      	ldr	r3, [pc, #208]	@ (800e2a0 <xTaskResumeAll+0x120>)
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	3318      	adds	r3, #24
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fe fe16 	bl	800ce0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7fe fe11 	bl	800ce0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ee:	4b2d      	ldr	r3, [pc, #180]	@ (800e2a4 <xTaskResumeAll+0x124>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d903      	bls.n	800e1fe <xTaskResumeAll+0x7e>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1fa:	4a2a      	ldr	r2, [pc, #168]	@ (800e2a4 <xTaskResumeAll+0x124>)
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e202:	4613      	mov	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4413      	add	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4a27      	ldr	r2, [pc, #156]	@ (800e2a8 <xTaskResumeAll+0x128>)
 800e20c:	441a      	add	r2, r3
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	3304      	adds	r3, #4
 800e212:	4619      	mov	r1, r3
 800e214:	4610      	mov	r0, r2
 800e216:	f7fe fd9c 	bl	800cd52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e21e:	4b23      	ldr	r3, [pc, #140]	@ (800e2ac <xTaskResumeAll+0x12c>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e224:	429a      	cmp	r2, r3
 800e226:	d302      	bcc.n	800e22e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e228:	4b21      	ldr	r3, [pc, #132]	@ (800e2b0 <xTaskResumeAll+0x130>)
 800e22a:	2201      	movs	r2, #1
 800e22c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e22e:	4b1c      	ldr	r3, [pc, #112]	@ (800e2a0 <xTaskResumeAll+0x120>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1cb      	bne.n	800e1ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e23c:	f000 fbb8 	bl	800e9b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e240:	4b1c      	ldr	r3, [pc, #112]	@ (800e2b4 <xTaskResumeAll+0x134>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d010      	beq.n	800e26e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e24c:	f000 f86c 	bl	800e328 <xTaskIncrementTick>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e256:	4b16      	ldr	r3, [pc, #88]	@ (800e2b0 <xTaskResumeAll+0x130>)
 800e258:	2201      	movs	r2, #1
 800e25a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	3b01      	subs	r3, #1
 800e260:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1f1      	bne.n	800e24c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e268:	4b12      	ldr	r3, [pc, #72]	@ (800e2b4 <xTaskResumeAll+0x134>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e26e:	4b10      	ldr	r3, [pc, #64]	@ (800e2b0 <xTaskResumeAll+0x130>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d009      	beq.n	800e28a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e276:	2301      	movs	r3, #1
 800e278:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e27a:	4b0f      	ldr	r3, [pc, #60]	@ (800e2b8 <xTaskResumeAll+0x138>)
 800e27c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e28a:	f001 fa5f 	bl	800f74c <vPortExitCritical>

	return xAlreadyYielded;
 800e28e:	68bb      	ldr	r3, [r7, #8]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	2000213c 	.word	0x2000213c
 800e29c:	20002114 	.word	0x20002114
 800e2a0:	200020d4 	.word	0x200020d4
 800e2a4:	2000211c 	.word	0x2000211c
 800e2a8:	20001c44 	.word	0x20001c44
 800e2ac:	20001c40 	.word	0x20001c40
 800e2b0:	20002128 	.word	0x20002128
 800e2b4:	20002124 	.word	0x20002124
 800e2b8:	e000ed04 	.word	0xe000ed04

0800e2bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e2c2:	4b05      	ldr	r3, [pc, #20]	@ (800e2d8 <xTaskGetTickCount+0x1c>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e2c8:	687b      	ldr	r3, [r7, #4]
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	370c      	adds	r7, #12
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	20002118 	.word	0x20002118

0800e2dc <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d102      	bne.n	800e2f0 <pcTaskGetName+0x14>
 800e2ea:	4b0e      	ldr	r3, [pc, #56]	@ (800e324 <pcTaskGetName+0x48>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	e000      	b.n	800e2f2 <pcTaskGetName+0x16>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d10b      	bne.n	800e312 <pcTaskGetName+0x36>
	__asm volatile
 800e2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	60bb      	str	r3, [r7, #8]
}
 800e30c:	bf00      	nop
 800e30e:	bf00      	nop
 800e310:	e7fd      	b.n	800e30e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	3334      	adds	r3, #52	@ 0x34
}
 800e316:	4618      	mov	r0, r3
 800e318:	3714      	adds	r7, #20
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	20001c40 	.word	0x20001c40

0800e328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e32e:	2300      	movs	r3, #0
 800e330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e332:	4b4f      	ldr	r3, [pc, #316]	@ (800e470 <xTaskIncrementTick+0x148>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	f040 8090 	bne.w	800e45c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e33c:	4b4d      	ldr	r3, [pc, #308]	@ (800e474 <xTaskIncrementTick+0x14c>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	3301      	adds	r3, #1
 800e342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e344:	4a4b      	ldr	r2, [pc, #300]	@ (800e474 <xTaskIncrementTick+0x14c>)
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d121      	bne.n	800e394 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e350:	4b49      	ldr	r3, [pc, #292]	@ (800e478 <xTaskIncrementTick+0x150>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00b      	beq.n	800e372 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	603b      	str	r3, [r7, #0]
}
 800e36c:	bf00      	nop
 800e36e:	bf00      	nop
 800e370:	e7fd      	b.n	800e36e <xTaskIncrementTick+0x46>
 800e372:	4b41      	ldr	r3, [pc, #260]	@ (800e478 <xTaskIncrementTick+0x150>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	60fb      	str	r3, [r7, #12]
 800e378:	4b40      	ldr	r3, [pc, #256]	@ (800e47c <xTaskIncrementTick+0x154>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a3e      	ldr	r2, [pc, #248]	@ (800e478 <xTaskIncrementTick+0x150>)
 800e37e:	6013      	str	r3, [r2, #0]
 800e380:	4a3e      	ldr	r2, [pc, #248]	@ (800e47c <xTaskIncrementTick+0x154>)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6013      	str	r3, [r2, #0]
 800e386:	4b3e      	ldr	r3, [pc, #248]	@ (800e480 <xTaskIncrementTick+0x158>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	3301      	adds	r3, #1
 800e38c:	4a3c      	ldr	r2, [pc, #240]	@ (800e480 <xTaskIncrementTick+0x158>)
 800e38e:	6013      	str	r3, [r2, #0]
 800e390:	f000 fb0e 	bl	800e9b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e394:	4b3b      	ldr	r3, [pc, #236]	@ (800e484 <xTaskIncrementTick+0x15c>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	693a      	ldr	r2, [r7, #16]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d349      	bcc.n	800e432 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e39e:	4b36      	ldr	r3, [pc, #216]	@ (800e478 <xTaskIncrementTick+0x150>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d104      	bne.n	800e3b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3a8:	4b36      	ldr	r3, [pc, #216]	@ (800e484 <xTaskIncrementTick+0x15c>)
 800e3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ae:	601a      	str	r2, [r3, #0]
					break;
 800e3b0:	e03f      	b.n	800e432 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3b2:	4b31      	ldr	r3, [pc, #196]	@ (800e478 <xTaskIncrementTick+0x150>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e3c2:	693a      	ldr	r2, [r7, #16]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d203      	bcs.n	800e3d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e3ca:	4a2e      	ldr	r2, [pc, #184]	@ (800e484 <xTaskIncrementTick+0x15c>)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e3d0:	e02f      	b.n	800e432 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	3304      	adds	r3, #4
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe fd18 	bl	800ce0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d004      	beq.n	800e3ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	3318      	adds	r3, #24
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fe fd0f 	bl	800ce0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3f2:	4b25      	ldr	r3, [pc, #148]	@ (800e488 <xTaskIncrementTick+0x160>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d903      	bls.n	800e402 <xTaskIncrementTick+0xda>
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3fe:	4a22      	ldr	r2, [pc, #136]	@ (800e488 <xTaskIncrementTick+0x160>)
 800e400:	6013      	str	r3, [r2, #0]
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e406:	4613      	mov	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	4a1f      	ldr	r2, [pc, #124]	@ (800e48c <xTaskIncrementTick+0x164>)
 800e410:	441a      	add	r2, r3
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	3304      	adds	r3, #4
 800e416:	4619      	mov	r1, r3
 800e418:	4610      	mov	r0, r2
 800e41a:	f7fe fc9a 	bl	800cd52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e422:	4b1b      	ldr	r3, [pc, #108]	@ (800e490 <xTaskIncrementTick+0x168>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e428:	429a      	cmp	r2, r3
 800e42a:	d3b8      	bcc.n	800e39e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e42c:	2301      	movs	r3, #1
 800e42e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e430:	e7b5      	b.n	800e39e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e432:	4b17      	ldr	r3, [pc, #92]	@ (800e490 <xTaskIncrementTick+0x168>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e438:	4914      	ldr	r1, [pc, #80]	@ (800e48c <xTaskIncrementTick+0x164>)
 800e43a:	4613      	mov	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4413      	add	r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	440b      	add	r3, r1
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b01      	cmp	r3, #1
 800e448:	d901      	bls.n	800e44e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e44a:	2301      	movs	r3, #1
 800e44c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e44e:	4b11      	ldr	r3, [pc, #68]	@ (800e494 <xTaskIncrementTick+0x16c>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d007      	beq.n	800e466 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e456:	2301      	movs	r3, #1
 800e458:	617b      	str	r3, [r7, #20]
 800e45a:	e004      	b.n	800e466 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e45c:	4b0e      	ldr	r3, [pc, #56]	@ (800e498 <xTaskIncrementTick+0x170>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3301      	adds	r3, #1
 800e462:	4a0d      	ldr	r2, [pc, #52]	@ (800e498 <xTaskIncrementTick+0x170>)
 800e464:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e466:	697b      	ldr	r3, [r7, #20]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3718      	adds	r7, #24
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	2000213c 	.word	0x2000213c
 800e474:	20002118 	.word	0x20002118
 800e478:	200020cc 	.word	0x200020cc
 800e47c:	200020d0 	.word	0x200020d0
 800e480:	2000212c 	.word	0x2000212c
 800e484:	20002134 	.word	0x20002134
 800e488:	2000211c 	.word	0x2000211c
 800e48c:	20001c44 	.word	0x20001c44
 800e490:	20001c40 	.word	0x20001c40
 800e494:	20002128 	.word	0x20002128
 800e498:	20002124 	.word	0x20002124

0800e49c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4a2:	4b3f      	ldr	r3, [pc, #252]	@ (800e5a0 <vTaskSwitchContext+0x104>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d003      	beq.n	800e4b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e4aa:	4b3e      	ldr	r3, [pc, #248]	@ (800e5a4 <vTaskSwitchContext+0x108>)
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e4b0:	e071      	b.n	800e596 <vTaskSwitchContext+0xfa>
		xYieldPending = pdFALSE;
 800e4b2:	4b3c      	ldr	r3, [pc, #240]	@ (800e5a4 <vTaskSwitchContext+0x108>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e4b8:	f7f2 fd1b 	bl	8000ef2 <getRunTimeCounterValue>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	4a3a      	ldr	r2, [pc, #232]	@ (800e5a8 <vTaskSwitchContext+0x10c>)
 800e4c0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e4c2:	4b39      	ldr	r3, [pc, #228]	@ (800e5a8 <vTaskSwitchContext+0x10c>)
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	4b39      	ldr	r3, [pc, #228]	@ (800e5ac <vTaskSwitchContext+0x110>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d909      	bls.n	800e4e2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e4ce:	4b38      	ldr	r3, [pc, #224]	@ (800e5b0 <vTaskSwitchContext+0x114>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800e4d4:	4a34      	ldr	r2, [pc, #208]	@ (800e5a8 <vTaskSwitchContext+0x10c>)
 800e4d6:	6810      	ldr	r0, [r2, #0]
 800e4d8:	4a34      	ldr	r2, [pc, #208]	@ (800e5ac <vTaskSwitchContext+0x110>)
 800e4da:	6812      	ldr	r2, [r2, #0]
 800e4dc:	1a82      	subs	r2, r0, r2
 800e4de:	440a      	add	r2, r1
 800e4e0:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e4e2:	4b31      	ldr	r3, [pc, #196]	@ (800e5a8 <vTaskSwitchContext+0x10c>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a31      	ldr	r2, [pc, #196]	@ (800e5ac <vTaskSwitchContext+0x110>)
 800e4e8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e4ea:	4b31      	ldr	r3, [pc, #196]	@ (800e5b0 <vTaskSwitchContext+0x114>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	4b2f      	ldr	r3, [pc, #188]	@ (800e5b0 <vTaskSwitchContext+0x114>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d808      	bhi.n	800e50c <vTaskSwitchContext+0x70>
 800e4fa:	4b2d      	ldr	r3, [pc, #180]	@ (800e5b0 <vTaskSwitchContext+0x114>)
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	4b2c      	ldr	r3, [pc, #176]	@ (800e5b0 <vTaskSwitchContext+0x114>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3334      	adds	r3, #52	@ 0x34
 800e504:	4619      	mov	r1, r3
 800e506:	4610      	mov	r0, r2
 800e508:	f7f2 fcfb 	bl	8000f02 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e50c:	4b29      	ldr	r3, [pc, #164]	@ (800e5b4 <vTaskSwitchContext+0x118>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	60fb      	str	r3, [r7, #12]
 800e512:	e011      	b.n	800e538 <vTaskSwitchContext+0x9c>
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d10b      	bne.n	800e532 <vTaskSwitchContext+0x96>
	__asm volatile
 800e51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e51e:	f383 8811 	msr	BASEPRI, r3
 800e522:	f3bf 8f6f 	isb	sy
 800e526:	f3bf 8f4f 	dsb	sy
 800e52a:	607b      	str	r3, [r7, #4]
}
 800e52c:	bf00      	nop
 800e52e:	bf00      	nop
 800e530:	e7fd      	b.n	800e52e <vTaskSwitchContext+0x92>
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	3b01      	subs	r3, #1
 800e536:	60fb      	str	r3, [r7, #12]
 800e538:	491f      	ldr	r1, [pc, #124]	@ (800e5b8 <vTaskSwitchContext+0x11c>)
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	4613      	mov	r3, r2
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4413      	add	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	440b      	add	r3, r1
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d0e3      	beq.n	800e514 <vTaskSwitchContext+0x78>
 800e54c:	68fa      	ldr	r2, [r7, #12]
 800e54e:	4613      	mov	r3, r2
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	4413      	add	r3, r2
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	4a18      	ldr	r2, [pc, #96]	@ (800e5b8 <vTaskSwitchContext+0x11c>)
 800e558:	4413      	add	r3, r2
 800e55a:	60bb      	str	r3, [r7, #8]
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	685a      	ldr	r2, [r3, #4]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	605a      	str	r2, [r3, #4]
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	685a      	ldr	r2, [r3, #4]
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	3308      	adds	r3, #8
 800e56e:	429a      	cmp	r2, r3
 800e570:	d104      	bne.n	800e57c <vTaskSwitchContext+0xe0>
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	685a      	ldr	r2, [r3, #4]
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	605a      	str	r2, [r3, #4]
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	4a0b      	ldr	r2, [pc, #44]	@ (800e5b0 <vTaskSwitchContext+0x114>)
 800e584:	6013      	str	r3, [r2, #0]
 800e586:	4a0b      	ldr	r2, [pc, #44]	@ (800e5b4 <vTaskSwitchContext+0x118>)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e58c:	4b08      	ldr	r3, [pc, #32]	@ (800e5b0 <vTaskSwitchContext+0x114>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	335c      	adds	r3, #92	@ 0x5c
 800e592:	4a0a      	ldr	r2, [pc, #40]	@ (800e5bc <vTaskSwitchContext+0x120>)
 800e594:	6013      	str	r3, [r2, #0]
}
 800e596:	bf00      	nop
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	2000213c 	.word	0x2000213c
 800e5a4:	20002128 	.word	0x20002128
 800e5a8:	20002144 	.word	0x20002144
 800e5ac:	20002140 	.word	0x20002140
 800e5b0:	20001c40 	.word	0x20001c40
 800e5b4:	2000211c 	.word	0x2000211c
 800e5b8:	20001c44 	.word	0x20001c44
 800e5bc:	20000088 	.word	0x20000088

0800e5c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10b      	bne.n	800e5e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d4:	f383 8811 	msr	BASEPRI, r3
 800e5d8:	f3bf 8f6f 	isb	sy
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	60fb      	str	r3, [r7, #12]
}
 800e5e2:	bf00      	nop
 800e5e4:	bf00      	nop
 800e5e6:	e7fd      	b.n	800e5e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5e8:	4b07      	ldr	r3, [pc, #28]	@ (800e608 <vTaskPlaceOnEventList+0x48>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3318      	adds	r3, #24
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7fe fbd2 	bl	800cd9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	6838      	ldr	r0, [r7, #0]
 800e5fa:	f000 fb97 	bl	800ed2c <prvAddCurrentTaskToDelayedList>
}
 800e5fe:	bf00      	nop
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	20001c40 	.word	0x20001c40

0800e60c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b086      	sub	sp, #24
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10b      	bne.n	800e636 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	617b      	str	r3, [r7, #20]
}
 800e630:	bf00      	nop
 800e632:	bf00      	nop
 800e634:	e7fd      	b.n	800e632 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e636:	4b0a      	ldr	r3, [pc, #40]	@ (800e660 <vTaskPlaceOnEventListRestricted+0x54>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	3318      	adds	r3, #24
 800e63c:	4619      	mov	r1, r3
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f7fe fb87 	bl	800cd52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e64a:	f04f 33ff 	mov.w	r3, #4294967295
 800e64e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e650:	6879      	ldr	r1, [r7, #4]
 800e652:	68b8      	ldr	r0, [r7, #8]
 800e654:	f000 fb6a 	bl	800ed2c <prvAddCurrentTaskToDelayedList>
	}
 800e658:	bf00      	nop
 800e65a:	3718      	adds	r7, #24
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	20001c40 	.word	0x20001c40

0800e664 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d10b      	bne.n	800e692 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e67e:	f383 8811 	msr	BASEPRI, r3
 800e682:	f3bf 8f6f 	isb	sy
 800e686:	f3bf 8f4f 	dsb	sy
 800e68a:	60fb      	str	r3, [r7, #12]
}
 800e68c:	bf00      	nop
 800e68e:	bf00      	nop
 800e690:	e7fd      	b.n	800e68e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	3318      	adds	r3, #24
 800e696:	4618      	mov	r0, r3
 800e698:	f7fe fbb8 	bl	800ce0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e69c:	4b1d      	ldr	r3, [pc, #116]	@ (800e714 <xTaskRemoveFromEventList+0xb0>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d11d      	bne.n	800e6e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	3304      	adds	r3, #4
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7fe fbaf 	bl	800ce0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6b2:	4b19      	ldr	r3, [pc, #100]	@ (800e718 <xTaskRemoveFromEventList+0xb4>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d903      	bls.n	800e6c2 <xTaskRemoveFromEventList+0x5e>
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6be:	4a16      	ldr	r2, [pc, #88]	@ (800e718 <xTaskRemoveFromEventList+0xb4>)
 800e6c0:	6013      	str	r3, [r2, #0]
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4413      	add	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4a13      	ldr	r2, [pc, #76]	@ (800e71c <xTaskRemoveFromEventList+0xb8>)
 800e6d0:	441a      	add	r2, r3
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	4610      	mov	r0, r2
 800e6da:	f7fe fb3a 	bl	800cd52 <vListInsertEnd>
 800e6de:	e005      	b.n	800e6ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	3318      	adds	r3, #24
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	480e      	ldr	r0, [pc, #56]	@ (800e720 <xTaskRemoveFromEventList+0xbc>)
 800e6e8:	f7fe fb33 	bl	800cd52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e724 <xTaskRemoveFromEventList+0xc0>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d905      	bls.n	800e706 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e728 <xTaskRemoveFromEventList+0xc4>)
 800e700:	2201      	movs	r2, #1
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	e001      	b.n	800e70a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e706:	2300      	movs	r3, #0
 800e708:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e70a:	697b      	ldr	r3, [r7, #20]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3718      	adds	r7, #24
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	2000213c 	.word	0x2000213c
 800e718:	2000211c 	.word	0x2000211c
 800e71c:	20001c44 	.word	0x20001c44
 800e720:	200020d4 	.word	0x200020d4
 800e724:	20001c40 	.word	0x20001c40
 800e728:	20002128 	.word	0x20002128

0800e72c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e734:	4b06      	ldr	r3, [pc, #24]	@ (800e750 <vTaskInternalSetTimeOutState+0x24>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e73c:	4b05      	ldr	r3, [pc, #20]	@ (800e754 <vTaskInternalSetTimeOutState+0x28>)
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	605a      	str	r2, [r3, #4]
}
 800e744:	bf00      	nop
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr
 800e750:	2000212c 	.word	0x2000212c
 800e754:	20002118 	.word	0x20002118

0800e758 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b088      	sub	sp, #32
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d10b      	bne.n	800e780 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e76c:	f383 8811 	msr	BASEPRI, r3
 800e770:	f3bf 8f6f 	isb	sy
 800e774:	f3bf 8f4f 	dsb	sy
 800e778:	613b      	str	r3, [r7, #16]
}
 800e77a:	bf00      	nop
 800e77c:	bf00      	nop
 800e77e:	e7fd      	b.n	800e77c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d10b      	bne.n	800e79e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e78a:	f383 8811 	msr	BASEPRI, r3
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f3bf 8f4f 	dsb	sy
 800e796:	60fb      	str	r3, [r7, #12]
}
 800e798:	bf00      	nop
 800e79a:	bf00      	nop
 800e79c:	e7fd      	b.n	800e79a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e79e:	f000 ffa3 	bl	800f6e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e7a2:	4b1d      	ldr	r3, [pc, #116]	@ (800e818 <xTaskCheckForTimeOut+0xc0>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	69ba      	ldr	r2, [r7, #24]
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ba:	d102      	bne.n	800e7c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	61fb      	str	r3, [r7, #28]
 800e7c0:	e023      	b.n	800e80a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	4b15      	ldr	r3, [pc, #84]	@ (800e81c <xTaskCheckForTimeOut+0xc4>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d007      	beq.n	800e7de <xTaskCheckForTimeOut+0x86>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	69ba      	ldr	r2, [r7, #24]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d302      	bcc.n	800e7de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	61fb      	str	r3, [r7, #28]
 800e7dc:	e015      	b.n	800e80a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	697a      	ldr	r2, [r7, #20]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d20b      	bcs.n	800e800 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	1ad2      	subs	r2, r2, r3
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f7ff ff99 	bl	800e72c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	61fb      	str	r3, [r7, #28]
 800e7fe:	e004      	b.n	800e80a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	2200      	movs	r2, #0
 800e804:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e806:	2301      	movs	r3, #1
 800e808:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e80a:	f000 ff9f 	bl	800f74c <vPortExitCritical>

	return xReturn;
 800e80e:	69fb      	ldr	r3, [r7, #28]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3720      	adds	r7, #32
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	20002118 	.word	0x20002118
 800e81c:	2000212c 	.word	0x2000212c

0800e820 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e820:	b480      	push	{r7}
 800e822:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e824:	4b03      	ldr	r3, [pc, #12]	@ (800e834 <vTaskMissedYield+0x14>)
 800e826:	2201      	movs	r2, #1
 800e828:	601a      	str	r2, [r3, #0]
}
 800e82a:	bf00      	nop
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	20002128 	.word	0x20002128

0800e838 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e840:	f000 f852 	bl	800e8e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e844:	4b06      	ldr	r3, [pc, #24]	@ (800e860 <prvIdleTask+0x28>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d9f9      	bls.n	800e840 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e84c:	4b05      	ldr	r3, [pc, #20]	@ (800e864 <prvIdleTask+0x2c>)
 800e84e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e852:	601a      	str	r2, [r3, #0]
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e85c:	e7f0      	b.n	800e840 <prvIdleTask+0x8>
 800e85e:	bf00      	nop
 800e860:	20001c44 	.word	0x20001c44
 800e864:	e000ed04 	.word	0xe000ed04

0800e868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e86e:	2300      	movs	r3, #0
 800e870:	607b      	str	r3, [r7, #4]
 800e872:	e00c      	b.n	800e88e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	4613      	mov	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4413      	add	r3, r2
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	4a12      	ldr	r2, [pc, #72]	@ (800e8c8 <prvInitialiseTaskLists+0x60>)
 800e880:	4413      	add	r3, r2
 800e882:	4618      	mov	r0, r3
 800e884:	f7fe fa38 	bl	800ccf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	3301      	adds	r3, #1
 800e88c:	607b      	str	r3, [r7, #4]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b37      	cmp	r3, #55	@ 0x37
 800e892:	d9ef      	bls.n	800e874 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e894:	480d      	ldr	r0, [pc, #52]	@ (800e8cc <prvInitialiseTaskLists+0x64>)
 800e896:	f7fe fa2f 	bl	800ccf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e89a:	480d      	ldr	r0, [pc, #52]	@ (800e8d0 <prvInitialiseTaskLists+0x68>)
 800e89c:	f7fe fa2c 	bl	800ccf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e8a0:	480c      	ldr	r0, [pc, #48]	@ (800e8d4 <prvInitialiseTaskLists+0x6c>)
 800e8a2:	f7fe fa29 	bl	800ccf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e8a6:	480c      	ldr	r0, [pc, #48]	@ (800e8d8 <prvInitialiseTaskLists+0x70>)
 800e8a8:	f7fe fa26 	bl	800ccf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e8ac:	480b      	ldr	r0, [pc, #44]	@ (800e8dc <prvInitialiseTaskLists+0x74>)
 800e8ae:	f7fe fa23 	bl	800ccf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e8b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e8e0 <prvInitialiseTaskLists+0x78>)
 800e8b4:	4a05      	ldr	r2, [pc, #20]	@ (800e8cc <prvInitialiseTaskLists+0x64>)
 800e8b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e8b8:	4b0a      	ldr	r3, [pc, #40]	@ (800e8e4 <prvInitialiseTaskLists+0x7c>)
 800e8ba:	4a05      	ldr	r2, [pc, #20]	@ (800e8d0 <prvInitialiseTaskLists+0x68>)
 800e8bc:	601a      	str	r2, [r3, #0]
}
 800e8be:	bf00      	nop
 800e8c0:	3708      	adds	r7, #8
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	20001c44 	.word	0x20001c44
 800e8cc:	200020a4 	.word	0x200020a4
 800e8d0:	200020b8 	.word	0x200020b8
 800e8d4:	200020d4 	.word	0x200020d4
 800e8d8:	200020e8 	.word	0x200020e8
 800e8dc:	20002100 	.word	0x20002100
 800e8e0:	200020cc 	.word	0x200020cc
 800e8e4:	200020d0 	.word	0x200020d0

0800e8e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8ee:	e019      	b.n	800e924 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e8f0:	f000 fefa 	bl	800f6e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f4:	4b10      	ldr	r3, [pc, #64]	@ (800e938 <prvCheckTasksWaitingTermination+0x50>)
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	3304      	adds	r3, #4
 800e900:	4618      	mov	r0, r3
 800e902:	f7fe fa83 	bl	800ce0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e906:	4b0d      	ldr	r3, [pc, #52]	@ (800e93c <prvCheckTasksWaitingTermination+0x54>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	4a0b      	ldr	r2, [pc, #44]	@ (800e93c <prvCheckTasksWaitingTermination+0x54>)
 800e90e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e910:	4b0b      	ldr	r3, [pc, #44]	@ (800e940 <prvCheckTasksWaitingTermination+0x58>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	3b01      	subs	r3, #1
 800e916:	4a0a      	ldr	r2, [pc, #40]	@ (800e940 <prvCheckTasksWaitingTermination+0x58>)
 800e918:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e91a:	f000 ff17 	bl	800f74c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 f810 	bl	800e944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e924:	4b06      	ldr	r3, [pc, #24]	@ (800e940 <prvCheckTasksWaitingTermination+0x58>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1e1      	bne.n	800e8f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e92c:	bf00      	nop
 800e92e:	bf00      	nop
 800e930:	3708      	adds	r7, #8
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	200020e8 	.word	0x200020e8
 800e93c:	20002114 	.word	0x20002114
 800e940:	200020fc 	.word	0x200020fc

0800e944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	335c      	adds	r3, #92	@ 0x5c
 800e950:	4618      	mov	r0, r3
 800e952:	f002 f8ab 	bl	8010aac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d108      	bne.n	800e972 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e964:	4618      	mov	r0, r3
 800e966:	f001 f8af 	bl	800fac8 <vPortFree>
				vPortFree( pxTCB );
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f001 f8ac 	bl	800fac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e970:	e019      	b.n	800e9a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e978:	2b01      	cmp	r3, #1
 800e97a:	d103      	bne.n	800e984 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f001 f8a3 	bl	800fac8 <vPortFree>
	}
 800e982:	e010      	b.n	800e9a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	d00b      	beq.n	800e9a6 <prvDeleteTCB+0x62>
	__asm volatile
 800e98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	60fb      	str	r3, [r7, #12]
}
 800e9a0:	bf00      	nop
 800e9a2:	bf00      	nop
 800e9a4:	e7fd      	b.n	800e9a2 <prvDeleteTCB+0x5e>
	}
 800e9a6:	bf00      	nop
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
	...

0800e9b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9b6:	4b0c      	ldr	r3, [pc, #48]	@ (800e9e8 <prvResetNextTaskUnblockTime+0x38>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d104      	bne.n	800e9ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e9c0:	4b0a      	ldr	r3, [pc, #40]	@ (800e9ec <prvResetNextTaskUnblockTime+0x3c>)
 800e9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e9c8:	e008      	b.n	800e9dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9ca:	4b07      	ldr	r3, [pc, #28]	@ (800e9e8 <prvResetNextTaskUnblockTime+0x38>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	68db      	ldr	r3, [r3, #12]
 800e9d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	4a04      	ldr	r2, [pc, #16]	@ (800e9ec <prvResetNextTaskUnblockTime+0x3c>)
 800e9da:	6013      	str	r3, [r2, #0]
}
 800e9dc:	bf00      	nop
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr
 800e9e8:	200020cc 	.word	0x200020cc
 800e9ec:	20002134 	.word	0x20002134

0800e9f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e9f6:	4b05      	ldr	r3, [pc, #20]	@ (800ea0c <xTaskGetCurrentTaskHandle+0x1c>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e9fc:	687b      	ldr	r3, [r7, #4]
	}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	370c      	adds	r7, #12
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	20001c40 	.word	0x20001c40

0800ea10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea16:	4b0b      	ldr	r3, [pc, #44]	@ (800ea44 <xTaskGetSchedulerState+0x34>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d102      	bne.n	800ea24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	607b      	str	r3, [r7, #4]
 800ea22:	e008      	b.n	800ea36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea24:	4b08      	ldr	r3, [pc, #32]	@ (800ea48 <xTaskGetSchedulerState+0x38>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d102      	bne.n	800ea32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	607b      	str	r3, [r7, #4]
 800ea30:	e001      	b.n	800ea36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea32:	2300      	movs	r3, #0
 800ea34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea36:	687b      	ldr	r3, [r7, #4]
	}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr
 800ea44:	20002120 	.word	0x20002120
 800ea48:	2000213c 	.word	0x2000213c

0800ea4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d051      	beq.n	800eb06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea66:	4b2a      	ldr	r3, [pc, #168]	@ (800eb10 <xTaskPriorityInherit+0xc4>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d241      	bcs.n	800eaf4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	db06      	blt.n	800ea86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea78:	4b25      	ldr	r3, [pc, #148]	@ (800eb10 <xTaskPriorityInherit+0xc4>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	6959      	ldr	r1, [r3, #20]
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea8e:	4613      	mov	r3, r2
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	4413      	add	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4a1f      	ldr	r2, [pc, #124]	@ (800eb14 <xTaskPriorityInherit+0xc8>)
 800ea98:	4413      	add	r3, r2
 800ea9a:	4299      	cmp	r1, r3
 800ea9c:	d122      	bne.n	800eae4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	3304      	adds	r3, #4
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fe f9b2 	bl	800ce0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eaa8:	4b19      	ldr	r3, [pc, #100]	@ (800eb10 <xTaskPriorityInherit+0xc4>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eab6:	4b18      	ldr	r3, [pc, #96]	@ (800eb18 <xTaskPriorityInherit+0xcc>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d903      	bls.n	800eac6 <xTaskPriorityInherit+0x7a>
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eac2:	4a15      	ldr	r2, [pc, #84]	@ (800eb18 <xTaskPriorityInherit+0xcc>)
 800eac4:	6013      	str	r3, [r2, #0]
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaca:	4613      	mov	r3, r2
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4413      	add	r3, r2
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	4a10      	ldr	r2, [pc, #64]	@ (800eb14 <xTaskPriorityInherit+0xc8>)
 800ead4:	441a      	add	r2, r3
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	3304      	adds	r3, #4
 800eada:	4619      	mov	r1, r3
 800eadc:	4610      	mov	r0, r2
 800eade:	f7fe f938 	bl	800cd52 <vListInsertEnd>
 800eae2:	e004      	b.n	800eaee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eae4:	4b0a      	ldr	r3, [pc, #40]	@ (800eb10 <xTaskPriorityInherit+0xc4>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	e008      	b.n	800eb06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eaf8:	4b05      	ldr	r3, [pc, #20]	@ (800eb10 <xTaskPriorityInherit+0xc4>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d201      	bcs.n	800eb06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb02:	2301      	movs	r3, #1
 800eb04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb06:	68fb      	ldr	r3, [r7, #12]
	}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	20001c40 	.word	0x20001c40
 800eb14:	20001c44 	.word	0x20001c44
 800eb18:	2000211c 	.word	0x2000211c

0800eb1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b086      	sub	sp, #24
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d058      	beq.n	800ebe4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb32:	4b2f      	ldr	r3, [pc, #188]	@ (800ebf0 <xTaskPriorityDisinherit+0xd4>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	693a      	ldr	r2, [r7, #16]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d00b      	beq.n	800eb54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	60fb      	str	r3, [r7, #12]
}
 800eb4e:	bf00      	nop
 800eb50:	bf00      	nop
 800eb52:	e7fd      	b.n	800eb50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d10b      	bne.n	800eb74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800eb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	60bb      	str	r3, [r7, #8]
}
 800eb6e:	bf00      	nop
 800eb70:	bf00      	nop
 800eb72:	e7fd      	b.n	800eb70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb78:	1e5a      	subs	r2, r3, #1
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d02c      	beq.n	800ebe4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d128      	bne.n	800ebe4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	3304      	adds	r3, #4
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7fe f938 	bl	800ce0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eba8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebb4:	4b0f      	ldr	r3, [pc, #60]	@ (800ebf4 <xTaskPriorityDisinherit+0xd8>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d903      	bls.n	800ebc4 <xTaskPriorityDisinherit+0xa8>
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc0:	4a0c      	ldr	r2, [pc, #48]	@ (800ebf4 <xTaskPriorityDisinherit+0xd8>)
 800ebc2:	6013      	str	r3, [r2, #0]
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebc8:	4613      	mov	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	4413      	add	r3, r2
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	4a09      	ldr	r2, [pc, #36]	@ (800ebf8 <xTaskPriorityDisinherit+0xdc>)
 800ebd2:	441a      	add	r2, r3
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	4619      	mov	r1, r3
 800ebda:	4610      	mov	r0, r2
 800ebdc:	f7fe f8b9 	bl	800cd52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebe4:	697b      	ldr	r3, [r7, #20]
	}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3718      	adds	r7, #24
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	20001c40 	.word	0x20001c40
 800ebf4:	2000211c 	.word	0x2000211c
 800ebf8:	20001c44 	.word	0x20001c44

0800ebfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b088      	sub	sp, #32
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d06c      	beq.n	800ecee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d10b      	bne.n	800ec34 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ec1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec20:	f383 8811 	msr	BASEPRI, r3
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	f3bf 8f4f 	dsb	sy
 800ec2c:	60fb      	str	r3, [r7, #12]
}
 800ec2e:	bf00      	nop
 800ec30:	bf00      	nop
 800ec32:	e7fd      	b.n	800ec30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d902      	bls.n	800ec44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	61fb      	str	r3, [r7, #28]
 800ec42:	e002      	b.n	800ec4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec4e:	69fa      	ldr	r2, [r7, #28]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d04c      	beq.n	800ecee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec58:	697a      	ldr	r2, [r7, #20]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d147      	bne.n	800ecee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ec5e:	4b26      	ldr	r3, [pc, #152]	@ (800ecf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	69ba      	ldr	r2, [r7, #24]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d10b      	bne.n	800ec80 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ec68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec6c:	f383 8811 	msr	BASEPRI, r3
 800ec70:	f3bf 8f6f 	isb	sy
 800ec74:	f3bf 8f4f 	dsb	sy
 800ec78:	60bb      	str	r3, [r7, #8]
}
 800ec7a:	bf00      	nop
 800ec7c:	bf00      	nop
 800ec7e:	e7fd      	b.n	800ec7c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	69fa      	ldr	r2, [r7, #28]
 800ec8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	699b      	ldr	r3, [r3, #24]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	db04      	blt.n	800ec9e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	6959      	ldr	r1, [r3, #20]
 800eca2:	693a      	ldr	r2, [r7, #16]
 800eca4:	4613      	mov	r3, r2
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	4413      	add	r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	4a13      	ldr	r2, [pc, #76]	@ (800ecfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ecae:	4413      	add	r3, r2
 800ecb0:	4299      	cmp	r1, r3
 800ecb2:	d11c      	bne.n	800ecee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fe f8a7 	bl	800ce0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecc2:	4b0f      	ldr	r3, [pc, #60]	@ (800ed00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d903      	bls.n	800ecd2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecce:	4a0c      	ldr	r2, [pc, #48]	@ (800ed00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ecd0:	6013      	str	r3, [r2, #0]
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4413      	add	r3, r2
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	4a07      	ldr	r2, [pc, #28]	@ (800ecfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ece0:	441a      	add	r2, r3
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	3304      	adds	r3, #4
 800ece6:	4619      	mov	r1, r3
 800ece8:	4610      	mov	r0, r2
 800ecea:	f7fe f832 	bl	800cd52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecee:	bf00      	nop
 800ecf0:	3720      	adds	r7, #32
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	20001c40 	.word	0x20001c40
 800ecfc:	20001c44 	.word	0x20001c44
 800ed00:	2000211c 	.word	0x2000211c

0800ed04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ed04:	b480      	push	{r7}
 800ed06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed08:	4b07      	ldr	r3, [pc, #28]	@ (800ed28 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d004      	beq.n	800ed1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed10:	4b05      	ldr	r3, [pc, #20]	@ (800ed28 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed16:	3201      	adds	r2, #1
 800ed18:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ed1a:	4b03      	ldr	r3, [pc, #12]	@ (800ed28 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
	}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr
 800ed28:	20001c40 	.word	0x20001c40

0800ed2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed36:	4b21      	ldr	r3, [pc, #132]	@ (800edbc <prvAddCurrentTaskToDelayedList+0x90>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed3c:	4b20      	ldr	r3, [pc, #128]	@ (800edc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	3304      	adds	r3, #4
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fe f862 	bl	800ce0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4e:	d10a      	bne.n	800ed66 <prvAddCurrentTaskToDelayedList+0x3a>
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d007      	beq.n	800ed66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed56:	4b1a      	ldr	r3, [pc, #104]	@ (800edc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4819      	ldr	r0, [pc, #100]	@ (800edc4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ed60:	f7fd fff7 	bl	800cd52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed64:	e026      	b.n	800edb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed6e:	4b14      	ldr	r3, [pc, #80]	@ (800edc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68ba      	ldr	r2, [r7, #8]
 800ed74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d209      	bcs.n	800ed92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed7e:	4b12      	ldr	r3, [pc, #72]	@ (800edc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	4b0f      	ldr	r3, [pc, #60]	@ (800edc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	3304      	adds	r3, #4
 800ed88:	4619      	mov	r1, r3
 800ed8a:	4610      	mov	r0, r2
 800ed8c:	f7fe f805 	bl	800cd9a <vListInsert>
}
 800ed90:	e010      	b.n	800edb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed92:	4b0e      	ldr	r3, [pc, #56]	@ (800edcc <prvAddCurrentTaskToDelayedList+0xa0>)
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	4b0a      	ldr	r3, [pc, #40]	@ (800edc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4610      	mov	r0, r2
 800eda0:	f7fd fffb 	bl	800cd9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eda4:	4b0a      	ldr	r3, [pc, #40]	@ (800edd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d202      	bcs.n	800edb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800edae:	4a08      	ldr	r2, [pc, #32]	@ (800edd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	6013      	str	r3, [r2, #0]
}
 800edb4:	bf00      	nop
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	20002118 	.word	0x20002118
 800edc0:	20001c40 	.word	0x20001c40
 800edc4:	20002100 	.word	0x20002100
 800edc8:	200020d0 	.word	0x200020d0
 800edcc:	200020cc 	.word	0x200020cc
 800edd0:	20002134 	.word	0x20002134

0800edd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b08a      	sub	sp, #40	@ 0x28
 800edd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800edda:	2300      	movs	r3, #0
 800eddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800edde:	f000 fb13 	bl	800f408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ede2:	4b1d      	ldr	r3, [pc, #116]	@ (800ee58 <xTimerCreateTimerTask+0x84>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d021      	beq.n	800ee2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800edee:	2300      	movs	r3, #0
 800edf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800edf2:	1d3a      	adds	r2, r7, #4
 800edf4:	f107 0108 	add.w	r1, r7, #8
 800edf8:	f107 030c 	add.w	r3, r7, #12
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7fd ff61 	bl	800ccc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee02:	6879      	ldr	r1, [r7, #4]
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	9202      	str	r2, [sp, #8]
 800ee0a:	9301      	str	r3, [sp, #4]
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	2300      	movs	r3, #0
 800ee12:	460a      	mov	r2, r1
 800ee14:	4911      	ldr	r1, [pc, #68]	@ (800ee5c <xTimerCreateTimerTask+0x88>)
 800ee16:	4812      	ldr	r0, [pc, #72]	@ (800ee60 <xTimerCreateTimerTask+0x8c>)
 800ee18:	f7fe ff38 	bl	800dc8c <xTaskCreateStatic>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	4a11      	ldr	r2, [pc, #68]	@ (800ee64 <xTimerCreateTimerTask+0x90>)
 800ee20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ee22:	4b10      	ldr	r3, [pc, #64]	@ (800ee64 <xTimerCreateTimerTask+0x90>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d10b      	bne.n	800ee4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ee34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee38:	f383 8811 	msr	BASEPRI, r3
 800ee3c:	f3bf 8f6f 	isb	sy
 800ee40:	f3bf 8f4f 	dsb	sy
 800ee44:	613b      	str	r3, [r7, #16]
}
 800ee46:	bf00      	nop
 800ee48:	bf00      	nop
 800ee4a:	e7fd      	b.n	800ee48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ee4c:	697b      	ldr	r3, [r7, #20]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20002178 	.word	0x20002178
 800ee5c:	08012f8c 	.word	0x08012f8c
 800ee60:	0800efa1 	.word	0x0800efa1
 800ee64:	2000217c 	.word	0x2000217c

0800ee68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08a      	sub	sp, #40	@ 0x28
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
 800ee74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ee76:	2300      	movs	r3, #0
 800ee78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d10b      	bne.n	800ee98 <xTimerGenericCommand+0x30>
	__asm volatile
 800ee80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee84:	f383 8811 	msr	BASEPRI, r3
 800ee88:	f3bf 8f6f 	isb	sy
 800ee8c:	f3bf 8f4f 	dsb	sy
 800ee90:	623b      	str	r3, [r7, #32]
}
 800ee92:	bf00      	nop
 800ee94:	bf00      	nop
 800ee96:	e7fd      	b.n	800ee94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ee98:	4b19      	ldr	r3, [pc, #100]	@ (800ef00 <xTimerGenericCommand+0x98>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d02a      	beq.n	800eef6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	2b05      	cmp	r3, #5
 800eeb0:	dc18      	bgt.n	800eee4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eeb2:	f7ff fdad 	bl	800ea10 <xTaskGetSchedulerState>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b02      	cmp	r3, #2
 800eeba:	d109      	bne.n	800eed0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eebc:	4b10      	ldr	r3, [pc, #64]	@ (800ef00 <xTimerGenericCommand+0x98>)
 800eebe:	6818      	ldr	r0, [r3, #0]
 800eec0:	f107 0110 	add.w	r1, r7, #16
 800eec4:	2300      	movs	r3, #0
 800eec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eec8:	f7fe f9c8 	bl	800d25c <xQueueGenericSend>
 800eecc:	6278      	str	r0, [r7, #36]	@ 0x24
 800eece:	e012      	b.n	800eef6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eed0:	4b0b      	ldr	r3, [pc, #44]	@ (800ef00 <xTimerGenericCommand+0x98>)
 800eed2:	6818      	ldr	r0, [r3, #0]
 800eed4:	f107 0110 	add.w	r1, r7, #16
 800eed8:	2300      	movs	r3, #0
 800eeda:	2200      	movs	r2, #0
 800eedc:	f7fe f9be 	bl	800d25c <xQueueGenericSend>
 800eee0:	6278      	str	r0, [r7, #36]	@ 0x24
 800eee2:	e008      	b.n	800eef6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eee4:	4b06      	ldr	r3, [pc, #24]	@ (800ef00 <xTimerGenericCommand+0x98>)
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	f107 0110 	add.w	r1, r7, #16
 800eeec:	2300      	movs	r3, #0
 800eeee:	683a      	ldr	r2, [r7, #0]
 800eef0:	f7fe fab6 	bl	800d460 <xQueueGenericSendFromISR>
 800eef4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3728      	adds	r7, #40	@ 0x28
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	20002178 	.word	0x20002178

0800ef04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b088      	sub	sp, #32
 800ef08:	af02      	add	r7, sp, #8
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef0e:	4b23      	ldr	r3, [pc, #140]	@ (800ef9c <prvProcessExpiredTimer+0x98>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	3304      	adds	r3, #4
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fd ff75 	bl	800ce0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef28:	f003 0304 	and.w	r3, r3, #4
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d023      	beq.n	800ef78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	699a      	ldr	r2, [r3, #24]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	18d1      	adds	r1, r2, r3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	6978      	ldr	r0, [r7, #20]
 800ef3e:	f000 f8d5 	bl	800f0ec <prvInsertTimerInActiveList>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d020      	beq.n	800ef8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef48:	2300      	movs	r3, #0
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	2100      	movs	r1, #0
 800ef52:	6978      	ldr	r0, [r7, #20]
 800ef54:	f7ff ff88 	bl	800ee68 <xTimerGenericCommand>
 800ef58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d114      	bne.n	800ef8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ef60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	60fb      	str	r3, [r7, #12]
}
 800ef72:	bf00      	nop
 800ef74:	bf00      	nop
 800ef76:	e7fd      	b.n	800ef74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef7e:	f023 0301 	bic.w	r3, r3, #1
 800ef82:	b2da      	uxtb	r2, r3
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	6a1b      	ldr	r3, [r3, #32]
 800ef8e:	6978      	ldr	r0, [r7, #20]
 800ef90:	4798      	blx	r3
}
 800ef92:	bf00      	nop
 800ef94:	3718      	adds	r7, #24
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	20002170 	.word	0x20002170

0800efa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800efa8:	f107 0308 	add.w	r3, r7, #8
 800efac:	4618      	mov	r0, r3
 800efae:	f000 f859 	bl	800f064 <prvGetNextExpireTime>
 800efb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	4619      	mov	r1, r3
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f000 f805 	bl	800efc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800efbe:	f000 f8d7 	bl	800f170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800efc2:	bf00      	nop
 800efc4:	e7f0      	b.n	800efa8 <prvTimerTask+0x8>
	...

0800efc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800efd2:	f7ff f8c7 	bl	800e164 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efd6:	f107 0308 	add.w	r3, r7, #8
 800efda:	4618      	mov	r0, r3
 800efdc:	f000 f866 	bl	800f0ac <prvSampleTimeNow>
 800efe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d130      	bne.n	800f04a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d10a      	bne.n	800f004 <prvProcessTimerOrBlockTask+0x3c>
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d806      	bhi.n	800f004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eff6:	f7ff f8c3 	bl	800e180 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800effa:	68f9      	ldr	r1, [r7, #12]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7ff ff81 	bl	800ef04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f002:	e024      	b.n	800f04e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d008      	beq.n	800f01c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f00a:	4b13      	ldr	r3, [pc, #76]	@ (800f058 <prvProcessTimerOrBlockTask+0x90>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d101      	bne.n	800f018 <prvProcessTimerOrBlockTask+0x50>
 800f014:	2301      	movs	r3, #1
 800f016:	e000      	b.n	800f01a <prvProcessTimerOrBlockTask+0x52>
 800f018:	2300      	movs	r3, #0
 800f01a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f01c:	4b0f      	ldr	r3, [pc, #60]	@ (800f05c <prvProcessTimerOrBlockTask+0x94>)
 800f01e:	6818      	ldr	r0, [r3, #0]
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	1ad3      	subs	r3, r2, r3
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	4619      	mov	r1, r3
 800f02a:	f7fe fdfb 	bl	800dc24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f02e:	f7ff f8a7 	bl	800e180 <xTaskResumeAll>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10a      	bne.n	800f04e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f038:	4b09      	ldr	r3, [pc, #36]	@ (800f060 <prvProcessTimerOrBlockTask+0x98>)
 800f03a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f03e:	601a      	str	r2, [r3, #0]
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	f3bf 8f6f 	isb	sy
}
 800f048:	e001      	b.n	800f04e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f04a:	f7ff f899 	bl	800e180 <xTaskResumeAll>
}
 800f04e:	bf00      	nop
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	20002174 	.word	0x20002174
 800f05c:	20002178 	.word	0x20002178
 800f060:	e000ed04 	.word	0xe000ed04

0800f064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f064:	b480      	push	{r7}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f06c:	4b0e      	ldr	r3, [pc, #56]	@ (800f0a8 <prvGetNextExpireTime+0x44>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d101      	bne.n	800f07a <prvGetNextExpireTime+0x16>
 800f076:	2201      	movs	r2, #1
 800f078:	e000      	b.n	800f07c <prvGetNextExpireTime+0x18>
 800f07a:	2200      	movs	r2, #0
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d105      	bne.n	800f094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f088:	4b07      	ldr	r3, [pc, #28]	@ (800f0a8 <prvGetNextExpireTime+0x44>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	60fb      	str	r3, [r7, #12]
 800f092:	e001      	b.n	800f098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f094:	2300      	movs	r3, #0
 800f096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f098:	68fb      	ldr	r3, [r7, #12]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3714      	adds	r7, #20
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	20002170 	.word	0x20002170

0800f0ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f0b4:	f7ff f902 	bl	800e2bc <xTaskGetTickCount>
 800f0b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f0e8 <prvSampleTimeNow+0x3c>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d205      	bcs.n	800f0d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f0c4:	f000 f93a 	bl	800f33c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	e002      	b.n	800f0d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f0d6:	4a04      	ldr	r2, [pc, #16]	@ (800f0e8 <prvSampleTimeNow+0x3c>)
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20002180 	.word	0x20002180

0800f0ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b086      	sub	sp, #24
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
 800f0f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	68ba      	ldr	r2, [r7, #8]
 800f102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d812      	bhi.n	800f138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	1ad2      	subs	r2, r2, r3
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	699b      	ldr	r3, [r3, #24]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d302      	bcc.n	800f126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f120:	2301      	movs	r3, #1
 800f122:	617b      	str	r3, [r7, #20]
 800f124:	e01b      	b.n	800f15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f126:	4b10      	ldr	r3, [pc, #64]	@ (800f168 <prvInsertTimerInActiveList+0x7c>)
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	3304      	adds	r3, #4
 800f12e:	4619      	mov	r1, r3
 800f130:	4610      	mov	r0, r2
 800f132:	f7fd fe32 	bl	800cd9a <vListInsert>
 800f136:	e012      	b.n	800f15e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d206      	bcs.n	800f14e <prvInsertTimerInActiveList+0x62>
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	429a      	cmp	r2, r3
 800f146:	d302      	bcc.n	800f14e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f148:	2301      	movs	r3, #1
 800f14a:	617b      	str	r3, [r7, #20]
 800f14c:	e007      	b.n	800f15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f14e:	4b07      	ldr	r3, [pc, #28]	@ (800f16c <prvInsertTimerInActiveList+0x80>)
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	3304      	adds	r3, #4
 800f156:	4619      	mov	r1, r3
 800f158:	4610      	mov	r0, r2
 800f15a:	f7fd fe1e 	bl	800cd9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f15e:	697b      	ldr	r3, [r7, #20]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3718      	adds	r7, #24
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	20002174 	.word	0x20002174
 800f16c:	20002170 	.word	0x20002170

0800f170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b08e      	sub	sp, #56	@ 0x38
 800f174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f176:	e0ce      	b.n	800f316 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	da19      	bge.n	800f1b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f17e:	1d3b      	adds	r3, r7, #4
 800f180:	3304      	adds	r3, #4
 800f182:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f186:	2b00      	cmp	r3, #0
 800f188:	d10b      	bne.n	800f1a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f18e:	f383 8811 	msr	BASEPRI, r3
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	f3bf 8f4f 	dsb	sy
 800f19a:	61fb      	str	r3, [r7, #28]
}
 800f19c:	bf00      	nop
 800f19e:	bf00      	nop
 800f1a0:	e7fd      	b.n	800f19e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1a8:	6850      	ldr	r0, [r2, #4]
 800f1aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1ac:	6892      	ldr	r2, [r2, #8]
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f2c0 80ae 	blt.w	800f316 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1c0:	695b      	ldr	r3, [r3, #20]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d004      	beq.n	800f1d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fd fe1e 	bl	800ce0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1d0:	463b      	mov	r3, r7
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7ff ff6a 	bl	800f0ac <prvSampleTimeNow>
 800f1d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2b09      	cmp	r3, #9
 800f1de:	f200 8097 	bhi.w	800f310 <prvProcessReceivedCommands+0x1a0>
 800f1e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e8 <prvProcessReceivedCommands+0x78>)
 800f1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e8:	0800f211 	.word	0x0800f211
 800f1ec:	0800f211 	.word	0x0800f211
 800f1f0:	0800f211 	.word	0x0800f211
 800f1f4:	0800f287 	.word	0x0800f287
 800f1f8:	0800f29b 	.word	0x0800f29b
 800f1fc:	0800f2e7 	.word	0x0800f2e7
 800f200:	0800f211 	.word	0x0800f211
 800f204:	0800f211 	.word	0x0800f211
 800f208:	0800f287 	.word	0x0800f287
 800f20c:	0800f29b 	.word	0x0800f29b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f216:	f043 0301 	orr.w	r3, r3, #1
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f21e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f226:	699b      	ldr	r3, [r3, #24]
 800f228:	18d1      	adds	r1, r2, r3
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f22e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f230:	f7ff ff5c 	bl	800f0ec <prvInsertTimerInActiveList>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d06c      	beq.n	800f314 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f248:	f003 0304 	and.w	r3, r3, #4
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d061      	beq.n	800f314 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	441a      	add	r2, r3
 800f258:	2300      	movs	r3, #0
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	2300      	movs	r3, #0
 800f25e:	2100      	movs	r1, #0
 800f260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f262:	f7ff fe01 	bl	800ee68 <xTimerGenericCommand>
 800f266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d152      	bne.n	800f314 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	61bb      	str	r3, [r7, #24]
}
 800f280:	bf00      	nop
 800f282:	bf00      	nop
 800f284:	e7fd      	b.n	800f282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f28c:	f023 0301 	bic.w	r3, r3, #1
 800f290:	b2da      	uxtb	r2, r3
 800f292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f298:	e03d      	b.n	800f316 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f29c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2a0:	f043 0301 	orr.w	r3, r3, #1
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b4:	699b      	ldr	r3, [r3, #24]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d10b      	bne.n	800f2d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2be:	f383 8811 	msr	BASEPRI, r3
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	617b      	str	r3, [r7, #20]
}
 800f2cc:	bf00      	nop
 800f2ce:	bf00      	nop
 800f2d0:	e7fd      	b.n	800f2ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2d4:	699a      	ldr	r2, [r3, #24]
 800f2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d8:	18d1      	adds	r1, r2, r3
 800f2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2e0:	f7ff ff04 	bl	800f0ec <prvInsertTimerInActiveList>
					break;
 800f2e4:	e017      	b.n	800f316 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2ec:	f003 0302 	and.w	r3, r3, #2
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d103      	bne.n	800f2fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f2f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2f6:	f000 fbe7 	bl	800fac8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f2fa:	e00c      	b.n	800f316 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f302:	f023 0301 	bic.w	r3, r3, #1
 800f306:	b2da      	uxtb	r2, r3
 800f308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f30a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f30e:	e002      	b.n	800f316 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f310:	bf00      	nop
 800f312:	e000      	b.n	800f316 <prvProcessReceivedCommands+0x1a6>
					break;
 800f314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f316:	4b08      	ldr	r3, [pc, #32]	@ (800f338 <prvProcessReceivedCommands+0x1c8>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	1d39      	adds	r1, r7, #4
 800f31c:	2200      	movs	r2, #0
 800f31e:	4618      	mov	r0, r3
 800f320:	f7fe f93c 	bl	800d59c <xQueueReceive>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	f47f af26 	bne.w	800f178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f32c:	bf00      	nop
 800f32e:	bf00      	nop
 800f330:	3730      	adds	r7, #48	@ 0x30
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	20002178 	.word	0x20002178

0800f33c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b088      	sub	sp, #32
 800f340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f342:	e049      	b.n	800f3d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f344:	4b2e      	ldr	r3, [pc, #184]	@ (800f400 <prvSwitchTimerLists+0xc4>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f34e:	4b2c      	ldr	r3, [pc, #176]	@ (800f400 <prvSwitchTimerLists+0xc4>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	3304      	adds	r3, #4
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fd fd55 	bl	800ce0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6a1b      	ldr	r3, [r3, #32]
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f370:	f003 0304 	and.w	r3, r3, #4
 800f374:	2b00      	cmp	r3, #0
 800f376:	d02f      	beq.n	800f3d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	699b      	ldr	r3, [r3, #24]
 800f37c:	693a      	ldr	r2, [r7, #16]
 800f37e:	4413      	add	r3, r2
 800f380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f382:	68ba      	ldr	r2, [r7, #8]
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	429a      	cmp	r2, r3
 800f388:	d90e      	bls.n	800f3a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	68ba      	ldr	r2, [r7, #8]
 800f38e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f396:	4b1a      	ldr	r3, [pc, #104]	@ (800f400 <prvSwitchTimerLists+0xc4>)
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	3304      	adds	r3, #4
 800f39e:	4619      	mov	r1, r3
 800f3a0:	4610      	mov	r0, r2
 800f3a2:	f7fd fcfa 	bl	800cd9a <vListInsert>
 800f3a6:	e017      	b.n	800f3d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	9300      	str	r3, [sp, #0]
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	693a      	ldr	r2, [r7, #16]
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f7ff fd58 	bl	800ee68 <xTimerGenericCommand>
 800f3b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d10b      	bne.n	800f3d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3c4:	f383 8811 	msr	BASEPRI, r3
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	603b      	str	r3, [r7, #0]
}
 800f3d2:	bf00      	nop
 800f3d4:	bf00      	nop
 800f3d6:	e7fd      	b.n	800f3d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3d8:	4b09      	ldr	r3, [pc, #36]	@ (800f400 <prvSwitchTimerLists+0xc4>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1b0      	bne.n	800f344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f3e2:	4b07      	ldr	r3, [pc, #28]	@ (800f400 <prvSwitchTimerLists+0xc4>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f3e8:	4b06      	ldr	r3, [pc, #24]	@ (800f404 <prvSwitchTimerLists+0xc8>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	4a04      	ldr	r2, [pc, #16]	@ (800f400 <prvSwitchTimerLists+0xc4>)
 800f3ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f3f0:	4a04      	ldr	r2, [pc, #16]	@ (800f404 <prvSwitchTimerLists+0xc8>)
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	6013      	str	r3, [r2, #0]
}
 800f3f6:	bf00      	nop
 800f3f8:	3718      	adds	r7, #24
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	20002170 	.word	0x20002170
 800f404:	20002174 	.word	0x20002174

0800f408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f40e:	f000 f96b 	bl	800f6e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f412:	4b15      	ldr	r3, [pc, #84]	@ (800f468 <prvCheckForValidListAndQueue+0x60>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d120      	bne.n	800f45c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f41a:	4814      	ldr	r0, [pc, #80]	@ (800f46c <prvCheckForValidListAndQueue+0x64>)
 800f41c:	f7fd fc6c 	bl	800ccf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f420:	4813      	ldr	r0, [pc, #76]	@ (800f470 <prvCheckForValidListAndQueue+0x68>)
 800f422:	f7fd fc69 	bl	800ccf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f426:	4b13      	ldr	r3, [pc, #76]	@ (800f474 <prvCheckForValidListAndQueue+0x6c>)
 800f428:	4a10      	ldr	r2, [pc, #64]	@ (800f46c <prvCheckForValidListAndQueue+0x64>)
 800f42a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f42c:	4b12      	ldr	r3, [pc, #72]	@ (800f478 <prvCheckForValidListAndQueue+0x70>)
 800f42e:	4a10      	ldr	r2, [pc, #64]	@ (800f470 <prvCheckForValidListAndQueue+0x68>)
 800f430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f432:	2300      	movs	r3, #0
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	4b11      	ldr	r3, [pc, #68]	@ (800f47c <prvCheckForValidListAndQueue+0x74>)
 800f438:	4a11      	ldr	r2, [pc, #68]	@ (800f480 <prvCheckForValidListAndQueue+0x78>)
 800f43a:	2110      	movs	r1, #16
 800f43c:	200a      	movs	r0, #10
 800f43e:	f7fd fd79 	bl	800cf34 <xQueueGenericCreateStatic>
 800f442:	4603      	mov	r3, r0
 800f444:	4a08      	ldr	r2, [pc, #32]	@ (800f468 <prvCheckForValidListAndQueue+0x60>)
 800f446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f448:	4b07      	ldr	r3, [pc, #28]	@ (800f468 <prvCheckForValidListAndQueue+0x60>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d005      	beq.n	800f45c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f450:	4b05      	ldr	r3, [pc, #20]	@ (800f468 <prvCheckForValidListAndQueue+0x60>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	490b      	ldr	r1, [pc, #44]	@ (800f484 <prvCheckForValidListAndQueue+0x7c>)
 800f456:	4618      	mov	r0, r3
 800f458:	f7fe fbba 	bl	800dbd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f45c:	f000 f976 	bl	800f74c <vPortExitCritical>
}
 800f460:	bf00      	nop
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	20002178 	.word	0x20002178
 800f46c:	20002148 	.word	0x20002148
 800f470:	2000215c 	.word	0x2000215c
 800f474:	20002170 	.word	0x20002170
 800f478:	20002174 	.word	0x20002174
 800f47c:	20002224 	.word	0x20002224
 800f480:	20002184 	.word	0x20002184
 800f484:	08012f94 	.word	0x08012f94

0800f488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	3b04      	subs	r3, #4
 800f498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3b04      	subs	r3, #4
 800f4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	f023 0201 	bic.w	r2, r3, #1
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	3b04      	subs	r3, #4
 800f4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4b8:	4a0c      	ldr	r2, [pc, #48]	@ (800f4ec <pxPortInitialiseStack+0x64>)
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	3b14      	subs	r3, #20
 800f4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	3b04      	subs	r3, #4
 800f4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f06f 0202 	mvn.w	r2, #2
 800f4d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	3b20      	subs	r3, #32
 800f4dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f4de:	68fb      	ldr	r3, [r7, #12]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3714      	adds	r7, #20
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	0800f4f1 	.word	0x0800f4f1

0800f4f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b085      	sub	sp, #20
 800f4f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f4fa:	4b13      	ldr	r3, [pc, #76]	@ (800f548 <prvTaskExitError+0x58>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f502:	d00b      	beq.n	800f51c <prvTaskExitError+0x2c>
	__asm volatile
 800f504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	60fb      	str	r3, [r7, #12]
}
 800f516:	bf00      	nop
 800f518:	bf00      	nop
 800f51a:	e7fd      	b.n	800f518 <prvTaskExitError+0x28>
	__asm volatile
 800f51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f520:	f383 8811 	msr	BASEPRI, r3
 800f524:	f3bf 8f6f 	isb	sy
 800f528:	f3bf 8f4f 	dsb	sy
 800f52c:	60bb      	str	r3, [r7, #8]
}
 800f52e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f530:	bf00      	nop
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d0fc      	beq.n	800f532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f538:	bf00      	nop
 800f53a:	bf00      	nop
 800f53c:	3714      	adds	r7, #20
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
 800f546:	bf00      	nop
 800f548:	20000078 	.word	0x20000078
 800f54c:	00000000 	.word	0x00000000

0800f550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f550:	4b07      	ldr	r3, [pc, #28]	@ (800f570 <pxCurrentTCBConst2>)
 800f552:	6819      	ldr	r1, [r3, #0]
 800f554:	6808      	ldr	r0, [r1, #0]
 800f556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55a:	f380 8809 	msr	PSP, r0
 800f55e:	f3bf 8f6f 	isb	sy
 800f562:	f04f 0000 	mov.w	r0, #0
 800f566:	f380 8811 	msr	BASEPRI, r0
 800f56a:	4770      	bx	lr
 800f56c:	f3af 8000 	nop.w

0800f570 <pxCurrentTCBConst2>:
 800f570:	20001c40 	.word	0x20001c40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f574:	bf00      	nop
 800f576:	bf00      	nop

0800f578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f578:	4808      	ldr	r0, [pc, #32]	@ (800f59c <prvPortStartFirstTask+0x24>)
 800f57a:	6800      	ldr	r0, [r0, #0]
 800f57c:	6800      	ldr	r0, [r0, #0]
 800f57e:	f380 8808 	msr	MSP, r0
 800f582:	f04f 0000 	mov.w	r0, #0
 800f586:	f380 8814 	msr	CONTROL, r0
 800f58a:	b662      	cpsie	i
 800f58c:	b661      	cpsie	f
 800f58e:	f3bf 8f4f 	dsb	sy
 800f592:	f3bf 8f6f 	isb	sy
 800f596:	df00      	svc	0
 800f598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f59a:	bf00      	nop
 800f59c:	e000ed08 	.word	0xe000ed08

0800f5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f5a6:	4b47      	ldr	r3, [pc, #284]	@ (800f6c4 <xPortStartScheduler+0x124>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a47      	ldr	r2, [pc, #284]	@ (800f6c8 <xPortStartScheduler+0x128>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d10b      	bne.n	800f5c8 <xPortStartScheduler+0x28>
	__asm volatile
 800f5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b4:	f383 8811 	msr	BASEPRI, r3
 800f5b8:	f3bf 8f6f 	isb	sy
 800f5bc:	f3bf 8f4f 	dsb	sy
 800f5c0:	60fb      	str	r3, [r7, #12]
}
 800f5c2:	bf00      	nop
 800f5c4:	bf00      	nop
 800f5c6:	e7fd      	b.n	800f5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f5c8:	4b3e      	ldr	r3, [pc, #248]	@ (800f6c4 <xPortStartScheduler+0x124>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a3f      	ldr	r2, [pc, #252]	@ (800f6cc <xPortStartScheduler+0x12c>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d10b      	bne.n	800f5ea <xPortStartScheduler+0x4a>
	__asm volatile
 800f5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d6:	f383 8811 	msr	BASEPRI, r3
 800f5da:	f3bf 8f6f 	isb	sy
 800f5de:	f3bf 8f4f 	dsb	sy
 800f5e2:	613b      	str	r3, [r7, #16]
}
 800f5e4:	bf00      	nop
 800f5e6:	bf00      	nop
 800f5e8:	e7fd      	b.n	800f5e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f5ea:	4b39      	ldr	r3, [pc, #228]	@ (800f6d0 <xPortStartScheduler+0x130>)
 800f5ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	22ff      	movs	r2, #255	@ 0xff
 800f5fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	b2db      	uxtb	r3, r3
 800f602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f604:	78fb      	ldrb	r3, [r7, #3]
 800f606:	b2db      	uxtb	r3, r3
 800f608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f60c:	b2da      	uxtb	r2, r3
 800f60e:	4b31      	ldr	r3, [pc, #196]	@ (800f6d4 <xPortStartScheduler+0x134>)
 800f610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f612:	4b31      	ldr	r3, [pc, #196]	@ (800f6d8 <xPortStartScheduler+0x138>)
 800f614:	2207      	movs	r2, #7
 800f616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f618:	e009      	b.n	800f62e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f61a:	4b2f      	ldr	r3, [pc, #188]	@ (800f6d8 <xPortStartScheduler+0x138>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	3b01      	subs	r3, #1
 800f620:	4a2d      	ldr	r2, [pc, #180]	@ (800f6d8 <xPortStartScheduler+0x138>)
 800f622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f624:	78fb      	ldrb	r3, [r7, #3]
 800f626:	b2db      	uxtb	r3, r3
 800f628:	005b      	lsls	r3, r3, #1
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f62e:	78fb      	ldrb	r3, [r7, #3]
 800f630:	b2db      	uxtb	r3, r3
 800f632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f636:	2b80      	cmp	r3, #128	@ 0x80
 800f638:	d0ef      	beq.n	800f61a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f63a:	4b27      	ldr	r3, [pc, #156]	@ (800f6d8 <xPortStartScheduler+0x138>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f1c3 0307 	rsb	r3, r3, #7
 800f642:	2b04      	cmp	r3, #4
 800f644:	d00b      	beq.n	800f65e <xPortStartScheduler+0xbe>
	__asm volatile
 800f646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64a:	f383 8811 	msr	BASEPRI, r3
 800f64e:	f3bf 8f6f 	isb	sy
 800f652:	f3bf 8f4f 	dsb	sy
 800f656:	60bb      	str	r3, [r7, #8]
}
 800f658:	bf00      	nop
 800f65a:	bf00      	nop
 800f65c:	e7fd      	b.n	800f65a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f65e:	4b1e      	ldr	r3, [pc, #120]	@ (800f6d8 <xPortStartScheduler+0x138>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	021b      	lsls	r3, r3, #8
 800f664:	4a1c      	ldr	r2, [pc, #112]	@ (800f6d8 <xPortStartScheduler+0x138>)
 800f666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f668:	4b1b      	ldr	r3, [pc, #108]	@ (800f6d8 <xPortStartScheduler+0x138>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f670:	4a19      	ldr	r2, [pc, #100]	@ (800f6d8 <xPortStartScheduler+0x138>)
 800f672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	b2da      	uxtb	r2, r3
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f67c:	4b17      	ldr	r3, [pc, #92]	@ (800f6dc <xPortStartScheduler+0x13c>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a16      	ldr	r2, [pc, #88]	@ (800f6dc <xPortStartScheduler+0x13c>)
 800f682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f688:	4b14      	ldr	r3, [pc, #80]	@ (800f6dc <xPortStartScheduler+0x13c>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a13      	ldr	r2, [pc, #76]	@ (800f6dc <xPortStartScheduler+0x13c>)
 800f68e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f694:	f000 f8da 	bl	800f84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f698:	4b11      	ldr	r3, [pc, #68]	@ (800f6e0 <xPortStartScheduler+0x140>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f69e:	f000 f8f9 	bl	800f894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f6a2:	4b10      	ldr	r3, [pc, #64]	@ (800f6e4 <xPortStartScheduler+0x144>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4a0f      	ldr	r2, [pc, #60]	@ (800f6e4 <xPortStartScheduler+0x144>)
 800f6a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f6ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f6ae:	f7ff ff63 	bl	800f578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f6b2:	f7fe fef3 	bl	800e49c <vTaskSwitchContext>
	prvTaskExitError();
 800f6b6:	f7ff ff1b 	bl	800f4f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3718      	adds	r7, #24
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	e000ed00 	.word	0xe000ed00
 800f6c8:	410fc271 	.word	0x410fc271
 800f6cc:	410fc270 	.word	0x410fc270
 800f6d0:	e000e400 	.word	0xe000e400
 800f6d4:	20002274 	.word	0x20002274
 800f6d8:	20002278 	.word	0x20002278
 800f6dc:	e000ed20 	.word	0xe000ed20
 800f6e0:	20000078 	.word	0x20000078
 800f6e4:	e000ef34 	.word	0xe000ef34

0800f6e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	607b      	str	r3, [r7, #4]
}
 800f700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f702:	4b10      	ldr	r3, [pc, #64]	@ (800f744 <vPortEnterCritical+0x5c>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	3301      	adds	r3, #1
 800f708:	4a0e      	ldr	r2, [pc, #56]	@ (800f744 <vPortEnterCritical+0x5c>)
 800f70a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f70c:	4b0d      	ldr	r3, [pc, #52]	@ (800f744 <vPortEnterCritical+0x5c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	2b01      	cmp	r3, #1
 800f712:	d110      	bne.n	800f736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f714:	4b0c      	ldr	r3, [pc, #48]	@ (800f748 <vPortEnterCritical+0x60>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00b      	beq.n	800f736 <vPortEnterCritical+0x4e>
	__asm volatile
 800f71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f722:	f383 8811 	msr	BASEPRI, r3
 800f726:	f3bf 8f6f 	isb	sy
 800f72a:	f3bf 8f4f 	dsb	sy
 800f72e:	603b      	str	r3, [r7, #0]
}
 800f730:	bf00      	nop
 800f732:	bf00      	nop
 800f734:	e7fd      	b.n	800f732 <vPortEnterCritical+0x4a>
	}
}
 800f736:	bf00      	nop
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	20000078 	.word	0x20000078
 800f748:	e000ed04 	.word	0xe000ed04

0800f74c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f752:	4b12      	ldr	r3, [pc, #72]	@ (800f79c <vPortExitCritical+0x50>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d10b      	bne.n	800f772 <vPortExitCritical+0x26>
	__asm volatile
 800f75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	607b      	str	r3, [r7, #4]
}
 800f76c:	bf00      	nop
 800f76e:	bf00      	nop
 800f770:	e7fd      	b.n	800f76e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f772:	4b0a      	ldr	r3, [pc, #40]	@ (800f79c <vPortExitCritical+0x50>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	3b01      	subs	r3, #1
 800f778:	4a08      	ldr	r2, [pc, #32]	@ (800f79c <vPortExitCritical+0x50>)
 800f77a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f77c:	4b07      	ldr	r3, [pc, #28]	@ (800f79c <vPortExitCritical+0x50>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d105      	bne.n	800f790 <vPortExitCritical+0x44>
 800f784:	2300      	movs	r3, #0
 800f786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	f383 8811 	msr	BASEPRI, r3
}
 800f78e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f790:	bf00      	nop
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr
 800f79c:	20000078 	.word	0x20000078

0800f7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7a0:	f3ef 8009 	mrs	r0, PSP
 800f7a4:	f3bf 8f6f 	isb	sy
 800f7a8:	4b15      	ldr	r3, [pc, #84]	@ (800f800 <pxCurrentTCBConst>)
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	f01e 0f10 	tst.w	lr, #16
 800f7b0:	bf08      	it	eq
 800f7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ba:	6010      	str	r0, [r2, #0]
 800f7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f7c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f7c4:	f380 8811 	msr	BASEPRI, r0
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f7fe fe64 	bl	800e49c <vTaskSwitchContext>
 800f7d4:	f04f 0000 	mov.w	r0, #0
 800f7d8:	f380 8811 	msr	BASEPRI, r0
 800f7dc:	bc09      	pop	{r0, r3}
 800f7de:	6819      	ldr	r1, [r3, #0]
 800f7e0:	6808      	ldr	r0, [r1, #0]
 800f7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e6:	f01e 0f10 	tst.w	lr, #16
 800f7ea:	bf08      	it	eq
 800f7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7f0:	f380 8809 	msr	PSP, r0
 800f7f4:	f3bf 8f6f 	isb	sy
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	f3af 8000 	nop.w

0800f800 <pxCurrentTCBConst>:
 800f800:	20001c40 	.word	0x20001c40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop

0800f808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	607b      	str	r3, [r7, #4]
}
 800f820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f822:	f7fe fd81 	bl	800e328 <xTaskIncrementTick>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d003      	beq.n	800f834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f82c:	4b06      	ldr	r3, [pc, #24]	@ (800f848 <xPortSysTickHandler+0x40>)
 800f82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	2300      	movs	r3, #0
 800f836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	f383 8811 	msr	BASEPRI, r3
}
 800f83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f840:	bf00      	nop
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	e000ed04 	.word	0xe000ed04

0800f84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f84c:	b480      	push	{r7}
 800f84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f850:	4b0b      	ldr	r3, [pc, #44]	@ (800f880 <vPortSetupTimerInterrupt+0x34>)
 800f852:	2200      	movs	r2, #0
 800f854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f856:	4b0b      	ldr	r3, [pc, #44]	@ (800f884 <vPortSetupTimerInterrupt+0x38>)
 800f858:	2200      	movs	r2, #0
 800f85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f85c:	4b0a      	ldr	r3, [pc, #40]	@ (800f888 <vPortSetupTimerInterrupt+0x3c>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a0a      	ldr	r2, [pc, #40]	@ (800f88c <vPortSetupTimerInterrupt+0x40>)
 800f862:	fba2 2303 	umull	r2, r3, r2, r3
 800f866:	099b      	lsrs	r3, r3, #6
 800f868:	4a09      	ldr	r2, [pc, #36]	@ (800f890 <vPortSetupTimerInterrupt+0x44>)
 800f86a:	3b01      	subs	r3, #1
 800f86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f86e:	4b04      	ldr	r3, [pc, #16]	@ (800f880 <vPortSetupTimerInterrupt+0x34>)
 800f870:	2207      	movs	r2, #7
 800f872:	601a      	str	r2, [r3, #0]
}
 800f874:	bf00      	nop
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr
 800f87e:	bf00      	nop
 800f880:	e000e010 	.word	0xe000e010
 800f884:	e000e018 	.word	0xe000e018
 800f888:	2000000c 	.word	0x2000000c
 800f88c:	10624dd3 	.word	0x10624dd3
 800f890:	e000e014 	.word	0xe000e014

0800f894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f8a4 <vPortEnableVFP+0x10>
 800f898:	6801      	ldr	r1, [r0, #0]
 800f89a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f89e:	6001      	str	r1, [r0, #0]
 800f8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f8a2:	bf00      	nop
 800f8a4:	e000ed88 	.word	0xe000ed88

0800f8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b085      	sub	sp, #20
 800f8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f8ae:	f3ef 8305 	mrs	r3, IPSR
 800f8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2b0f      	cmp	r3, #15
 800f8b8:	d915      	bls.n	800f8e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8ba:	4a18      	ldr	r2, [pc, #96]	@ (800f91c <vPortValidateInterruptPriority+0x74>)
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	4413      	add	r3, r2
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f8c4:	4b16      	ldr	r3, [pc, #88]	@ (800f920 <vPortValidateInterruptPriority+0x78>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	7afa      	ldrb	r2, [r7, #11]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d20b      	bcs.n	800f8e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	607b      	str	r3, [r7, #4]
}
 800f8e0:	bf00      	nop
 800f8e2:	bf00      	nop
 800f8e4:	e7fd      	b.n	800f8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800f924 <vPortValidateInterruptPriority+0x7c>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f928 <vPortValidateInterruptPriority+0x80>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d90b      	bls.n	800f90e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8fa:	f383 8811 	msr	BASEPRI, r3
 800f8fe:	f3bf 8f6f 	isb	sy
 800f902:	f3bf 8f4f 	dsb	sy
 800f906:	603b      	str	r3, [r7, #0]
}
 800f908:	bf00      	nop
 800f90a:	bf00      	nop
 800f90c:	e7fd      	b.n	800f90a <vPortValidateInterruptPriority+0x62>
	}
 800f90e:	bf00      	nop
 800f910:	3714      	adds	r7, #20
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	e000e3f0 	.word	0xe000e3f0
 800f920:	20002274 	.word	0x20002274
 800f924:	e000ed0c 	.word	0xe000ed0c
 800f928:	20002278 	.word	0x20002278

0800f92c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b08a      	sub	sp, #40	@ 0x28
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f934:	2300      	movs	r3, #0
 800f936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f938:	f7fe fc14 	bl	800e164 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f93c:	4b5c      	ldr	r3, [pc, #368]	@ (800fab0 <pvPortMalloc+0x184>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d101      	bne.n	800f948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f944:	f000 f930 	bl	800fba8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f948:	4b5a      	ldr	r3, [pc, #360]	@ (800fab4 <pvPortMalloc+0x188>)
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4013      	ands	r3, r2
 800f950:	2b00      	cmp	r3, #0
 800f952:	f040 8095 	bne.w	800fa80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d01e      	beq.n	800f99a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f95c:	2208      	movs	r2, #8
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4413      	add	r3, r2
 800f962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f003 0307 	and.w	r3, r3, #7
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d015      	beq.n	800f99a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f023 0307 	bic.w	r3, r3, #7
 800f974:	3308      	adds	r3, #8
 800f976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f003 0307 	and.w	r3, r3, #7
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d00b      	beq.n	800f99a <pvPortMalloc+0x6e>
	__asm volatile
 800f982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f986:	f383 8811 	msr	BASEPRI, r3
 800f98a:	f3bf 8f6f 	isb	sy
 800f98e:	f3bf 8f4f 	dsb	sy
 800f992:	617b      	str	r3, [r7, #20]
}
 800f994:	bf00      	nop
 800f996:	bf00      	nop
 800f998:	e7fd      	b.n	800f996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d06f      	beq.n	800fa80 <pvPortMalloc+0x154>
 800f9a0:	4b45      	ldr	r3, [pc, #276]	@ (800fab8 <pvPortMalloc+0x18c>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d86a      	bhi.n	800fa80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f9aa:	4b44      	ldr	r3, [pc, #272]	@ (800fabc <pvPortMalloc+0x190>)
 800f9ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f9ae:	4b43      	ldr	r3, [pc, #268]	@ (800fabc <pvPortMalloc+0x190>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9b4:	e004      	b.n	800f9c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d903      	bls.n	800f9d2 <pvPortMalloc+0xa6>
 800f9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1f1      	bne.n	800f9b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f9d2:	4b37      	ldr	r3, [pc, #220]	@ (800fab0 <pvPortMalloc+0x184>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d051      	beq.n	800fa80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f9dc:	6a3b      	ldr	r3, [r7, #32]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2208      	movs	r2, #8
 800f9e2:	4413      	add	r3, r2
 800f9e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	6a3b      	ldr	r3, [r7, #32]
 800f9ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f0:	685a      	ldr	r2, [r3, #4]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	1ad2      	subs	r2, r2, r3
 800f9f6:	2308      	movs	r3, #8
 800f9f8:	005b      	lsls	r3, r3, #1
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d920      	bls.n	800fa40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4413      	add	r3, r2
 800fa04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	f003 0307 	and.w	r3, r3, #7
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d00b      	beq.n	800fa28 <pvPortMalloc+0xfc>
	__asm volatile
 800fa10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa14:	f383 8811 	msr	BASEPRI, r3
 800fa18:	f3bf 8f6f 	isb	sy
 800fa1c:	f3bf 8f4f 	dsb	sy
 800fa20:	613b      	str	r3, [r7, #16]
}
 800fa22:	bf00      	nop
 800fa24:	bf00      	nop
 800fa26:	e7fd      	b.n	800fa24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa2a:	685a      	ldr	r2, [r3, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	1ad2      	subs	r2, r2, r3
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa3a:	69b8      	ldr	r0, [r7, #24]
 800fa3c:	f000 f916 	bl	800fc6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa40:	4b1d      	ldr	r3, [pc, #116]	@ (800fab8 <pvPortMalloc+0x18c>)
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	4a1b      	ldr	r2, [pc, #108]	@ (800fab8 <pvPortMalloc+0x18c>)
 800fa4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa4e:	4b1a      	ldr	r3, [pc, #104]	@ (800fab8 <pvPortMalloc+0x18c>)
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	4b1b      	ldr	r3, [pc, #108]	@ (800fac0 <pvPortMalloc+0x194>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d203      	bcs.n	800fa62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa5a:	4b17      	ldr	r3, [pc, #92]	@ (800fab8 <pvPortMalloc+0x18c>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	4a18      	ldr	r2, [pc, #96]	@ (800fac0 <pvPortMalloc+0x194>)
 800fa60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa64:	685a      	ldr	r2, [r3, #4]
 800fa66:	4b13      	ldr	r3, [pc, #76]	@ (800fab4 <pvPortMalloc+0x188>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	431a      	orrs	r2, r3
 800fa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa72:	2200      	movs	r2, #0
 800fa74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fa76:	4b13      	ldr	r3, [pc, #76]	@ (800fac4 <pvPortMalloc+0x198>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	4a11      	ldr	r2, [pc, #68]	@ (800fac4 <pvPortMalloc+0x198>)
 800fa7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa80:	f7fe fb7e 	bl	800e180 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa84:	69fb      	ldr	r3, [r7, #28]
 800fa86:	f003 0307 	and.w	r3, r3, #7
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d00b      	beq.n	800faa6 <pvPortMalloc+0x17a>
	__asm volatile
 800fa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa92:	f383 8811 	msr	BASEPRI, r3
 800fa96:	f3bf 8f6f 	isb	sy
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	60fb      	str	r3, [r7, #12]
}
 800faa0:	bf00      	nop
 800faa2:	bf00      	nop
 800faa4:	e7fd      	b.n	800faa2 <pvPortMalloc+0x176>
	return pvReturn;
 800faa6:	69fb      	ldr	r3, [r7, #28]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3728      	adds	r7, #40	@ 0x28
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	20005e84 	.word	0x20005e84
 800fab4:	20005e98 	.word	0x20005e98
 800fab8:	20005e88 	.word	0x20005e88
 800fabc:	20005e7c 	.word	0x20005e7c
 800fac0:	20005e8c 	.word	0x20005e8c
 800fac4:	20005e90 	.word	0x20005e90

0800fac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d04f      	beq.n	800fb7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fada:	2308      	movs	r3, #8
 800fadc:	425b      	negs	r3, r3
 800fade:	697a      	ldr	r2, [r7, #20]
 800fae0:	4413      	add	r3, r2
 800fae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	685a      	ldr	r2, [r3, #4]
 800faec:	4b25      	ldr	r3, [pc, #148]	@ (800fb84 <vPortFree+0xbc>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4013      	ands	r3, r2
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d10b      	bne.n	800fb0e <vPortFree+0x46>
	__asm volatile
 800faf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fafa:	f383 8811 	msr	BASEPRI, r3
 800fafe:	f3bf 8f6f 	isb	sy
 800fb02:	f3bf 8f4f 	dsb	sy
 800fb06:	60fb      	str	r3, [r7, #12]
}
 800fb08:	bf00      	nop
 800fb0a:	bf00      	nop
 800fb0c:	e7fd      	b.n	800fb0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d00b      	beq.n	800fb2e <vPortFree+0x66>
	__asm volatile
 800fb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb1a:	f383 8811 	msr	BASEPRI, r3
 800fb1e:	f3bf 8f6f 	isb	sy
 800fb22:	f3bf 8f4f 	dsb	sy
 800fb26:	60bb      	str	r3, [r7, #8]
}
 800fb28:	bf00      	nop
 800fb2a:	bf00      	nop
 800fb2c:	e7fd      	b.n	800fb2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	685a      	ldr	r2, [r3, #4]
 800fb32:	4b14      	ldr	r3, [pc, #80]	@ (800fb84 <vPortFree+0xbc>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4013      	ands	r3, r2
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d01e      	beq.n	800fb7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d11a      	bne.n	800fb7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	685a      	ldr	r2, [r3, #4]
 800fb48:	4b0e      	ldr	r3, [pc, #56]	@ (800fb84 <vPortFree+0xbc>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	43db      	mvns	r3, r3
 800fb4e:	401a      	ands	r2, r3
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb54:	f7fe fb06 	bl	800e164 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	685a      	ldr	r2, [r3, #4]
 800fb5c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb88 <vPortFree+0xc0>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4413      	add	r3, r2
 800fb62:	4a09      	ldr	r2, [pc, #36]	@ (800fb88 <vPortFree+0xc0>)
 800fb64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb66:	6938      	ldr	r0, [r7, #16]
 800fb68:	f000 f880 	bl	800fc6c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fb6c:	4b07      	ldr	r3, [pc, #28]	@ (800fb8c <vPortFree+0xc4>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	3301      	adds	r3, #1
 800fb72:	4a06      	ldr	r2, [pc, #24]	@ (800fb8c <vPortFree+0xc4>)
 800fb74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fb76:	f7fe fb03 	bl	800e180 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb7a:	bf00      	nop
 800fb7c:	3718      	adds	r7, #24
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	20005e98 	.word	0x20005e98
 800fb88:	20005e88 	.word	0x20005e88
 800fb8c:	20005e94 	.word	0x20005e94

0800fb90 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800fb90:	b480      	push	{r7}
 800fb92:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800fb94:	4b03      	ldr	r3, [pc, #12]	@ (800fba4 <xPortGetFreeHeapSize+0x14>)
 800fb96:	681b      	ldr	r3, [r3, #0]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	20005e88 	.word	0x20005e88

0800fba8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fbae:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fbb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fbb4:	4b27      	ldr	r3, [pc, #156]	@ (800fc54 <prvHeapInit+0xac>)
 800fbb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f003 0307 	and.w	r3, r3, #7
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d00c      	beq.n	800fbdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	3307      	adds	r3, #7
 800fbc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f023 0307 	bic.w	r3, r3, #7
 800fbce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fbd0:	68ba      	ldr	r2, [r7, #8]
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	1ad3      	subs	r3, r2, r3
 800fbd6:	4a1f      	ldr	r2, [pc, #124]	@ (800fc54 <prvHeapInit+0xac>)
 800fbd8:	4413      	add	r3, r2
 800fbda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fbe0:	4a1d      	ldr	r2, [pc, #116]	@ (800fc58 <prvHeapInit+0xb0>)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fbe6:	4b1c      	ldr	r3, [pc, #112]	@ (800fc58 <prvHeapInit+0xb0>)
 800fbe8:	2200      	movs	r2, #0
 800fbea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	68ba      	ldr	r2, [r7, #8]
 800fbf0:	4413      	add	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fbf4:	2208      	movs	r2, #8
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	1a9b      	subs	r3, r3, r2
 800fbfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f023 0307 	bic.w	r3, r3, #7
 800fc02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	4a15      	ldr	r2, [pc, #84]	@ (800fc5c <prvHeapInit+0xb4>)
 800fc08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fc0a:	4b14      	ldr	r3, [pc, #80]	@ (800fc5c <prvHeapInit+0xb4>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc12:	4b12      	ldr	r3, [pc, #72]	@ (800fc5c <prvHeapInit+0xb4>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2200      	movs	r2, #0
 800fc18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	1ad2      	subs	r2, r2, r3
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fc28:	4b0c      	ldr	r3, [pc, #48]	@ (800fc5c <prvHeapInit+0xb4>)
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	4a0a      	ldr	r2, [pc, #40]	@ (800fc60 <prvHeapInit+0xb8>)
 800fc36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	4a09      	ldr	r2, [pc, #36]	@ (800fc64 <prvHeapInit+0xbc>)
 800fc3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc40:	4b09      	ldr	r3, [pc, #36]	@ (800fc68 <prvHeapInit+0xc0>)
 800fc42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fc46:	601a      	str	r2, [r3, #0]
}
 800fc48:	bf00      	nop
 800fc4a:	3714      	adds	r7, #20
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr
 800fc54:	2000227c 	.word	0x2000227c
 800fc58:	20005e7c 	.word	0x20005e7c
 800fc5c:	20005e84 	.word	0x20005e84
 800fc60:	20005e8c 	.word	0x20005e8c
 800fc64:	20005e88 	.word	0x20005e88
 800fc68:	20005e98 	.word	0x20005e98

0800fc6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc74:	4b28      	ldr	r3, [pc, #160]	@ (800fd18 <prvInsertBlockIntoFreeList+0xac>)
 800fc76:	60fb      	str	r3, [r7, #12]
 800fc78:	e002      	b.n	800fc80 <prvInsertBlockIntoFreeList+0x14>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	60fb      	str	r3, [r7, #12]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d8f7      	bhi.n	800fc7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	68ba      	ldr	r2, [r7, #8]
 800fc94:	4413      	add	r3, r2
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d108      	bne.n	800fcae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	685a      	ldr	r2, [r3, #4]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	441a      	add	r2, r3
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	68ba      	ldr	r2, [r7, #8]
 800fcb8:	441a      	add	r2, r3
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d118      	bne.n	800fcf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	4b15      	ldr	r3, [pc, #84]	@ (800fd1c <prvInsertBlockIntoFreeList+0xb0>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d00d      	beq.n	800fcea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	685a      	ldr	r2, [r3, #4]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	441a      	add	r2, r3
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	681a      	ldr	r2, [r3, #0]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	601a      	str	r2, [r3, #0]
 800fce8:	e008      	b.n	800fcfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fcea:	4b0c      	ldr	r3, [pc, #48]	@ (800fd1c <prvInsertBlockIntoFreeList+0xb0>)
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	e003      	b.n	800fcfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d002      	beq.n	800fd0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd0a:	bf00      	nop
 800fd0c:	3714      	adds	r7, #20
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	20005e7c 	.word	0x20005e7c
 800fd1c:	20005e84 	.word	0x20005e84

0800fd20 <__cvt>:
 800fd20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd24:	ec57 6b10 	vmov	r6, r7, d0
 800fd28:	2f00      	cmp	r7, #0
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	463b      	mov	r3, r7
 800fd30:	bfbb      	ittet	lt
 800fd32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fd36:	461f      	movlt	r7, r3
 800fd38:	2300      	movge	r3, #0
 800fd3a:	232d      	movlt	r3, #45	@ 0x2d
 800fd3c:	700b      	strb	r3, [r1, #0]
 800fd3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fd44:	4691      	mov	r9, r2
 800fd46:	f023 0820 	bic.w	r8, r3, #32
 800fd4a:	bfbc      	itt	lt
 800fd4c:	4632      	movlt	r2, r6
 800fd4e:	4616      	movlt	r6, r2
 800fd50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fd54:	d005      	beq.n	800fd62 <__cvt+0x42>
 800fd56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fd5a:	d100      	bne.n	800fd5e <__cvt+0x3e>
 800fd5c:	3401      	adds	r4, #1
 800fd5e:	2102      	movs	r1, #2
 800fd60:	e000      	b.n	800fd64 <__cvt+0x44>
 800fd62:	2103      	movs	r1, #3
 800fd64:	ab03      	add	r3, sp, #12
 800fd66:	9301      	str	r3, [sp, #4]
 800fd68:	ab02      	add	r3, sp, #8
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	ec47 6b10 	vmov	d0, r6, r7
 800fd70:	4653      	mov	r3, sl
 800fd72:	4622      	mov	r2, r4
 800fd74:	f000 fff4 	bl	8010d60 <_dtoa_r>
 800fd78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fd7c:	4605      	mov	r5, r0
 800fd7e:	d119      	bne.n	800fdb4 <__cvt+0x94>
 800fd80:	f019 0f01 	tst.w	r9, #1
 800fd84:	d00e      	beq.n	800fda4 <__cvt+0x84>
 800fd86:	eb00 0904 	add.w	r9, r0, r4
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	4630      	mov	r0, r6
 800fd90:	4639      	mov	r1, r7
 800fd92:	f7f0 fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd96:	b108      	cbz	r0, 800fd9c <__cvt+0x7c>
 800fd98:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd9c:	2230      	movs	r2, #48	@ 0x30
 800fd9e:	9b03      	ldr	r3, [sp, #12]
 800fda0:	454b      	cmp	r3, r9
 800fda2:	d31e      	bcc.n	800fde2 <__cvt+0xc2>
 800fda4:	9b03      	ldr	r3, [sp, #12]
 800fda6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fda8:	1b5b      	subs	r3, r3, r5
 800fdaa:	4628      	mov	r0, r5
 800fdac:	6013      	str	r3, [r2, #0]
 800fdae:	b004      	add	sp, #16
 800fdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fdb8:	eb00 0904 	add.w	r9, r0, r4
 800fdbc:	d1e5      	bne.n	800fd8a <__cvt+0x6a>
 800fdbe:	7803      	ldrb	r3, [r0, #0]
 800fdc0:	2b30      	cmp	r3, #48	@ 0x30
 800fdc2:	d10a      	bne.n	800fdda <__cvt+0xba>
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	4630      	mov	r0, r6
 800fdca:	4639      	mov	r1, r7
 800fdcc:	f7f0 fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 800fdd0:	b918      	cbnz	r0, 800fdda <__cvt+0xba>
 800fdd2:	f1c4 0401 	rsb	r4, r4, #1
 800fdd6:	f8ca 4000 	str.w	r4, [sl]
 800fdda:	f8da 3000 	ldr.w	r3, [sl]
 800fdde:	4499      	add	r9, r3
 800fde0:	e7d3      	b.n	800fd8a <__cvt+0x6a>
 800fde2:	1c59      	adds	r1, r3, #1
 800fde4:	9103      	str	r1, [sp, #12]
 800fde6:	701a      	strb	r2, [r3, #0]
 800fde8:	e7d9      	b.n	800fd9e <__cvt+0x7e>

0800fdea <__exponent>:
 800fdea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdec:	2900      	cmp	r1, #0
 800fdee:	bfba      	itte	lt
 800fdf0:	4249      	neglt	r1, r1
 800fdf2:	232d      	movlt	r3, #45	@ 0x2d
 800fdf4:	232b      	movge	r3, #43	@ 0x2b
 800fdf6:	2909      	cmp	r1, #9
 800fdf8:	7002      	strb	r2, [r0, #0]
 800fdfa:	7043      	strb	r3, [r0, #1]
 800fdfc:	dd29      	ble.n	800fe52 <__exponent+0x68>
 800fdfe:	f10d 0307 	add.w	r3, sp, #7
 800fe02:	461d      	mov	r5, r3
 800fe04:	270a      	movs	r7, #10
 800fe06:	461a      	mov	r2, r3
 800fe08:	fbb1 f6f7 	udiv	r6, r1, r7
 800fe0c:	fb07 1416 	mls	r4, r7, r6, r1
 800fe10:	3430      	adds	r4, #48	@ 0x30
 800fe12:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fe16:	460c      	mov	r4, r1
 800fe18:	2c63      	cmp	r4, #99	@ 0x63
 800fe1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe1e:	4631      	mov	r1, r6
 800fe20:	dcf1      	bgt.n	800fe06 <__exponent+0x1c>
 800fe22:	3130      	adds	r1, #48	@ 0x30
 800fe24:	1e94      	subs	r4, r2, #2
 800fe26:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fe2a:	1c41      	adds	r1, r0, #1
 800fe2c:	4623      	mov	r3, r4
 800fe2e:	42ab      	cmp	r3, r5
 800fe30:	d30a      	bcc.n	800fe48 <__exponent+0x5e>
 800fe32:	f10d 0309 	add.w	r3, sp, #9
 800fe36:	1a9b      	subs	r3, r3, r2
 800fe38:	42ac      	cmp	r4, r5
 800fe3a:	bf88      	it	hi
 800fe3c:	2300      	movhi	r3, #0
 800fe3e:	3302      	adds	r3, #2
 800fe40:	4403      	add	r3, r0
 800fe42:	1a18      	subs	r0, r3, r0
 800fe44:	b003      	add	sp, #12
 800fe46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe48:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fe4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fe50:	e7ed      	b.n	800fe2e <__exponent+0x44>
 800fe52:	2330      	movs	r3, #48	@ 0x30
 800fe54:	3130      	adds	r1, #48	@ 0x30
 800fe56:	7083      	strb	r3, [r0, #2]
 800fe58:	70c1      	strb	r1, [r0, #3]
 800fe5a:	1d03      	adds	r3, r0, #4
 800fe5c:	e7f1      	b.n	800fe42 <__exponent+0x58>
	...

0800fe60 <_printf_float>:
 800fe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	b08d      	sub	sp, #52	@ 0x34
 800fe66:	460c      	mov	r4, r1
 800fe68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fe6c:	4616      	mov	r6, r2
 800fe6e:	461f      	mov	r7, r3
 800fe70:	4605      	mov	r5, r0
 800fe72:	f000 fe07 	bl	8010a84 <_localeconv_r>
 800fe76:	6803      	ldr	r3, [r0, #0]
 800fe78:	9304      	str	r3, [sp, #16]
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7f0 fa00 	bl	8000280 <strlen>
 800fe80:	2300      	movs	r3, #0
 800fe82:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe84:	f8d8 3000 	ldr.w	r3, [r8]
 800fe88:	9005      	str	r0, [sp, #20]
 800fe8a:	3307      	adds	r3, #7
 800fe8c:	f023 0307 	bic.w	r3, r3, #7
 800fe90:	f103 0208 	add.w	r2, r3, #8
 800fe94:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fe98:	f8d4 b000 	ldr.w	fp, [r4]
 800fe9c:	f8c8 2000 	str.w	r2, [r8]
 800fea0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fea4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fea8:	9307      	str	r3, [sp, #28]
 800feaa:	f8cd 8018 	str.w	r8, [sp, #24]
 800feae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800feb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800feb6:	4b9c      	ldr	r3, [pc, #624]	@ (8010128 <_printf_float+0x2c8>)
 800feb8:	f04f 32ff 	mov.w	r2, #4294967295
 800febc:	f7f0 fe3e 	bl	8000b3c <__aeabi_dcmpun>
 800fec0:	bb70      	cbnz	r0, 800ff20 <_printf_float+0xc0>
 800fec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fec6:	4b98      	ldr	r3, [pc, #608]	@ (8010128 <_printf_float+0x2c8>)
 800fec8:	f04f 32ff 	mov.w	r2, #4294967295
 800fecc:	f7f0 fe18 	bl	8000b00 <__aeabi_dcmple>
 800fed0:	bb30      	cbnz	r0, 800ff20 <_printf_float+0xc0>
 800fed2:	2200      	movs	r2, #0
 800fed4:	2300      	movs	r3, #0
 800fed6:	4640      	mov	r0, r8
 800fed8:	4649      	mov	r1, r9
 800feda:	f7f0 fe07 	bl	8000aec <__aeabi_dcmplt>
 800fede:	b110      	cbz	r0, 800fee6 <_printf_float+0x86>
 800fee0:	232d      	movs	r3, #45	@ 0x2d
 800fee2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fee6:	4a91      	ldr	r2, [pc, #580]	@ (801012c <_printf_float+0x2cc>)
 800fee8:	4b91      	ldr	r3, [pc, #580]	@ (8010130 <_printf_float+0x2d0>)
 800feea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800feee:	bf8c      	ite	hi
 800fef0:	4690      	movhi	r8, r2
 800fef2:	4698      	movls	r8, r3
 800fef4:	2303      	movs	r3, #3
 800fef6:	6123      	str	r3, [r4, #16]
 800fef8:	f02b 0304 	bic.w	r3, fp, #4
 800fefc:	6023      	str	r3, [r4, #0]
 800fefe:	f04f 0900 	mov.w	r9, #0
 800ff02:	9700      	str	r7, [sp, #0]
 800ff04:	4633      	mov	r3, r6
 800ff06:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ff08:	4621      	mov	r1, r4
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f000 f9d2 	bl	80102b4 <_printf_common>
 800ff10:	3001      	adds	r0, #1
 800ff12:	f040 808d 	bne.w	8010030 <_printf_float+0x1d0>
 800ff16:	f04f 30ff 	mov.w	r0, #4294967295
 800ff1a:	b00d      	add	sp, #52	@ 0x34
 800ff1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff20:	4642      	mov	r2, r8
 800ff22:	464b      	mov	r3, r9
 800ff24:	4640      	mov	r0, r8
 800ff26:	4649      	mov	r1, r9
 800ff28:	f7f0 fe08 	bl	8000b3c <__aeabi_dcmpun>
 800ff2c:	b140      	cbz	r0, 800ff40 <_printf_float+0xe0>
 800ff2e:	464b      	mov	r3, r9
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	bfbc      	itt	lt
 800ff34:	232d      	movlt	r3, #45	@ 0x2d
 800ff36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ff3a:	4a7e      	ldr	r2, [pc, #504]	@ (8010134 <_printf_float+0x2d4>)
 800ff3c:	4b7e      	ldr	r3, [pc, #504]	@ (8010138 <_printf_float+0x2d8>)
 800ff3e:	e7d4      	b.n	800feea <_printf_float+0x8a>
 800ff40:	6863      	ldr	r3, [r4, #4]
 800ff42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ff46:	9206      	str	r2, [sp, #24]
 800ff48:	1c5a      	adds	r2, r3, #1
 800ff4a:	d13b      	bne.n	800ffc4 <_printf_float+0x164>
 800ff4c:	2306      	movs	r3, #6
 800ff4e:	6063      	str	r3, [r4, #4]
 800ff50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ff54:	2300      	movs	r3, #0
 800ff56:	6022      	str	r2, [r4, #0]
 800ff58:	9303      	str	r3, [sp, #12]
 800ff5a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ff5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ff60:	ab09      	add	r3, sp, #36	@ 0x24
 800ff62:	9300      	str	r3, [sp, #0]
 800ff64:	6861      	ldr	r1, [r4, #4]
 800ff66:	ec49 8b10 	vmov	d0, r8, r9
 800ff6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ff6e:	4628      	mov	r0, r5
 800ff70:	f7ff fed6 	bl	800fd20 <__cvt>
 800ff74:	9b06      	ldr	r3, [sp, #24]
 800ff76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff78:	2b47      	cmp	r3, #71	@ 0x47
 800ff7a:	4680      	mov	r8, r0
 800ff7c:	d129      	bne.n	800ffd2 <_printf_float+0x172>
 800ff7e:	1cc8      	adds	r0, r1, #3
 800ff80:	db02      	blt.n	800ff88 <_printf_float+0x128>
 800ff82:	6863      	ldr	r3, [r4, #4]
 800ff84:	4299      	cmp	r1, r3
 800ff86:	dd41      	ble.n	801000c <_printf_float+0x1ac>
 800ff88:	f1aa 0a02 	sub.w	sl, sl, #2
 800ff8c:	fa5f fa8a 	uxtb.w	sl, sl
 800ff90:	3901      	subs	r1, #1
 800ff92:	4652      	mov	r2, sl
 800ff94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ff98:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff9a:	f7ff ff26 	bl	800fdea <__exponent>
 800ff9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ffa0:	1813      	adds	r3, r2, r0
 800ffa2:	2a01      	cmp	r2, #1
 800ffa4:	4681      	mov	r9, r0
 800ffa6:	6123      	str	r3, [r4, #16]
 800ffa8:	dc02      	bgt.n	800ffb0 <_printf_float+0x150>
 800ffaa:	6822      	ldr	r2, [r4, #0]
 800ffac:	07d2      	lsls	r2, r2, #31
 800ffae:	d501      	bpl.n	800ffb4 <_printf_float+0x154>
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	6123      	str	r3, [r4, #16]
 800ffb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d0a2      	beq.n	800ff02 <_printf_float+0xa2>
 800ffbc:	232d      	movs	r3, #45	@ 0x2d
 800ffbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffc2:	e79e      	b.n	800ff02 <_printf_float+0xa2>
 800ffc4:	9a06      	ldr	r2, [sp, #24]
 800ffc6:	2a47      	cmp	r2, #71	@ 0x47
 800ffc8:	d1c2      	bne.n	800ff50 <_printf_float+0xf0>
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d1c0      	bne.n	800ff50 <_printf_float+0xf0>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	e7bd      	b.n	800ff4e <_printf_float+0xee>
 800ffd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ffd6:	d9db      	bls.n	800ff90 <_printf_float+0x130>
 800ffd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ffdc:	d118      	bne.n	8010010 <_printf_float+0x1b0>
 800ffde:	2900      	cmp	r1, #0
 800ffe0:	6863      	ldr	r3, [r4, #4]
 800ffe2:	dd0b      	ble.n	800fffc <_printf_float+0x19c>
 800ffe4:	6121      	str	r1, [r4, #16]
 800ffe6:	b913      	cbnz	r3, 800ffee <_printf_float+0x18e>
 800ffe8:	6822      	ldr	r2, [r4, #0]
 800ffea:	07d0      	lsls	r0, r2, #31
 800ffec:	d502      	bpl.n	800fff4 <_printf_float+0x194>
 800ffee:	3301      	adds	r3, #1
 800fff0:	440b      	add	r3, r1
 800fff2:	6123      	str	r3, [r4, #16]
 800fff4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fff6:	f04f 0900 	mov.w	r9, #0
 800fffa:	e7db      	b.n	800ffb4 <_printf_float+0x154>
 800fffc:	b913      	cbnz	r3, 8010004 <_printf_float+0x1a4>
 800fffe:	6822      	ldr	r2, [r4, #0]
 8010000:	07d2      	lsls	r2, r2, #31
 8010002:	d501      	bpl.n	8010008 <_printf_float+0x1a8>
 8010004:	3302      	adds	r3, #2
 8010006:	e7f4      	b.n	800fff2 <_printf_float+0x192>
 8010008:	2301      	movs	r3, #1
 801000a:	e7f2      	b.n	800fff2 <_printf_float+0x192>
 801000c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010012:	4299      	cmp	r1, r3
 8010014:	db05      	blt.n	8010022 <_printf_float+0x1c2>
 8010016:	6823      	ldr	r3, [r4, #0]
 8010018:	6121      	str	r1, [r4, #16]
 801001a:	07d8      	lsls	r0, r3, #31
 801001c:	d5ea      	bpl.n	800fff4 <_printf_float+0x194>
 801001e:	1c4b      	adds	r3, r1, #1
 8010020:	e7e7      	b.n	800fff2 <_printf_float+0x192>
 8010022:	2900      	cmp	r1, #0
 8010024:	bfd4      	ite	le
 8010026:	f1c1 0202 	rsble	r2, r1, #2
 801002a:	2201      	movgt	r2, #1
 801002c:	4413      	add	r3, r2
 801002e:	e7e0      	b.n	800fff2 <_printf_float+0x192>
 8010030:	6823      	ldr	r3, [r4, #0]
 8010032:	055a      	lsls	r2, r3, #21
 8010034:	d407      	bmi.n	8010046 <_printf_float+0x1e6>
 8010036:	6923      	ldr	r3, [r4, #16]
 8010038:	4642      	mov	r2, r8
 801003a:	4631      	mov	r1, r6
 801003c:	4628      	mov	r0, r5
 801003e:	47b8      	blx	r7
 8010040:	3001      	adds	r0, #1
 8010042:	d12b      	bne.n	801009c <_printf_float+0x23c>
 8010044:	e767      	b.n	800ff16 <_printf_float+0xb6>
 8010046:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801004a:	f240 80dd 	bls.w	8010208 <_printf_float+0x3a8>
 801004e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010052:	2200      	movs	r2, #0
 8010054:	2300      	movs	r3, #0
 8010056:	f7f0 fd3f 	bl	8000ad8 <__aeabi_dcmpeq>
 801005a:	2800      	cmp	r0, #0
 801005c:	d033      	beq.n	80100c6 <_printf_float+0x266>
 801005e:	4a37      	ldr	r2, [pc, #220]	@ (801013c <_printf_float+0x2dc>)
 8010060:	2301      	movs	r3, #1
 8010062:	4631      	mov	r1, r6
 8010064:	4628      	mov	r0, r5
 8010066:	47b8      	blx	r7
 8010068:	3001      	adds	r0, #1
 801006a:	f43f af54 	beq.w	800ff16 <_printf_float+0xb6>
 801006e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010072:	4543      	cmp	r3, r8
 8010074:	db02      	blt.n	801007c <_printf_float+0x21c>
 8010076:	6823      	ldr	r3, [r4, #0]
 8010078:	07d8      	lsls	r0, r3, #31
 801007a:	d50f      	bpl.n	801009c <_printf_float+0x23c>
 801007c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010080:	4631      	mov	r1, r6
 8010082:	4628      	mov	r0, r5
 8010084:	47b8      	blx	r7
 8010086:	3001      	adds	r0, #1
 8010088:	f43f af45 	beq.w	800ff16 <_printf_float+0xb6>
 801008c:	f04f 0900 	mov.w	r9, #0
 8010090:	f108 38ff 	add.w	r8, r8, #4294967295
 8010094:	f104 0a1a 	add.w	sl, r4, #26
 8010098:	45c8      	cmp	r8, r9
 801009a:	dc09      	bgt.n	80100b0 <_printf_float+0x250>
 801009c:	6823      	ldr	r3, [r4, #0]
 801009e:	079b      	lsls	r3, r3, #30
 80100a0:	f100 8103 	bmi.w	80102aa <_printf_float+0x44a>
 80100a4:	68e0      	ldr	r0, [r4, #12]
 80100a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100a8:	4298      	cmp	r0, r3
 80100aa:	bfb8      	it	lt
 80100ac:	4618      	movlt	r0, r3
 80100ae:	e734      	b.n	800ff1a <_printf_float+0xba>
 80100b0:	2301      	movs	r3, #1
 80100b2:	4652      	mov	r2, sl
 80100b4:	4631      	mov	r1, r6
 80100b6:	4628      	mov	r0, r5
 80100b8:	47b8      	blx	r7
 80100ba:	3001      	adds	r0, #1
 80100bc:	f43f af2b 	beq.w	800ff16 <_printf_float+0xb6>
 80100c0:	f109 0901 	add.w	r9, r9, #1
 80100c4:	e7e8      	b.n	8010098 <_printf_float+0x238>
 80100c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	dc39      	bgt.n	8010140 <_printf_float+0x2e0>
 80100cc:	4a1b      	ldr	r2, [pc, #108]	@ (801013c <_printf_float+0x2dc>)
 80100ce:	2301      	movs	r3, #1
 80100d0:	4631      	mov	r1, r6
 80100d2:	4628      	mov	r0, r5
 80100d4:	47b8      	blx	r7
 80100d6:	3001      	adds	r0, #1
 80100d8:	f43f af1d 	beq.w	800ff16 <_printf_float+0xb6>
 80100dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80100e0:	ea59 0303 	orrs.w	r3, r9, r3
 80100e4:	d102      	bne.n	80100ec <_printf_float+0x28c>
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	07d9      	lsls	r1, r3, #31
 80100ea:	d5d7      	bpl.n	801009c <_printf_float+0x23c>
 80100ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100f0:	4631      	mov	r1, r6
 80100f2:	4628      	mov	r0, r5
 80100f4:	47b8      	blx	r7
 80100f6:	3001      	adds	r0, #1
 80100f8:	f43f af0d 	beq.w	800ff16 <_printf_float+0xb6>
 80100fc:	f04f 0a00 	mov.w	sl, #0
 8010100:	f104 0b1a 	add.w	fp, r4, #26
 8010104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010106:	425b      	negs	r3, r3
 8010108:	4553      	cmp	r3, sl
 801010a:	dc01      	bgt.n	8010110 <_printf_float+0x2b0>
 801010c:	464b      	mov	r3, r9
 801010e:	e793      	b.n	8010038 <_printf_float+0x1d8>
 8010110:	2301      	movs	r3, #1
 8010112:	465a      	mov	r2, fp
 8010114:	4631      	mov	r1, r6
 8010116:	4628      	mov	r0, r5
 8010118:	47b8      	blx	r7
 801011a:	3001      	adds	r0, #1
 801011c:	f43f aefb 	beq.w	800ff16 <_printf_float+0xb6>
 8010120:	f10a 0a01 	add.w	sl, sl, #1
 8010124:	e7ee      	b.n	8010104 <_printf_float+0x2a4>
 8010126:	bf00      	nop
 8010128:	7fefffff 	.word	0x7fefffff
 801012c:	08014114 	.word	0x08014114
 8010130:	08014110 	.word	0x08014110
 8010134:	0801411c 	.word	0x0801411c
 8010138:	08014118 	.word	0x08014118
 801013c:	08014120 	.word	0x08014120
 8010140:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010142:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010146:	4553      	cmp	r3, sl
 8010148:	bfa8      	it	ge
 801014a:	4653      	movge	r3, sl
 801014c:	2b00      	cmp	r3, #0
 801014e:	4699      	mov	r9, r3
 8010150:	dc36      	bgt.n	80101c0 <_printf_float+0x360>
 8010152:	f04f 0b00 	mov.w	fp, #0
 8010156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801015a:	f104 021a 	add.w	r2, r4, #26
 801015e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010160:	9306      	str	r3, [sp, #24]
 8010162:	eba3 0309 	sub.w	r3, r3, r9
 8010166:	455b      	cmp	r3, fp
 8010168:	dc31      	bgt.n	80101ce <_printf_float+0x36e>
 801016a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801016c:	459a      	cmp	sl, r3
 801016e:	dc3a      	bgt.n	80101e6 <_printf_float+0x386>
 8010170:	6823      	ldr	r3, [r4, #0]
 8010172:	07da      	lsls	r2, r3, #31
 8010174:	d437      	bmi.n	80101e6 <_printf_float+0x386>
 8010176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010178:	ebaa 0903 	sub.w	r9, sl, r3
 801017c:	9b06      	ldr	r3, [sp, #24]
 801017e:	ebaa 0303 	sub.w	r3, sl, r3
 8010182:	4599      	cmp	r9, r3
 8010184:	bfa8      	it	ge
 8010186:	4699      	movge	r9, r3
 8010188:	f1b9 0f00 	cmp.w	r9, #0
 801018c:	dc33      	bgt.n	80101f6 <_printf_float+0x396>
 801018e:	f04f 0800 	mov.w	r8, #0
 8010192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010196:	f104 0b1a 	add.w	fp, r4, #26
 801019a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801019c:	ebaa 0303 	sub.w	r3, sl, r3
 80101a0:	eba3 0309 	sub.w	r3, r3, r9
 80101a4:	4543      	cmp	r3, r8
 80101a6:	f77f af79 	ble.w	801009c <_printf_float+0x23c>
 80101aa:	2301      	movs	r3, #1
 80101ac:	465a      	mov	r2, fp
 80101ae:	4631      	mov	r1, r6
 80101b0:	4628      	mov	r0, r5
 80101b2:	47b8      	blx	r7
 80101b4:	3001      	adds	r0, #1
 80101b6:	f43f aeae 	beq.w	800ff16 <_printf_float+0xb6>
 80101ba:	f108 0801 	add.w	r8, r8, #1
 80101be:	e7ec      	b.n	801019a <_printf_float+0x33a>
 80101c0:	4642      	mov	r2, r8
 80101c2:	4631      	mov	r1, r6
 80101c4:	4628      	mov	r0, r5
 80101c6:	47b8      	blx	r7
 80101c8:	3001      	adds	r0, #1
 80101ca:	d1c2      	bne.n	8010152 <_printf_float+0x2f2>
 80101cc:	e6a3      	b.n	800ff16 <_printf_float+0xb6>
 80101ce:	2301      	movs	r3, #1
 80101d0:	4631      	mov	r1, r6
 80101d2:	4628      	mov	r0, r5
 80101d4:	9206      	str	r2, [sp, #24]
 80101d6:	47b8      	blx	r7
 80101d8:	3001      	adds	r0, #1
 80101da:	f43f ae9c 	beq.w	800ff16 <_printf_float+0xb6>
 80101de:	9a06      	ldr	r2, [sp, #24]
 80101e0:	f10b 0b01 	add.w	fp, fp, #1
 80101e4:	e7bb      	b.n	801015e <_printf_float+0x2fe>
 80101e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101ea:	4631      	mov	r1, r6
 80101ec:	4628      	mov	r0, r5
 80101ee:	47b8      	blx	r7
 80101f0:	3001      	adds	r0, #1
 80101f2:	d1c0      	bne.n	8010176 <_printf_float+0x316>
 80101f4:	e68f      	b.n	800ff16 <_printf_float+0xb6>
 80101f6:	9a06      	ldr	r2, [sp, #24]
 80101f8:	464b      	mov	r3, r9
 80101fa:	4442      	add	r2, r8
 80101fc:	4631      	mov	r1, r6
 80101fe:	4628      	mov	r0, r5
 8010200:	47b8      	blx	r7
 8010202:	3001      	adds	r0, #1
 8010204:	d1c3      	bne.n	801018e <_printf_float+0x32e>
 8010206:	e686      	b.n	800ff16 <_printf_float+0xb6>
 8010208:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801020c:	f1ba 0f01 	cmp.w	sl, #1
 8010210:	dc01      	bgt.n	8010216 <_printf_float+0x3b6>
 8010212:	07db      	lsls	r3, r3, #31
 8010214:	d536      	bpl.n	8010284 <_printf_float+0x424>
 8010216:	2301      	movs	r3, #1
 8010218:	4642      	mov	r2, r8
 801021a:	4631      	mov	r1, r6
 801021c:	4628      	mov	r0, r5
 801021e:	47b8      	blx	r7
 8010220:	3001      	adds	r0, #1
 8010222:	f43f ae78 	beq.w	800ff16 <_printf_float+0xb6>
 8010226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801022a:	4631      	mov	r1, r6
 801022c:	4628      	mov	r0, r5
 801022e:	47b8      	blx	r7
 8010230:	3001      	adds	r0, #1
 8010232:	f43f ae70 	beq.w	800ff16 <_printf_float+0xb6>
 8010236:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801023a:	2200      	movs	r2, #0
 801023c:	2300      	movs	r3, #0
 801023e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010242:	f7f0 fc49 	bl	8000ad8 <__aeabi_dcmpeq>
 8010246:	b9c0      	cbnz	r0, 801027a <_printf_float+0x41a>
 8010248:	4653      	mov	r3, sl
 801024a:	f108 0201 	add.w	r2, r8, #1
 801024e:	4631      	mov	r1, r6
 8010250:	4628      	mov	r0, r5
 8010252:	47b8      	blx	r7
 8010254:	3001      	adds	r0, #1
 8010256:	d10c      	bne.n	8010272 <_printf_float+0x412>
 8010258:	e65d      	b.n	800ff16 <_printf_float+0xb6>
 801025a:	2301      	movs	r3, #1
 801025c:	465a      	mov	r2, fp
 801025e:	4631      	mov	r1, r6
 8010260:	4628      	mov	r0, r5
 8010262:	47b8      	blx	r7
 8010264:	3001      	adds	r0, #1
 8010266:	f43f ae56 	beq.w	800ff16 <_printf_float+0xb6>
 801026a:	f108 0801 	add.w	r8, r8, #1
 801026e:	45d0      	cmp	r8, sl
 8010270:	dbf3      	blt.n	801025a <_printf_float+0x3fa>
 8010272:	464b      	mov	r3, r9
 8010274:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010278:	e6df      	b.n	801003a <_printf_float+0x1da>
 801027a:	f04f 0800 	mov.w	r8, #0
 801027e:	f104 0b1a 	add.w	fp, r4, #26
 8010282:	e7f4      	b.n	801026e <_printf_float+0x40e>
 8010284:	2301      	movs	r3, #1
 8010286:	4642      	mov	r2, r8
 8010288:	e7e1      	b.n	801024e <_printf_float+0x3ee>
 801028a:	2301      	movs	r3, #1
 801028c:	464a      	mov	r2, r9
 801028e:	4631      	mov	r1, r6
 8010290:	4628      	mov	r0, r5
 8010292:	47b8      	blx	r7
 8010294:	3001      	adds	r0, #1
 8010296:	f43f ae3e 	beq.w	800ff16 <_printf_float+0xb6>
 801029a:	f108 0801 	add.w	r8, r8, #1
 801029e:	68e3      	ldr	r3, [r4, #12]
 80102a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80102a2:	1a5b      	subs	r3, r3, r1
 80102a4:	4543      	cmp	r3, r8
 80102a6:	dcf0      	bgt.n	801028a <_printf_float+0x42a>
 80102a8:	e6fc      	b.n	80100a4 <_printf_float+0x244>
 80102aa:	f04f 0800 	mov.w	r8, #0
 80102ae:	f104 0919 	add.w	r9, r4, #25
 80102b2:	e7f4      	b.n	801029e <_printf_float+0x43e>

080102b4 <_printf_common>:
 80102b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b8:	4616      	mov	r6, r2
 80102ba:	4698      	mov	r8, r3
 80102bc:	688a      	ldr	r2, [r1, #8]
 80102be:	690b      	ldr	r3, [r1, #16]
 80102c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80102c4:	4293      	cmp	r3, r2
 80102c6:	bfb8      	it	lt
 80102c8:	4613      	movlt	r3, r2
 80102ca:	6033      	str	r3, [r6, #0]
 80102cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80102d0:	4607      	mov	r7, r0
 80102d2:	460c      	mov	r4, r1
 80102d4:	b10a      	cbz	r2, 80102da <_printf_common+0x26>
 80102d6:	3301      	adds	r3, #1
 80102d8:	6033      	str	r3, [r6, #0]
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	0699      	lsls	r1, r3, #26
 80102de:	bf42      	ittt	mi
 80102e0:	6833      	ldrmi	r3, [r6, #0]
 80102e2:	3302      	addmi	r3, #2
 80102e4:	6033      	strmi	r3, [r6, #0]
 80102e6:	6825      	ldr	r5, [r4, #0]
 80102e8:	f015 0506 	ands.w	r5, r5, #6
 80102ec:	d106      	bne.n	80102fc <_printf_common+0x48>
 80102ee:	f104 0a19 	add.w	sl, r4, #25
 80102f2:	68e3      	ldr	r3, [r4, #12]
 80102f4:	6832      	ldr	r2, [r6, #0]
 80102f6:	1a9b      	subs	r3, r3, r2
 80102f8:	42ab      	cmp	r3, r5
 80102fa:	dc26      	bgt.n	801034a <_printf_common+0x96>
 80102fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010300:	6822      	ldr	r2, [r4, #0]
 8010302:	3b00      	subs	r3, #0
 8010304:	bf18      	it	ne
 8010306:	2301      	movne	r3, #1
 8010308:	0692      	lsls	r2, r2, #26
 801030a:	d42b      	bmi.n	8010364 <_printf_common+0xb0>
 801030c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010310:	4641      	mov	r1, r8
 8010312:	4638      	mov	r0, r7
 8010314:	47c8      	blx	r9
 8010316:	3001      	adds	r0, #1
 8010318:	d01e      	beq.n	8010358 <_printf_common+0xa4>
 801031a:	6823      	ldr	r3, [r4, #0]
 801031c:	6922      	ldr	r2, [r4, #16]
 801031e:	f003 0306 	and.w	r3, r3, #6
 8010322:	2b04      	cmp	r3, #4
 8010324:	bf02      	ittt	eq
 8010326:	68e5      	ldreq	r5, [r4, #12]
 8010328:	6833      	ldreq	r3, [r6, #0]
 801032a:	1aed      	subeq	r5, r5, r3
 801032c:	68a3      	ldr	r3, [r4, #8]
 801032e:	bf0c      	ite	eq
 8010330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010334:	2500      	movne	r5, #0
 8010336:	4293      	cmp	r3, r2
 8010338:	bfc4      	itt	gt
 801033a:	1a9b      	subgt	r3, r3, r2
 801033c:	18ed      	addgt	r5, r5, r3
 801033e:	2600      	movs	r6, #0
 8010340:	341a      	adds	r4, #26
 8010342:	42b5      	cmp	r5, r6
 8010344:	d11a      	bne.n	801037c <_printf_common+0xc8>
 8010346:	2000      	movs	r0, #0
 8010348:	e008      	b.n	801035c <_printf_common+0xa8>
 801034a:	2301      	movs	r3, #1
 801034c:	4652      	mov	r2, sl
 801034e:	4641      	mov	r1, r8
 8010350:	4638      	mov	r0, r7
 8010352:	47c8      	blx	r9
 8010354:	3001      	adds	r0, #1
 8010356:	d103      	bne.n	8010360 <_printf_common+0xac>
 8010358:	f04f 30ff 	mov.w	r0, #4294967295
 801035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010360:	3501      	adds	r5, #1
 8010362:	e7c6      	b.n	80102f2 <_printf_common+0x3e>
 8010364:	18e1      	adds	r1, r4, r3
 8010366:	1c5a      	adds	r2, r3, #1
 8010368:	2030      	movs	r0, #48	@ 0x30
 801036a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801036e:	4422      	add	r2, r4
 8010370:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010374:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010378:	3302      	adds	r3, #2
 801037a:	e7c7      	b.n	801030c <_printf_common+0x58>
 801037c:	2301      	movs	r3, #1
 801037e:	4622      	mov	r2, r4
 8010380:	4641      	mov	r1, r8
 8010382:	4638      	mov	r0, r7
 8010384:	47c8      	blx	r9
 8010386:	3001      	adds	r0, #1
 8010388:	d0e6      	beq.n	8010358 <_printf_common+0xa4>
 801038a:	3601      	adds	r6, #1
 801038c:	e7d9      	b.n	8010342 <_printf_common+0x8e>
	...

08010390 <_printf_i>:
 8010390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010394:	7e0f      	ldrb	r7, [r1, #24]
 8010396:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010398:	2f78      	cmp	r7, #120	@ 0x78
 801039a:	4691      	mov	r9, r2
 801039c:	4680      	mov	r8, r0
 801039e:	460c      	mov	r4, r1
 80103a0:	469a      	mov	sl, r3
 80103a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80103a6:	d807      	bhi.n	80103b8 <_printf_i+0x28>
 80103a8:	2f62      	cmp	r7, #98	@ 0x62
 80103aa:	d80a      	bhi.n	80103c2 <_printf_i+0x32>
 80103ac:	2f00      	cmp	r7, #0
 80103ae:	f000 80d1 	beq.w	8010554 <_printf_i+0x1c4>
 80103b2:	2f58      	cmp	r7, #88	@ 0x58
 80103b4:	f000 80b8 	beq.w	8010528 <_printf_i+0x198>
 80103b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80103c0:	e03a      	b.n	8010438 <_printf_i+0xa8>
 80103c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80103c6:	2b15      	cmp	r3, #21
 80103c8:	d8f6      	bhi.n	80103b8 <_printf_i+0x28>
 80103ca:	a101      	add	r1, pc, #4	@ (adr r1, 80103d0 <_printf_i+0x40>)
 80103cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103d0:	08010429 	.word	0x08010429
 80103d4:	0801043d 	.word	0x0801043d
 80103d8:	080103b9 	.word	0x080103b9
 80103dc:	080103b9 	.word	0x080103b9
 80103e0:	080103b9 	.word	0x080103b9
 80103e4:	080103b9 	.word	0x080103b9
 80103e8:	0801043d 	.word	0x0801043d
 80103ec:	080103b9 	.word	0x080103b9
 80103f0:	080103b9 	.word	0x080103b9
 80103f4:	080103b9 	.word	0x080103b9
 80103f8:	080103b9 	.word	0x080103b9
 80103fc:	0801053b 	.word	0x0801053b
 8010400:	08010467 	.word	0x08010467
 8010404:	080104f5 	.word	0x080104f5
 8010408:	080103b9 	.word	0x080103b9
 801040c:	080103b9 	.word	0x080103b9
 8010410:	0801055d 	.word	0x0801055d
 8010414:	080103b9 	.word	0x080103b9
 8010418:	08010467 	.word	0x08010467
 801041c:	080103b9 	.word	0x080103b9
 8010420:	080103b9 	.word	0x080103b9
 8010424:	080104fd 	.word	0x080104fd
 8010428:	6833      	ldr	r3, [r6, #0]
 801042a:	1d1a      	adds	r2, r3, #4
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	6032      	str	r2, [r6, #0]
 8010430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010434:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010438:	2301      	movs	r3, #1
 801043a:	e09c      	b.n	8010576 <_printf_i+0x1e6>
 801043c:	6833      	ldr	r3, [r6, #0]
 801043e:	6820      	ldr	r0, [r4, #0]
 8010440:	1d19      	adds	r1, r3, #4
 8010442:	6031      	str	r1, [r6, #0]
 8010444:	0606      	lsls	r6, r0, #24
 8010446:	d501      	bpl.n	801044c <_printf_i+0xbc>
 8010448:	681d      	ldr	r5, [r3, #0]
 801044a:	e003      	b.n	8010454 <_printf_i+0xc4>
 801044c:	0645      	lsls	r5, r0, #25
 801044e:	d5fb      	bpl.n	8010448 <_printf_i+0xb8>
 8010450:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010454:	2d00      	cmp	r5, #0
 8010456:	da03      	bge.n	8010460 <_printf_i+0xd0>
 8010458:	232d      	movs	r3, #45	@ 0x2d
 801045a:	426d      	negs	r5, r5
 801045c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010460:	4858      	ldr	r0, [pc, #352]	@ (80105c4 <_printf_i+0x234>)
 8010462:	230a      	movs	r3, #10
 8010464:	e011      	b.n	801048a <_printf_i+0xfa>
 8010466:	6821      	ldr	r1, [r4, #0]
 8010468:	6833      	ldr	r3, [r6, #0]
 801046a:	0608      	lsls	r0, r1, #24
 801046c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010470:	d402      	bmi.n	8010478 <_printf_i+0xe8>
 8010472:	0649      	lsls	r1, r1, #25
 8010474:	bf48      	it	mi
 8010476:	b2ad      	uxthmi	r5, r5
 8010478:	2f6f      	cmp	r7, #111	@ 0x6f
 801047a:	4852      	ldr	r0, [pc, #328]	@ (80105c4 <_printf_i+0x234>)
 801047c:	6033      	str	r3, [r6, #0]
 801047e:	bf14      	ite	ne
 8010480:	230a      	movne	r3, #10
 8010482:	2308      	moveq	r3, #8
 8010484:	2100      	movs	r1, #0
 8010486:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801048a:	6866      	ldr	r6, [r4, #4]
 801048c:	60a6      	str	r6, [r4, #8]
 801048e:	2e00      	cmp	r6, #0
 8010490:	db05      	blt.n	801049e <_printf_i+0x10e>
 8010492:	6821      	ldr	r1, [r4, #0]
 8010494:	432e      	orrs	r6, r5
 8010496:	f021 0104 	bic.w	r1, r1, #4
 801049a:	6021      	str	r1, [r4, #0]
 801049c:	d04b      	beq.n	8010536 <_printf_i+0x1a6>
 801049e:	4616      	mov	r6, r2
 80104a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80104a4:	fb03 5711 	mls	r7, r3, r1, r5
 80104a8:	5dc7      	ldrb	r7, [r0, r7]
 80104aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80104ae:	462f      	mov	r7, r5
 80104b0:	42bb      	cmp	r3, r7
 80104b2:	460d      	mov	r5, r1
 80104b4:	d9f4      	bls.n	80104a0 <_printf_i+0x110>
 80104b6:	2b08      	cmp	r3, #8
 80104b8:	d10b      	bne.n	80104d2 <_printf_i+0x142>
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	07df      	lsls	r7, r3, #31
 80104be:	d508      	bpl.n	80104d2 <_printf_i+0x142>
 80104c0:	6923      	ldr	r3, [r4, #16]
 80104c2:	6861      	ldr	r1, [r4, #4]
 80104c4:	4299      	cmp	r1, r3
 80104c6:	bfde      	ittt	le
 80104c8:	2330      	movle	r3, #48	@ 0x30
 80104ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80104ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80104d2:	1b92      	subs	r2, r2, r6
 80104d4:	6122      	str	r2, [r4, #16]
 80104d6:	f8cd a000 	str.w	sl, [sp]
 80104da:	464b      	mov	r3, r9
 80104dc:	aa03      	add	r2, sp, #12
 80104de:	4621      	mov	r1, r4
 80104e0:	4640      	mov	r0, r8
 80104e2:	f7ff fee7 	bl	80102b4 <_printf_common>
 80104e6:	3001      	adds	r0, #1
 80104e8:	d14a      	bne.n	8010580 <_printf_i+0x1f0>
 80104ea:	f04f 30ff 	mov.w	r0, #4294967295
 80104ee:	b004      	add	sp, #16
 80104f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104f4:	6823      	ldr	r3, [r4, #0]
 80104f6:	f043 0320 	orr.w	r3, r3, #32
 80104fa:	6023      	str	r3, [r4, #0]
 80104fc:	4832      	ldr	r0, [pc, #200]	@ (80105c8 <_printf_i+0x238>)
 80104fe:	2778      	movs	r7, #120	@ 0x78
 8010500:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010504:	6823      	ldr	r3, [r4, #0]
 8010506:	6831      	ldr	r1, [r6, #0]
 8010508:	061f      	lsls	r7, r3, #24
 801050a:	f851 5b04 	ldr.w	r5, [r1], #4
 801050e:	d402      	bmi.n	8010516 <_printf_i+0x186>
 8010510:	065f      	lsls	r7, r3, #25
 8010512:	bf48      	it	mi
 8010514:	b2ad      	uxthmi	r5, r5
 8010516:	6031      	str	r1, [r6, #0]
 8010518:	07d9      	lsls	r1, r3, #31
 801051a:	bf44      	itt	mi
 801051c:	f043 0320 	orrmi.w	r3, r3, #32
 8010520:	6023      	strmi	r3, [r4, #0]
 8010522:	b11d      	cbz	r5, 801052c <_printf_i+0x19c>
 8010524:	2310      	movs	r3, #16
 8010526:	e7ad      	b.n	8010484 <_printf_i+0xf4>
 8010528:	4826      	ldr	r0, [pc, #152]	@ (80105c4 <_printf_i+0x234>)
 801052a:	e7e9      	b.n	8010500 <_printf_i+0x170>
 801052c:	6823      	ldr	r3, [r4, #0]
 801052e:	f023 0320 	bic.w	r3, r3, #32
 8010532:	6023      	str	r3, [r4, #0]
 8010534:	e7f6      	b.n	8010524 <_printf_i+0x194>
 8010536:	4616      	mov	r6, r2
 8010538:	e7bd      	b.n	80104b6 <_printf_i+0x126>
 801053a:	6833      	ldr	r3, [r6, #0]
 801053c:	6825      	ldr	r5, [r4, #0]
 801053e:	6961      	ldr	r1, [r4, #20]
 8010540:	1d18      	adds	r0, r3, #4
 8010542:	6030      	str	r0, [r6, #0]
 8010544:	062e      	lsls	r6, r5, #24
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	d501      	bpl.n	801054e <_printf_i+0x1be>
 801054a:	6019      	str	r1, [r3, #0]
 801054c:	e002      	b.n	8010554 <_printf_i+0x1c4>
 801054e:	0668      	lsls	r0, r5, #25
 8010550:	d5fb      	bpl.n	801054a <_printf_i+0x1ba>
 8010552:	8019      	strh	r1, [r3, #0]
 8010554:	2300      	movs	r3, #0
 8010556:	6123      	str	r3, [r4, #16]
 8010558:	4616      	mov	r6, r2
 801055a:	e7bc      	b.n	80104d6 <_printf_i+0x146>
 801055c:	6833      	ldr	r3, [r6, #0]
 801055e:	1d1a      	adds	r2, r3, #4
 8010560:	6032      	str	r2, [r6, #0]
 8010562:	681e      	ldr	r6, [r3, #0]
 8010564:	6862      	ldr	r2, [r4, #4]
 8010566:	2100      	movs	r1, #0
 8010568:	4630      	mov	r0, r6
 801056a:	f7ef fe39 	bl	80001e0 <memchr>
 801056e:	b108      	cbz	r0, 8010574 <_printf_i+0x1e4>
 8010570:	1b80      	subs	r0, r0, r6
 8010572:	6060      	str	r0, [r4, #4]
 8010574:	6863      	ldr	r3, [r4, #4]
 8010576:	6123      	str	r3, [r4, #16]
 8010578:	2300      	movs	r3, #0
 801057a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801057e:	e7aa      	b.n	80104d6 <_printf_i+0x146>
 8010580:	6923      	ldr	r3, [r4, #16]
 8010582:	4632      	mov	r2, r6
 8010584:	4649      	mov	r1, r9
 8010586:	4640      	mov	r0, r8
 8010588:	47d0      	blx	sl
 801058a:	3001      	adds	r0, #1
 801058c:	d0ad      	beq.n	80104ea <_printf_i+0x15a>
 801058e:	6823      	ldr	r3, [r4, #0]
 8010590:	079b      	lsls	r3, r3, #30
 8010592:	d413      	bmi.n	80105bc <_printf_i+0x22c>
 8010594:	68e0      	ldr	r0, [r4, #12]
 8010596:	9b03      	ldr	r3, [sp, #12]
 8010598:	4298      	cmp	r0, r3
 801059a:	bfb8      	it	lt
 801059c:	4618      	movlt	r0, r3
 801059e:	e7a6      	b.n	80104ee <_printf_i+0x15e>
 80105a0:	2301      	movs	r3, #1
 80105a2:	4632      	mov	r2, r6
 80105a4:	4649      	mov	r1, r9
 80105a6:	4640      	mov	r0, r8
 80105a8:	47d0      	blx	sl
 80105aa:	3001      	adds	r0, #1
 80105ac:	d09d      	beq.n	80104ea <_printf_i+0x15a>
 80105ae:	3501      	adds	r5, #1
 80105b0:	68e3      	ldr	r3, [r4, #12]
 80105b2:	9903      	ldr	r1, [sp, #12]
 80105b4:	1a5b      	subs	r3, r3, r1
 80105b6:	42ab      	cmp	r3, r5
 80105b8:	dcf2      	bgt.n	80105a0 <_printf_i+0x210>
 80105ba:	e7eb      	b.n	8010594 <_printf_i+0x204>
 80105bc:	2500      	movs	r5, #0
 80105be:	f104 0619 	add.w	r6, r4, #25
 80105c2:	e7f5      	b.n	80105b0 <_printf_i+0x220>
 80105c4:	08014122 	.word	0x08014122
 80105c8:	08014133 	.word	0x08014133

080105cc <std>:
 80105cc:	2300      	movs	r3, #0
 80105ce:	b510      	push	{r4, lr}
 80105d0:	4604      	mov	r4, r0
 80105d2:	e9c0 3300 	strd	r3, r3, [r0]
 80105d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105da:	6083      	str	r3, [r0, #8]
 80105dc:	8181      	strh	r1, [r0, #12]
 80105de:	6643      	str	r3, [r0, #100]	@ 0x64
 80105e0:	81c2      	strh	r2, [r0, #14]
 80105e2:	6183      	str	r3, [r0, #24]
 80105e4:	4619      	mov	r1, r3
 80105e6:	2208      	movs	r2, #8
 80105e8:	305c      	adds	r0, #92	@ 0x5c
 80105ea:	f000 fa2f 	bl	8010a4c <memset>
 80105ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010624 <std+0x58>)
 80105f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80105f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010628 <std+0x5c>)
 80105f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80105f6:	4b0d      	ldr	r3, [pc, #52]	@ (801062c <std+0x60>)
 80105f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80105fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010630 <std+0x64>)
 80105fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80105fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010634 <std+0x68>)
 8010600:	6224      	str	r4, [r4, #32]
 8010602:	429c      	cmp	r4, r3
 8010604:	d006      	beq.n	8010614 <std+0x48>
 8010606:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801060a:	4294      	cmp	r4, r2
 801060c:	d002      	beq.n	8010614 <std+0x48>
 801060e:	33d0      	adds	r3, #208	@ 0xd0
 8010610:	429c      	cmp	r4, r3
 8010612:	d105      	bne.n	8010620 <std+0x54>
 8010614:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801061c:	f000 bb04 	b.w	8010c28 <__retarget_lock_init_recursive>
 8010620:	bd10      	pop	{r4, pc}
 8010622:	bf00      	nop
 8010624:	0801089d 	.word	0x0801089d
 8010628:	080108bf 	.word	0x080108bf
 801062c:	080108f7 	.word	0x080108f7
 8010630:	0801091b 	.word	0x0801091b
 8010634:	20005e9c 	.word	0x20005e9c

08010638 <stdio_exit_handler>:
 8010638:	4a02      	ldr	r2, [pc, #8]	@ (8010644 <stdio_exit_handler+0xc>)
 801063a:	4903      	ldr	r1, [pc, #12]	@ (8010648 <stdio_exit_handler+0x10>)
 801063c:	4803      	ldr	r0, [pc, #12]	@ (801064c <stdio_exit_handler+0x14>)
 801063e:	f000 b869 	b.w	8010714 <_fwalk_sglue>
 8010642:	bf00      	nop
 8010644:	2000007c 	.word	0x2000007c
 8010648:	08012831 	.word	0x08012831
 801064c:	2000008c 	.word	0x2000008c

08010650 <cleanup_stdio>:
 8010650:	6841      	ldr	r1, [r0, #4]
 8010652:	4b0c      	ldr	r3, [pc, #48]	@ (8010684 <cleanup_stdio+0x34>)
 8010654:	4299      	cmp	r1, r3
 8010656:	b510      	push	{r4, lr}
 8010658:	4604      	mov	r4, r0
 801065a:	d001      	beq.n	8010660 <cleanup_stdio+0x10>
 801065c:	f002 f8e8 	bl	8012830 <_fflush_r>
 8010660:	68a1      	ldr	r1, [r4, #8]
 8010662:	4b09      	ldr	r3, [pc, #36]	@ (8010688 <cleanup_stdio+0x38>)
 8010664:	4299      	cmp	r1, r3
 8010666:	d002      	beq.n	801066e <cleanup_stdio+0x1e>
 8010668:	4620      	mov	r0, r4
 801066a:	f002 f8e1 	bl	8012830 <_fflush_r>
 801066e:	68e1      	ldr	r1, [r4, #12]
 8010670:	4b06      	ldr	r3, [pc, #24]	@ (801068c <cleanup_stdio+0x3c>)
 8010672:	4299      	cmp	r1, r3
 8010674:	d004      	beq.n	8010680 <cleanup_stdio+0x30>
 8010676:	4620      	mov	r0, r4
 8010678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801067c:	f002 b8d8 	b.w	8012830 <_fflush_r>
 8010680:	bd10      	pop	{r4, pc}
 8010682:	bf00      	nop
 8010684:	20005e9c 	.word	0x20005e9c
 8010688:	20005f04 	.word	0x20005f04
 801068c:	20005f6c 	.word	0x20005f6c

08010690 <global_stdio_init.part.0>:
 8010690:	b510      	push	{r4, lr}
 8010692:	4b0b      	ldr	r3, [pc, #44]	@ (80106c0 <global_stdio_init.part.0+0x30>)
 8010694:	4c0b      	ldr	r4, [pc, #44]	@ (80106c4 <global_stdio_init.part.0+0x34>)
 8010696:	4a0c      	ldr	r2, [pc, #48]	@ (80106c8 <global_stdio_init.part.0+0x38>)
 8010698:	601a      	str	r2, [r3, #0]
 801069a:	4620      	mov	r0, r4
 801069c:	2200      	movs	r2, #0
 801069e:	2104      	movs	r1, #4
 80106a0:	f7ff ff94 	bl	80105cc <std>
 80106a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80106a8:	2201      	movs	r2, #1
 80106aa:	2109      	movs	r1, #9
 80106ac:	f7ff ff8e 	bl	80105cc <std>
 80106b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80106b4:	2202      	movs	r2, #2
 80106b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106ba:	2112      	movs	r1, #18
 80106bc:	f7ff bf86 	b.w	80105cc <std>
 80106c0:	20005fd4 	.word	0x20005fd4
 80106c4:	20005e9c 	.word	0x20005e9c
 80106c8:	08010639 	.word	0x08010639

080106cc <__sfp_lock_acquire>:
 80106cc:	4801      	ldr	r0, [pc, #4]	@ (80106d4 <__sfp_lock_acquire+0x8>)
 80106ce:	f000 baac 	b.w	8010c2a <__retarget_lock_acquire_recursive>
 80106d2:	bf00      	nop
 80106d4:	20005fdd 	.word	0x20005fdd

080106d8 <__sfp_lock_release>:
 80106d8:	4801      	ldr	r0, [pc, #4]	@ (80106e0 <__sfp_lock_release+0x8>)
 80106da:	f000 baa7 	b.w	8010c2c <__retarget_lock_release_recursive>
 80106de:	bf00      	nop
 80106e0:	20005fdd 	.word	0x20005fdd

080106e4 <__sinit>:
 80106e4:	b510      	push	{r4, lr}
 80106e6:	4604      	mov	r4, r0
 80106e8:	f7ff fff0 	bl	80106cc <__sfp_lock_acquire>
 80106ec:	6a23      	ldr	r3, [r4, #32]
 80106ee:	b11b      	cbz	r3, 80106f8 <__sinit+0x14>
 80106f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106f4:	f7ff bff0 	b.w	80106d8 <__sfp_lock_release>
 80106f8:	4b04      	ldr	r3, [pc, #16]	@ (801070c <__sinit+0x28>)
 80106fa:	6223      	str	r3, [r4, #32]
 80106fc:	4b04      	ldr	r3, [pc, #16]	@ (8010710 <__sinit+0x2c>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d1f5      	bne.n	80106f0 <__sinit+0xc>
 8010704:	f7ff ffc4 	bl	8010690 <global_stdio_init.part.0>
 8010708:	e7f2      	b.n	80106f0 <__sinit+0xc>
 801070a:	bf00      	nop
 801070c:	08010651 	.word	0x08010651
 8010710:	20005fd4 	.word	0x20005fd4

08010714 <_fwalk_sglue>:
 8010714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010718:	4607      	mov	r7, r0
 801071a:	4688      	mov	r8, r1
 801071c:	4614      	mov	r4, r2
 801071e:	2600      	movs	r6, #0
 8010720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010724:	f1b9 0901 	subs.w	r9, r9, #1
 8010728:	d505      	bpl.n	8010736 <_fwalk_sglue+0x22>
 801072a:	6824      	ldr	r4, [r4, #0]
 801072c:	2c00      	cmp	r4, #0
 801072e:	d1f7      	bne.n	8010720 <_fwalk_sglue+0xc>
 8010730:	4630      	mov	r0, r6
 8010732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010736:	89ab      	ldrh	r3, [r5, #12]
 8010738:	2b01      	cmp	r3, #1
 801073a:	d907      	bls.n	801074c <_fwalk_sglue+0x38>
 801073c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010740:	3301      	adds	r3, #1
 8010742:	d003      	beq.n	801074c <_fwalk_sglue+0x38>
 8010744:	4629      	mov	r1, r5
 8010746:	4638      	mov	r0, r7
 8010748:	47c0      	blx	r8
 801074a:	4306      	orrs	r6, r0
 801074c:	3568      	adds	r5, #104	@ 0x68
 801074e:	e7e9      	b.n	8010724 <_fwalk_sglue+0x10>

08010750 <iprintf>:
 8010750:	b40f      	push	{r0, r1, r2, r3}
 8010752:	b507      	push	{r0, r1, r2, lr}
 8010754:	4906      	ldr	r1, [pc, #24]	@ (8010770 <iprintf+0x20>)
 8010756:	ab04      	add	r3, sp, #16
 8010758:	6808      	ldr	r0, [r1, #0]
 801075a:	f853 2b04 	ldr.w	r2, [r3], #4
 801075e:	6881      	ldr	r1, [r0, #8]
 8010760:	9301      	str	r3, [sp, #4]
 8010762:	f001 fec9 	bl	80124f8 <_vfiprintf_r>
 8010766:	b003      	add	sp, #12
 8010768:	f85d eb04 	ldr.w	lr, [sp], #4
 801076c:	b004      	add	sp, #16
 801076e:	4770      	bx	lr
 8010770:	20000088 	.word	0x20000088

08010774 <_puts_r>:
 8010774:	6a03      	ldr	r3, [r0, #32]
 8010776:	b570      	push	{r4, r5, r6, lr}
 8010778:	6884      	ldr	r4, [r0, #8]
 801077a:	4605      	mov	r5, r0
 801077c:	460e      	mov	r6, r1
 801077e:	b90b      	cbnz	r3, 8010784 <_puts_r+0x10>
 8010780:	f7ff ffb0 	bl	80106e4 <__sinit>
 8010784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010786:	07db      	lsls	r3, r3, #31
 8010788:	d405      	bmi.n	8010796 <_puts_r+0x22>
 801078a:	89a3      	ldrh	r3, [r4, #12]
 801078c:	0598      	lsls	r0, r3, #22
 801078e:	d402      	bmi.n	8010796 <_puts_r+0x22>
 8010790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010792:	f000 fa4a 	bl	8010c2a <__retarget_lock_acquire_recursive>
 8010796:	89a3      	ldrh	r3, [r4, #12]
 8010798:	0719      	lsls	r1, r3, #28
 801079a:	d502      	bpl.n	80107a2 <_puts_r+0x2e>
 801079c:	6923      	ldr	r3, [r4, #16]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d135      	bne.n	801080e <_puts_r+0x9a>
 80107a2:	4621      	mov	r1, r4
 80107a4:	4628      	mov	r0, r5
 80107a6:	f000 f8fb 	bl	80109a0 <__swsetup_r>
 80107aa:	b380      	cbz	r0, 801080e <_puts_r+0x9a>
 80107ac:	f04f 35ff 	mov.w	r5, #4294967295
 80107b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80107b2:	07da      	lsls	r2, r3, #31
 80107b4:	d405      	bmi.n	80107c2 <_puts_r+0x4e>
 80107b6:	89a3      	ldrh	r3, [r4, #12]
 80107b8:	059b      	lsls	r3, r3, #22
 80107ba:	d402      	bmi.n	80107c2 <_puts_r+0x4e>
 80107bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107be:	f000 fa35 	bl	8010c2c <__retarget_lock_release_recursive>
 80107c2:	4628      	mov	r0, r5
 80107c4:	bd70      	pop	{r4, r5, r6, pc}
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	da04      	bge.n	80107d4 <_puts_r+0x60>
 80107ca:	69a2      	ldr	r2, [r4, #24]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	dc17      	bgt.n	8010800 <_puts_r+0x8c>
 80107d0:	290a      	cmp	r1, #10
 80107d2:	d015      	beq.n	8010800 <_puts_r+0x8c>
 80107d4:	6823      	ldr	r3, [r4, #0]
 80107d6:	1c5a      	adds	r2, r3, #1
 80107d8:	6022      	str	r2, [r4, #0]
 80107da:	7019      	strb	r1, [r3, #0]
 80107dc:	68a3      	ldr	r3, [r4, #8]
 80107de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80107e2:	3b01      	subs	r3, #1
 80107e4:	60a3      	str	r3, [r4, #8]
 80107e6:	2900      	cmp	r1, #0
 80107e8:	d1ed      	bne.n	80107c6 <_puts_r+0x52>
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	da11      	bge.n	8010812 <_puts_r+0x9e>
 80107ee:	4622      	mov	r2, r4
 80107f0:	210a      	movs	r1, #10
 80107f2:	4628      	mov	r0, r5
 80107f4:	f000 f895 	bl	8010922 <__swbuf_r>
 80107f8:	3001      	adds	r0, #1
 80107fa:	d0d7      	beq.n	80107ac <_puts_r+0x38>
 80107fc:	250a      	movs	r5, #10
 80107fe:	e7d7      	b.n	80107b0 <_puts_r+0x3c>
 8010800:	4622      	mov	r2, r4
 8010802:	4628      	mov	r0, r5
 8010804:	f000 f88d 	bl	8010922 <__swbuf_r>
 8010808:	3001      	adds	r0, #1
 801080a:	d1e7      	bne.n	80107dc <_puts_r+0x68>
 801080c:	e7ce      	b.n	80107ac <_puts_r+0x38>
 801080e:	3e01      	subs	r6, #1
 8010810:	e7e4      	b.n	80107dc <_puts_r+0x68>
 8010812:	6823      	ldr	r3, [r4, #0]
 8010814:	1c5a      	adds	r2, r3, #1
 8010816:	6022      	str	r2, [r4, #0]
 8010818:	220a      	movs	r2, #10
 801081a:	701a      	strb	r2, [r3, #0]
 801081c:	e7ee      	b.n	80107fc <_puts_r+0x88>
	...

08010820 <puts>:
 8010820:	4b02      	ldr	r3, [pc, #8]	@ (801082c <puts+0xc>)
 8010822:	4601      	mov	r1, r0
 8010824:	6818      	ldr	r0, [r3, #0]
 8010826:	f7ff bfa5 	b.w	8010774 <_puts_r>
 801082a:	bf00      	nop
 801082c:	20000088 	.word	0x20000088

08010830 <sniprintf>:
 8010830:	b40c      	push	{r2, r3}
 8010832:	b530      	push	{r4, r5, lr}
 8010834:	4b18      	ldr	r3, [pc, #96]	@ (8010898 <sniprintf+0x68>)
 8010836:	1e0c      	subs	r4, r1, #0
 8010838:	681d      	ldr	r5, [r3, #0]
 801083a:	b09d      	sub	sp, #116	@ 0x74
 801083c:	da08      	bge.n	8010850 <sniprintf+0x20>
 801083e:	238b      	movs	r3, #139	@ 0x8b
 8010840:	602b      	str	r3, [r5, #0]
 8010842:	f04f 30ff 	mov.w	r0, #4294967295
 8010846:	b01d      	add	sp, #116	@ 0x74
 8010848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801084c:	b002      	add	sp, #8
 801084e:	4770      	bx	lr
 8010850:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010854:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010858:	f04f 0300 	mov.w	r3, #0
 801085c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801085e:	bf14      	ite	ne
 8010860:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010864:	4623      	moveq	r3, r4
 8010866:	9304      	str	r3, [sp, #16]
 8010868:	9307      	str	r3, [sp, #28]
 801086a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801086e:	9002      	str	r0, [sp, #8]
 8010870:	9006      	str	r0, [sp, #24]
 8010872:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010876:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010878:	ab21      	add	r3, sp, #132	@ 0x84
 801087a:	a902      	add	r1, sp, #8
 801087c:	4628      	mov	r0, r5
 801087e:	9301      	str	r3, [sp, #4]
 8010880:	f001 fd14 	bl	80122ac <_svfiprintf_r>
 8010884:	1c43      	adds	r3, r0, #1
 8010886:	bfbc      	itt	lt
 8010888:	238b      	movlt	r3, #139	@ 0x8b
 801088a:	602b      	strlt	r3, [r5, #0]
 801088c:	2c00      	cmp	r4, #0
 801088e:	d0da      	beq.n	8010846 <sniprintf+0x16>
 8010890:	9b02      	ldr	r3, [sp, #8]
 8010892:	2200      	movs	r2, #0
 8010894:	701a      	strb	r2, [r3, #0]
 8010896:	e7d6      	b.n	8010846 <sniprintf+0x16>
 8010898:	20000088 	.word	0x20000088

0801089c <__sread>:
 801089c:	b510      	push	{r4, lr}
 801089e:	460c      	mov	r4, r1
 80108a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a4:	f000 f972 	bl	8010b8c <_read_r>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	bfab      	itete	ge
 80108ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80108ae:	89a3      	ldrhlt	r3, [r4, #12]
 80108b0:	181b      	addge	r3, r3, r0
 80108b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80108b6:	bfac      	ite	ge
 80108b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80108ba:	81a3      	strhlt	r3, [r4, #12]
 80108bc:	bd10      	pop	{r4, pc}

080108be <__swrite>:
 80108be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c2:	461f      	mov	r7, r3
 80108c4:	898b      	ldrh	r3, [r1, #12]
 80108c6:	05db      	lsls	r3, r3, #23
 80108c8:	4605      	mov	r5, r0
 80108ca:	460c      	mov	r4, r1
 80108cc:	4616      	mov	r6, r2
 80108ce:	d505      	bpl.n	80108dc <__swrite+0x1e>
 80108d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108d4:	2302      	movs	r3, #2
 80108d6:	2200      	movs	r2, #0
 80108d8:	f000 f946 	bl	8010b68 <_lseek_r>
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80108e6:	81a3      	strh	r3, [r4, #12]
 80108e8:	4632      	mov	r2, r6
 80108ea:	463b      	mov	r3, r7
 80108ec:	4628      	mov	r0, r5
 80108ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108f2:	f000 b95d 	b.w	8010bb0 <_write_r>

080108f6 <__sseek>:
 80108f6:	b510      	push	{r4, lr}
 80108f8:	460c      	mov	r4, r1
 80108fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108fe:	f000 f933 	bl	8010b68 <_lseek_r>
 8010902:	1c43      	adds	r3, r0, #1
 8010904:	89a3      	ldrh	r3, [r4, #12]
 8010906:	bf15      	itete	ne
 8010908:	6560      	strne	r0, [r4, #84]	@ 0x54
 801090a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801090e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010912:	81a3      	strheq	r3, [r4, #12]
 8010914:	bf18      	it	ne
 8010916:	81a3      	strhne	r3, [r4, #12]
 8010918:	bd10      	pop	{r4, pc}

0801091a <__sclose>:
 801091a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801091e:	f000 b8b5 	b.w	8010a8c <_close_r>

08010922 <__swbuf_r>:
 8010922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010924:	460e      	mov	r6, r1
 8010926:	4614      	mov	r4, r2
 8010928:	4605      	mov	r5, r0
 801092a:	b118      	cbz	r0, 8010934 <__swbuf_r+0x12>
 801092c:	6a03      	ldr	r3, [r0, #32]
 801092e:	b90b      	cbnz	r3, 8010934 <__swbuf_r+0x12>
 8010930:	f7ff fed8 	bl	80106e4 <__sinit>
 8010934:	69a3      	ldr	r3, [r4, #24]
 8010936:	60a3      	str	r3, [r4, #8]
 8010938:	89a3      	ldrh	r3, [r4, #12]
 801093a:	071a      	lsls	r2, r3, #28
 801093c:	d501      	bpl.n	8010942 <__swbuf_r+0x20>
 801093e:	6923      	ldr	r3, [r4, #16]
 8010940:	b943      	cbnz	r3, 8010954 <__swbuf_r+0x32>
 8010942:	4621      	mov	r1, r4
 8010944:	4628      	mov	r0, r5
 8010946:	f000 f82b 	bl	80109a0 <__swsetup_r>
 801094a:	b118      	cbz	r0, 8010954 <__swbuf_r+0x32>
 801094c:	f04f 37ff 	mov.w	r7, #4294967295
 8010950:	4638      	mov	r0, r7
 8010952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010954:	6823      	ldr	r3, [r4, #0]
 8010956:	6922      	ldr	r2, [r4, #16]
 8010958:	1a98      	subs	r0, r3, r2
 801095a:	6963      	ldr	r3, [r4, #20]
 801095c:	b2f6      	uxtb	r6, r6
 801095e:	4283      	cmp	r3, r0
 8010960:	4637      	mov	r7, r6
 8010962:	dc05      	bgt.n	8010970 <__swbuf_r+0x4e>
 8010964:	4621      	mov	r1, r4
 8010966:	4628      	mov	r0, r5
 8010968:	f001 ff62 	bl	8012830 <_fflush_r>
 801096c:	2800      	cmp	r0, #0
 801096e:	d1ed      	bne.n	801094c <__swbuf_r+0x2a>
 8010970:	68a3      	ldr	r3, [r4, #8]
 8010972:	3b01      	subs	r3, #1
 8010974:	60a3      	str	r3, [r4, #8]
 8010976:	6823      	ldr	r3, [r4, #0]
 8010978:	1c5a      	adds	r2, r3, #1
 801097a:	6022      	str	r2, [r4, #0]
 801097c:	701e      	strb	r6, [r3, #0]
 801097e:	6962      	ldr	r2, [r4, #20]
 8010980:	1c43      	adds	r3, r0, #1
 8010982:	429a      	cmp	r2, r3
 8010984:	d004      	beq.n	8010990 <__swbuf_r+0x6e>
 8010986:	89a3      	ldrh	r3, [r4, #12]
 8010988:	07db      	lsls	r3, r3, #31
 801098a:	d5e1      	bpl.n	8010950 <__swbuf_r+0x2e>
 801098c:	2e0a      	cmp	r6, #10
 801098e:	d1df      	bne.n	8010950 <__swbuf_r+0x2e>
 8010990:	4621      	mov	r1, r4
 8010992:	4628      	mov	r0, r5
 8010994:	f001 ff4c 	bl	8012830 <_fflush_r>
 8010998:	2800      	cmp	r0, #0
 801099a:	d0d9      	beq.n	8010950 <__swbuf_r+0x2e>
 801099c:	e7d6      	b.n	801094c <__swbuf_r+0x2a>
	...

080109a0 <__swsetup_r>:
 80109a0:	b538      	push	{r3, r4, r5, lr}
 80109a2:	4b29      	ldr	r3, [pc, #164]	@ (8010a48 <__swsetup_r+0xa8>)
 80109a4:	4605      	mov	r5, r0
 80109a6:	6818      	ldr	r0, [r3, #0]
 80109a8:	460c      	mov	r4, r1
 80109aa:	b118      	cbz	r0, 80109b4 <__swsetup_r+0x14>
 80109ac:	6a03      	ldr	r3, [r0, #32]
 80109ae:	b90b      	cbnz	r3, 80109b4 <__swsetup_r+0x14>
 80109b0:	f7ff fe98 	bl	80106e4 <__sinit>
 80109b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109b8:	0719      	lsls	r1, r3, #28
 80109ba:	d422      	bmi.n	8010a02 <__swsetup_r+0x62>
 80109bc:	06da      	lsls	r2, r3, #27
 80109be:	d407      	bmi.n	80109d0 <__swsetup_r+0x30>
 80109c0:	2209      	movs	r2, #9
 80109c2:	602a      	str	r2, [r5, #0]
 80109c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109c8:	81a3      	strh	r3, [r4, #12]
 80109ca:	f04f 30ff 	mov.w	r0, #4294967295
 80109ce:	e033      	b.n	8010a38 <__swsetup_r+0x98>
 80109d0:	0758      	lsls	r0, r3, #29
 80109d2:	d512      	bpl.n	80109fa <__swsetup_r+0x5a>
 80109d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109d6:	b141      	cbz	r1, 80109ea <__swsetup_r+0x4a>
 80109d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109dc:	4299      	cmp	r1, r3
 80109de:	d002      	beq.n	80109e6 <__swsetup_r+0x46>
 80109e0:	4628      	mov	r0, r5
 80109e2:	f000 ff8d 	bl	8011900 <_free_r>
 80109e6:	2300      	movs	r3, #0
 80109e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80109ea:	89a3      	ldrh	r3, [r4, #12]
 80109ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80109f0:	81a3      	strh	r3, [r4, #12]
 80109f2:	2300      	movs	r3, #0
 80109f4:	6063      	str	r3, [r4, #4]
 80109f6:	6923      	ldr	r3, [r4, #16]
 80109f8:	6023      	str	r3, [r4, #0]
 80109fa:	89a3      	ldrh	r3, [r4, #12]
 80109fc:	f043 0308 	orr.w	r3, r3, #8
 8010a00:	81a3      	strh	r3, [r4, #12]
 8010a02:	6923      	ldr	r3, [r4, #16]
 8010a04:	b94b      	cbnz	r3, 8010a1a <__swsetup_r+0x7a>
 8010a06:	89a3      	ldrh	r3, [r4, #12]
 8010a08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a10:	d003      	beq.n	8010a1a <__swsetup_r+0x7a>
 8010a12:	4621      	mov	r1, r4
 8010a14:	4628      	mov	r0, r5
 8010a16:	f001 ff59 	bl	80128cc <__smakebuf_r>
 8010a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a1e:	f013 0201 	ands.w	r2, r3, #1
 8010a22:	d00a      	beq.n	8010a3a <__swsetup_r+0x9a>
 8010a24:	2200      	movs	r2, #0
 8010a26:	60a2      	str	r2, [r4, #8]
 8010a28:	6962      	ldr	r2, [r4, #20]
 8010a2a:	4252      	negs	r2, r2
 8010a2c:	61a2      	str	r2, [r4, #24]
 8010a2e:	6922      	ldr	r2, [r4, #16]
 8010a30:	b942      	cbnz	r2, 8010a44 <__swsetup_r+0xa4>
 8010a32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010a36:	d1c5      	bne.n	80109c4 <__swsetup_r+0x24>
 8010a38:	bd38      	pop	{r3, r4, r5, pc}
 8010a3a:	0799      	lsls	r1, r3, #30
 8010a3c:	bf58      	it	pl
 8010a3e:	6962      	ldrpl	r2, [r4, #20]
 8010a40:	60a2      	str	r2, [r4, #8]
 8010a42:	e7f4      	b.n	8010a2e <__swsetup_r+0x8e>
 8010a44:	2000      	movs	r0, #0
 8010a46:	e7f7      	b.n	8010a38 <__swsetup_r+0x98>
 8010a48:	20000088 	.word	0x20000088

08010a4c <memset>:
 8010a4c:	4402      	add	r2, r0
 8010a4e:	4603      	mov	r3, r0
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d100      	bne.n	8010a56 <memset+0xa>
 8010a54:	4770      	bx	lr
 8010a56:	f803 1b01 	strb.w	r1, [r3], #1
 8010a5a:	e7f9      	b.n	8010a50 <memset+0x4>

08010a5c <strncat>:
 8010a5c:	b530      	push	{r4, r5, lr}
 8010a5e:	4604      	mov	r4, r0
 8010a60:	7825      	ldrb	r5, [r4, #0]
 8010a62:	4623      	mov	r3, r4
 8010a64:	3401      	adds	r4, #1
 8010a66:	2d00      	cmp	r5, #0
 8010a68:	d1fa      	bne.n	8010a60 <strncat+0x4>
 8010a6a:	3a01      	subs	r2, #1
 8010a6c:	d304      	bcc.n	8010a78 <strncat+0x1c>
 8010a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a72:	f803 4b01 	strb.w	r4, [r3], #1
 8010a76:	b904      	cbnz	r4, 8010a7a <strncat+0x1e>
 8010a78:	bd30      	pop	{r4, r5, pc}
 8010a7a:	2a00      	cmp	r2, #0
 8010a7c:	d1f5      	bne.n	8010a6a <strncat+0xe>
 8010a7e:	701a      	strb	r2, [r3, #0]
 8010a80:	e7f3      	b.n	8010a6a <strncat+0xe>
	...

08010a84 <_localeconv_r>:
 8010a84:	4800      	ldr	r0, [pc, #0]	@ (8010a88 <_localeconv_r+0x4>)
 8010a86:	4770      	bx	lr
 8010a88:	200001c8 	.word	0x200001c8

08010a8c <_close_r>:
 8010a8c:	b538      	push	{r3, r4, r5, lr}
 8010a8e:	4d06      	ldr	r5, [pc, #24]	@ (8010aa8 <_close_r+0x1c>)
 8010a90:	2300      	movs	r3, #0
 8010a92:	4604      	mov	r4, r0
 8010a94:	4608      	mov	r0, r1
 8010a96:	602b      	str	r3, [r5, #0]
 8010a98:	f7f3 fc90 	bl	80043bc <_close>
 8010a9c:	1c43      	adds	r3, r0, #1
 8010a9e:	d102      	bne.n	8010aa6 <_close_r+0x1a>
 8010aa0:	682b      	ldr	r3, [r5, #0]
 8010aa2:	b103      	cbz	r3, 8010aa6 <_close_r+0x1a>
 8010aa4:	6023      	str	r3, [r4, #0]
 8010aa6:	bd38      	pop	{r3, r4, r5, pc}
 8010aa8:	20005fd8 	.word	0x20005fd8

08010aac <_reclaim_reent>:
 8010aac:	4b2d      	ldr	r3, [pc, #180]	@ (8010b64 <_reclaim_reent+0xb8>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4283      	cmp	r3, r0
 8010ab2:	b570      	push	{r4, r5, r6, lr}
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	d053      	beq.n	8010b60 <_reclaim_reent+0xb4>
 8010ab8:	69c3      	ldr	r3, [r0, #28]
 8010aba:	b31b      	cbz	r3, 8010b04 <_reclaim_reent+0x58>
 8010abc:	68db      	ldr	r3, [r3, #12]
 8010abe:	b163      	cbz	r3, 8010ada <_reclaim_reent+0x2e>
 8010ac0:	2500      	movs	r5, #0
 8010ac2:	69e3      	ldr	r3, [r4, #28]
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	5959      	ldr	r1, [r3, r5]
 8010ac8:	b9b1      	cbnz	r1, 8010af8 <_reclaim_reent+0x4c>
 8010aca:	3504      	adds	r5, #4
 8010acc:	2d80      	cmp	r5, #128	@ 0x80
 8010ace:	d1f8      	bne.n	8010ac2 <_reclaim_reent+0x16>
 8010ad0:	69e3      	ldr	r3, [r4, #28]
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	68d9      	ldr	r1, [r3, #12]
 8010ad6:	f000 ff13 	bl	8011900 <_free_r>
 8010ada:	69e3      	ldr	r3, [r4, #28]
 8010adc:	6819      	ldr	r1, [r3, #0]
 8010ade:	b111      	cbz	r1, 8010ae6 <_reclaim_reent+0x3a>
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f000 ff0d 	bl	8011900 <_free_r>
 8010ae6:	69e3      	ldr	r3, [r4, #28]
 8010ae8:	689d      	ldr	r5, [r3, #8]
 8010aea:	b15d      	cbz	r5, 8010b04 <_reclaim_reent+0x58>
 8010aec:	4629      	mov	r1, r5
 8010aee:	4620      	mov	r0, r4
 8010af0:	682d      	ldr	r5, [r5, #0]
 8010af2:	f000 ff05 	bl	8011900 <_free_r>
 8010af6:	e7f8      	b.n	8010aea <_reclaim_reent+0x3e>
 8010af8:	680e      	ldr	r6, [r1, #0]
 8010afa:	4620      	mov	r0, r4
 8010afc:	f000 ff00 	bl	8011900 <_free_r>
 8010b00:	4631      	mov	r1, r6
 8010b02:	e7e1      	b.n	8010ac8 <_reclaim_reent+0x1c>
 8010b04:	6961      	ldr	r1, [r4, #20]
 8010b06:	b111      	cbz	r1, 8010b0e <_reclaim_reent+0x62>
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f000 fef9 	bl	8011900 <_free_r>
 8010b0e:	69e1      	ldr	r1, [r4, #28]
 8010b10:	b111      	cbz	r1, 8010b18 <_reclaim_reent+0x6c>
 8010b12:	4620      	mov	r0, r4
 8010b14:	f000 fef4 	bl	8011900 <_free_r>
 8010b18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010b1a:	b111      	cbz	r1, 8010b22 <_reclaim_reent+0x76>
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f000 feef 	bl	8011900 <_free_r>
 8010b22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b24:	b111      	cbz	r1, 8010b2c <_reclaim_reent+0x80>
 8010b26:	4620      	mov	r0, r4
 8010b28:	f000 feea 	bl	8011900 <_free_r>
 8010b2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010b2e:	b111      	cbz	r1, 8010b36 <_reclaim_reent+0x8a>
 8010b30:	4620      	mov	r0, r4
 8010b32:	f000 fee5 	bl	8011900 <_free_r>
 8010b36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010b38:	b111      	cbz	r1, 8010b40 <_reclaim_reent+0x94>
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f000 fee0 	bl	8011900 <_free_r>
 8010b40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010b42:	b111      	cbz	r1, 8010b4a <_reclaim_reent+0x9e>
 8010b44:	4620      	mov	r0, r4
 8010b46:	f000 fedb 	bl	8011900 <_free_r>
 8010b4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010b4c:	b111      	cbz	r1, 8010b54 <_reclaim_reent+0xa8>
 8010b4e:	4620      	mov	r0, r4
 8010b50:	f000 fed6 	bl	8011900 <_free_r>
 8010b54:	6a23      	ldr	r3, [r4, #32]
 8010b56:	b11b      	cbz	r3, 8010b60 <_reclaim_reent+0xb4>
 8010b58:	4620      	mov	r0, r4
 8010b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b5e:	4718      	bx	r3
 8010b60:	bd70      	pop	{r4, r5, r6, pc}
 8010b62:	bf00      	nop
 8010b64:	20000088 	.word	0x20000088

08010b68 <_lseek_r>:
 8010b68:	b538      	push	{r3, r4, r5, lr}
 8010b6a:	4d07      	ldr	r5, [pc, #28]	@ (8010b88 <_lseek_r+0x20>)
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	4608      	mov	r0, r1
 8010b70:	4611      	mov	r1, r2
 8010b72:	2200      	movs	r2, #0
 8010b74:	602a      	str	r2, [r5, #0]
 8010b76:	461a      	mov	r2, r3
 8010b78:	f7f3 fc47 	bl	800440a <_lseek>
 8010b7c:	1c43      	adds	r3, r0, #1
 8010b7e:	d102      	bne.n	8010b86 <_lseek_r+0x1e>
 8010b80:	682b      	ldr	r3, [r5, #0]
 8010b82:	b103      	cbz	r3, 8010b86 <_lseek_r+0x1e>
 8010b84:	6023      	str	r3, [r4, #0]
 8010b86:	bd38      	pop	{r3, r4, r5, pc}
 8010b88:	20005fd8 	.word	0x20005fd8

08010b8c <_read_r>:
 8010b8c:	b538      	push	{r3, r4, r5, lr}
 8010b8e:	4d07      	ldr	r5, [pc, #28]	@ (8010bac <_read_r+0x20>)
 8010b90:	4604      	mov	r4, r0
 8010b92:	4608      	mov	r0, r1
 8010b94:	4611      	mov	r1, r2
 8010b96:	2200      	movs	r2, #0
 8010b98:	602a      	str	r2, [r5, #0]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	f7f3 fbf1 	bl	8004382 <_read>
 8010ba0:	1c43      	adds	r3, r0, #1
 8010ba2:	d102      	bne.n	8010baa <_read_r+0x1e>
 8010ba4:	682b      	ldr	r3, [r5, #0]
 8010ba6:	b103      	cbz	r3, 8010baa <_read_r+0x1e>
 8010ba8:	6023      	str	r3, [r4, #0]
 8010baa:	bd38      	pop	{r3, r4, r5, pc}
 8010bac:	20005fd8 	.word	0x20005fd8

08010bb0 <_write_r>:
 8010bb0:	b538      	push	{r3, r4, r5, lr}
 8010bb2:	4d07      	ldr	r5, [pc, #28]	@ (8010bd0 <_write_r+0x20>)
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	4608      	mov	r0, r1
 8010bb8:	4611      	mov	r1, r2
 8010bba:	2200      	movs	r2, #0
 8010bbc:	602a      	str	r2, [r5, #0]
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	f7f0 f9bc 	bl	8000f3c <_write>
 8010bc4:	1c43      	adds	r3, r0, #1
 8010bc6:	d102      	bne.n	8010bce <_write_r+0x1e>
 8010bc8:	682b      	ldr	r3, [r5, #0]
 8010bca:	b103      	cbz	r3, 8010bce <_write_r+0x1e>
 8010bcc:	6023      	str	r3, [r4, #0]
 8010bce:	bd38      	pop	{r3, r4, r5, pc}
 8010bd0:	20005fd8 	.word	0x20005fd8

08010bd4 <__errno>:
 8010bd4:	4b01      	ldr	r3, [pc, #4]	@ (8010bdc <__errno+0x8>)
 8010bd6:	6818      	ldr	r0, [r3, #0]
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	20000088 	.word	0x20000088

08010be0 <__libc_init_array>:
 8010be0:	b570      	push	{r4, r5, r6, lr}
 8010be2:	4d0d      	ldr	r5, [pc, #52]	@ (8010c18 <__libc_init_array+0x38>)
 8010be4:	4c0d      	ldr	r4, [pc, #52]	@ (8010c1c <__libc_init_array+0x3c>)
 8010be6:	1b64      	subs	r4, r4, r5
 8010be8:	10a4      	asrs	r4, r4, #2
 8010bea:	2600      	movs	r6, #0
 8010bec:	42a6      	cmp	r6, r4
 8010bee:	d109      	bne.n	8010c04 <__libc_init_array+0x24>
 8010bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8010c20 <__libc_init_array+0x40>)
 8010bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8010c24 <__libc_init_array+0x44>)
 8010bf4:	f002 f9ac 	bl	8012f50 <_init>
 8010bf8:	1b64      	subs	r4, r4, r5
 8010bfa:	10a4      	asrs	r4, r4, #2
 8010bfc:	2600      	movs	r6, #0
 8010bfe:	42a6      	cmp	r6, r4
 8010c00:	d105      	bne.n	8010c0e <__libc_init_array+0x2e>
 8010c02:	bd70      	pop	{r4, r5, r6, pc}
 8010c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c08:	4798      	blx	r3
 8010c0a:	3601      	adds	r6, #1
 8010c0c:	e7ee      	b.n	8010bec <__libc_init_array+0xc>
 8010c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c12:	4798      	blx	r3
 8010c14:	3601      	adds	r6, #1
 8010c16:	e7f2      	b.n	8010bfe <__libc_init_array+0x1e>
 8010c18:	080144c4 	.word	0x080144c4
 8010c1c:	080144c4 	.word	0x080144c4
 8010c20:	080144c4 	.word	0x080144c4
 8010c24:	080144c8 	.word	0x080144c8

08010c28 <__retarget_lock_init_recursive>:
 8010c28:	4770      	bx	lr

08010c2a <__retarget_lock_acquire_recursive>:
 8010c2a:	4770      	bx	lr

08010c2c <__retarget_lock_release_recursive>:
 8010c2c:	4770      	bx	lr

08010c2e <memcpy>:
 8010c2e:	440a      	add	r2, r1
 8010c30:	4291      	cmp	r1, r2
 8010c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c36:	d100      	bne.n	8010c3a <memcpy+0xc>
 8010c38:	4770      	bx	lr
 8010c3a:	b510      	push	{r4, lr}
 8010c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c44:	4291      	cmp	r1, r2
 8010c46:	d1f9      	bne.n	8010c3c <memcpy+0xe>
 8010c48:	bd10      	pop	{r4, pc}

08010c4a <quorem>:
 8010c4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4e:	6903      	ldr	r3, [r0, #16]
 8010c50:	690c      	ldr	r4, [r1, #16]
 8010c52:	42a3      	cmp	r3, r4
 8010c54:	4607      	mov	r7, r0
 8010c56:	db7e      	blt.n	8010d56 <quorem+0x10c>
 8010c58:	3c01      	subs	r4, #1
 8010c5a:	f101 0814 	add.w	r8, r1, #20
 8010c5e:	00a3      	lsls	r3, r4, #2
 8010c60:	f100 0514 	add.w	r5, r0, #20
 8010c64:	9300      	str	r3, [sp, #0]
 8010c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c6a:	9301      	str	r3, [sp, #4]
 8010c6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010c70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c74:	3301      	adds	r3, #1
 8010c76:	429a      	cmp	r2, r3
 8010c78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010c7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010c80:	d32e      	bcc.n	8010ce0 <quorem+0x96>
 8010c82:	f04f 0a00 	mov.w	sl, #0
 8010c86:	46c4      	mov	ip, r8
 8010c88:	46ae      	mov	lr, r5
 8010c8a:	46d3      	mov	fp, sl
 8010c8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010c90:	b298      	uxth	r0, r3
 8010c92:	fb06 a000 	mla	r0, r6, r0, sl
 8010c96:	0c02      	lsrs	r2, r0, #16
 8010c98:	0c1b      	lsrs	r3, r3, #16
 8010c9a:	fb06 2303 	mla	r3, r6, r3, r2
 8010c9e:	f8de 2000 	ldr.w	r2, [lr]
 8010ca2:	b280      	uxth	r0, r0
 8010ca4:	b292      	uxth	r2, r2
 8010ca6:	1a12      	subs	r2, r2, r0
 8010ca8:	445a      	add	r2, fp
 8010caa:	f8de 0000 	ldr.w	r0, [lr]
 8010cae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010cb8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010cbc:	b292      	uxth	r2, r2
 8010cbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010cc2:	45e1      	cmp	r9, ip
 8010cc4:	f84e 2b04 	str.w	r2, [lr], #4
 8010cc8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010ccc:	d2de      	bcs.n	8010c8c <quorem+0x42>
 8010cce:	9b00      	ldr	r3, [sp, #0]
 8010cd0:	58eb      	ldr	r3, [r5, r3]
 8010cd2:	b92b      	cbnz	r3, 8010ce0 <quorem+0x96>
 8010cd4:	9b01      	ldr	r3, [sp, #4]
 8010cd6:	3b04      	subs	r3, #4
 8010cd8:	429d      	cmp	r5, r3
 8010cda:	461a      	mov	r2, r3
 8010cdc:	d32f      	bcc.n	8010d3e <quorem+0xf4>
 8010cde:	613c      	str	r4, [r7, #16]
 8010ce0:	4638      	mov	r0, r7
 8010ce2:	f001 f97f 	bl	8011fe4 <__mcmp>
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	db25      	blt.n	8010d36 <quorem+0xec>
 8010cea:	4629      	mov	r1, r5
 8010cec:	2000      	movs	r0, #0
 8010cee:	f858 2b04 	ldr.w	r2, [r8], #4
 8010cf2:	f8d1 c000 	ldr.w	ip, [r1]
 8010cf6:	fa1f fe82 	uxth.w	lr, r2
 8010cfa:	fa1f f38c 	uxth.w	r3, ip
 8010cfe:	eba3 030e 	sub.w	r3, r3, lr
 8010d02:	4403      	add	r3, r0
 8010d04:	0c12      	lsrs	r2, r2, #16
 8010d06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010d0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d14:	45c1      	cmp	r9, r8
 8010d16:	f841 3b04 	str.w	r3, [r1], #4
 8010d1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010d1e:	d2e6      	bcs.n	8010cee <quorem+0xa4>
 8010d20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d28:	b922      	cbnz	r2, 8010d34 <quorem+0xea>
 8010d2a:	3b04      	subs	r3, #4
 8010d2c:	429d      	cmp	r5, r3
 8010d2e:	461a      	mov	r2, r3
 8010d30:	d30b      	bcc.n	8010d4a <quorem+0x100>
 8010d32:	613c      	str	r4, [r7, #16]
 8010d34:	3601      	adds	r6, #1
 8010d36:	4630      	mov	r0, r6
 8010d38:	b003      	add	sp, #12
 8010d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3e:	6812      	ldr	r2, [r2, #0]
 8010d40:	3b04      	subs	r3, #4
 8010d42:	2a00      	cmp	r2, #0
 8010d44:	d1cb      	bne.n	8010cde <quorem+0x94>
 8010d46:	3c01      	subs	r4, #1
 8010d48:	e7c6      	b.n	8010cd8 <quorem+0x8e>
 8010d4a:	6812      	ldr	r2, [r2, #0]
 8010d4c:	3b04      	subs	r3, #4
 8010d4e:	2a00      	cmp	r2, #0
 8010d50:	d1ef      	bne.n	8010d32 <quorem+0xe8>
 8010d52:	3c01      	subs	r4, #1
 8010d54:	e7ea      	b.n	8010d2c <quorem+0xe2>
 8010d56:	2000      	movs	r0, #0
 8010d58:	e7ee      	b.n	8010d38 <quorem+0xee>
 8010d5a:	0000      	movs	r0, r0
 8010d5c:	0000      	movs	r0, r0
	...

08010d60 <_dtoa_r>:
 8010d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d64:	69c7      	ldr	r7, [r0, #28]
 8010d66:	b097      	sub	sp, #92	@ 0x5c
 8010d68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010d6c:	ec55 4b10 	vmov	r4, r5, d0
 8010d70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010d72:	9107      	str	r1, [sp, #28]
 8010d74:	4681      	mov	r9, r0
 8010d76:	920c      	str	r2, [sp, #48]	@ 0x30
 8010d78:	9311      	str	r3, [sp, #68]	@ 0x44
 8010d7a:	b97f      	cbnz	r7, 8010d9c <_dtoa_r+0x3c>
 8010d7c:	2010      	movs	r0, #16
 8010d7e:	f000 fe09 	bl	8011994 <malloc>
 8010d82:	4602      	mov	r2, r0
 8010d84:	f8c9 001c 	str.w	r0, [r9, #28]
 8010d88:	b920      	cbnz	r0, 8010d94 <_dtoa_r+0x34>
 8010d8a:	4ba9      	ldr	r3, [pc, #676]	@ (8011030 <_dtoa_r+0x2d0>)
 8010d8c:	21ef      	movs	r1, #239	@ 0xef
 8010d8e:	48a9      	ldr	r0, [pc, #676]	@ (8011034 <_dtoa_r+0x2d4>)
 8010d90:	f001 fe24 	bl	80129dc <__assert_func>
 8010d94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010d98:	6007      	str	r7, [r0, #0]
 8010d9a:	60c7      	str	r7, [r0, #12]
 8010d9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010da0:	6819      	ldr	r1, [r3, #0]
 8010da2:	b159      	cbz	r1, 8010dbc <_dtoa_r+0x5c>
 8010da4:	685a      	ldr	r2, [r3, #4]
 8010da6:	604a      	str	r2, [r1, #4]
 8010da8:	2301      	movs	r3, #1
 8010daa:	4093      	lsls	r3, r2
 8010dac:	608b      	str	r3, [r1, #8]
 8010dae:	4648      	mov	r0, r9
 8010db0:	f000 fee6 	bl	8011b80 <_Bfree>
 8010db4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010db8:	2200      	movs	r2, #0
 8010dba:	601a      	str	r2, [r3, #0]
 8010dbc:	1e2b      	subs	r3, r5, #0
 8010dbe:	bfb9      	ittee	lt
 8010dc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010dc4:	9305      	strlt	r3, [sp, #20]
 8010dc6:	2300      	movge	r3, #0
 8010dc8:	6033      	strge	r3, [r6, #0]
 8010dca:	9f05      	ldr	r7, [sp, #20]
 8010dcc:	4b9a      	ldr	r3, [pc, #616]	@ (8011038 <_dtoa_r+0x2d8>)
 8010dce:	bfbc      	itt	lt
 8010dd0:	2201      	movlt	r2, #1
 8010dd2:	6032      	strlt	r2, [r6, #0]
 8010dd4:	43bb      	bics	r3, r7
 8010dd6:	d112      	bne.n	8010dfe <_dtoa_r+0x9e>
 8010dd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010dda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010dde:	6013      	str	r3, [r2, #0]
 8010de0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010de4:	4323      	orrs	r3, r4
 8010de6:	f000 855a 	beq.w	801189e <_dtoa_r+0xb3e>
 8010dea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010dec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801104c <_dtoa_r+0x2ec>
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f000 855c 	beq.w	80118ae <_dtoa_r+0xb4e>
 8010df6:	f10a 0303 	add.w	r3, sl, #3
 8010dfa:	f000 bd56 	b.w	80118aa <_dtoa_r+0xb4a>
 8010dfe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010e02:	2200      	movs	r2, #0
 8010e04:	ec51 0b17 	vmov	r0, r1, d7
 8010e08:	2300      	movs	r3, #0
 8010e0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010e0e:	f7ef fe63 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e12:	4680      	mov	r8, r0
 8010e14:	b158      	cbz	r0, 8010e2e <_dtoa_r+0xce>
 8010e16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010e18:	2301      	movs	r3, #1
 8010e1a:	6013      	str	r3, [r2, #0]
 8010e1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010e1e:	b113      	cbz	r3, 8010e26 <_dtoa_r+0xc6>
 8010e20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010e22:	4b86      	ldr	r3, [pc, #536]	@ (801103c <_dtoa_r+0x2dc>)
 8010e24:	6013      	str	r3, [r2, #0]
 8010e26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011050 <_dtoa_r+0x2f0>
 8010e2a:	f000 bd40 	b.w	80118ae <_dtoa_r+0xb4e>
 8010e2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010e32:	aa14      	add	r2, sp, #80	@ 0x50
 8010e34:	a915      	add	r1, sp, #84	@ 0x54
 8010e36:	4648      	mov	r0, r9
 8010e38:	f001 f984 	bl	8012144 <__d2b>
 8010e3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010e40:	9002      	str	r0, [sp, #8]
 8010e42:	2e00      	cmp	r6, #0
 8010e44:	d078      	beq.n	8010f38 <_dtoa_r+0x1d8>
 8010e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010e54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010e58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010e5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010e60:	4619      	mov	r1, r3
 8010e62:	2200      	movs	r2, #0
 8010e64:	4b76      	ldr	r3, [pc, #472]	@ (8011040 <_dtoa_r+0x2e0>)
 8010e66:	f7ef fa17 	bl	8000298 <__aeabi_dsub>
 8010e6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8011018 <_dtoa_r+0x2b8>)
 8010e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e70:	f7ef fbca 	bl	8000608 <__aeabi_dmul>
 8010e74:	a36a      	add	r3, pc, #424	@ (adr r3, 8011020 <_dtoa_r+0x2c0>)
 8010e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7a:	f7ef fa0f 	bl	800029c <__adddf3>
 8010e7e:	4604      	mov	r4, r0
 8010e80:	4630      	mov	r0, r6
 8010e82:	460d      	mov	r5, r1
 8010e84:	f7ef fb56 	bl	8000534 <__aeabi_i2d>
 8010e88:	a367      	add	r3, pc, #412	@ (adr r3, 8011028 <_dtoa_r+0x2c8>)
 8010e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8e:	f7ef fbbb 	bl	8000608 <__aeabi_dmul>
 8010e92:	4602      	mov	r2, r0
 8010e94:	460b      	mov	r3, r1
 8010e96:	4620      	mov	r0, r4
 8010e98:	4629      	mov	r1, r5
 8010e9a:	f7ef f9ff 	bl	800029c <__adddf3>
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	460d      	mov	r5, r1
 8010ea2:	f7ef fe61 	bl	8000b68 <__aeabi_d2iz>
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	4607      	mov	r7, r0
 8010eaa:	2300      	movs	r3, #0
 8010eac:	4620      	mov	r0, r4
 8010eae:	4629      	mov	r1, r5
 8010eb0:	f7ef fe1c 	bl	8000aec <__aeabi_dcmplt>
 8010eb4:	b140      	cbz	r0, 8010ec8 <_dtoa_r+0x168>
 8010eb6:	4638      	mov	r0, r7
 8010eb8:	f7ef fb3c 	bl	8000534 <__aeabi_i2d>
 8010ebc:	4622      	mov	r2, r4
 8010ebe:	462b      	mov	r3, r5
 8010ec0:	f7ef fe0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ec4:	b900      	cbnz	r0, 8010ec8 <_dtoa_r+0x168>
 8010ec6:	3f01      	subs	r7, #1
 8010ec8:	2f16      	cmp	r7, #22
 8010eca:	d852      	bhi.n	8010f72 <_dtoa_r+0x212>
 8010ecc:	4b5d      	ldr	r3, [pc, #372]	@ (8011044 <_dtoa_r+0x2e4>)
 8010ece:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010eda:	f7ef fe07 	bl	8000aec <__aeabi_dcmplt>
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	d049      	beq.n	8010f76 <_dtoa_r+0x216>
 8010ee2:	3f01      	subs	r7, #1
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ee8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010eea:	1b9b      	subs	r3, r3, r6
 8010eec:	1e5a      	subs	r2, r3, #1
 8010eee:	bf45      	ittet	mi
 8010ef0:	f1c3 0301 	rsbmi	r3, r3, #1
 8010ef4:	9300      	strmi	r3, [sp, #0]
 8010ef6:	2300      	movpl	r3, #0
 8010ef8:	2300      	movmi	r3, #0
 8010efa:	9206      	str	r2, [sp, #24]
 8010efc:	bf54      	ite	pl
 8010efe:	9300      	strpl	r3, [sp, #0]
 8010f00:	9306      	strmi	r3, [sp, #24]
 8010f02:	2f00      	cmp	r7, #0
 8010f04:	db39      	blt.n	8010f7a <_dtoa_r+0x21a>
 8010f06:	9b06      	ldr	r3, [sp, #24]
 8010f08:	970d      	str	r7, [sp, #52]	@ 0x34
 8010f0a:	443b      	add	r3, r7
 8010f0c:	9306      	str	r3, [sp, #24]
 8010f0e:	2300      	movs	r3, #0
 8010f10:	9308      	str	r3, [sp, #32]
 8010f12:	9b07      	ldr	r3, [sp, #28]
 8010f14:	2b09      	cmp	r3, #9
 8010f16:	d863      	bhi.n	8010fe0 <_dtoa_r+0x280>
 8010f18:	2b05      	cmp	r3, #5
 8010f1a:	bfc4      	itt	gt
 8010f1c:	3b04      	subgt	r3, #4
 8010f1e:	9307      	strgt	r3, [sp, #28]
 8010f20:	9b07      	ldr	r3, [sp, #28]
 8010f22:	f1a3 0302 	sub.w	r3, r3, #2
 8010f26:	bfcc      	ite	gt
 8010f28:	2400      	movgt	r4, #0
 8010f2a:	2401      	movle	r4, #1
 8010f2c:	2b03      	cmp	r3, #3
 8010f2e:	d863      	bhi.n	8010ff8 <_dtoa_r+0x298>
 8010f30:	e8df f003 	tbb	[pc, r3]
 8010f34:	2b375452 	.word	0x2b375452
 8010f38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010f3c:	441e      	add	r6, r3
 8010f3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010f42:	2b20      	cmp	r3, #32
 8010f44:	bfc1      	itttt	gt
 8010f46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010f4a:	409f      	lslgt	r7, r3
 8010f4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010f50:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010f54:	bfd6      	itet	le
 8010f56:	f1c3 0320 	rsble	r3, r3, #32
 8010f5a:	ea47 0003 	orrgt.w	r0, r7, r3
 8010f5e:	fa04 f003 	lslle.w	r0, r4, r3
 8010f62:	f7ef fad7 	bl	8000514 <__aeabi_ui2d>
 8010f66:	2201      	movs	r2, #1
 8010f68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010f6c:	3e01      	subs	r6, #1
 8010f6e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010f70:	e776      	b.n	8010e60 <_dtoa_r+0x100>
 8010f72:	2301      	movs	r3, #1
 8010f74:	e7b7      	b.n	8010ee6 <_dtoa_r+0x186>
 8010f76:	9010      	str	r0, [sp, #64]	@ 0x40
 8010f78:	e7b6      	b.n	8010ee8 <_dtoa_r+0x188>
 8010f7a:	9b00      	ldr	r3, [sp, #0]
 8010f7c:	1bdb      	subs	r3, r3, r7
 8010f7e:	9300      	str	r3, [sp, #0]
 8010f80:	427b      	negs	r3, r7
 8010f82:	9308      	str	r3, [sp, #32]
 8010f84:	2300      	movs	r3, #0
 8010f86:	930d      	str	r3, [sp, #52]	@ 0x34
 8010f88:	e7c3      	b.n	8010f12 <_dtoa_r+0x1b2>
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f90:	eb07 0b03 	add.w	fp, r7, r3
 8010f94:	f10b 0301 	add.w	r3, fp, #1
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	9303      	str	r3, [sp, #12]
 8010f9c:	bfb8      	it	lt
 8010f9e:	2301      	movlt	r3, #1
 8010fa0:	e006      	b.n	8010fb0 <_dtoa_r+0x250>
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	dd28      	ble.n	8010ffe <_dtoa_r+0x29e>
 8010fac:	469b      	mov	fp, r3
 8010fae:	9303      	str	r3, [sp, #12]
 8010fb0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	2204      	movs	r2, #4
 8010fb8:	f102 0514 	add.w	r5, r2, #20
 8010fbc:	429d      	cmp	r5, r3
 8010fbe:	d926      	bls.n	801100e <_dtoa_r+0x2ae>
 8010fc0:	6041      	str	r1, [r0, #4]
 8010fc2:	4648      	mov	r0, r9
 8010fc4:	f000 fd9c 	bl	8011b00 <_Balloc>
 8010fc8:	4682      	mov	sl, r0
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	d142      	bne.n	8011054 <_dtoa_r+0x2f4>
 8010fce:	4b1e      	ldr	r3, [pc, #120]	@ (8011048 <_dtoa_r+0x2e8>)
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	f240 11af 	movw	r1, #431	@ 0x1af
 8010fd6:	e6da      	b.n	8010d8e <_dtoa_r+0x2e>
 8010fd8:	2300      	movs	r3, #0
 8010fda:	e7e3      	b.n	8010fa4 <_dtoa_r+0x244>
 8010fdc:	2300      	movs	r3, #0
 8010fde:	e7d5      	b.n	8010f8c <_dtoa_r+0x22c>
 8010fe0:	2401      	movs	r4, #1
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	9307      	str	r3, [sp, #28]
 8010fe6:	9409      	str	r4, [sp, #36]	@ 0x24
 8010fe8:	f04f 3bff 	mov.w	fp, #4294967295
 8010fec:	2200      	movs	r2, #0
 8010fee:	f8cd b00c 	str.w	fp, [sp, #12]
 8010ff2:	2312      	movs	r3, #18
 8010ff4:	920c      	str	r2, [sp, #48]	@ 0x30
 8010ff6:	e7db      	b.n	8010fb0 <_dtoa_r+0x250>
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ffc:	e7f4      	b.n	8010fe8 <_dtoa_r+0x288>
 8010ffe:	f04f 0b01 	mov.w	fp, #1
 8011002:	f8cd b00c 	str.w	fp, [sp, #12]
 8011006:	465b      	mov	r3, fp
 8011008:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801100c:	e7d0      	b.n	8010fb0 <_dtoa_r+0x250>
 801100e:	3101      	adds	r1, #1
 8011010:	0052      	lsls	r2, r2, #1
 8011012:	e7d1      	b.n	8010fb8 <_dtoa_r+0x258>
 8011014:	f3af 8000 	nop.w
 8011018:	636f4361 	.word	0x636f4361
 801101c:	3fd287a7 	.word	0x3fd287a7
 8011020:	8b60c8b3 	.word	0x8b60c8b3
 8011024:	3fc68a28 	.word	0x3fc68a28
 8011028:	509f79fb 	.word	0x509f79fb
 801102c:	3fd34413 	.word	0x3fd34413
 8011030:	08014151 	.word	0x08014151
 8011034:	08014168 	.word	0x08014168
 8011038:	7ff00000 	.word	0x7ff00000
 801103c:	08014121 	.word	0x08014121
 8011040:	3ff80000 	.word	0x3ff80000
 8011044:	080142b8 	.word	0x080142b8
 8011048:	080141c0 	.word	0x080141c0
 801104c:	0801414d 	.word	0x0801414d
 8011050:	08014120 	.word	0x08014120
 8011054:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011058:	6018      	str	r0, [r3, #0]
 801105a:	9b03      	ldr	r3, [sp, #12]
 801105c:	2b0e      	cmp	r3, #14
 801105e:	f200 80a1 	bhi.w	80111a4 <_dtoa_r+0x444>
 8011062:	2c00      	cmp	r4, #0
 8011064:	f000 809e 	beq.w	80111a4 <_dtoa_r+0x444>
 8011068:	2f00      	cmp	r7, #0
 801106a:	dd33      	ble.n	80110d4 <_dtoa_r+0x374>
 801106c:	4b9c      	ldr	r3, [pc, #624]	@ (80112e0 <_dtoa_r+0x580>)
 801106e:	f007 020f 	and.w	r2, r7, #15
 8011072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011076:	ed93 7b00 	vldr	d7, [r3]
 801107a:	05f8      	lsls	r0, r7, #23
 801107c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8011080:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011084:	d516      	bpl.n	80110b4 <_dtoa_r+0x354>
 8011086:	4b97      	ldr	r3, [pc, #604]	@ (80112e4 <_dtoa_r+0x584>)
 8011088:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801108c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011090:	f7ef fbe4 	bl	800085c <__aeabi_ddiv>
 8011094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011098:	f004 040f 	and.w	r4, r4, #15
 801109c:	2603      	movs	r6, #3
 801109e:	4d91      	ldr	r5, [pc, #580]	@ (80112e4 <_dtoa_r+0x584>)
 80110a0:	b954      	cbnz	r4, 80110b8 <_dtoa_r+0x358>
 80110a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80110a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110aa:	f7ef fbd7 	bl	800085c <__aeabi_ddiv>
 80110ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80110b2:	e028      	b.n	8011106 <_dtoa_r+0x3a6>
 80110b4:	2602      	movs	r6, #2
 80110b6:	e7f2      	b.n	801109e <_dtoa_r+0x33e>
 80110b8:	07e1      	lsls	r1, r4, #31
 80110ba:	d508      	bpl.n	80110ce <_dtoa_r+0x36e>
 80110bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80110c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80110c4:	f7ef faa0 	bl	8000608 <__aeabi_dmul>
 80110c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80110cc:	3601      	adds	r6, #1
 80110ce:	1064      	asrs	r4, r4, #1
 80110d0:	3508      	adds	r5, #8
 80110d2:	e7e5      	b.n	80110a0 <_dtoa_r+0x340>
 80110d4:	f000 80af 	beq.w	8011236 <_dtoa_r+0x4d6>
 80110d8:	427c      	negs	r4, r7
 80110da:	4b81      	ldr	r3, [pc, #516]	@ (80112e0 <_dtoa_r+0x580>)
 80110dc:	4d81      	ldr	r5, [pc, #516]	@ (80112e4 <_dtoa_r+0x584>)
 80110de:	f004 020f 	and.w	r2, r4, #15
 80110e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80110ee:	f7ef fa8b 	bl	8000608 <__aeabi_dmul>
 80110f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80110f6:	1124      	asrs	r4, r4, #4
 80110f8:	2300      	movs	r3, #0
 80110fa:	2602      	movs	r6, #2
 80110fc:	2c00      	cmp	r4, #0
 80110fe:	f040 808f 	bne.w	8011220 <_dtoa_r+0x4c0>
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1d3      	bne.n	80110ae <_dtoa_r+0x34e>
 8011106:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011108:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801110c:	2b00      	cmp	r3, #0
 801110e:	f000 8094 	beq.w	801123a <_dtoa_r+0x4da>
 8011112:	4b75      	ldr	r3, [pc, #468]	@ (80112e8 <_dtoa_r+0x588>)
 8011114:	2200      	movs	r2, #0
 8011116:	4620      	mov	r0, r4
 8011118:	4629      	mov	r1, r5
 801111a:	f7ef fce7 	bl	8000aec <__aeabi_dcmplt>
 801111e:	2800      	cmp	r0, #0
 8011120:	f000 808b 	beq.w	801123a <_dtoa_r+0x4da>
 8011124:	9b03      	ldr	r3, [sp, #12]
 8011126:	2b00      	cmp	r3, #0
 8011128:	f000 8087 	beq.w	801123a <_dtoa_r+0x4da>
 801112c:	f1bb 0f00 	cmp.w	fp, #0
 8011130:	dd34      	ble.n	801119c <_dtoa_r+0x43c>
 8011132:	4620      	mov	r0, r4
 8011134:	4b6d      	ldr	r3, [pc, #436]	@ (80112ec <_dtoa_r+0x58c>)
 8011136:	2200      	movs	r2, #0
 8011138:	4629      	mov	r1, r5
 801113a:	f7ef fa65 	bl	8000608 <__aeabi_dmul>
 801113e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011142:	f107 38ff 	add.w	r8, r7, #4294967295
 8011146:	3601      	adds	r6, #1
 8011148:	465c      	mov	r4, fp
 801114a:	4630      	mov	r0, r6
 801114c:	f7ef f9f2 	bl	8000534 <__aeabi_i2d>
 8011150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011154:	f7ef fa58 	bl	8000608 <__aeabi_dmul>
 8011158:	4b65      	ldr	r3, [pc, #404]	@ (80112f0 <_dtoa_r+0x590>)
 801115a:	2200      	movs	r2, #0
 801115c:	f7ef f89e 	bl	800029c <__adddf3>
 8011160:	4605      	mov	r5, r0
 8011162:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011166:	2c00      	cmp	r4, #0
 8011168:	d16a      	bne.n	8011240 <_dtoa_r+0x4e0>
 801116a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801116e:	4b61      	ldr	r3, [pc, #388]	@ (80112f4 <_dtoa_r+0x594>)
 8011170:	2200      	movs	r2, #0
 8011172:	f7ef f891 	bl	8000298 <__aeabi_dsub>
 8011176:	4602      	mov	r2, r0
 8011178:	460b      	mov	r3, r1
 801117a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801117e:	462a      	mov	r2, r5
 8011180:	4633      	mov	r3, r6
 8011182:	f7ef fcd1 	bl	8000b28 <__aeabi_dcmpgt>
 8011186:	2800      	cmp	r0, #0
 8011188:	f040 8298 	bne.w	80116bc <_dtoa_r+0x95c>
 801118c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011190:	462a      	mov	r2, r5
 8011192:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011196:	f7ef fca9 	bl	8000aec <__aeabi_dcmplt>
 801119a:	bb38      	cbnz	r0, 80111ec <_dtoa_r+0x48c>
 801119c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80111a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80111a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	f2c0 8157 	blt.w	801145a <_dtoa_r+0x6fa>
 80111ac:	2f0e      	cmp	r7, #14
 80111ae:	f300 8154 	bgt.w	801145a <_dtoa_r+0x6fa>
 80111b2:	4b4b      	ldr	r3, [pc, #300]	@ (80112e0 <_dtoa_r+0x580>)
 80111b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80111b8:	ed93 7b00 	vldr	d7, [r3]
 80111bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111be:	2b00      	cmp	r3, #0
 80111c0:	ed8d 7b00 	vstr	d7, [sp]
 80111c4:	f280 80e5 	bge.w	8011392 <_dtoa_r+0x632>
 80111c8:	9b03      	ldr	r3, [sp, #12]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f300 80e1 	bgt.w	8011392 <_dtoa_r+0x632>
 80111d0:	d10c      	bne.n	80111ec <_dtoa_r+0x48c>
 80111d2:	4b48      	ldr	r3, [pc, #288]	@ (80112f4 <_dtoa_r+0x594>)
 80111d4:	2200      	movs	r2, #0
 80111d6:	ec51 0b17 	vmov	r0, r1, d7
 80111da:	f7ef fa15 	bl	8000608 <__aeabi_dmul>
 80111de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111e2:	f7ef fc97 	bl	8000b14 <__aeabi_dcmpge>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	f000 8266 	beq.w	80116b8 <_dtoa_r+0x958>
 80111ec:	2400      	movs	r4, #0
 80111ee:	4625      	mov	r5, r4
 80111f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111f2:	4656      	mov	r6, sl
 80111f4:	ea6f 0803 	mvn.w	r8, r3
 80111f8:	2700      	movs	r7, #0
 80111fa:	4621      	mov	r1, r4
 80111fc:	4648      	mov	r0, r9
 80111fe:	f000 fcbf 	bl	8011b80 <_Bfree>
 8011202:	2d00      	cmp	r5, #0
 8011204:	f000 80bd 	beq.w	8011382 <_dtoa_r+0x622>
 8011208:	b12f      	cbz	r7, 8011216 <_dtoa_r+0x4b6>
 801120a:	42af      	cmp	r7, r5
 801120c:	d003      	beq.n	8011216 <_dtoa_r+0x4b6>
 801120e:	4639      	mov	r1, r7
 8011210:	4648      	mov	r0, r9
 8011212:	f000 fcb5 	bl	8011b80 <_Bfree>
 8011216:	4629      	mov	r1, r5
 8011218:	4648      	mov	r0, r9
 801121a:	f000 fcb1 	bl	8011b80 <_Bfree>
 801121e:	e0b0      	b.n	8011382 <_dtoa_r+0x622>
 8011220:	07e2      	lsls	r2, r4, #31
 8011222:	d505      	bpl.n	8011230 <_dtoa_r+0x4d0>
 8011224:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011228:	f7ef f9ee 	bl	8000608 <__aeabi_dmul>
 801122c:	3601      	adds	r6, #1
 801122e:	2301      	movs	r3, #1
 8011230:	1064      	asrs	r4, r4, #1
 8011232:	3508      	adds	r5, #8
 8011234:	e762      	b.n	80110fc <_dtoa_r+0x39c>
 8011236:	2602      	movs	r6, #2
 8011238:	e765      	b.n	8011106 <_dtoa_r+0x3a6>
 801123a:	9c03      	ldr	r4, [sp, #12]
 801123c:	46b8      	mov	r8, r7
 801123e:	e784      	b.n	801114a <_dtoa_r+0x3ea>
 8011240:	4b27      	ldr	r3, [pc, #156]	@ (80112e0 <_dtoa_r+0x580>)
 8011242:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011244:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011248:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801124c:	4454      	add	r4, sl
 801124e:	2900      	cmp	r1, #0
 8011250:	d054      	beq.n	80112fc <_dtoa_r+0x59c>
 8011252:	4929      	ldr	r1, [pc, #164]	@ (80112f8 <_dtoa_r+0x598>)
 8011254:	2000      	movs	r0, #0
 8011256:	f7ef fb01 	bl	800085c <__aeabi_ddiv>
 801125a:	4633      	mov	r3, r6
 801125c:	462a      	mov	r2, r5
 801125e:	f7ef f81b 	bl	8000298 <__aeabi_dsub>
 8011262:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011266:	4656      	mov	r6, sl
 8011268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801126c:	f7ef fc7c 	bl	8000b68 <__aeabi_d2iz>
 8011270:	4605      	mov	r5, r0
 8011272:	f7ef f95f 	bl	8000534 <__aeabi_i2d>
 8011276:	4602      	mov	r2, r0
 8011278:	460b      	mov	r3, r1
 801127a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801127e:	f7ef f80b 	bl	8000298 <__aeabi_dsub>
 8011282:	3530      	adds	r5, #48	@ 0x30
 8011284:	4602      	mov	r2, r0
 8011286:	460b      	mov	r3, r1
 8011288:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801128c:	f806 5b01 	strb.w	r5, [r6], #1
 8011290:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011294:	f7ef fc2a 	bl	8000aec <__aeabi_dcmplt>
 8011298:	2800      	cmp	r0, #0
 801129a:	d172      	bne.n	8011382 <_dtoa_r+0x622>
 801129c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112a0:	4911      	ldr	r1, [pc, #68]	@ (80112e8 <_dtoa_r+0x588>)
 80112a2:	2000      	movs	r0, #0
 80112a4:	f7ee fff8 	bl	8000298 <__aeabi_dsub>
 80112a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80112ac:	f7ef fc1e 	bl	8000aec <__aeabi_dcmplt>
 80112b0:	2800      	cmp	r0, #0
 80112b2:	f040 80b4 	bne.w	801141e <_dtoa_r+0x6be>
 80112b6:	42a6      	cmp	r6, r4
 80112b8:	f43f af70 	beq.w	801119c <_dtoa_r+0x43c>
 80112bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80112c0:	4b0a      	ldr	r3, [pc, #40]	@ (80112ec <_dtoa_r+0x58c>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	f7ef f9a0 	bl	8000608 <__aeabi_dmul>
 80112c8:	4b08      	ldr	r3, [pc, #32]	@ (80112ec <_dtoa_r+0x58c>)
 80112ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80112ce:	2200      	movs	r2, #0
 80112d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80112d4:	f7ef f998 	bl	8000608 <__aeabi_dmul>
 80112d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112dc:	e7c4      	b.n	8011268 <_dtoa_r+0x508>
 80112de:	bf00      	nop
 80112e0:	080142b8 	.word	0x080142b8
 80112e4:	08014290 	.word	0x08014290
 80112e8:	3ff00000 	.word	0x3ff00000
 80112ec:	40240000 	.word	0x40240000
 80112f0:	401c0000 	.word	0x401c0000
 80112f4:	40140000 	.word	0x40140000
 80112f8:	3fe00000 	.word	0x3fe00000
 80112fc:	4631      	mov	r1, r6
 80112fe:	4628      	mov	r0, r5
 8011300:	f7ef f982 	bl	8000608 <__aeabi_dmul>
 8011304:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011308:	9413      	str	r4, [sp, #76]	@ 0x4c
 801130a:	4656      	mov	r6, sl
 801130c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011310:	f7ef fc2a 	bl	8000b68 <__aeabi_d2iz>
 8011314:	4605      	mov	r5, r0
 8011316:	f7ef f90d 	bl	8000534 <__aeabi_i2d>
 801131a:	4602      	mov	r2, r0
 801131c:	460b      	mov	r3, r1
 801131e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011322:	f7ee ffb9 	bl	8000298 <__aeabi_dsub>
 8011326:	3530      	adds	r5, #48	@ 0x30
 8011328:	f806 5b01 	strb.w	r5, [r6], #1
 801132c:	4602      	mov	r2, r0
 801132e:	460b      	mov	r3, r1
 8011330:	42a6      	cmp	r6, r4
 8011332:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011336:	f04f 0200 	mov.w	r2, #0
 801133a:	d124      	bne.n	8011386 <_dtoa_r+0x626>
 801133c:	4baf      	ldr	r3, [pc, #700]	@ (80115fc <_dtoa_r+0x89c>)
 801133e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011342:	f7ee ffab 	bl	800029c <__adddf3>
 8011346:	4602      	mov	r2, r0
 8011348:	460b      	mov	r3, r1
 801134a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801134e:	f7ef fbeb 	bl	8000b28 <__aeabi_dcmpgt>
 8011352:	2800      	cmp	r0, #0
 8011354:	d163      	bne.n	801141e <_dtoa_r+0x6be>
 8011356:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801135a:	49a8      	ldr	r1, [pc, #672]	@ (80115fc <_dtoa_r+0x89c>)
 801135c:	2000      	movs	r0, #0
 801135e:	f7ee ff9b 	bl	8000298 <__aeabi_dsub>
 8011362:	4602      	mov	r2, r0
 8011364:	460b      	mov	r3, r1
 8011366:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801136a:	f7ef fbbf 	bl	8000aec <__aeabi_dcmplt>
 801136e:	2800      	cmp	r0, #0
 8011370:	f43f af14 	beq.w	801119c <_dtoa_r+0x43c>
 8011374:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011376:	1e73      	subs	r3, r6, #1
 8011378:	9313      	str	r3, [sp, #76]	@ 0x4c
 801137a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801137e:	2b30      	cmp	r3, #48	@ 0x30
 8011380:	d0f8      	beq.n	8011374 <_dtoa_r+0x614>
 8011382:	4647      	mov	r7, r8
 8011384:	e03b      	b.n	80113fe <_dtoa_r+0x69e>
 8011386:	4b9e      	ldr	r3, [pc, #632]	@ (8011600 <_dtoa_r+0x8a0>)
 8011388:	f7ef f93e 	bl	8000608 <__aeabi_dmul>
 801138c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011390:	e7bc      	b.n	801130c <_dtoa_r+0x5ac>
 8011392:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011396:	4656      	mov	r6, sl
 8011398:	e9dd 2300 	ldrd	r2, r3, [sp]
 801139c:	4620      	mov	r0, r4
 801139e:	4629      	mov	r1, r5
 80113a0:	f7ef fa5c 	bl	800085c <__aeabi_ddiv>
 80113a4:	f7ef fbe0 	bl	8000b68 <__aeabi_d2iz>
 80113a8:	4680      	mov	r8, r0
 80113aa:	f7ef f8c3 	bl	8000534 <__aeabi_i2d>
 80113ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113b2:	f7ef f929 	bl	8000608 <__aeabi_dmul>
 80113b6:	4602      	mov	r2, r0
 80113b8:	460b      	mov	r3, r1
 80113ba:	4620      	mov	r0, r4
 80113bc:	4629      	mov	r1, r5
 80113be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80113c2:	f7ee ff69 	bl	8000298 <__aeabi_dsub>
 80113c6:	f806 4b01 	strb.w	r4, [r6], #1
 80113ca:	9d03      	ldr	r5, [sp, #12]
 80113cc:	eba6 040a 	sub.w	r4, r6, sl
 80113d0:	42a5      	cmp	r5, r4
 80113d2:	4602      	mov	r2, r0
 80113d4:	460b      	mov	r3, r1
 80113d6:	d133      	bne.n	8011440 <_dtoa_r+0x6e0>
 80113d8:	f7ee ff60 	bl	800029c <__adddf3>
 80113dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113e0:	4604      	mov	r4, r0
 80113e2:	460d      	mov	r5, r1
 80113e4:	f7ef fba0 	bl	8000b28 <__aeabi_dcmpgt>
 80113e8:	b9c0      	cbnz	r0, 801141c <_dtoa_r+0x6bc>
 80113ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113ee:	4620      	mov	r0, r4
 80113f0:	4629      	mov	r1, r5
 80113f2:	f7ef fb71 	bl	8000ad8 <__aeabi_dcmpeq>
 80113f6:	b110      	cbz	r0, 80113fe <_dtoa_r+0x69e>
 80113f8:	f018 0f01 	tst.w	r8, #1
 80113fc:	d10e      	bne.n	801141c <_dtoa_r+0x6bc>
 80113fe:	9902      	ldr	r1, [sp, #8]
 8011400:	4648      	mov	r0, r9
 8011402:	f000 fbbd 	bl	8011b80 <_Bfree>
 8011406:	2300      	movs	r3, #0
 8011408:	7033      	strb	r3, [r6, #0]
 801140a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801140c:	3701      	adds	r7, #1
 801140e:	601f      	str	r7, [r3, #0]
 8011410:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011412:	2b00      	cmp	r3, #0
 8011414:	f000 824b 	beq.w	80118ae <_dtoa_r+0xb4e>
 8011418:	601e      	str	r6, [r3, #0]
 801141a:	e248      	b.n	80118ae <_dtoa_r+0xb4e>
 801141c:	46b8      	mov	r8, r7
 801141e:	4633      	mov	r3, r6
 8011420:	461e      	mov	r6, r3
 8011422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011426:	2a39      	cmp	r2, #57	@ 0x39
 8011428:	d106      	bne.n	8011438 <_dtoa_r+0x6d8>
 801142a:	459a      	cmp	sl, r3
 801142c:	d1f8      	bne.n	8011420 <_dtoa_r+0x6c0>
 801142e:	2230      	movs	r2, #48	@ 0x30
 8011430:	f108 0801 	add.w	r8, r8, #1
 8011434:	f88a 2000 	strb.w	r2, [sl]
 8011438:	781a      	ldrb	r2, [r3, #0]
 801143a:	3201      	adds	r2, #1
 801143c:	701a      	strb	r2, [r3, #0]
 801143e:	e7a0      	b.n	8011382 <_dtoa_r+0x622>
 8011440:	4b6f      	ldr	r3, [pc, #444]	@ (8011600 <_dtoa_r+0x8a0>)
 8011442:	2200      	movs	r2, #0
 8011444:	f7ef f8e0 	bl	8000608 <__aeabi_dmul>
 8011448:	2200      	movs	r2, #0
 801144a:	2300      	movs	r3, #0
 801144c:	4604      	mov	r4, r0
 801144e:	460d      	mov	r5, r1
 8011450:	f7ef fb42 	bl	8000ad8 <__aeabi_dcmpeq>
 8011454:	2800      	cmp	r0, #0
 8011456:	d09f      	beq.n	8011398 <_dtoa_r+0x638>
 8011458:	e7d1      	b.n	80113fe <_dtoa_r+0x69e>
 801145a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801145c:	2a00      	cmp	r2, #0
 801145e:	f000 80ea 	beq.w	8011636 <_dtoa_r+0x8d6>
 8011462:	9a07      	ldr	r2, [sp, #28]
 8011464:	2a01      	cmp	r2, #1
 8011466:	f300 80cd 	bgt.w	8011604 <_dtoa_r+0x8a4>
 801146a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801146c:	2a00      	cmp	r2, #0
 801146e:	f000 80c1 	beq.w	80115f4 <_dtoa_r+0x894>
 8011472:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011476:	9c08      	ldr	r4, [sp, #32]
 8011478:	9e00      	ldr	r6, [sp, #0]
 801147a:	9a00      	ldr	r2, [sp, #0]
 801147c:	441a      	add	r2, r3
 801147e:	9200      	str	r2, [sp, #0]
 8011480:	9a06      	ldr	r2, [sp, #24]
 8011482:	2101      	movs	r1, #1
 8011484:	441a      	add	r2, r3
 8011486:	4648      	mov	r0, r9
 8011488:	9206      	str	r2, [sp, #24]
 801148a:	f000 fc2d 	bl	8011ce8 <__i2b>
 801148e:	4605      	mov	r5, r0
 8011490:	b166      	cbz	r6, 80114ac <_dtoa_r+0x74c>
 8011492:	9b06      	ldr	r3, [sp, #24]
 8011494:	2b00      	cmp	r3, #0
 8011496:	dd09      	ble.n	80114ac <_dtoa_r+0x74c>
 8011498:	42b3      	cmp	r3, r6
 801149a:	9a00      	ldr	r2, [sp, #0]
 801149c:	bfa8      	it	ge
 801149e:	4633      	movge	r3, r6
 80114a0:	1ad2      	subs	r2, r2, r3
 80114a2:	9200      	str	r2, [sp, #0]
 80114a4:	9a06      	ldr	r2, [sp, #24]
 80114a6:	1af6      	subs	r6, r6, r3
 80114a8:	1ad3      	subs	r3, r2, r3
 80114aa:	9306      	str	r3, [sp, #24]
 80114ac:	9b08      	ldr	r3, [sp, #32]
 80114ae:	b30b      	cbz	r3, 80114f4 <_dtoa_r+0x794>
 80114b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	f000 80c6 	beq.w	8011644 <_dtoa_r+0x8e4>
 80114b8:	2c00      	cmp	r4, #0
 80114ba:	f000 80c0 	beq.w	801163e <_dtoa_r+0x8de>
 80114be:	4629      	mov	r1, r5
 80114c0:	4622      	mov	r2, r4
 80114c2:	4648      	mov	r0, r9
 80114c4:	f000 fcc8 	bl	8011e58 <__pow5mult>
 80114c8:	9a02      	ldr	r2, [sp, #8]
 80114ca:	4601      	mov	r1, r0
 80114cc:	4605      	mov	r5, r0
 80114ce:	4648      	mov	r0, r9
 80114d0:	f000 fc20 	bl	8011d14 <__multiply>
 80114d4:	9902      	ldr	r1, [sp, #8]
 80114d6:	4680      	mov	r8, r0
 80114d8:	4648      	mov	r0, r9
 80114da:	f000 fb51 	bl	8011b80 <_Bfree>
 80114de:	9b08      	ldr	r3, [sp, #32]
 80114e0:	1b1b      	subs	r3, r3, r4
 80114e2:	9308      	str	r3, [sp, #32]
 80114e4:	f000 80b1 	beq.w	801164a <_dtoa_r+0x8ea>
 80114e8:	9a08      	ldr	r2, [sp, #32]
 80114ea:	4641      	mov	r1, r8
 80114ec:	4648      	mov	r0, r9
 80114ee:	f000 fcb3 	bl	8011e58 <__pow5mult>
 80114f2:	9002      	str	r0, [sp, #8]
 80114f4:	2101      	movs	r1, #1
 80114f6:	4648      	mov	r0, r9
 80114f8:	f000 fbf6 	bl	8011ce8 <__i2b>
 80114fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114fe:	4604      	mov	r4, r0
 8011500:	2b00      	cmp	r3, #0
 8011502:	f000 81d8 	beq.w	80118b6 <_dtoa_r+0xb56>
 8011506:	461a      	mov	r2, r3
 8011508:	4601      	mov	r1, r0
 801150a:	4648      	mov	r0, r9
 801150c:	f000 fca4 	bl	8011e58 <__pow5mult>
 8011510:	9b07      	ldr	r3, [sp, #28]
 8011512:	2b01      	cmp	r3, #1
 8011514:	4604      	mov	r4, r0
 8011516:	f300 809f 	bgt.w	8011658 <_dtoa_r+0x8f8>
 801151a:	9b04      	ldr	r3, [sp, #16]
 801151c:	2b00      	cmp	r3, #0
 801151e:	f040 8097 	bne.w	8011650 <_dtoa_r+0x8f0>
 8011522:	9b05      	ldr	r3, [sp, #20]
 8011524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011528:	2b00      	cmp	r3, #0
 801152a:	f040 8093 	bne.w	8011654 <_dtoa_r+0x8f4>
 801152e:	9b05      	ldr	r3, [sp, #20]
 8011530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011534:	0d1b      	lsrs	r3, r3, #20
 8011536:	051b      	lsls	r3, r3, #20
 8011538:	b133      	cbz	r3, 8011548 <_dtoa_r+0x7e8>
 801153a:	9b00      	ldr	r3, [sp, #0]
 801153c:	3301      	adds	r3, #1
 801153e:	9300      	str	r3, [sp, #0]
 8011540:	9b06      	ldr	r3, [sp, #24]
 8011542:	3301      	adds	r3, #1
 8011544:	9306      	str	r3, [sp, #24]
 8011546:	2301      	movs	r3, #1
 8011548:	9308      	str	r3, [sp, #32]
 801154a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801154c:	2b00      	cmp	r3, #0
 801154e:	f000 81b8 	beq.w	80118c2 <_dtoa_r+0xb62>
 8011552:	6923      	ldr	r3, [r4, #16]
 8011554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011558:	6918      	ldr	r0, [r3, #16]
 801155a:	f000 fb79 	bl	8011c50 <__hi0bits>
 801155e:	f1c0 0020 	rsb	r0, r0, #32
 8011562:	9b06      	ldr	r3, [sp, #24]
 8011564:	4418      	add	r0, r3
 8011566:	f010 001f 	ands.w	r0, r0, #31
 801156a:	f000 8082 	beq.w	8011672 <_dtoa_r+0x912>
 801156e:	f1c0 0320 	rsb	r3, r0, #32
 8011572:	2b04      	cmp	r3, #4
 8011574:	dd73      	ble.n	801165e <_dtoa_r+0x8fe>
 8011576:	9b00      	ldr	r3, [sp, #0]
 8011578:	f1c0 001c 	rsb	r0, r0, #28
 801157c:	4403      	add	r3, r0
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	9b06      	ldr	r3, [sp, #24]
 8011582:	4403      	add	r3, r0
 8011584:	4406      	add	r6, r0
 8011586:	9306      	str	r3, [sp, #24]
 8011588:	9b00      	ldr	r3, [sp, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	dd05      	ble.n	801159a <_dtoa_r+0x83a>
 801158e:	9902      	ldr	r1, [sp, #8]
 8011590:	461a      	mov	r2, r3
 8011592:	4648      	mov	r0, r9
 8011594:	f000 fcba 	bl	8011f0c <__lshift>
 8011598:	9002      	str	r0, [sp, #8]
 801159a:	9b06      	ldr	r3, [sp, #24]
 801159c:	2b00      	cmp	r3, #0
 801159e:	dd05      	ble.n	80115ac <_dtoa_r+0x84c>
 80115a0:	4621      	mov	r1, r4
 80115a2:	461a      	mov	r2, r3
 80115a4:	4648      	mov	r0, r9
 80115a6:	f000 fcb1 	bl	8011f0c <__lshift>
 80115aa:	4604      	mov	r4, r0
 80115ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d061      	beq.n	8011676 <_dtoa_r+0x916>
 80115b2:	9802      	ldr	r0, [sp, #8]
 80115b4:	4621      	mov	r1, r4
 80115b6:	f000 fd15 	bl	8011fe4 <__mcmp>
 80115ba:	2800      	cmp	r0, #0
 80115bc:	da5b      	bge.n	8011676 <_dtoa_r+0x916>
 80115be:	2300      	movs	r3, #0
 80115c0:	9902      	ldr	r1, [sp, #8]
 80115c2:	220a      	movs	r2, #10
 80115c4:	4648      	mov	r0, r9
 80115c6:	f000 fafd 	bl	8011bc4 <__multadd>
 80115ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115cc:	9002      	str	r0, [sp, #8]
 80115ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	f000 8177 	beq.w	80118c6 <_dtoa_r+0xb66>
 80115d8:	4629      	mov	r1, r5
 80115da:	2300      	movs	r3, #0
 80115dc:	220a      	movs	r2, #10
 80115de:	4648      	mov	r0, r9
 80115e0:	f000 faf0 	bl	8011bc4 <__multadd>
 80115e4:	f1bb 0f00 	cmp.w	fp, #0
 80115e8:	4605      	mov	r5, r0
 80115ea:	dc6f      	bgt.n	80116cc <_dtoa_r+0x96c>
 80115ec:	9b07      	ldr	r3, [sp, #28]
 80115ee:	2b02      	cmp	r3, #2
 80115f0:	dc49      	bgt.n	8011686 <_dtoa_r+0x926>
 80115f2:	e06b      	b.n	80116cc <_dtoa_r+0x96c>
 80115f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80115f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80115fa:	e73c      	b.n	8011476 <_dtoa_r+0x716>
 80115fc:	3fe00000 	.word	0x3fe00000
 8011600:	40240000 	.word	0x40240000
 8011604:	9b03      	ldr	r3, [sp, #12]
 8011606:	1e5c      	subs	r4, r3, #1
 8011608:	9b08      	ldr	r3, [sp, #32]
 801160a:	42a3      	cmp	r3, r4
 801160c:	db09      	blt.n	8011622 <_dtoa_r+0x8c2>
 801160e:	1b1c      	subs	r4, r3, r4
 8011610:	9b03      	ldr	r3, [sp, #12]
 8011612:	2b00      	cmp	r3, #0
 8011614:	f6bf af30 	bge.w	8011478 <_dtoa_r+0x718>
 8011618:	9b00      	ldr	r3, [sp, #0]
 801161a:	9a03      	ldr	r2, [sp, #12]
 801161c:	1a9e      	subs	r6, r3, r2
 801161e:	2300      	movs	r3, #0
 8011620:	e72b      	b.n	801147a <_dtoa_r+0x71a>
 8011622:	9b08      	ldr	r3, [sp, #32]
 8011624:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011626:	9408      	str	r4, [sp, #32]
 8011628:	1ae3      	subs	r3, r4, r3
 801162a:	441a      	add	r2, r3
 801162c:	9e00      	ldr	r6, [sp, #0]
 801162e:	9b03      	ldr	r3, [sp, #12]
 8011630:	920d      	str	r2, [sp, #52]	@ 0x34
 8011632:	2400      	movs	r4, #0
 8011634:	e721      	b.n	801147a <_dtoa_r+0x71a>
 8011636:	9c08      	ldr	r4, [sp, #32]
 8011638:	9e00      	ldr	r6, [sp, #0]
 801163a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801163c:	e728      	b.n	8011490 <_dtoa_r+0x730>
 801163e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011642:	e751      	b.n	80114e8 <_dtoa_r+0x788>
 8011644:	9a08      	ldr	r2, [sp, #32]
 8011646:	9902      	ldr	r1, [sp, #8]
 8011648:	e750      	b.n	80114ec <_dtoa_r+0x78c>
 801164a:	f8cd 8008 	str.w	r8, [sp, #8]
 801164e:	e751      	b.n	80114f4 <_dtoa_r+0x794>
 8011650:	2300      	movs	r3, #0
 8011652:	e779      	b.n	8011548 <_dtoa_r+0x7e8>
 8011654:	9b04      	ldr	r3, [sp, #16]
 8011656:	e777      	b.n	8011548 <_dtoa_r+0x7e8>
 8011658:	2300      	movs	r3, #0
 801165a:	9308      	str	r3, [sp, #32]
 801165c:	e779      	b.n	8011552 <_dtoa_r+0x7f2>
 801165e:	d093      	beq.n	8011588 <_dtoa_r+0x828>
 8011660:	9a00      	ldr	r2, [sp, #0]
 8011662:	331c      	adds	r3, #28
 8011664:	441a      	add	r2, r3
 8011666:	9200      	str	r2, [sp, #0]
 8011668:	9a06      	ldr	r2, [sp, #24]
 801166a:	441a      	add	r2, r3
 801166c:	441e      	add	r6, r3
 801166e:	9206      	str	r2, [sp, #24]
 8011670:	e78a      	b.n	8011588 <_dtoa_r+0x828>
 8011672:	4603      	mov	r3, r0
 8011674:	e7f4      	b.n	8011660 <_dtoa_r+0x900>
 8011676:	9b03      	ldr	r3, [sp, #12]
 8011678:	2b00      	cmp	r3, #0
 801167a:	46b8      	mov	r8, r7
 801167c:	dc20      	bgt.n	80116c0 <_dtoa_r+0x960>
 801167e:	469b      	mov	fp, r3
 8011680:	9b07      	ldr	r3, [sp, #28]
 8011682:	2b02      	cmp	r3, #2
 8011684:	dd1e      	ble.n	80116c4 <_dtoa_r+0x964>
 8011686:	f1bb 0f00 	cmp.w	fp, #0
 801168a:	f47f adb1 	bne.w	80111f0 <_dtoa_r+0x490>
 801168e:	4621      	mov	r1, r4
 8011690:	465b      	mov	r3, fp
 8011692:	2205      	movs	r2, #5
 8011694:	4648      	mov	r0, r9
 8011696:	f000 fa95 	bl	8011bc4 <__multadd>
 801169a:	4601      	mov	r1, r0
 801169c:	4604      	mov	r4, r0
 801169e:	9802      	ldr	r0, [sp, #8]
 80116a0:	f000 fca0 	bl	8011fe4 <__mcmp>
 80116a4:	2800      	cmp	r0, #0
 80116a6:	f77f ada3 	ble.w	80111f0 <_dtoa_r+0x490>
 80116aa:	4656      	mov	r6, sl
 80116ac:	2331      	movs	r3, #49	@ 0x31
 80116ae:	f806 3b01 	strb.w	r3, [r6], #1
 80116b2:	f108 0801 	add.w	r8, r8, #1
 80116b6:	e59f      	b.n	80111f8 <_dtoa_r+0x498>
 80116b8:	9c03      	ldr	r4, [sp, #12]
 80116ba:	46b8      	mov	r8, r7
 80116bc:	4625      	mov	r5, r4
 80116be:	e7f4      	b.n	80116aa <_dtoa_r+0x94a>
 80116c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80116c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f000 8101 	beq.w	80118ce <_dtoa_r+0xb6e>
 80116cc:	2e00      	cmp	r6, #0
 80116ce:	dd05      	ble.n	80116dc <_dtoa_r+0x97c>
 80116d0:	4629      	mov	r1, r5
 80116d2:	4632      	mov	r2, r6
 80116d4:	4648      	mov	r0, r9
 80116d6:	f000 fc19 	bl	8011f0c <__lshift>
 80116da:	4605      	mov	r5, r0
 80116dc:	9b08      	ldr	r3, [sp, #32]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d05c      	beq.n	801179c <_dtoa_r+0xa3c>
 80116e2:	6869      	ldr	r1, [r5, #4]
 80116e4:	4648      	mov	r0, r9
 80116e6:	f000 fa0b 	bl	8011b00 <_Balloc>
 80116ea:	4606      	mov	r6, r0
 80116ec:	b928      	cbnz	r0, 80116fa <_dtoa_r+0x99a>
 80116ee:	4b82      	ldr	r3, [pc, #520]	@ (80118f8 <_dtoa_r+0xb98>)
 80116f0:	4602      	mov	r2, r0
 80116f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80116f6:	f7ff bb4a 	b.w	8010d8e <_dtoa_r+0x2e>
 80116fa:	692a      	ldr	r2, [r5, #16]
 80116fc:	3202      	adds	r2, #2
 80116fe:	0092      	lsls	r2, r2, #2
 8011700:	f105 010c 	add.w	r1, r5, #12
 8011704:	300c      	adds	r0, #12
 8011706:	f7ff fa92 	bl	8010c2e <memcpy>
 801170a:	2201      	movs	r2, #1
 801170c:	4631      	mov	r1, r6
 801170e:	4648      	mov	r0, r9
 8011710:	f000 fbfc 	bl	8011f0c <__lshift>
 8011714:	f10a 0301 	add.w	r3, sl, #1
 8011718:	9300      	str	r3, [sp, #0]
 801171a:	eb0a 030b 	add.w	r3, sl, fp
 801171e:	9308      	str	r3, [sp, #32]
 8011720:	9b04      	ldr	r3, [sp, #16]
 8011722:	f003 0301 	and.w	r3, r3, #1
 8011726:	462f      	mov	r7, r5
 8011728:	9306      	str	r3, [sp, #24]
 801172a:	4605      	mov	r5, r0
 801172c:	9b00      	ldr	r3, [sp, #0]
 801172e:	9802      	ldr	r0, [sp, #8]
 8011730:	4621      	mov	r1, r4
 8011732:	f103 3bff 	add.w	fp, r3, #4294967295
 8011736:	f7ff fa88 	bl	8010c4a <quorem>
 801173a:	4603      	mov	r3, r0
 801173c:	3330      	adds	r3, #48	@ 0x30
 801173e:	9003      	str	r0, [sp, #12]
 8011740:	4639      	mov	r1, r7
 8011742:	9802      	ldr	r0, [sp, #8]
 8011744:	9309      	str	r3, [sp, #36]	@ 0x24
 8011746:	f000 fc4d 	bl	8011fe4 <__mcmp>
 801174a:	462a      	mov	r2, r5
 801174c:	9004      	str	r0, [sp, #16]
 801174e:	4621      	mov	r1, r4
 8011750:	4648      	mov	r0, r9
 8011752:	f000 fc63 	bl	801201c <__mdiff>
 8011756:	68c2      	ldr	r2, [r0, #12]
 8011758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801175a:	4606      	mov	r6, r0
 801175c:	bb02      	cbnz	r2, 80117a0 <_dtoa_r+0xa40>
 801175e:	4601      	mov	r1, r0
 8011760:	9802      	ldr	r0, [sp, #8]
 8011762:	f000 fc3f 	bl	8011fe4 <__mcmp>
 8011766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011768:	4602      	mov	r2, r0
 801176a:	4631      	mov	r1, r6
 801176c:	4648      	mov	r0, r9
 801176e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011770:	9309      	str	r3, [sp, #36]	@ 0x24
 8011772:	f000 fa05 	bl	8011b80 <_Bfree>
 8011776:	9b07      	ldr	r3, [sp, #28]
 8011778:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801177a:	9e00      	ldr	r6, [sp, #0]
 801177c:	ea42 0103 	orr.w	r1, r2, r3
 8011780:	9b06      	ldr	r3, [sp, #24]
 8011782:	4319      	orrs	r1, r3
 8011784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011786:	d10d      	bne.n	80117a4 <_dtoa_r+0xa44>
 8011788:	2b39      	cmp	r3, #57	@ 0x39
 801178a:	d027      	beq.n	80117dc <_dtoa_r+0xa7c>
 801178c:	9a04      	ldr	r2, [sp, #16]
 801178e:	2a00      	cmp	r2, #0
 8011790:	dd01      	ble.n	8011796 <_dtoa_r+0xa36>
 8011792:	9b03      	ldr	r3, [sp, #12]
 8011794:	3331      	adds	r3, #49	@ 0x31
 8011796:	f88b 3000 	strb.w	r3, [fp]
 801179a:	e52e      	b.n	80111fa <_dtoa_r+0x49a>
 801179c:	4628      	mov	r0, r5
 801179e:	e7b9      	b.n	8011714 <_dtoa_r+0x9b4>
 80117a0:	2201      	movs	r2, #1
 80117a2:	e7e2      	b.n	801176a <_dtoa_r+0xa0a>
 80117a4:	9904      	ldr	r1, [sp, #16]
 80117a6:	2900      	cmp	r1, #0
 80117a8:	db04      	blt.n	80117b4 <_dtoa_r+0xa54>
 80117aa:	9807      	ldr	r0, [sp, #28]
 80117ac:	4301      	orrs	r1, r0
 80117ae:	9806      	ldr	r0, [sp, #24]
 80117b0:	4301      	orrs	r1, r0
 80117b2:	d120      	bne.n	80117f6 <_dtoa_r+0xa96>
 80117b4:	2a00      	cmp	r2, #0
 80117b6:	ddee      	ble.n	8011796 <_dtoa_r+0xa36>
 80117b8:	9902      	ldr	r1, [sp, #8]
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	2201      	movs	r2, #1
 80117be:	4648      	mov	r0, r9
 80117c0:	f000 fba4 	bl	8011f0c <__lshift>
 80117c4:	4621      	mov	r1, r4
 80117c6:	9002      	str	r0, [sp, #8]
 80117c8:	f000 fc0c 	bl	8011fe4 <__mcmp>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	9b00      	ldr	r3, [sp, #0]
 80117d0:	dc02      	bgt.n	80117d8 <_dtoa_r+0xa78>
 80117d2:	d1e0      	bne.n	8011796 <_dtoa_r+0xa36>
 80117d4:	07da      	lsls	r2, r3, #31
 80117d6:	d5de      	bpl.n	8011796 <_dtoa_r+0xa36>
 80117d8:	2b39      	cmp	r3, #57	@ 0x39
 80117da:	d1da      	bne.n	8011792 <_dtoa_r+0xa32>
 80117dc:	2339      	movs	r3, #57	@ 0x39
 80117de:	f88b 3000 	strb.w	r3, [fp]
 80117e2:	4633      	mov	r3, r6
 80117e4:	461e      	mov	r6, r3
 80117e6:	3b01      	subs	r3, #1
 80117e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80117ec:	2a39      	cmp	r2, #57	@ 0x39
 80117ee:	d04e      	beq.n	801188e <_dtoa_r+0xb2e>
 80117f0:	3201      	adds	r2, #1
 80117f2:	701a      	strb	r2, [r3, #0]
 80117f4:	e501      	b.n	80111fa <_dtoa_r+0x49a>
 80117f6:	2a00      	cmp	r2, #0
 80117f8:	dd03      	ble.n	8011802 <_dtoa_r+0xaa2>
 80117fa:	2b39      	cmp	r3, #57	@ 0x39
 80117fc:	d0ee      	beq.n	80117dc <_dtoa_r+0xa7c>
 80117fe:	3301      	adds	r3, #1
 8011800:	e7c9      	b.n	8011796 <_dtoa_r+0xa36>
 8011802:	9a00      	ldr	r2, [sp, #0]
 8011804:	9908      	ldr	r1, [sp, #32]
 8011806:	f802 3c01 	strb.w	r3, [r2, #-1]
 801180a:	428a      	cmp	r2, r1
 801180c:	d028      	beq.n	8011860 <_dtoa_r+0xb00>
 801180e:	9902      	ldr	r1, [sp, #8]
 8011810:	2300      	movs	r3, #0
 8011812:	220a      	movs	r2, #10
 8011814:	4648      	mov	r0, r9
 8011816:	f000 f9d5 	bl	8011bc4 <__multadd>
 801181a:	42af      	cmp	r7, r5
 801181c:	9002      	str	r0, [sp, #8]
 801181e:	f04f 0300 	mov.w	r3, #0
 8011822:	f04f 020a 	mov.w	r2, #10
 8011826:	4639      	mov	r1, r7
 8011828:	4648      	mov	r0, r9
 801182a:	d107      	bne.n	801183c <_dtoa_r+0xadc>
 801182c:	f000 f9ca 	bl	8011bc4 <__multadd>
 8011830:	4607      	mov	r7, r0
 8011832:	4605      	mov	r5, r0
 8011834:	9b00      	ldr	r3, [sp, #0]
 8011836:	3301      	adds	r3, #1
 8011838:	9300      	str	r3, [sp, #0]
 801183a:	e777      	b.n	801172c <_dtoa_r+0x9cc>
 801183c:	f000 f9c2 	bl	8011bc4 <__multadd>
 8011840:	4629      	mov	r1, r5
 8011842:	4607      	mov	r7, r0
 8011844:	2300      	movs	r3, #0
 8011846:	220a      	movs	r2, #10
 8011848:	4648      	mov	r0, r9
 801184a:	f000 f9bb 	bl	8011bc4 <__multadd>
 801184e:	4605      	mov	r5, r0
 8011850:	e7f0      	b.n	8011834 <_dtoa_r+0xad4>
 8011852:	f1bb 0f00 	cmp.w	fp, #0
 8011856:	bfcc      	ite	gt
 8011858:	465e      	movgt	r6, fp
 801185a:	2601      	movle	r6, #1
 801185c:	4456      	add	r6, sl
 801185e:	2700      	movs	r7, #0
 8011860:	9902      	ldr	r1, [sp, #8]
 8011862:	9300      	str	r3, [sp, #0]
 8011864:	2201      	movs	r2, #1
 8011866:	4648      	mov	r0, r9
 8011868:	f000 fb50 	bl	8011f0c <__lshift>
 801186c:	4621      	mov	r1, r4
 801186e:	9002      	str	r0, [sp, #8]
 8011870:	f000 fbb8 	bl	8011fe4 <__mcmp>
 8011874:	2800      	cmp	r0, #0
 8011876:	dcb4      	bgt.n	80117e2 <_dtoa_r+0xa82>
 8011878:	d102      	bne.n	8011880 <_dtoa_r+0xb20>
 801187a:	9b00      	ldr	r3, [sp, #0]
 801187c:	07db      	lsls	r3, r3, #31
 801187e:	d4b0      	bmi.n	80117e2 <_dtoa_r+0xa82>
 8011880:	4633      	mov	r3, r6
 8011882:	461e      	mov	r6, r3
 8011884:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011888:	2a30      	cmp	r2, #48	@ 0x30
 801188a:	d0fa      	beq.n	8011882 <_dtoa_r+0xb22>
 801188c:	e4b5      	b.n	80111fa <_dtoa_r+0x49a>
 801188e:	459a      	cmp	sl, r3
 8011890:	d1a8      	bne.n	80117e4 <_dtoa_r+0xa84>
 8011892:	2331      	movs	r3, #49	@ 0x31
 8011894:	f108 0801 	add.w	r8, r8, #1
 8011898:	f88a 3000 	strb.w	r3, [sl]
 801189c:	e4ad      	b.n	80111fa <_dtoa_r+0x49a>
 801189e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80118a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80118fc <_dtoa_r+0xb9c>
 80118a4:	b11b      	cbz	r3, 80118ae <_dtoa_r+0xb4e>
 80118a6:	f10a 0308 	add.w	r3, sl, #8
 80118aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80118ac:	6013      	str	r3, [r2, #0]
 80118ae:	4650      	mov	r0, sl
 80118b0:	b017      	add	sp, #92	@ 0x5c
 80118b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b6:	9b07      	ldr	r3, [sp, #28]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	f77f ae2e 	ble.w	801151a <_dtoa_r+0x7ba>
 80118be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80118c0:	9308      	str	r3, [sp, #32]
 80118c2:	2001      	movs	r0, #1
 80118c4:	e64d      	b.n	8011562 <_dtoa_r+0x802>
 80118c6:	f1bb 0f00 	cmp.w	fp, #0
 80118ca:	f77f aed9 	ble.w	8011680 <_dtoa_r+0x920>
 80118ce:	4656      	mov	r6, sl
 80118d0:	9802      	ldr	r0, [sp, #8]
 80118d2:	4621      	mov	r1, r4
 80118d4:	f7ff f9b9 	bl	8010c4a <quorem>
 80118d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80118dc:	f806 3b01 	strb.w	r3, [r6], #1
 80118e0:	eba6 020a 	sub.w	r2, r6, sl
 80118e4:	4593      	cmp	fp, r2
 80118e6:	ddb4      	ble.n	8011852 <_dtoa_r+0xaf2>
 80118e8:	9902      	ldr	r1, [sp, #8]
 80118ea:	2300      	movs	r3, #0
 80118ec:	220a      	movs	r2, #10
 80118ee:	4648      	mov	r0, r9
 80118f0:	f000 f968 	bl	8011bc4 <__multadd>
 80118f4:	9002      	str	r0, [sp, #8]
 80118f6:	e7eb      	b.n	80118d0 <_dtoa_r+0xb70>
 80118f8:	080141c0 	.word	0x080141c0
 80118fc:	08014144 	.word	0x08014144

08011900 <_free_r>:
 8011900:	b538      	push	{r3, r4, r5, lr}
 8011902:	4605      	mov	r5, r0
 8011904:	2900      	cmp	r1, #0
 8011906:	d041      	beq.n	801198c <_free_r+0x8c>
 8011908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801190c:	1f0c      	subs	r4, r1, #4
 801190e:	2b00      	cmp	r3, #0
 8011910:	bfb8      	it	lt
 8011912:	18e4      	addlt	r4, r4, r3
 8011914:	f000 f8e8 	bl	8011ae8 <__malloc_lock>
 8011918:	4a1d      	ldr	r2, [pc, #116]	@ (8011990 <_free_r+0x90>)
 801191a:	6813      	ldr	r3, [r2, #0]
 801191c:	b933      	cbnz	r3, 801192c <_free_r+0x2c>
 801191e:	6063      	str	r3, [r4, #4]
 8011920:	6014      	str	r4, [r2, #0]
 8011922:	4628      	mov	r0, r5
 8011924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011928:	f000 b8e4 	b.w	8011af4 <__malloc_unlock>
 801192c:	42a3      	cmp	r3, r4
 801192e:	d908      	bls.n	8011942 <_free_r+0x42>
 8011930:	6820      	ldr	r0, [r4, #0]
 8011932:	1821      	adds	r1, r4, r0
 8011934:	428b      	cmp	r3, r1
 8011936:	bf01      	itttt	eq
 8011938:	6819      	ldreq	r1, [r3, #0]
 801193a:	685b      	ldreq	r3, [r3, #4]
 801193c:	1809      	addeq	r1, r1, r0
 801193e:	6021      	streq	r1, [r4, #0]
 8011940:	e7ed      	b.n	801191e <_free_r+0x1e>
 8011942:	461a      	mov	r2, r3
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	b10b      	cbz	r3, 801194c <_free_r+0x4c>
 8011948:	42a3      	cmp	r3, r4
 801194a:	d9fa      	bls.n	8011942 <_free_r+0x42>
 801194c:	6811      	ldr	r1, [r2, #0]
 801194e:	1850      	adds	r0, r2, r1
 8011950:	42a0      	cmp	r0, r4
 8011952:	d10b      	bne.n	801196c <_free_r+0x6c>
 8011954:	6820      	ldr	r0, [r4, #0]
 8011956:	4401      	add	r1, r0
 8011958:	1850      	adds	r0, r2, r1
 801195a:	4283      	cmp	r3, r0
 801195c:	6011      	str	r1, [r2, #0]
 801195e:	d1e0      	bne.n	8011922 <_free_r+0x22>
 8011960:	6818      	ldr	r0, [r3, #0]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	6053      	str	r3, [r2, #4]
 8011966:	4408      	add	r0, r1
 8011968:	6010      	str	r0, [r2, #0]
 801196a:	e7da      	b.n	8011922 <_free_r+0x22>
 801196c:	d902      	bls.n	8011974 <_free_r+0x74>
 801196e:	230c      	movs	r3, #12
 8011970:	602b      	str	r3, [r5, #0]
 8011972:	e7d6      	b.n	8011922 <_free_r+0x22>
 8011974:	6820      	ldr	r0, [r4, #0]
 8011976:	1821      	adds	r1, r4, r0
 8011978:	428b      	cmp	r3, r1
 801197a:	bf04      	itt	eq
 801197c:	6819      	ldreq	r1, [r3, #0]
 801197e:	685b      	ldreq	r3, [r3, #4]
 8011980:	6063      	str	r3, [r4, #4]
 8011982:	bf04      	itt	eq
 8011984:	1809      	addeq	r1, r1, r0
 8011986:	6021      	streq	r1, [r4, #0]
 8011988:	6054      	str	r4, [r2, #4]
 801198a:	e7ca      	b.n	8011922 <_free_r+0x22>
 801198c:	bd38      	pop	{r3, r4, r5, pc}
 801198e:	bf00      	nop
 8011990:	20005fe4 	.word	0x20005fe4

08011994 <malloc>:
 8011994:	4b02      	ldr	r3, [pc, #8]	@ (80119a0 <malloc+0xc>)
 8011996:	4601      	mov	r1, r0
 8011998:	6818      	ldr	r0, [r3, #0]
 801199a:	f000 b825 	b.w	80119e8 <_malloc_r>
 801199e:	bf00      	nop
 80119a0:	20000088 	.word	0x20000088

080119a4 <sbrk_aligned>:
 80119a4:	b570      	push	{r4, r5, r6, lr}
 80119a6:	4e0f      	ldr	r6, [pc, #60]	@ (80119e4 <sbrk_aligned+0x40>)
 80119a8:	460c      	mov	r4, r1
 80119aa:	6831      	ldr	r1, [r6, #0]
 80119ac:	4605      	mov	r5, r0
 80119ae:	b911      	cbnz	r1, 80119b6 <sbrk_aligned+0x12>
 80119b0:	f001 f804 	bl	80129bc <_sbrk_r>
 80119b4:	6030      	str	r0, [r6, #0]
 80119b6:	4621      	mov	r1, r4
 80119b8:	4628      	mov	r0, r5
 80119ba:	f000 ffff 	bl	80129bc <_sbrk_r>
 80119be:	1c43      	adds	r3, r0, #1
 80119c0:	d103      	bne.n	80119ca <sbrk_aligned+0x26>
 80119c2:	f04f 34ff 	mov.w	r4, #4294967295
 80119c6:	4620      	mov	r0, r4
 80119c8:	bd70      	pop	{r4, r5, r6, pc}
 80119ca:	1cc4      	adds	r4, r0, #3
 80119cc:	f024 0403 	bic.w	r4, r4, #3
 80119d0:	42a0      	cmp	r0, r4
 80119d2:	d0f8      	beq.n	80119c6 <sbrk_aligned+0x22>
 80119d4:	1a21      	subs	r1, r4, r0
 80119d6:	4628      	mov	r0, r5
 80119d8:	f000 fff0 	bl	80129bc <_sbrk_r>
 80119dc:	3001      	adds	r0, #1
 80119de:	d1f2      	bne.n	80119c6 <sbrk_aligned+0x22>
 80119e0:	e7ef      	b.n	80119c2 <sbrk_aligned+0x1e>
 80119e2:	bf00      	nop
 80119e4:	20005fe0 	.word	0x20005fe0

080119e8 <_malloc_r>:
 80119e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119ec:	1ccd      	adds	r5, r1, #3
 80119ee:	f025 0503 	bic.w	r5, r5, #3
 80119f2:	3508      	adds	r5, #8
 80119f4:	2d0c      	cmp	r5, #12
 80119f6:	bf38      	it	cc
 80119f8:	250c      	movcc	r5, #12
 80119fa:	2d00      	cmp	r5, #0
 80119fc:	4606      	mov	r6, r0
 80119fe:	db01      	blt.n	8011a04 <_malloc_r+0x1c>
 8011a00:	42a9      	cmp	r1, r5
 8011a02:	d904      	bls.n	8011a0e <_malloc_r+0x26>
 8011a04:	230c      	movs	r3, #12
 8011a06:	6033      	str	r3, [r6, #0]
 8011a08:	2000      	movs	r0, #0
 8011a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011ae4 <_malloc_r+0xfc>
 8011a12:	f000 f869 	bl	8011ae8 <__malloc_lock>
 8011a16:	f8d8 3000 	ldr.w	r3, [r8]
 8011a1a:	461c      	mov	r4, r3
 8011a1c:	bb44      	cbnz	r4, 8011a70 <_malloc_r+0x88>
 8011a1e:	4629      	mov	r1, r5
 8011a20:	4630      	mov	r0, r6
 8011a22:	f7ff ffbf 	bl	80119a4 <sbrk_aligned>
 8011a26:	1c43      	adds	r3, r0, #1
 8011a28:	4604      	mov	r4, r0
 8011a2a:	d158      	bne.n	8011ade <_malloc_r+0xf6>
 8011a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8011a30:	4627      	mov	r7, r4
 8011a32:	2f00      	cmp	r7, #0
 8011a34:	d143      	bne.n	8011abe <_malloc_r+0xd6>
 8011a36:	2c00      	cmp	r4, #0
 8011a38:	d04b      	beq.n	8011ad2 <_malloc_r+0xea>
 8011a3a:	6823      	ldr	r3, [r4, #0]
 8011a3c:	4639      	mov	r1, r7
 8011a3e:	4630      	mov	r0, r6
 8011a40:	eb04 0903 	add.w	r9, r4, r3
 8011a44:	f000 ffba 	bl	80129bc <_sbrk_r>
 8011a48:	4581      	cmp	r9, r0
 8011a4a:	d142      	bne.n	8011ad2 <_malloc_r+0xea>
 8011a4c:	6821      	ldr	r1, [r4, #0]
 8011a4e:	1a6d      	subs	r5, r5, r1
 8011a50:	4629      	mov	r1, r5
 8011a52:	4630      	mov	r0, r6
 8011a54:	f7ff ffa6 	bl	80119a4 <sbrk_aligned>
 8011a58:	3001      	adds	r0, #1
 8011a5a:	d03a      	beq.n	8011ad2 <_malloc_r+0xea>
 8011a5c:	6823      	ldr	r3, [r4, #0]
 8011a5e:	442b      	add	r3, r5
 8011a60:	6023      	str	r3, [r4, #0]
 8011a62:	f8d8 3000 	ldr.w	r3, [r8]
 8011a66:	685a      	ldr	r2, [r3, #4]
 8011a68:	bb62      	cbnz	r2, 8011ac4 <_malloc_r+0xdc>
 8011a6a:	f8c8 7000 	str.w	r7, [r8]
 8011a6e:	e00f      	b.n	8011a90 <_malloc_r+0xa8>
 8011a70:	6822      	ldr	r2, [r4, #0]
 8011a72:	1b52      	subs	r2, r2, r5
 8011a74:	d420      	bmi.n	8011ab8 <_malloc_r+0xd0>
 8011a76:	2a0b      	cmp	r2, #11
 8011a78:	d917      	bls.n	8011aaa <_malloc_r+0xc2>
 8011a7a:	1961      	adds	r1, r4, r5
 8011a7c:	42a3      	cmp	r3, r4
 8011a7e:	6025      	str	r5, [r4, #0]
 8011a80:	bf18      	it	ne
 8011a82:	6059      	strne	r1, [r3, #4]
 8011a84:	6863      	ldr	r3, [r4, #4]
 8011a86:	bf08      	it	eq
 8011a88:	f8c8 1000 	streq.w	r1, [r8]
 8011a8c:	5162      	str	r2, [r4, r5]
 8011a8e:	604b      	str	r3, [r1, #4]
 8011a90:	4630      	mov	r0, r6
 8011a92:	f000 f82f 	bl	8011af4 <__malloc_unlock>
 8011a96:	f104 000b 	add.w	r0, r4, #11
 8011a9a:	1d23      	adds	r3, r4, #4
 8011a9c:	f020 0007 	bic.w	r0, r0, #7
 8011aa0:	1ac2      	subs	r2, r0, r3
 8011aa2:	bf1c      	itt	ne
 8011aa4:	1a1b      	subne	r3, r3, r0
 8011aa6:	50a3      	strne	r3, [r4, r2]
 8011aa8:	e7af      	b.n	8011a0a <_malloc_r+0x22>
 8011aaa:	6862      	ldr	r2, [r4, #4]
 8011aac:	42a3      	cmp	r3, r4
 8011aae:	bf0c      	ite	eq
 8011ab0:	f8c8 2000 	streq.w	r2, [r8]
 8011ab4:	605a      	strne	r2, [r3, #4]
 8011ab6:	e7eb      	b.n	8011a90 <_malloc_r+0xa8>
 8011ab8:	4623      	mov	r3, r4
 8011aba:	6864      	ldr	r4, [r4, #4]
 8011abc:	e7ae      	b.n	8011a1c <_malloc_r+0x34>
 8011abe:	463c      	mov	r4, r7
 8011ac0:	687f      	ldr	r7, [r7, #4]
 8011ac2:	e7b6      	b.n	8011a32 <_malloc_r+0x4a>
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	42a3      	cmp	r3, r4
 8011aca:	d1fb      	bne.n	8011ac4 <_malloc_r+0xdc>
 8011acc:	2300      	movs	r3, #0
 8011ace:	6053      	str	r3, [r2, #4]
 8011ad0:	e7de      	b.n	8011a90 <_malloc_r+0xa8>
 8011ad2:	230c      	movs	r3, #12
 8011ad4:	6033      	str	r3, [r6, #0]
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f000 f80c 	bl	8011af4 <__malloc_unlock>
 8011adc:	e794      	b.n	8011a08 <_malloc_r+0x20>
 8011ade:	6005      	str	r5, [r0, #0]
 8011ae0:	e7d6      	b.n	8011a90 <_malloc_r+0xa8>
 8011ae2:	bf00      	nop
 8011ae4:	20005fe4 	.word	0x20005fe4

08011ae8 <__malloc_lock>:
 8011ae8:	4801      	ldr	r0, [pc, #4]	@ (8011af0 <__malloc_lock+0x8>)
 8011aea:	f7ff b89e 	b.w	8010c2a <__retarget_lock_acquire_recursive>
 8011aee:	bf00      	nop
 8011af0:	20005fdc 	.word	0x20005fdc

08011af4 <__malloc_unlock>:
 8011af4:	4801      	ldr	r0, [pc, #4]	@ (8011afc <__malloc_unlock+0x8>)
 8011af6:	f7ff b899 	b.w	8010c2c <__retarget_lock_release_recursive>
 8011afa:	bf00      	nop
 8011afc:	20005fdc 	.word	0x20005fdc

08011b00 <_Balloc>:
 8011b00:	b570      	push	{r4, r5, r6, lr}
 8011b02:	69c6      	ldr	r6, [r0, #28]
 8011b04:	4604      	mov	r4, r0
 8011b06:	460d      	mov	r5, r1
 8011b08:	b976      	cbnz	r6, 8011b28 <_Balloc+0x28>
 8011b0a:	2010      	movs	r0, #16
 8011b0c:	f7ff ff42 	bl	8011994 <malloc>
 8011b10:	4602      	mov	r2, r0
 8011b12:	61e0      	str	r0, [r4, #28]
 8011b14:	b920      	cbnz	r0, 8011b20 <_Balloc+0x20>
 8011b16:	4b18      	ldr	r3, [pc, #96]	@ (8011b78 <_Balloc+0x78>)
 8011b18:	4818      	ldr	r0, [pc, #96]	@ (8011b7c <_Balloc+0x7c>)
 8011b1a:	216b      	movs	r1, #107	@ 0x6b
 8011b1c:	f000 ff5e 	bl	80129dc <__assert_func>
 8011b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b24:	6006      	str	r6, [r0, #0]
 8011b26:	60c6      	str	r6, [r0, #12]
 8011b28:	69e6      	ldr	r6, [r4, #28]
 8011b2a:	68f3      	ldr	r3, [r6, #12]
 8011b2c:	b183      	cbz	r3, 8011b50 <_Balloc+0x50>
 8011b2e:	69e3      	ldr	r3, [r4, #28]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011b36:	b9b8      	cbnz	r0, 8011b68 <_Balloc+0x68>
 8011b38:	2101      	movs	r1, #1
 8011b3a:	fa01 f605 	lsl.w	r6, r1, r5
 8011b3e:	1d72      	adds	r2, r6, #5
 8011b40:	0092      	lsls	r2, r2, #2
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 ff68 	bl	8012a18 <_calloc_r>
 8011b48:	b160      	cbz	r0, 8011b64 <_Balloc+0x64>
 8011b4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011b4e:	e00e      	b.n	8011b6e <_Balloc+0x6e>
 8011b50:	2221      	movs	r2, #33	@ 0x21
 8011b52:	2104      	movs	r1, #4
 8011b54:	4620      	mov	r0, r4
 8011b56:	f000 ff5f 	bl	8012a18 <_calloc_r>
 8011b5a:	69e3      	ldr	r3, [r4, #28]
 8011b5c:	60f0      	str	r0, [r6, #12]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d1e4      	bne.n	8011b2e <_Balloc+0x2e>
 8011b64:	2000      	movs	r0, #0
 8011b66:	bd70      	pop	{r4, r5, r6, pc}
 8011b68:	6802      	ldr	r2, [r0, #0]
 8011b6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011b6e:	2300      	movs	r3, #0
 8011b70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011b74:	e7f7      	b.n	8011b66 <_Balloc+0x66>
 8011b76:	bf00      	nop
 8011b78:	08014151 	.word	0x08014151
 8011b7c:	080141d1 	.word	0x080141d1

08011b80 <_Bfree>:
 8011b80:	b570      	push	{r4, r5, r6, lr}
 8011b82:	69c6      	ldr	r6, [r0, #28]
 8011b84:	4605      	mov	r5, r0
 8011b86:	460c      	mov	r4, r1
 8011b88:	b976      	cbnz	r6, 8011ba8 <_Bfree+0x28>
 8011b8a:	2010      	movs	r0, #16
 8011b8c:	f7ff ff02 	bl	8011994 <malloc>
 8011b90:	4602      	mov	r2, r0
 8011b92:	61e8      	str	r0, [r5, #28]
 8011b94:	b920      	cbnz	r0, 8011ba0 <_Bfree+0x20>
 8011b96:	4b09      	ldr	r3, [pc, #36]	@ (8011bbc <_Bfree+0x3c>)
 8011b98:	4809      	ldr	r0, [pc, #36]	@ (8011bc0 <_Bfree+0x40>)
 8011b9a:	218f      	movs	r1, #143	@ 0x8f
 8011b9c:	f000 ff1e 	bl	80129dc <__assert_func>
 8011ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ba4:	6006      	str	r6, [r0, #0]
 8011ba6:	60c6      	str	r6, [r0, #12]
 8011ba8:	b13c      	cbz	r4, 8011bba <_Bfree+0x3a>
 8011baa:	69eb      	ldr	r3, [r5, #28]
 8011bac:	6862      	ldr	r2, [r4, #4]
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011bb4:	6021      	str	r1, [r4, #0]
 8011bb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011bba:	bd70      	pop	{r4, r5, r6, pc}
 8011bbc:	08014151 	.word	0x08014151
 8011bc0:	080141d1 	.word	0x080141d1

08011bc4 <__multadd>:
 8011bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc8:	690d      	ldr	r5, [r1, #16]
 8011bca:	4607      	mov	r7, r0
 8011bcc:	460c      	mov	r4, r1
 8011bce:	461e      	mov	r6, r3
 8011bd0:	f101 0c14 	add.w	ip, r1, #20
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8011bda:	b299      	uxth	r1, r3
 8011bdc:	fb02 6101 	mla	r1, r2, r1, r6
 8011be0:	0c1e      	lsrs	r6, r3, #16
 8011be2:	0c0b      	lsrs	r3, r1, #16
 8011be4:	fb02 3306 	mla	r3, r2, r6, r3
 8011be8:	b289      	uxth	r1, r1
 8011bea:	3001      	adds	r0, #1
 8011bec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011bf0:	4285      	cmp	r5, r0
 8011bf2:	f84c 1b04 	str.w	r1, [ip], #4
 8011bf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011bfa:	dcec      	bgt.n	8011bd6 <__multadd+0x12>
 8011bfc:	b30e      	cbz	r6, 8011c42 <__multadd+0x7e>
 8011bfe:	68a3      	ldr	r3, [r4, #8]
 8011c00:	42ab      	cmp	r3, r5
 8011c02:	dc19      	bgt.n	8011c38 <__multadd+0x74>
 8011c04:	6861      	ldr	r1, [r4, #4]
 8011c06:	4638      	mov	r0, r7
 8011c08:	3101      	adds	r1, #1
 8011c0a:	f7ff ff79 	bl	8011b00 <_Balloc>
 8011c0e:	4680      	mov	r8, r0
 8011c10:	b928      	cbnz	r0, 8011c1e <__multadd+0x5a>
 8011c12:	4602      	mov	r2, r0
 8011c14:	4b0c      	ldr	r3, [pc, #48]	@ (8011c48 <__multadd+0x84>)
 8011c16:	480d      	ldr	r0, [pc, #52]	@ (8011c4c <__multadd+0x88>)
 8011c18:	21ba      	movs	r1, #186	@ 0xba
 8011c1a:	f000 fedf 	bl	80129dc <__assert_func>
 8011c1e:	6922      	ldr	r2, [r4, #16]
 8011c20:	3202      	adds	r2, #2
 8011c22:	f104 010c 	add.w	r1, r4, #12
 8011c26:	0092      	lsls	r2, r2, #2
 8011c28:	300c      	adds	r0, #12
 8011c2a:	f7ff f800 	bl	8010c2e <memcpy>
 8011c2e:	4621      	mov	r1, r4
 8011c30:	4638      	mov	r0, r7
 8011c32:	f7ff ffa5 	bl	8011b80 <_Bfree>
 8011c36:	4644      	mov	r4, r8
 8011c38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011c3c:	3501      	adds	r5, #1
 8011c3e:	615e      	str	r6, [r3, #20]
 8011c40:	6125      	str	r5, [r4, #16]
 8011c42:	4620      	mov	r0, r4
 8011c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c48:	080141c0 	.word	0x080141c0
 8011c4c:	080141d1 	.word	0x080141d1

08011c50 <__hi0bits>:
 8011c50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011c54:	4603      	mov	r3, r0
 8011c56:	bf36      	itet	cc
 8011c58:	0403      	lslcc	r3, r0, #16
 8011c5a:	2000      	movcs	r0, #0
 8011c5c:	2010      	movcc	r0, #16
 8011c5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011c62:	bf3c      	itt	cc
 8011c64:	021b      	lslcc	r3, r3, #8
 8011c66:	3008      	addcc	r0, #8
 8011c68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011c6c:	bf3c      	itt	cc
 8011c6e:	011b      	lslcc	r3, r3, #4
 8011c70:	3004      	addcc	r0, #4
 8011c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011c76:	bf3c      	itt	cc
 8011c78:	009b      	lslcc	r3, r3, #2
 8011c7a:	3002      	addcc	r0, #2
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	db05      	blt.n	8011c8c <__hi0bits+0x3c>
 8011c80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011c84:	f100 0001 	add.w	r0, r0, #1
 8011c88:	bf08      	it	eq
 8011c8a:	2020      	moveq	r0, #32
 8011c8c:	4770      	bx	lr

08011c8e <__lo0bits>:
 8011c8e:	6803      	ldr	r3, [r0, #0]
 8011c90:	4602      	mov	r2, r0
 8011c92:	f013 0007 	ands.w	r0, r3, #7
 8011c96:	d00b      	beq.n	8011cb0 <__lo0bits+0x22>
 8011c98:	07d9      	lsls	r1, r3, #31
 8011c9a:	d421      	bmi.n	8011ce0 <__lo0bits+0x52>
 8011c9c:	0798      	lsls	r0, r3, #30
 8011c9e:	bf49      	itett	mi
 8011ca0:	085b      	lsrmi	r3, r3, #1
 8011ca2:	089b      	lsrpl	r3, r3, #2
 8011ca4:	2001      	movmi	r0, #1
 8011ca6:	6013      	strmi	r3, [r2, #0]
 8011ca8:	bf5c      	itt	pl
 8011caa:	6013      	strpl	r3, [r2, #0]
 8011cac:	2002      	movpl	r0, #2
 8011cae:	4770      	bx	lr
 8011cb0:	b299      	uxth	r1, r3
 8011cb2:	b909      	cbnz	r1, 8011cb8 <__lo0bits+0x2a>
 8011cb4:	0c1b      	lsrs	r3, r3, #16
 8011cb6:	2010      	movs	r0, #16
 8011cb8:	b2d9      	uxtb	r1, r3
 8011cba:	b909      	cbnz	r1, 8011cc0 <__lo0bits+0x32>
 8011cbc:	3008      	adds	r0, #8
 8011cbe:	0a1b      	lsrs	r3, r3, #8
 8011cc0:	0719      	lsls	r1, r3, #28
 8011cc2:	bf04      	itt	eq
 8011cc4:	091b      	lsreq	r3, r3, #4
 8011cc6:	3004      	addeq	r0, #4
 8011cc8:	0799      	lsls	r1, r3, #30
 8011cca:	bf04      	itt	eq
 8011ccc:	089b      	lsreq	r3, r3, #2
 8011cce:	3002      	addeq	r0, #2
 8011cd0:	07d9      	lsls	r1, r3, #31
 8011cd2:	d403      	bmi.n	8011cdc <__lo0bits+0x4e>
 8011cd4:	085b      	lsrs	r3, r3, #1
 8011cd6:	f100 0001 	add.w	r0, r0, #1
 8011cda:	d003      	beq.n	8011ce4 <__lo0bits+0x56>
 8011cdc:	6013      	str	r3, [r2, #0]
 8011cde:	4770      	bx	lr
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	4770      	bx	lr
 8011ce4:	2020      	movs	r0, #32
 8011ce6:	4770      	bx	lr

08011ce8 <__i2b>:
 8011ce8:	b510      	push	{r4, lr}
 8011cea:	460c      	mov	r4, r1
 8011cec:	2101      	movs	r1, #1
 8011cee:	f7ff ff07 	bl	8011b00 <_Balloc>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	b928      	cbnz	r0, 8011d02 <__i2b+0x1a>
 8011cf6:	4b05      	ldr	r3, [pc, #20]	@ (8011d0c <__i2b+0x24>)
 8011cf8:	4805      	ldr	r0, [pc, #20]	@ (8011d10 <__i2b+0x28>)
 8011cfa:	f240 1145 	movw	r1, #325	@ 0x145
 8011cfe:	f000 fe6d 	bl	80129dc <__assert_func>
 8011d02:	2301      	movs	r3, #1
 8011d04:	6144      	str	r4, [r0, #20]
 8011d06:	6103      	str	r3, [r0, #16]
 8011d08:	bd10      	pop	{r4, pc}
 8011d0a:	bf00      	nop
 8011d0c:	080141c0 	.word	0x080141c0
 8011d10:	080141d1 	.word	0x080141d1

08011d14 <__multiply>:
 8011d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d18:	4617      	mov	r7, r2
 8011d1a:	690a      	ldr	r2, [r1, #16]
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	bfa8      	it	ge
 8011d22:	463b      	movge	r3, r7
 8011d24:	4689      	mov	r9, r1
 8011d26:	bfa4      	itt	ge
 8011d28:	460f      	movge	r7, r1
 8011d2a:	4699      	movge	r9, r3
 8011d2c:	693d      	ldr	r5, [r7, #16]
 8011d2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	6879      	ldr	r1, [r7, #4]
 8011d36:	eb05 060a 	add.w	r6, r5, sl
 8011d3a:	42b3      	cmp	r3, r6
 8011d3c:	b085      	sub	sp, #20
 8011d3e:	bfb8      	it	lt
 8011d40:	3101      	addlt	r1, #1
 8011d42:	f7ff fedd 	bl	8011b00 <_Balloc>
 8011d46:	b930      	cbnz	r0, 8011d56 <__multiply+0x42>
 8011d48:	4602      	mov	r2, r0
 8011d4a:	4b41      	ldr	r3, [pc, #260]	@ (8011e50 <__multiply+0x13c>)
 8011d4c:	4841      	ldr	r0, [pc, #260]	@ (8011e54 <__multiply+0x140>)
 8011d4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011d52:	f000 fe43 	bl	80129dc <__assert_func>
 8011d56:	f100 0414 	add.w	r4, r0, #20
 8011d5a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011d5e:	4623      	mov	r3, r4
 8011d60:	2200      	movs	r2, #0
 8011d62:	4573      	cmp	r3, lr
 8011d64:	d320      	bcc.n	8011da8 <__multiply+0x94>
 8011d66:	f107 0814 	add.w	r8, r7, #20
 8011d6a:	f109 0114 	add.w	r1, r9, #20
 8011d6e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011d72:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011d76:	9302      	str	r3, [sp, #8]
 8011d78:	1beb      	subs	r3, r5, r7
 8011d7a:	3b15      	subs	r3, #21
 8011d7c:	f023 0303 	bic.w	r3, r3, #3
 8011d80:	3304      	adds	r3, #4
 8011d82:	3715      	adds	r7, #21
 8011d84:	42bd      	cmp	r5, r7
 8011d86:	bf38      	it	cc
 8011d88:	2304      	movcc	r3, #4
 8011d8a:	9301      	str	r3, [sp, #4]
 8011d8c:	9b02      	ldr	r3, [sp, #8]
 8011d8e:	9103      	str	r1, [sp, #12]
 8011d90:	428b      	cmp	r3, r1
 8011d92:	d80c      	bhi.n	8011dae <__multiply+0x9a>
 8011d94:	2e00      	cmp	r6, #0
 8011d96:	dd03      	ble.n	8011da0 <__multiply+0x8c>
 8011d98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d055      	beq.n	8011e4c <__multiply+0x138>
 8011da0:	6106      	str	r6, [r0, #16]
 8011da2:	b005      	add	sp, #20
 8011da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da8:	f843 2b04 	str.w	r2, [r3], #4
 8011dac:	e7d9      	b.n	8011d62 <__multiply+0x4e>
 8011dae:	f8b1 a000 	ldrh.w	sl, [r1]
 8011db2:	f1ba 0f00 	cmp.w	sl, #0
 8011db6:	d01f      	beq.n	8011df8 <__multiply+0xe4>
 8011db8:	46c4      	mov	ip, r8
 8011dba:	46a1      	mov	r9, r4
 8011dbc:	2700      	movs	r7, #0
 8011dbe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011dc2:	f8d9 3000 	ldr.w	r3, [r9]
 8011dc6:	fa1f fb82 	uxth.w	fp, r2
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	fb0a 330b 	mla	r3, sl, fp, r3
 8011dd0:	443b      	add	r3, r7
 8011dd2:	f8d9 7000 	ldr.w	r7, [r9]
 8011dd6:	0c12      	lsrs	r2, r2, #16
 8011dd8:	0c3f      	lsrs	r7, r7, #16
 8011dda:	fb0a 7202 	mla	r2, sl, r2, r7
 8011dde:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011de8:	4565      	cmp	r5, ip
 8011dea:	f849 3b04 	str.w	r3, [r9], #4
 8011dee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011df2:	d8e4      	bhi.n	8011dbe <__multiply+0xaa>
 8011df4:	9b01      	ldr	r3, [sp, #4]
 8011df6:	50e7      	str	r7, [r4, r3]
 8011df8:	9b03      	ldr	r3, [sp, #12]
 8011dfa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011dfe:	3104      	adds	r1, #4
 8011e00:	f1b9 0f00 	cmp.w	r9, #0
 8011e04:	d020      	beq.n	8011e48 <__multiply+0x134>
 8011e06:	6823      	ldr	r3, [r4, #0]
 8011e08:	4647      	mov	r7, r8
 8011e0a:	46a4      	mov	ip, r4
 8011e0c:	f04f 0a00 	mov.w	sl, #0
 8011e10:	f8b7 b000 	ldrh.w	fp, [r7]
 8011e14:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011e18:	fb09 220b 	mla	r2, r9, fp, r2
 8011e1c:	4452      	add	r2, sl
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e24:	f84c 3b04 	str.w	r3, [ip], #4
 8011e28:	f857 3b04 	ldr.w	r3, [r7], #4
 8011e2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e30:	f8bc 3000 	ldrh.w	r3, [ip]
 8011e34:	fb09 330a 	mla	r3, r9, sl, r3
 8011e38:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011e3c:	42bd      	cmp	r5, r7
 8011e3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e42:	d8e5      	bhi.n	8011e10 <__multiply+0xfc>
 8011e44:	9a01      	ldr	r2, [sp, #4]
 8011e46:	50a3      	str	r3, [r4, r2]
 8011e48:	3404      	adds	r4, #4
 8011e4a:	e79f      	b.n	8011d8c <__multiply+0x78>
 8011e4c:	3e01      	subs	r6, #1
 8011e4e:	e7a1      	b.n	8011d94 <__multiply+0x80>
 8011e50:	080141c0 	.word	0x080141c0
 8011e54:	080141d1 	.word	0x080141d1

08011e58 <__pow5mult>:
 8011e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e5c:	4615      	mov	r5, r2
 8011e5e:	f012 0203 	ands.w	r2, r2, #3
 8011e62:	4607      	mov	r7, r0
 8011e64:	460e      	mov	r6, r1
 8011e66:	d007      	beq.n	8011e78 <__pow5mult+0x20>
 8011e68:	4c25      	ldr	r4, [pc, #148]	@ (8011f00 <__pow5mult+0xa8>)
 8011e6a:	3a01      	subs	r2, #1
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011e72:	f7ff fea7 	bl	8011bc4 <__multadd>
 8011e76:	4606      	mov	r6, r0
 8011e78:	10ad      	asrs	r5, r5, #2
 8011e7a:	d03d      	beq.n	8011ef8 <__pow5mult+0xa0>
 8011e7c:	69fc      	ldr	r4, [r7, #28]
 8011e7e:	b97c      	cbnz	r4, 8011ea0 <__pow5mult+0x48>
 8011e80:	2010      	movs	r0, #16
 8011e82:	f7ff fd87 	bl	8011994 <malloc>
 8011e86:	4602      	mov	r2, r0
 8011e88:	61f8      	str	r0, [r7, #28]
 8011e8a:	b928      	cbnz	r0, 8011e98 <__pow5mult+0x40>
 8011e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8011f04 <__pow5mult+0xac>)
 8011e8e:	481e      	ldr	r0, [pc, #120]	@ (8011f08 <__pow5mult+0xb0>)
 8011e90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011e94:	f000 fda2 	bl	80129dc <__assert_func>
 8011e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011e9c:	6004      	str	r4, [r0, #0]
 8011e9e:	60c4      	str	r4, [r0, #12]
 8011ea0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ea8:	b94c      	cbnz	r4, 8011ebe <__pow5mult+0x66>
 8011eaa:	f240 2171 	movw	r1, #625	@ 0x271
 8011eae:	4638      	mov	r0, r7
 8011eb0:	f7ff ff1a 	bl	8011ce8 <__i2b>
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011eba:	4604      	mov	r4, r0
 8011ebc:	6003      	str	r3, [r0, #0]
 8011ebe:	f04f 0900 	mov.w	r9, #0
 8011ec2:	07eb      	lsls	r3, r5, #31
 8011ec4:	d50a      	bpl.n	8011edc <__pow5mult+0x84>
 8011ec6:	4631      	mov	r1, r6
 8011ec8:	4622      	mov	r2, r4
 8011eca:	4638      	mov	r0, r7
 8011ecc:	f7ff ff22 	bl	8011d14 <__multiply>
 8011ed0:	4631      	mov	r1, r6
 8011ed2:	4680      	mov	r8, r0
 8011ed4:	4638      	mov	r0, r7
 8011ed6:	f7ff fe53 	bl	8011b80 <_Bfree>
 8011eda:	4646      	mov	r6, r8
 8011edc:	106d      	asrs	r5, r5, #1
 8011ede:	d00b      	beq.n	8011ef8 <__pow5mult+0xa0>
 8011ee0:	6820      	ldr	r0, [r4, #0]
 8011ee2:	b938      	cbnz	r0, 8011ef4 <__pow5mult+0x9c>
 8011ee4:	4622      	mov	r2, r4
 8011ee6:	4621      	mov	r1, r4
 8011ee8:	4638      	mov	r0, r7
 8011eea:	f7ff ff13 	bl	8011d14 <__multiply>
 8011eee:	6020      	str	r0, [r4, #0]
 8011ef0:	f8c0 9000 	str.w	r9, [r0]
 8011ef4:	4604      	mov	r4, r0
 8011ef6:	e7e4      	b.n	8011ec2 <__pow5mult+0x6a>
 8011ef8:	4630      	mov	r0, r6
 8011efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011efe:	bf00      	nop
 8011f00:	08014284 	.word	0x08014284
 8011f04:	08014151 	.word	0x08014151
 8011f08:	080141d1 	.word	0x080141d1

08011f0c <__lshift>:
 8011f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f10:	460c      	mov	r4, r1
 8011f12:	6849      	ldr	r1, [r1, #4]
 8011f14:	6923      	ldr	r3, [r4, #16]
 8011f16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f1a:	68a3      	ldr	r3, [r4, #8]
 8011f1c:	4607      	mov	r7, r0
 8011f1e:	4691      	mov	r9, r2
 8011f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f24:	f108 0601 	add.w	r6, r8, #1
 8011f28:	42b3      	cmp	r3, r6
 8011f2a:	db0b      	blt.n	8011f44 <__lshift+0x38>
 8011f2c:	4638      	mov	r0, r7
 8011f2e:	f7ff fde7 	bl	8011b00 <_Balloc>
 8011f32:	4605      	mov	r5, r0
 8011f34:	b948      	cbnz	r0, 8011f4a <__lshift+0x3e>
 8011f36:	4602      	mov	r2, r0
 8011f38:	4b28      	ldr	r3, [pc, #160]	@ (8011fdc <__lshift+0xd0>)
 8011f3a:	4829      	ldr	r0, [pc, #164]	@ (8011fe0 <__lshift+0xd4>)
 8011f3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011f40:	f000 fd4c 	bl	80129dc <__assert_func>
 8011f44:	3101      	adds	r1, #1
 8011f46:	005b      	lsls	r3, r3, #1
 8011f48:	e7ee      	b.n	8011f28 <__lshift+0x1c>
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	f100 0114 	add.w	r1, r0, #20
 8011f50:	f100 0210 	add.w	r2, r0, #16
 8011f54:	4618      	mov	r0, r3
 8011f56:	4553      	cmp	r3, sl
 8011f58:	db33      	blt.n	8011fc2 <__lshift+0xb6>
 8011f5a:	6920      	ldr	r0, [r4, #16]
 8011f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011f60:	f104 0314 	add.w	r3, r4, #20
 8011f64:	f019 091f 	ands.w	r9, r9, #31
 8011f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011f70:	d02b      	beq.n	8011fca <__lshift+0xbe>
 8011f72:	f1c9 0e20 	rsb	lr, r9, #32
 8011f76:	468a      	mov	sl, r1
 8011f78:	2200      	movs	r2, #0
 8011f7a:	6818      	ldr	r0, [r3, #0]
 8011f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8011f80:	4310      	orrs	r0, r2
 8011f82:	f84a 0b04 	str.w	r0, [sl], #4
 8011f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f8a:	459c      	cmp	ip, r3
 8011f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011f90:	d8f3      	bhi.n	8011f7a <__lshift+0x6e>
 8011f92:	ebac 0304 	sub.w	r3, ip, r4
 8011f96:	3b15      	subs	r3, #21
 8011f98:	f023 0303 	bic.w	r3, r3, #3
 8011f9c:	3304      	adds	r3, #4
 8011f9e:	f104 0015 	add.w	r0, r4, #21
 8011fa2:	4560      	cmp	r0, ip
 8011fa4:	bf88      	it	hi
 8011fa6:	2304      	movhi	r3, #4
 8011fa8:	50ca      	str	r2, [r1, r3]
 8011faa:	b10a      	cbz	r2, 8011fb0 <__lshift+0xa4>
 8011fac:	f108 0602 	add.w	r6, r8, #2
 8011fb0:	3e01      	subs	r6, #1
 8011fb2:	4638      	mov	r0, r7
 8011fb4:	612e      	str	r6, [r5, #16]
 8011fb6:	4621      	mov	r1, r4
 8011fb8:	f7ff fde2 	bl	8011b80 <_Bfree>
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	e7c5      	b.n	8011f56 <__lshift+0x4a>
 8011fca:	3904      	subs	r1, #4
 8011fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011fd4:	459c      	cmp	ip, r3
 8011fd6:	d8f9      	bhi.n	8011fcc <__lshift+0xc0>
 8011fd8:	e7ea      	b.n	8011fb0 <__lshift+0xa4>
 8011fda:	bf00      	nop
 8011fdc:	080141c0 	.word	0x080141c0
 8011fe0:	080141d1 	.word	0x080141d1

08011fe4 <__mcmp>:
 8011fe4:	690a      	ldr	r2, [r1, #16]
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	6900      	ldr	r0, [r0, #16]
 8011fea:	1a80      	subs	r0, r0, r2
 8011fec:	b530      	push	{r4, r5, lr}
 8011fee:	d10e      	bne.n	801200e <__mcmp+0x2a>
 8011ff0:	3314      	adds	r3, #20
 8011ff2:	3114      	adds	r1, #20
 8011ff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011ff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012004:	4295      	cmp	r5, r2
 8012006:	d003      	beq.n	8012010 <__mcmp+0x2c>
 8012008:	d205      	bcs.n	8012016 <__mcmp+0x32>
 801200a:	f04f 30ff 	mov.w	r0, #4294967295
 801200e:	bd30      	pop	{r4, r5, pc}
 8012010:	42a3      	cmp	r3, r4
 8012012:	d3f3      	bcc.n	8011ffc <__mcmp+0x18>
 8012014:	e7fb      	b.n	801200e <__mcmp+0x2a>
 8012016:	2001      	movs	r0, #1
 8012018:	e7f9      	b.n	801200e <__mcmp+0x2a>
	...

0801201c <__mdiff>:
 801201c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012020:	4689      	mov	r9, r1
 8012022:	4606      	mov	r6, r0
 8012024:	4611      	mov	r1, r2
 8012026:	4648      	mov	r0, r9
 8012028:	4614      	mov	r4, r2
 801202a:	f7ff ffdb 	bl	8011fe4 <__mcmp>
 801202e:	1e05      	subs	r5, r0, #0
 8012030:	d112      	bne.n	8012058 <__mdiff+0x3c>
 8012032:	4629      	mov	r1, r5
 8012034:	4630      	mov	r0, r6
 8012036:	f7ff fd63 	bl	8011b00 <_Balloc>
 801203a:	4602      	mov	r2, r0
 801203c:	b928      	cbnz	r0, 801204a <__mdiff+0x2e>
 801203e:	4b3f      	ldr	r3, [pc, #252]	@ (801213c <__mdiff+0x120>)
 8012040:	f240 2137 	movw	r1, #567	@ 0x237
 8012044:	483e      	ldr	r0, [pc, #248]	@ (8012140 <__mdiff+0x124>)
 8012046:	f000 fcc9 	bl	80129dc <__assert_func>
 801204a:	2301      	movs	r3, #1
 801204c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012050:	4610      	mov	r0, r2
 8012052:	b003      	add	sp, #12
 8012054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012058:	bfbc      	itt	lt
 801205a:	464b      	movlt	r3, r9
 801205c:	46a1      	movlt	r9, r4
 801205e:	4630      	mov	r0, r6
 8012060:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012064:	bfba      	itte	lt
 8012066:	461c      	movlt	r4, r3
 8012068:	2501      	movlt	r5, #1
 801206a:	2500      	movge	r5, #0
 801206c:	f7ff fd48 	bl	8011b00 <_Balloc>
 8012070:	4602      	mov	r2, r0
 8012072:	b918      	cbnz	r0, 801207c <__mdiff+0x60>
 8012074:	4b31      	ldr	r3, [pc, #196]	@ (801213c <__mdiff+0x120>)
 8012076:	f240 2145 	movw	r1, #581	@ 0x245
 801207a:	e7e3      	b.n	8012044 <__mdiff+0x28>
 801207c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012080:	6926      	ldr	r6, [r4, #16]
 8012082:	60c5      	str	r5, [r0, #12]
 8012084:	f109 0310 	add.w	r3, r9, #16
 8012088:	f109 0514 	add.w	r5, r9, #20
 801208c:	f104 0e14 	add.w	lr, r4, #20
 8012090:	f100 0b14 	add.w	fp, r0, #20
 8012094:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012098:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801209c:	9301      	str	r3, [sp, #4]
 801209e:	46d9      	mov	r9, fp
 80120a0:	f04f 0c00 	mov.w	ip, #0
 80120a4:	9b01      	ldr	r3, [sp, #4]
 80120a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80120aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80120ae:	9301      	str	r3, [sp, #4]
 80120b0:	fa1f f38a 	uxth.w	r3, sl
 80120b4:	4619      	mov	r1, r3
 80120b6:	b283      	uxth	r3, r0
 80120b8:	1acb      	subs	r3, r1, r3
 80120ba:	0c00      	lsrs	r0, r0, #16
 80120bc:	4463      	add	r3, ip
 80120be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80120c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80120cc:	4576      	cmp	r6, lr
 80120ce:	f849 3b04 	str.w	r3, [r9], #4
 80120d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80120d6:	d8e5      	bhi.n	80120a4 <__mdiff+0x88>
 80120d8:	1b33      	subs	r3, r6, r4
 80120da:	3b15      	subs	r3, #21
 80120dc:	f023 0303 	bic.w	r3, r3, #3
 80120e0:	3415      	adds	r4, #21
 80120e2:	3304      	adds	r3, #4
 80120e4:	42a6      	cmp	r6, r4
 80120e6:	bf38      	it	cc
 80120e8:	2304      	movcc	r3, #4
 80120ea:	441d      	add	r5, r3
 80120ec:	445b      	add	r3, fp
 80120ee:	461e      	mov	r6, r3
 80120f0:	462c      	mov	r4, r5
 80120f2:	4544      	cmp	r4, r8
 80120f4:	d30e      	bcc.n	8012114 <__mdiff+0xf8>
 80120f6:	f108 0103 	add.w	r1, r8, #3
 80120fa:	1b49      	subs	r1, r1, r5
 80120fc:	f021 0103 	bic.w	r1, r1, #3
 8012100:	3d03      	subs	r5, #3
 8012102:	45a8      	cmp	r8, r5
 8012104:	bf38      	it	cc
 8012106:	2100      	movcc	r1, #0
 8012108:	440b      	add	r3, r1
 801210a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801210e:	b191      	cbz	r1, 8012136 <__mdiff+0x11a>
 8012110:	6117      	str	r7, [r2, #16]
 8012112:	e79d      	b.n	8012050 <__mdiff+0x34>
 8012114:	f854 1b04 	ldr.w	r1, [r4], #4
 8012118:	46e6      	mov	lr, ip
 801211a:	0c08      	lsrs	r0, r1, #16
 801211c:	fa1c fc81 	uxtah	ip, ip, r1
 8012120:	4471      	add	r1, lr
 8012122:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012126:	b289      	uxth	r1, r1
 8012128:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801212c:	f846 1b04 	str.w	r1, [r6], #4
 8012130:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012134:	e7dd      	b.n	80120f2 <__mdiff+0xd6>
 8012136:	3f01      	subs	r7, #1
 8012138:	e7e7      	b.n	801210a <__mdiff+0xee>
 801213a:	bf00      	nop
 801213c:	080141c0 	.word	0x080141c0
 8012140:	080141d1 	.word	0x080141d1

08012144 <__d2b>:
 8012144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012148:	460f      	mov	r7, r1
 801214a:	2101      	movs	r1, #1
 801214c:	ec59 8b10 	vmov	r8, r9, d0
 8012150:	4616      	mov	r6, r2
 8012152:	f7ff fcd5 	bl	8011b00 <_Balloc>
 8012156:	4604      	mov	r4, r0
 8012158:	b930      	cbnz	r0, 8012168 <__d2b+0x24>
 801215a:	4602      	mov	r2, r0
 801215c:	4b23      	ldr	r3, [pc, #140]	@ (80121ec <__d2b+0xa8>)
 801215e:	4824      	ldr	r0, [pc, #144]	@ (80121f0 <__d2b+0xac>)
 8012160:	f240 310f 	movw	r1, #783	@ 0x30f
 8012164:	f000 fc3a 	bl	80129dc <__assert_func>
 8012168:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801216c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012170:	b10d      	cbz	r5, 8012176 <__d2b+0x32>
 8012172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012176:	9301      	str	r3, [sp, #4]
 8012178:	f1b8 0300 	subs.w	r3, r8, #0
 801217c:	d023      	beq.n	80121c6 <__d2b+0x82>
 801217e:	4668      	mov	r0, sp
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	f7ff fd84 	bl	8011c8e <__lo0bits>
 8012186:	e9dd 1200 	ldrd	r1, r2, [sp]
 801218a:	b1d0      	cbz	r0, 80121c2 <__d2b+0x7e>
 801218c:	f1c0 0320 	rsb	r3, r0, #32
 8012190:	fa02 f303 	lsl.w	r3, r2, r3
 8012194:	430b      	orrs	r3, r1
 8012196:	40c2      	lsrs	r2, r0
 8012198:	6163      	str	r3, [r4, #20]
 801219a:	9201      	str	r2, [sp, #4]
 801219c:	9b01      	ldr	r3, [sp, #4]
 801219e:	61a3      	str	r3, [r4, #24]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	bf0c      	ite	eq
 80121a4:	2201      	moveq	r2, #1
 80121a6:	2202      	movne	r2, #2
 80121a8:	6122      	str	r2, [r4, #16]
 80121aa:	b1a5      	cbz	r5, 80121d6 <__d2b+0x92>
 80121ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80121b0:	4405      	add	r5, r0
 80121b2:	603d      	str	r5, [r7, #0]
 80121b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80121b8:	6030      	str	r0, [r6, #0]
 80121ba:	4620      	mov	r0, r4
 80121bc:	b003      	add	sp, #12
 80121be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121c2:	6161      	str	r1, [r4, #20]
 80121c4:	e7ea      	b.n	801219c <__d2b+0x58>
 80121c6:	a801      	add	r0, sp, #4
 80121c8:	f7ff fd61 	bl	8011c8e <__lo0bits>
 80121cc:	9b01      	ldr	r3, [sp, #4]
 80121ce:	6163      	str	r3, [r4, #20]
 80121d0:	3020      	adds	r0, #32
 80121d2:	2201      	movs	r2, #1
 80121d4:	e7e8      	b.n	80121a8 <__d2b+0x64>
 80121d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80121da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80121de:	6038      	str	r0, [r7, #0]
 80121e0:	6918      	ldr	r0, [r3, #16]
 80121e2:	f7ff fd35 	bl	8011c50 <__hi0bits>
 80121e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80121ea:	e7e5      	b.n	80121b8 <__d2b+0x74>
 80121ec:	080141c0 	.word	0x080141c0
 80121f0:	080141d1 	.word	0x080141d1

080121f4 <__ssputs_r>:
 80121f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121f8:	688e      	ldr	r6, [r1, #8]
 80121fa:	461f      	mov	r7, r3
 80121fc:	42be      	cmp	r6, r7
 80121fe:	680b      	ldr	r3, [r1, #0]
 8012200:	4682      	mov	sl, r0
 8012202:	460c      	mov	r4, r1
 8012204:	4690      	mov	r8, r2
 8012206:	d82d      	bhi.n	8012264 <__ssputs_r+0x70>
 8012208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801220c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012210:	d026      	beq.n	8012260 <__ssputs_r+0x6c>
 8012212:	6965      	ldr	r5, [r4, #20]
 8012214:	6909      	ldr	r1, [r1, #16]
 8012216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801221a:	eba3 0901 	sub.w	r9, r3, r1
 801221e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012222:	1c7b      	adds	r3, r7, #1
 8012224:	444b      	add	r3, r9
 8012226:	106d      	asrs	r5, r5, #1
 8012228:	429d      	cmp	r5, r3
 801222a:	bf38      	it	cc
 801222c:	461d      	movcc	r5, r3
 801222e:	0553      	lsls	r3, r2, #21
 8012230:	d527      	bpl.n	8012282 <__ssputs_r+0x8e>
 8012232:	4629      	mov	r1, r5
 8012234:	f7ff fbd8 	bl	80119e8 <_malloc_r>
 8012238:	4606      	mov	r6, r0
 801223a:	b360      	cbz	r0, 8012296 <__ssputs_r+0xa2>
 801223c:	6921      	ldr	r1, [r4, #16]
 801223e:	464a      	mov	r2, r9
 8012240:	f7fe fcf5 	bl	8010c2e <memcpy>
 8012244:	89a3      	ldrh	r3, [r4, #12]
 8012246:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801224a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801224e:	81a3      	strh	r3, [r4, #12]
 8012250:	6126      	str	r6, [r4, #16]
 8012252:	6165      	str	r5, [r4, #20]
 8012254:	444e      	add	r6, r9
 8012256:	eba5 0509 	sub.w	r5, r5, r9
 801225a:	6026      	str	r6, [r4, #0]
 801225c:	60a5      	str	r5, [r4, #8]
 801225e:	463e      	mov	r6, r7
 8012260:	42be      	cmp	r6, r7
 8012262:	d900      	bls.n	8012266 <__ssputs_r+0x72>
 8012264:	463e      	mov	r6, r7
 8012266:	6820      	ldr	r0, [r4, #0]
 8012268:	4632      	mov	r2, r6
 801226a:	4641      	mov	r1, r8
 801226c:	f000 fb6a 	bl	8012944 <memmove>
 8012270:	68a3      	ldr	r3, [r4, #8]
 8012272:	1b9b      	subs	r3, r3, r6
 8012274:	60a3      	str	r3, [r4, #8]
 8012276:	6823      	ldr	r3, [r4, #0]
 8012278:	4433      	add	r3, r6
 801227a:	6023      	str	r3, [r4, #0]
 801227c:	2000      	movs	r0, #0
 801227e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012282:	462a      	mov	r2, r5
 8012284:	f000 fbee 	bl	8012a64 <_realloc_r>
 8012288:	4606      	mov	r6, r0
 801228a:	2800      	cmp	r0, #0
 801228c:	d1e0      	bne.n	8012250 <__ssputs_r+0x5c>
 801228e:	6921      	ldr	r1, [r4, #16]
 8012290:	4650      	mov	r0, sl
 8012292:	f7ff fb35 	bl	8011900 <_free_r>
 8012296:	230c      	movs	r3, #12
 8012298:	f8ca 3000 	str.w	r3, [sl]
 801229c:	89a3      	ldrh	r3, [r4, #12]
 801229e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122a2:	81a3      	strh	r3, [r4, #12]
 80122a4:	f04f 30ff 	mov.w	r0, #4294967295
 80122a8:	e7e9      	b.n	801227e <__ssputs_r+0x8a>
	...

080122ac <_svfiprintf_r>:
 80122ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b0:	4698      	mov	r8, r3
 80122b2:	898b      	ldrh	r3, [r1, #12]
 80122b4:	061b      	lsls	r3, r3, #24
 80122b6:	b09d      	sub	sp, #116	@ 0x74
 80122b8:	4607      	mov	r7, r0
 80122ba:	460d      	mov	r5, r1
 80122bc:	4614      	mov	r4, r2
 80122be:	d510      	bpl.n	80122e2 <_svfiprintf_r+0x36>
 80122c0:	690b      	ldr	r3, [r1, #16]
 80122c2:	b973      	cbnz	r3, 80122e2 <_svfiprintf_r+0x36>
 80122c4:	2140      	movs	r1, #64	@ 0x40
 80122c6:	f7ff fb8f 	bl	80119e8 <_malloc_r>
 80122ca:	6028      	str	r0, [r5, #0]
 80122cc:	6128      	str	r0, [r5, #16]
 80122ce:	b930      	cbnz	r0, 80122de <_svfiprintf_r+0x32>
 80122d0:	230c      	movs	r3, #12
 80122d2:	603b      	str	r3, [r7, #0]
 80122d4:	f04f 30ff 	mov.w	r0, #4294967295
 80122d8:	b01d      	add	sp, #116	@ 0x74
 80122da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122de:	2340      	movs	r3, #64	@ 0x40
 80122e0:	616b      	str	r3, [r5, #20]
 80122e2:	2300      	movs	r3, #0
 80122e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80122e6:	2320      	movs	r3, #32
 80122e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80122f0:	2330      	movs	r3, #48	@ 0x30
 80122f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012490 <_svfiprintf_r+0x1e4>
 80122f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80122fa:	f04f 0901 	mov.w	r9, #1
 80122fe:	4623      	mov	r3, r4
 8012300:	469a      	mov	sl, r3
 8012302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012306:	b10a      	cbz	r2, 801230c <_svfiprintf_r+0x60>
 8012308:	2a25      	cmp	r2, #37	@ 0x25
 801230a:	d1f9      	bne.n	8012300 <_svfiprintf_r+0x54>
 801230c:	ebba 0b04 	subs.w	fp, sl, r4
 8012310:	d00b      	beq.n	801232a <_svfiprintf_r+0x7e>
 8012312:	465b      	mov	r3, fp
 8012314:	4622      	mov	r2, r4
 8012316:	4629      	mov	r1, r5
 8012318:	4638      	mov	r0, r7
 801231a:	f7ff ff6b 	bl	80121f4 <__ssputs_r>
 801231e:	3001      	adds	r0, #1
 8012320:	f000 80a7 	beq.w	8012472 <_svfiprintf_r+0x1c6>
 8012324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012326:	445a      	add	r2, fp
 8012328:	9209      	str	r2, [sp, #36]	@ 0x24
 801232a:	f89a 3000 	ldrb.w	r3, [sl]
 801232e:	2b00      	cmp	r3, #0
 8012330:	f000 809f 	beq.w	8012472 <_svfiprintf_r+0x1c6>
 8012334:	2300      	movs	r3, #0
 8012336:	f04f 32ff 	mov.w	r2, #4294967295
 801233a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801233e:	f10a 0a01 	add.w	sl, sl, #1
 8012342:	9304      	str	r3, [sp, #16]
 8012344:	9307      	str	r3, [sp, #28]
 8012346:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801234a:	931a      	str	r3, [sp, #104]	@ 0x68
 801234c:	4654      	mov	r4, sl
 801234e:	2205      	movs	r2, #5
 8012350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012354:	484e      	ldr	r0, [pc, #312]	@ (8012490 <_svfiprintf_r+0x1e4>)
 8012356:	f7ed ff43 	bl	80001e0 <memchr>
 801235a:	9a04      	ldr	r2, [sp, #16]
 801235c:	b9d8      	cbnz	r0, 8012396 <_svfiprintf_r+0xea>
 801235e:	06d0      	lsls	r0, r2, #27
 8012360:	bf44      	itt	mi
 8012362:	2320      	movmi	r3, #32
 8012364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012368:	0711      	lsls	r1, r2, #28
 801236a:	bf44      	itt	mi
 801236c:	232b      	movmi	r3, #43	@ 0x2b
 801236e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012372:	f89a 3000 	ldrb.w	r3, [sl]
 8012376:	2b2a      	cmp	r3, #42	@ 0x2a
 8012378:	d015      	beq.n	80123a6 <_svfiprintf_r+0xfa>
 801237a:	9a07      	ldr	r2, [sp, #28]
 801237c:	4654      	mov	r4, sl
 801237e:	2000      	movs	r0, #0
 8012380:	f04f 0c0a 	mov.w	ip, #10
 8012384:	4621      	mov	r1, r4
 8012386:	f811 3b01 	ldrb.w	r3, [r1], #1
 801238a:	3b30      	subs	r3, #48	@ 0x30
 801238c:	2b09      	cmp	r3, #9
 801238e:	d94b      	bls.n	8012428 <_svfiprintf_r+0x17c>
 8012390:	b1b0      	cbz	r0, 80123c0 <_svfiprintf_r+0x114>
 8012392:	9207      	str	r2, [sp, #28]
 8012394:	e014      	b.n	80123c0 <_svfiprintf_r+0x114>
 8012396:	eba0 0308 	sub.w	r3, r0, r8
 801239a:	fa09 f303 	lsl.w	r3, r9, r3
 801239e:	4313      	orrs	r3, r2
 80123a0:	9304      	str	r3, [sp, #16]
 80123a2:	46a2      	mov	sl, r4
 80123a4:	e7d2      	b.n	801234c <_svfiprintf_r+0xa0>
 80123a6:	9b03      	ldr	r3, [sp, #12]
 80123a8:	1d19      	adds	r1, r3, #4
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	9103      	str	r1, [sp, #12]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	bfbb      	ittet	lt
 80123b2:	425b      	neglt	r3, r3
 80123b4:	f042 0202 	orrlt.w	r2, r2, #2
 80123b8:	9307      	strge	r3, [sp, #28]
 80123ba:	9307      	strlt	r3, [sp, #28]
 80123bc:	bfb8      	it	lt
 80123be:	9204      	strlt	r2, [sp, #16]
 80123c0:	7823      	ldrb	r3, [r4, #0]
 80123c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80123c4:	d10a      	bne.n	80123dc <_svfiprintf_r+0x130>
 80123c6:	7863      	ldrb	r3, [r4, #1]
 80123c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80123ca:	d132      	bne.n	8012432 <_svfiprintf_r+0x186>
 80123cc:	9b03      	ldr	r3, [sp, #12]
 80123ce:	1d1a      	adds	r2, r3, #4
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	9203      	str	r2, [sp, #12]
 80123d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80123d8:	3402      	adds	r4, #2
 80123da:	9305      	str	r3, [sp, #20]
 80123dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80124a0 <_svfiprintf_r+0x1f4>
 80123e0:	7821      	ldrb	r1, [r4, #0]
 80123e2:	2203      	movs	r2, #3
 80123e4:	4650      	mov	r0, sl
 80123e6:	f7ed fefb 	bl	80001e0 <memchr>
 80123ea:	b138      	cbz	r0, 80123fc <_svfiprintf_r+0x150>
 80123ec:	9b04      	ldr	r3, [sp, #16]
 80123ee:	eba0 000a 	sub.w	r0, r0, sl
 80123f2:	2240      	movs	r2, #64	@ 0x40
 80123f4:	4082      	lsls	r2, r0
 80123f6:	4313      	orrs	r3, r2
 80123f8:	3401      	adds	r4, #1
 80123fa:	9304      	str	r3, [sp, #16]
 80123fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012400:	4824      	ldr	r0, [pc, #144]	@ (8012494 <_svfiprintf_r+0x1e8>)
 8012402:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012406:	2206      	movs	r2, #6
 8012408:	f7ed feea 	bl	80001e0 <memchr>
 801240c:	2800      	cmp	r0, #0
 801240e:	d036      	beq.n	801247e <_svfiprintf_r+0x1d2>
 8012410:	4b21      	ldr	r3, [pc, #132]	@ (8012498 <_svfiprintf_r+0x1ec>)
 8012412:	bb1b      	cbnz	r3, 801245c <_svfiprintf_r+0x1b0>
 8012414:	9b03      	ldr	r3, [sp, #12]
 8012416:	3307      	adds	r3, #7
 8012418:	f023 0307 	bic.w	r3, r3, #7
 801241c:	3308      	adds	r3, #8
 801241e:	9303      	str	r3, [sp, #12]
 8012420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012422:	4433      	add	r3, r6
 8012424:	9309      	str	r3, [sp, #36]	@ 0x24
 8012426:	e76a      	b.n	80122fe <_svfiprintf_r+0x52>
 8012428:	fb0c 3202 	mla	r2, ip, r2, r3
 801242c:	460c      	mov	r4, r1
 801242e:	2001      	movs	r0, #1
 8012430:	e7a8      	b.n	8012384 <_svfiprintf_r+0xd8>
 8012432:	2300      	movs	r3, #0
 8012434:	3401      	adds	r4, #1
 8012436:	9305      	str	r3, [sp, #20]
 8012438:	4619      	mov	r1, r3
 801243a:	f04f 0c0a 	mov.w	ip, #10
 801243e:	4620      	mov	r0, r4
 8012440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012444:	3a30      	subs	r2, #48	@ 0x30
 8012446:	2a09      	cmp	r2, #9
 8012448:	d903      	bls.n	8012452 <_svfiprintf_r+0x1a6>
 801244a:	2b00      	cmp	r3, #0
 801244c:	d0c6      	beq.n	80123dc <_svfiprintf_r+0x130>
 801244e:	9105      	str	r1, [sp, #20]
 8012450:	e7c4      	b.n	80123dc <_svfiprintf_r+0x130>
 8012452:	fb0c 2101 	mla	r1, ip, r1, r2
 8012456:	4604      	mov	r4, r0
 8012458:	2301      	movs	r3, #1
 801245a:	e7f0      	b.n	801243e <_svfiprintf_r+0x192>
 801245c:	ab03      	add	r3, sp, #12
 801245e:	9300      	str	r3, [sp, #0]
 8012460:	462a      	mov	r2, r5
 8012462:	4b0e      	ldr	r3, [pc, #56]	@ (801249c <_svfiprintf_r+0x1f0>)
 8012464:	a904      	add	r1, sp, #16
 8012466:	4638      	mov	r0, r7
 8012468:	f7fd fcfa 	bl	800fe60 <_printf_float>
 801246c:	1c42      	adds	r2, r0, #1
 801246e:	4606      	mov	r6, r0
 8012470:	d1d6      	bne.n	8012420 <_svfiprintf_r+0x174>
 8012472:	89ab      	ldrh	r3, [r5, #12]
 8012474:	065b      	lsls	r3, r3, #25
 8012476:	f53f af2d 	bmi.w	80122d4 <_svfiprintf_r+0x28>
 801247a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801247c:	e72c      	b.n	80122d8 <_svfiprintf_r+0x2c>
 801247e:	ab03      	add	r3, sp, #12
 8012480:	9300      	str	r3, [sp, #0]
 8012482:	462a      	mov	r2, r5
 8012484:	4b05      	ldr	r3, [pc, #20]	@ (801249c <_svfiprintf_r+0x1f0>)
 8012486:	a904      	add	r1, sp, #16
 8012488:	4638      	mov	r0, r7
 801248a:	f7fd ff81 	bl	8010390 <_printf_i>
 801248e:	e7ed      	b.n	801246c <_svfiprintf_r+0x1c0>
 8012490:	0801422a 	.word	0x0801422a
 8012494:	08014234 	.word	0x08014234
 8012498:	0800fe61 	.word	0x0800fe61
 801249c:	080121f5 	.word	0x080121f5
 80124a0:	08014230 	.word	0x08014230

080124a4 <__sfputc_r>:
 80124a4:	6893      	ldr	r3, [r2, #8]
 80124a6:	3b01      	subs	r3, #1
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	b410      	push	{r4}
 80124ac:	6093      	str	r3, [r2, #8]
 80124ae:	da08      	bge.n	80124c2 <__sfputc_r+0x1e>
 80124b0:	6994      	ldr	r4, [r2, #24]
 80124b2:	42a3      	cmp	r3, r4
 80124b4:	db01      	blt.n	80124ba <__sfputc_r+0x16>
 80124b6:	290a      	cmp	r1, #10
 80124b8:	d103      	bne.n	80124c2 <__sfputc_r+0x1e>
 80124ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124be:	f7fe ba30 	b.w	8010922 <__swbuf_r>
 80124c2:	6813      	ldr	r3, [r2, #0]
 80124c4:	1c58      	adds	r0, r3, #1
 80124c6:	6010      	str	r0, [r2, #0]
 80124c8:	7019      	strb	r1, [r3, #0]
 80124ca:	4608      	mov	r0, r1
 80124cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124d0:	4770      	bx	lr

080124d2 <__sfputs_r>:
 80124d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124d4:	4606      	mov	r6, r0
 80124d6:	460f      	mov	r7, r1
 80124d8:	4614      	mov	r4, r2
 80124da:	18d5      	adds	r5, r2, r3
 80124dc:	42ac      	cmp	r4, r5
 80124de:	d101      	bne.n	80124e4 <__sfputs_r+0x12>
 80124e0:	2000      	movs	r0, #0
 80124e2:	e007      	b.n	80124f4 <__sfputs_r+0x22>
 80124e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124e8:	463a      	mov	r2, r7
 80124ea:	4630      	mov	r0, r6
 80124ec:	f7ff ffda 	bl	80124a4 <__sfputc_r>
 80124f0:	1c43      	adds	r3, r0, #1
 80124f2:	d1f3      	bne.n	80124dc <__sfputs_r+0xa>
 80124f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124f8 <_vfiprintf_r>:
 80124f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124fc:	460d      	mov	r5, r1
 80124fe:	b09d      	sub	sp, #116	@ 0x74
 8012500:	4614      	mov	r4, r2
 8012502:	4698      	mov	r8, r3
 8012504:	4606      	mov	r6, r0
 8012506:	b118      	cbz	r0, 8012510 <_vfiprintf_r+0x18>
 8012508:	6a03      	ldr	r3, [r0, #32]
 801250a:	b90b      	cbnz	r3, 8012510 <_vfiprintf_r+0x18>
 801250c:	f7fe f8ea 	bl	80106e4 <__sinit>
 8012510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012512:	07d9      	lsls	r1, r3, #31
 8012514:	d405      	bmi.n	8012522 <_vfiprintf_r+0x2a>
 8012516:	89ab      	ldrh	r3, [r5, #12]
 8012518:	059a      	lsls	r2, r3, #22
 801251a:	d402      	bmi.n	8012522 <_vfiprintf_r+0x2a>
 801251c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801251e:	f7fe fb84 	bl	8010c2a <__retarget_lock_acquire_recursive>
 8012522:	89ab      	ldrh	r3, [r5, #12]
 8012524:	071b      	lsls	r3, r3, #28
 8012526:	d501      	bpl.n	801252c <_vfiprintf_r+0x34>
 8012528:	692b      	ldr	r3, [r5, #16]
 801252a:	b99b      	cbnz	r3, 8012554 <_vfiprintf_r+0x5c>
 801252c:	4629      	mov	r1, r5
 801252e:	4630      	mov	r0, r6
 8012530:	f7fe fa36 	bl	80109a0 <__swsetup_r>
 8012534:	b170      	cbz	r0, 8012554 <_vfiprintf_r+0x5c>
 8012536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012538:	07dc      	lsls	r4, r3, #31
 801253a:	d504      	bpl.n	8012546 <_vfiprintf_r+0x4e>
 801253c:	f04f 30ff 	mov.w	r0, #4294967295
 8012540:	b01d      	add	sp, #116	@ 0x74
 8012542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012546:	89ab      	ldrh	r3, [r5, #12]
 8012548:	0598      	lsls	r0, r3, #22
 801254a:	d4f7      	bmi.n	801253c <_vfiprintf_r+0x44>
 801254c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801254e:	f7fe fb6d 	bl	8010c2c <__retarget_lock_release_recursive>
 8012552:	e7f3      	b.n	801253c <_vfiprintf_r+0x44>
 8012554:	2300      	movs	r3, #0
 8012556:	9309      	str	r3, [sp, #36]	@ 0x24
 8012558:	2320      	movs	r3, #32
 801255a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801255e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012562:	2330      	movs	r3, #48	@ 0x30
 8012564:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012714 <_vfiprintf_r+0x21c>
 8012568:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801256c:	f04f 0901 	mov.w	r9, #1
 8012570:	4623      	mov	r3, r4
 8012572:	469a      	mov	sl, r3
 8012574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012578:	b10a      	cbz	r2, 801257e <_vfiprintf_r+0x86>
 801257a:	2a25      	cmp	r2, #37	@ 0x25
 801257c:	d1f9      	bne.n	8012572 <_vfiprintf_r+0x7a>
 801257e:	ebba 0b04 	subs.w	fp, sl, r4
 8012582:	d00b      	beq.n	801259c <_vfiprintf_r+0xa4>
 8012584:	465b      	mov	r3, fp
 8012586:	4622      	mov	r2, r4
 8012588:	4629      	mov	r1, r5
 801258a:	4630      	mov	r0, r6
 801258c:	f7ff ffa1 	bl	80124d2 <__sfputs_r>
 8012590:	3001      	adds	r0, #1
 8012592:	f000 80a7 	beq.w	80126e4 <_vfiprintf_r+0x1ec>
 8012596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012598:	445a      	add	r2, fp
 801259a:	9209      	str	r2, [sp, #36]	@ 0x24
 801259c:	f89a 3000 	ldrb.w	r3, [sl]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f000 809f 	beq.w	80126e4 <_vfiprintf_r+0x1ec>
 80125a6:	2300      	movs	r3, #0
 80125a8:	f04f 32ff 	mov.w	r2, #4294967295
 80125ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125b0:	f10a 0a01 	add.w	sl, sl, #1
 80125b4:	9304      	str	r3, [sp, #16]
 80125b6:	9307      	str	r3, [sp, #28]
 80125b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80125bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80125be:	4654      	mov	r4, sl
 80125c0:	2205      	movs	r2, #5
 80125c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125c6:	4853      	ldr	r0, [pc, #332]	@ (8012714 <_vfiprintf_r+0x21c>)
 80125c8:	f7ed fe0a 	bl	80001e0 <memchr>
 80125cc:	9a04      	ldr	r2, [sp, #16]
 80125ce:	b9d8      	cbnz	r0, 8012608 <_vfiprintf_r+0x110>
 80125d0:	06d1      	lsls	r1, r2, #27
 80125d2:	bf44      	itt	mi
 80125d4:	2320      	movmi	r3, #32
 80125d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125da:	0713      	lsls	r3, r2, #28
 80125dc:	bf44      	itt	mi
 80125de:	232b      	movmi	r3, #43	@ 0x2b
 80125e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125e4:	f89a 3000 	ldrb.w	r3, [sl]
 80125e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80125ea:	d015      	beq.n	8012618 <_vfiprintf_r+0x120>
 80125ec:	9a07      	ldr	r2, [sp, #28]
 80125ee:	4654      	mov	r4, sl
 80125f0:	2000      	movs	r0, #0
 80125f2:	f04f 0c0a 	mov.w	ip, #10
 80125f6:	4621      	mov	r1, r4
 80125f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125fc:	3b30      	subs	r3, #48	@ 0x30
 80125fe:	2b09      	cmp	r3, #9
 8012600:	d94b      	bls.n	801269a <_vfiprintf_r+0x1a2>
 8012602:	b1b0      	cbz	r0, 8012632 <_vfiprintf_r+0x13a>
 8012604:	9207      	str	r2, [sp, #28]
 8012606:	e014      	b.n	8012632 <_vfiprintf_r+0x13a>
 8012608:	eba0 0308 	sub.w	r3, r0, r8
 801260c:	fa09 f303 	lsl.w	r3, r9, r3
 8012610:	4313      	orrs	r3, r2
 8012612:	9304      	str	r3, [sp, #16]
 8012614:	46a2      	mov	sl, r4
 8012616:	e7d2      	b.n	80125be <_vfiprintf_r+0xc6>
 8012618:	9b03      	ldr	r3, [sp, #12]
 801261a:	1d19      	adds	r1, r3, #4
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	9103      	str	r1, [sp, #12]
 8012620:	2b00      	cmp	r3, #0
 8012622:	bfbb      	ittet	lt
 8012624:	425b      	neglt	r3, r3
 8012626:	f042 0202 	orrlt.w	r2, r2, #2
 801262a:	9307      	strge	r3, [sp, #28]
 801262c:	9307      	strlt	r3, [sp, #28]
 801262e:	bfb8      	it	lt
 8012630:	9204      	strlt	r2, [sp, #16]
 8012632:	7823      	ldrb	r3, [r4, #0]
 8012634:	2b2e      	cmp	r3, #46	@ 0x2e
 8012636:	d10a      	bne.n	801264e <_vfiprintf_r+0x156>
 8012638:	7863      	ldrb	r3, [r4, #1]
 801263a:	2b2a      	cmp	r3, #42	@ 0x2a
 801263c:	d132      	bne.n	80126a4 <_vfiprintf_r+0x1ac>
 801263e:	9b03      	ldr	r3, [sp, #12]
 8012640:	1d1a      	adds	r2, r3, #4
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	9203      	str	r2, [sp, #12]
 8012646:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801264a:	3402      	adds	r4, #2
 801264c:	9305      	str	r3, [sp, #20]
 801264e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012724 <_vfiprintf_r+0x22c>
 8012652:	7821      	ldrb	r1, [r4, #0]
 8012654:	2203      	movs	r2, #3
 8012656:	4650      	mov	r0, sl
 8012658:	f7ed fdc2 	bl	80001e0 <memchr>
 801265c:	b138      	cbz	r0, 801266e <_vfiprintf_r+0x176>
 801265e:	9b04      	ldr	r3, [sp, #16]
 8012660:	eba0 000a 	sub.w	r0, r0, sl
 8012664:	2240      	movs	r2, #64	@ 0x40
 8012666:	4082      	lsls	r2, r0
 8012668:	4313      	orrs	r3, r2
 801266a:	3401      	adds	r4, #1
 801266c:	9304      	str	r3, [sp, #16]
 801266e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012672:	4829      	ldr	r0, [pc, #164]	@ (8012718 <_vfiprintf_r+0x220>)
 8012674:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012678:	2206      	movs	r2, #6
 801267a:	f7ed fdb1 	bl	80001e0 <memchr>
 801267e:	2800      	cmp	r0, #0
 8012680:	d03f      	beq.n	8012702 <_vfiprintf_r+0x20a>
 8012682:	4b26      	ldr	r3, [pc, #152]	@ (801271c <_vfiprintf_r+0x224>)
 8012684:	bb1b      	cbnz	r3, 80126ce <_vfiprintf_r+0x1d6>
 8012686:	9b03      	ldr	r3, [sp, #12]
 8012688:	3307      	adds	r3, #7
 801268a:	f023 0307 	bic.w	r3, r3, #7
 801268e:	3308      	adds	r3, #8
 8012690:	9303      	str	r3, [sp, #12]
 8012692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012694:	443b      	add	r3, r7
 8012696:	9309      	str	r3, [sp, #36]	@ 0x24
 8012698:	e76a      	b.n	8012570 <_vfiprintf_r+0x78>
 801269a:	fb0c 3202 	mla	r2, ip, r2, r3
 801269e:	460c      	mov	r4, r1
 80126a0:	2001      	movs	r0, #1
 80126a2:	e7a8      	b.n	80125f6 <_vfiprintf_r+0xfe>
 80126a4:	2300      	movs	r3, #0
 80126a6:	3401      	adds	r4, #1
 80126a8:	9305      	str	r3, [sp, #20]
 80126aa:	4619      	mov	r1, r3
 80126ac:	f04f 0c0a 	mov.w	ip, #10
 80126b0:	4620      	mov	r0, r4
 80126b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126b6:	3a30      	subs	r2, #48	@ 0x30
 80126b8:	2a09      	cmp	r2, #9
 80126ba:	d903      	bls.n	80126c4 <_vfiprintf_r+0x1cc>
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d0c6      	beq.n	801264e <_vfiprintf_r+0x156>
 80126c0:	9105      	str	r1, [sp, #20]
 80126c2:	e7c4      	b.n	801264e <_vfiprintf_r+0x156>
 80126c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80126c8:	4604      	mov	r4, r0
 80126ca:	2301      	movs	r3, #1
 80126cc:	e7f0      	b.n	80126b0 <_vfiprintf_r+0x1b8>
 80126ce:	ab03      	add	r3, sp, #12
 80126d0:	9300      	str	r3, [sp, #0]
 80126d2:	462a      	mov	r2, r5
 80126d4:	4b12      	ldr	r3, [pc, #72]	@ (8012720 <_vfiprintf_r+0x228>)
 80126d6:	a904      	add	r1, sp, #16
 80126d8:	4630      	mov	r0, r6
 80126da:	f7fd fbc1 	bl	800fe60 <_printf_float>
 80126de:	4607      	mov	r7, r0
 80126e0:	1c78      	adds	r0, r7, #1
 80126e2:	d1d6      	bne.n	8012692 <_vfiprintf_r+0x19a>
 80126e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126e6:	07d9      	lsls	r1, r3, #31
 80126e8:	d405      	bmi.n	80126f6 <_vfiprintf_r+0x1fe>
 80126ea:	89ab      	ldrh	r3, [r5, #12]
 80126ec:	059a      	lsls	r2, r3, #22
 80126ee:	d402      	bmi.n	80126f6 <_vfiprintf_r+0x1fe>
 80126f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126f2:	f7fe fa9b 	bl	8010c2c <__retarget_lock_release_recursive>
 80126f6:	89ab      	ldrh	r3, [r5, #12]
 80126f8:	065b      	lsls	r3, r3, #25
 80126fa:	f53f af1f 	bmi.w	801253c <_vfiprintf_r+0x44>
 80126fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012700:	e71e      	b.n	8012540 <_vfiprintf_r+0x48>
 8012702:	ab03      	add	r3, sp, #12
 8012704:	9300      	str	r3, [sp, #0]
 8012706:	462a      	mov	r2, r5
 8012708:	4b05      	ldr	r3, [pc, #20]	@ (8012720 <_vfiprintf_r+0x228>)
 801270a:	a904      	add	r1, sp, #16
 801270c:	4630      	mov	r0, r6
 801270e:	f7fd fe3f 	bl	8010390 <_printf_i>
 8012712:	e7e4      	b.n	80126de <_vfiprintf_r+0x1e6>
 8012714:	0801422a 	.word	0x0801422a
 8012718:	08014234 	.word	0x08014234
 801271c:	0800fe61 	.word	0x0800fe61
 8012720:	080124d3 	.word	0x080124d3
 8012724:	08014230 	.word	0x08014230

08012728 <__sflush_r>:
 8012728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012730:	0716      	lsls	r6, r2, #28
 8012732:	4605      	mov	r5, r0
 8012734:	460c      	mov	r4, r1
 8012736:	d454      	bmi.n	80127e2 <__sflush_r+0xba>
 8012738:	684b      	ldr	r3, [r1, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	dc02      	bgt.n	8012744 <__sflush_r+0x1c>
 801273e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012740:	2b00      	cmp	r3, #0
 8012742:	dd48      	ble.n	80127d6 <__sflush_r+0xae>
 8012744:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012746:	2e00      	cmp	r6, #0
 8012748:	d045      	beq.n	80127d6 <__sflush_r+0xae>
 801274a:	2300      	movs	r3, #0
 801274c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012750:	682f      	ldr	r7, [r5, #0]
 8012752:	6a21      	ldr	r1, [r4, #32]
 8012754:	602b      	str	r3, [r5, #0]
 8012756:	d030      	beq.n	80127ba <__sflush_r+0x92>
 8012758:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801275a:	89a3      	ldrh	r3, [r4, #12]
 801275c:	0759      	lsls	r1, r3, #29
 801275e:	d505      	bpl.n	801276c <__sflush_r+0x44>
 8012760:	6863      	ldr	r3, [r4, #4]
 8012762:	1ad2      	subs	r2, r2, r3
 8012764:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012766:	b10b      	cbz	r3, 801276c <__sflush_r+0x44>
 8012768:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801276a:	1ad2      	subs	r2, r2, r3
 801276c:	2300      	movs	r3, #0
 801276e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012770:	6a21      	ldr	r1, [r4, #32]
 8012772:	4628      	mov	r0, r5
 8012774:	47b0      	blx	r6
 8012776:	1c43      	adds	r3, r0, #1
 8012778:	89a3      	ldrh	r3, [r4, #12]
 801277a:	d106      	bne.n	801278a <__sflush_r+0x62>
 801277c:	6829      	ldr	r1, [r5, #0]
 801277e:	291d      	cmp	r1, #29
 8012780:	d82b      	bhi.n	80127da <__sflush_r+0xb2>
 8012782:	4a2a      	ldr	r2, [pc, #168]	@ (801282c <__sflush_r+0x104>)
 8012784:	40ca      	lsrs	r2, r1
 8012786:	07d6      	lsls	r6, r2, #31
 8012788:	d527      	bpl.n	80127da <__sflush_r+0xb2>
 801278a:	2200      	movs	r2, #0
 801278c:	6062      	str	r2, [r4, #4]
 801278e:	04d9      	lsls	r1, r3, #19
 8012790:	6922      	ldr	r2, [r4, #16]
 8012792:	6022      	str	r2, [r4, #0]
 8012794:	d504      	bpl.n	80127a0 <__sflush_r+0x78>
 8012796:	1c42      	adds	r2, r0, #1
 8012798:	d101      	bne.n	801279e <__sflush_r+0x76>
 801279a:	682b      	ldr	r3, [r5, #0]
 801279c:	b903      	cbnz	r3, 80127a0 <__sflush_r+0x78>
 801279e:	6560      	str	r0, [r4, #84]	@ 0x54
 80127a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127a2:	602f      	str	r7, [r5, #0]
 80127a4:	b1b9      	cbz	r1, 80127d6 <__sflush_r+0xae>
 80127a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127aa:	4299      	cmp	r1, r3
 80127ac:	d002      	beq.n	80127b4 <__sflush_r+0x8c>
 80127ae:	4628      	mov	r0, r5
 80127b0:	f7ff f8a6 	bl	8011900 <_free_r>
 80127b4:	2300      	movs	r3, #0
 80127b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80127b8:	e00d      	b.n	80127d6 <__sflush_r+0xae>
 80127ba:	2301      	movs	r3, #1
 80127bc:	4628      	mov	r0, r5
 80127be:	47b0      	blx	r6
 80127c0:	4602      	mov	r2, r0
 80127c2:	1c50      	adds	r0, r2, #1
 80127c4:	d1c9      	bne.n	801275a <__sflush_r+0x32>
 80127c6:	682b      	ldr	r3, [r5, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d0c6      	beq.n	801275a <__sflush_r+0x32>
 80127cc:	2b1d      	cmp	r3, #29
 80127ce:	d001      	beq.n	80127d4 <__sflush_r+0xac>
 80127d0:	2b16      	cmp	r3, #22
 80127d2:	d11e      	bne.n	8012812 <__sflush_r+0xea>
 80127d4:	602f      	str	r7, [r5, #0]
 80127d6:	2000      	movs	r0, #0
 80127d8:	e022      	b.n	8012820 <__sflush_r+0xf8>
 80127da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127de:	b21b      	sxth	r3, r3
 80127e0:	e01b      	b.n	801281a <__sflush_r+0xf2>
 80127e2:	690f      	ldr	r7, [r1, #16]
 80127e4:	2f00      	cmp	r7, #0
 80127e6:	d0f6      	beq.n	80127d6 <__sflush_r+0xae>
 80127e8:	0793      	lsls	r3, r2, #30
 80127ea:	680e      	ldr	r6, [r1, #0]
 80127ec:	bf08      	it	eq
 80127ee:	694b      	ldreq	r3, [r1, #20]
 80127f0:	600f      	str	r7, [r1, #0]
 80127f2:	bf18      	it	ne
 80127f4:	2300      	movne	r3, #0
 80127f6:	eba6 0807 	sub.w	r8, r6, r7
 80127fa:	608b      	str	r3, [r1, #8]
 80127fc:	f1b8 0f00 	cmp.w	r8, #0
 8012800:	dde9      	ble.n	80127d6 <__sflush_r+0xae>
 8012802:	6a21      	ldr	r1, [r4, #32]
 8012804:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012806:	4643      	mov	r3, r8
 8012808:	463a      	mov	r2, r7
 801280a:	4628      	mov	r0, r5
 801280c:	47b0      	blx	r6
 801280e:	2800      	cmp	r0, #0
 8012810:	dc08      	bgt.n	8012824 <__sflush_r+0xfc>
 8012812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801281a:	81a3      	strh	r3, [r4, #12]
 801281c:	f04f 30ff 	mov.w	r0, #4294967295
 8012820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012824:	4407      	add	r7, r0
 8012826:	eba8 0800 	sub.w	r8, r8, r0
 801282a:	e7e7      	b.n	80127fc <__sflush_r+0xd4>
 801282c:	20400001 	.word	0x20400001

08012830 <_fflush_r>:
 8012830:	b538      	push	{r3, r4, r5, lr}
 8012832:	690b      	ldr	r3, [r1, #16]
 8012834:	4605      	mov	r5, r0
 8012836:	460c      	mov	r4, r1
 8012838:	b913      	cbnz	r3, 8012840 <_fflush_r+0x10>
 801283a:	2500      	movs	r5, #0
 801283c:	4628      	mov	r0, r5
 801283e:	bd38      	pop	{r3, r4, r5, pc}
 8012840:	b118      	cbz	r0, 801284a <_fflush_r+0x1a>
 8012842:	6a03      	ldr	r3, [r0, #32]
 8012844:	b90b      	cbnz	r3, 801284a <_fflush_r+0x1a>
 8012846:	f7fd ff4d 	bl	80106e4 <__sinit>
 801284a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d0f3      	beq.n	801283a <_fflush_r+0xa>
 8012852:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012854:	07d0      	lsls	r0, r2, #31
 8012856:	d404      	bmi.n	8012862 <_fflush_r+0x32>
 8012858:	0599      	lsls	r1, r3, #22
 801285a:	d402      	bmi.n	8012862 <_fflush_r+0x32>
 801285c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801285e:	f7fe f9e4 	bl	8010c2a <__retarget_lock_acquire_recursive>
 8012862:	4628      	mov	r0, r5
 8012864:	4621      	mov	r1, r4
 8012866:	f7ff ff5f 	bl	8012728 <__sflush_r>
 801286a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801286c:	07da      	lsls	r2, r3, #31
 801286e:	4605      	mov	r5, r0
 8012870:	d4e4      	bmi.n	801283c <_fflush_r+0xc>
 8012872:	89a3      	ldrh	r3, [r4, #12]
 8012874:	059b      	lsls	r3, r3, #22
 8012876:	d4e1      	bmi.n	801283c <_fflush_r+0xc>
 8012878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801287a:	f7fe f9d7 	bl	8010c2c <__retarget_lock_release_recursive>
 801287e:	e7dd      	b.n	801283c <_fflush_r+0xc>

08012880 <__swhatbuf_r>:
 8012880:	b570      	push	{r4, r5, r6, lr}
 8012882:	460c      	mov	r4, r1
 8012884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012888:	2900      	cmp	r1, #0
 801288a:	b096      	sub	sp, #88	@ 0x58
 801288c:	4615      	mov	r5, r2
 801288e:	461e      	mov	r6, r3
 8012890:	da0d      	bge.n	80128ae <__swhatbuf_r+0x2e>
 8012892:	89a3      	ldrh	r3, [r4, #12]
 8012894:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012898:	f04f 0100 	mov.w	r1, #0
 801289c:	bf14      	ite	ne
 801289e:	2340      	movne	r3, #64	@ 0x40
 80128a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80128a4:	2000      	movs	r0, #0
 80128a6:	6031      	str	r1, [r6, #0]
 80128a8:	602b      	str	r3, [r5, #0]
 80128aa:	b016      	add	sp, #88	@ 0x58
 80128ac:	bd70      	pop	{r4, r5, r6, pc}
 80128ae:	466a      	mov	r2, sp
 80128b0:	f000 f862 	bl	8012978 <_fstat_r>
 80128b4:	2800      	cmp	r0, #0
 80128b6:	dbec      	blt.n	8012892 <__swhatbuf_r+0x12>
 80128b8:	9901      	ldr	r1, [sp, #4]
 80128ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80128be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80128c2:	4259      	negs	r1, r3
 80128c4:	4159      	adcs	r1, r3
 80128c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80128ca:	e7eb      	b.n	80128a4 <__swhatbuf_r+0x24>

080128cc <__smakebuf_r>:
 80128cc:	898b      	ldrh	r3, [r1, #12]
 80128ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128d0:	079d      	lsls	r5, r3, #30
 80128d2:	4606      	mov	r6, r0
 80128d4:	460c      	mov	r4, r1
 80128d6:	d507      	bpl.n	80128e8 <__smakebuf_r+0x1c>
 80128d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80128dc:	6023      	str	r3, [r4, #0]
 80128de:	6123      	str	r3, [r4, #16]
 80128e0:	2301      	movs	r3, #1
 80128e2:	6163      	str	r3, [r4, #20]
 80128e4:	b003      	add	sp, #12
 80128e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128e8:	ab01      	add	r3, sp, #4
 80128ea:	466a      	mov	r2, sp
 80128ec:	f7ff ffc8 	bl	8012880 <__swhatbuf_r>
 80128f0:	9f00      	ldr	r7, [sp, #0]
 80128f2:	4605      	mov	r5, r0
 80128f4:	4639      	mov	r1, r7
 80128f6:	4630      	mov	r0, r6
 80128f8:	f7ff f876 	bl	80119e8 <_malloc_r>
 80128fc:	b948      	cbnz	r0, 8012912 <__smakebuf_r+0x46>
 80128fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012902:	059a      	lsls	r2, r3, #22
 8012904:	d4ee      	bmi.n	80128e4 <__smakebuf_r+0x18>
 8012906:	f023 0303 	bic.w	r3, r3, #3
 801290a:	f043 0302 	orr.w	r3, r3, #2
 801290e:	81a3      	strh	r3, [r4, #12]
 8012910:	e7e2      	b.n	80128d8 <__smakebuf_r+0xc>
 8012912:	89a3      	ldrh	r3, [r4, #12]
 8012914:	6020      	str	r0, [r4, #0]
 8012916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801291a:	81a3      	strh	r3, [r4, #12]
 801291c:	9b01      	ldr	r3, [sp, #4]
 801291e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012922:	b15b      	cbz	r3, 801293c <__smakebuf_r+0x70>
 8012924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012928:	4630      	mov	r0, r6
 801292a:	f000 f837 	bl	801299c <_isatty_r>
 801292e:	b128      	cbz	r0, 801293c <__smakebuf_r+0x70>
 8012930:	89a3      	ldrh	r3, [r4, #12]
 8012932:	f023 0303 	bic.w	r3, r3, #3
 8012936:	f043 0301 	orr.w	r3, r3, #1
 801293a:	81a3      	strh	r3, [r4, #12]
 801293c:	89a3      	ldrh	r3, [r4, #12]
 801293e:	431d      	orrs	r5, r3
 8012940:	81a5      	strh	r5, [r4, #12]
 8012942:	e7cf      	b.n	80128e4 <__smakebuf_r+0x18>

08012944 <memmove>:
 8012944:	4288      	cmp	r0, r1
 8012946:	b510      	push	{r4, lr}
 8012948:	eb01 0402 	add.w	r4, r1, r2
 801294c:	d902      	bls.n	8012954 <memmove+0x10>
 801294e:	4284      	cmp	r4, r0
 8012950:	4623      	mov	r3, r4
 8012952:	d807      	bhi.n	8012964 <memmove+0x20>
 8012954:	1e43      	subs	r3, r0, #1
 8012956:	42a1      	cmp	r1, r4
 8012958:	d008      	beq.n	801296c <memmove+0x28>
 801295a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801295e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012962:	e7f8      	b.n	8012956 <memmove+0x12>
 8012964:	4402      	add	r2, r0
 8012966:	4601      	mov	r1, r0
 8012968:	428a      	cmp	r2, r1
 801296a:	d100      	bne.n	801296e <memmove+0x2a>
 801296c:	bd10      	pop	{r4, pc}
 801296e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012976:	e7f7      	b.n	8012968 <memmove+0x24>

08012978 <_fstat_r>:
 8012978:	b538      	push	{r3, r4, r5, lr}
 801297a:	4d07      	ldr	r5, [pc, #28]	@ (8012998 <_fstat_r+0x20>)
 801297c:	2300      	movs	r3, #0
 801297e:	4604      	mov	r4, r0
 8012980:	4608      	mov	r0, r1
 8012982:	4611      	mov	r1, r2
 8012984:	602b      	str	r3, [r5, #0]
 8012986:	f7f1 fd25 	bl	80043d4 <_fstat>
 801298a:	1c43      	adds	r3, r0, #1
 801298c:	d102      	bne.n	8012994 <_fstat_r+0x1c>
 801298e:	682b      	ldr	r3, [r5, #0]
 8012990:	b103      	cbz	r3, 8012994 <_fstat_r+0x1c>
 8012992:	6023      	str	r3, [r4, #0]
 8012994:	bd38      	pop	{r3, r4, r5, pc}
 8012996:	bf00      	nop
 8012998:	20005fd8 	.word	0x20005fd8

0801299c <_isatty_r>:
 801299c:	b538      	push	{r3, r4, r5, lr}
 801299e:	4d06      	ldr	r5, [pc, #24]	@ (80129b8 <_isatty_r+0x1c>)
 80129a0:	2300      	movs	r3, #0
 80129a2:	4604      	mov	r4, r0
 80129a4:	4608      	mov	r0, r1
 80129a6:	602b      	str	r3, [r5, #0]
 80129a8:	f7f1 fd24 	bl	80043f4 <_isatty>
 80129ac:	1c43      	adds	r3, r0, #1
 80129ae:	d102      	bne.n	80129b6 <_isatty_r+0x1a>
 80129b0:	682b      	ldr	r3, [r5, #0]
 80129b2:	b103      	cbz	r3, 80129b6 <_isatty_r+0x1a>
 80129b4:	6023      	str	r3, [r4, #0]
 80129b6:	bd38      	pop	{r3, r4, r5, pc}
 80129b8:	20005fd8 	.word	0x20005fd8

080129bc <_sbrk_r>:
 80129bc:	b538      	push	{r3, r4, r5, lr}
 80129be:	4d06      	ldr	r5, [pc, #24]	@ (80129d8 <_sbrk_r+0x1c>)
 80129c0:	2300      	movs	r3, #0
 80129c2:	4604      	mov	r4, r0
 80129c4:	4608      	mov	r0, r1
 80129c6:	602b      	str	r3, [r5, #0]
 80129c8:	f7f1 fd2c 	bl	8004424 <_sbrk>
 80129cc:	1c43      	adds	r3, r0, #1
 80129ce:	d102      	bne.n	80129d6 <_sbrk_r+0x1a>
 80129d0:	682b      	ldr	r3, [r5, #0]
 80129d2:	b103      	cbz	r3, 80129d6 <_sbrk_r+0x1a>
 80129d4:	6023      	str	r3, [r4, #0]
 80129d6:	bd38      	pop	{r3, r4, r5, pc}
 80129d8:	20005fd8 	.word	0x20005fd8

080129dc <__assert_func>:
 80129dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129de:	4614      	mov	r4, r2
 80129e0:	461a      	mov	r2, r3
 80129e2:	4b09      	ldr	r3, [pc, #36]	@ (8012a08 <__assert_func+0x2c>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	4605      	mov	r5, r0
 80129e8:	68d8      	ldr	r0, [r3, #12]
 80129ea:	b14c      	cbz	r4, 8012a00 <__assert_func+0x24>
 80129ec:	4b07      	ldr	r3, [pc, #28]	@ (8012a0c <__assert_func+0x30>)
 80129ee:	9100      	str	r1, [sp, #0]
 80129f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80129f4:	4906      	ldr	r1, [pc, #24]	@ (8012a10 <__assert_func+0x34>)
 80129f6:	462b      	mov	r3, r5
 80129f8:	f000 f870 	bl	8012adc <fiprintf>
 80129fc:	f000 f880 	bl	8012b00 <abort>
 8012a00:	4b04      	ldr	r3, [pc, #16]	@ (8012a14 <__assert_func+0x38>)
 8012a02:	461c      	mov	r4, r3
 8012a04:	e7f3      	b.n	80129ee <__assert_func+0x12>
 8012a06:	bf00      	nop
 8012a08:	20000088 	.word	0x20000088
 8012a0c:	08014245 	.word	0x08014245
 8012a10:	08014252 	.word	0x08014252
 8012a14:	08014280 	.word	0x08014280

08012a18 <_calloc_r>:
 8012a18:	b570      	push	{r4, r5, r6, lr}
 8012a1a:	fba1 5402 	umull	r5, r4, r1, r2
 8012a1e:	b934      	cbnz	r4, 8012a2e <_calloc_r+0x16>
 8012a20:	4629      	mov	r1, r5
 8012a22:	f7fe ffe1 	bl	80119e8 <_malloc_r>
 8012a26:	4606      	mov	r6, r0
 8012a28:	b928      	cbnz	r0, 8012a36 <_calloc_r+0x1e>
 8012a2a:	4630      	mov	r0, r6
 8012a2c:	bd70      	pop	{r4, r5, r6, pc}
 8012a2e:	220c      	movs	r2, #12
 8012a30:	6002      	str	r2, [r0, #0]
 8012a32:	2600      	movs	r6, #0
 8012a34:	e7f9      	b.n	8012a2a <_calloc_r+0x12>
 8012a36:	462a      	mov	r2, r5
 8012a38:	4621      	mov	r1, r4
 8012a3a:	f7fe f807 	bl	8010a4c <memset>
 8012a3e:	e7f4      	b.n	8012a2a <_calloc_r+0x12>

08012a40 <__ascii_mbtowc>:
 8012a40:	b082      	sub	sp, #8
 8012a42:	b901      	cbnz	r1, 8012a46 <__ascii_mbtowc+0x6>
 8012a44:	a901      	add	r1, sp, #4
 8012a46:	b142      	cbz	r2, 8012a5a <__ascii_mbtowc+0x1a>
 8012a48:	b14b      	cbz	r3, 8012a5e <__ascii_mbtowc+0x1e>
 8012a4a:	7813      	ldrb	r3, [r2, #0]
 8012a4c:	600b      	str	r3, [r1, #0]
 8012a4e:	7812      	ldrb	r2, [r2, #0]
 8012a50:	1e10      	subs	r0, r2, #0
 8012a52:	bf18      	it	ne
 8012a54:	2001      	movne	r0, #1
 8012a56:	b002      	add	sp, #8
 8012a58:	4770      	bx	lr
 8012a5a:	4610      	mov	r0, r2
 8012a5c:	e7fb      	b.n	8012a56 <__ascii_mbtowc+0x16>
 8012a5e:	f06f 0001 	mvn.w	r0, #1
 8012a62:	e7f8      	b.n	8012a56 <__ascii_mbtowc+0x16>

08012a64 <_realloc_r>:
 8012a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a68:	4607      	mov	r7, r0
 8012a6a:	4614      	mov	r4, r2
 8012a6c:	460d      	mov	r5, r1
 8012a6e:	b921      	cbnz	r1, 8012a7a <_realloc_r+0x16>
 8012a70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a74:	4611      	mov	r1, r2
 8012a76:	f7fe bfb7 	b.w	80119e8 <_malloc_r>
 8012a7a:	b92a      	cbnz	r2, 8012a88 <_realloc_r+0x24>
 8012a7c:	f7fe ff40 	bl	8011900 <_free_r>
 8012a80:	4625      	mov	r5, r4
 8012a82:	4628      	mov	r0, r5
 8012a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a88:	f000 f841 	bl	8012b0e <_malloc_usable_size_r>
 8012a8c:	4284      	cmp	r4, r0
 8012a8e:	4606      	mov	r6, r0
 8012a90:	d802      	bhi.n	8012a98 <_realloc_r+0x34>
 8012a92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012a96:	d8f4      	bhi.n	8012a82 <_realloc_r+0x1e>
 8012a98:	4621      	mov	r1, r4
 8012a9a:	4638      	mov	r0, r7
 8012a9c:	f7fe ffa4 	bl	80119e8 <_malloc_r>
 8012aa0:	4680      	mov	r8, r0
 8012aa2:	b908      	cbnz	r0, 8012aa8 <_realloc_r+0x44>
 8012aa4:	4645      	mov	r5, r8
 8012aa6:	e7ec      	b.n	8012a82 <_realloc_r+0x1e>
 8012aa8:	42b4      	cmp	r4, r6
 8012aaa:	4622      	mov	r2, r4
 8012aac:	4629      	mov	r1, r5
 8012aae:	bf28      	it	cs
 8012ab0:	4632      	movcs	r2, r6
 8012ab2:	f7fe f8bc 	bl	8010c2e <memcpy>
 8012ab6:	4629      	mov	r1, r5
 8012ab8:	4638      	mov	r0, r7
 8012aba:	f7fe ff21 	bl	8011900 <_free_r>
 8012abe:	e7f1      	b.n	8012aa4 <_realloc_r+0x40>

08012ac0 <__ascii_wctomb>:
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	4608      	mov	r0, r1
 8012ac4:	b141      	cbz	r1, 8012ad8 <__ascii_wctomb+0x18>
 8012ac6:	2aff      	cmp	r2, #255	@ 0xff
 8012ac8:	d904      	bls.n	8012ad4 <__ascii_wctomb+0x14>
 8012aca:	228a      	movs	r2, #138	@ 0x8a
 8012acc:	601a      	str	r2, [r3, #0]
 8012ace:	f04f 30ff 	mov.w	r0, #4294967295
 8012ad2:	4770      	bx	lr
 8012ad4:	700a      	strb	r2, [r1, #0]
 8012ad6:	2001      	movs	r0, #1
 8012ad8:	4770      	bx	lr
	...

08012adc <fiprintf>:
 8012adc:	b40e      	push	{r1, r2, r3}
 8012ade:	b503      	push	{r0, r1, lr}
 8012ae0:	4601      	mov	r1, r0
 8012ae2:	ab03      	add	r3, sp, #12
 8012ae4:	4805      	ldr	r0, [pc, #20]	@ (8012afc <fiprintf+0x20>)
 8012ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012aea:	6800      	ldr	r0, [r0, #0]
 8012aec:	9301      	str	r3, [sp, #4]
 8012aee:	f7ff fd03 	bl	80124f8 <_vfiprintf_r>
 8012af2:	b002      	add	sp, #8
 8012af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012af8:	b003      	add	sp, #12
 8012afa:	4770      	bx	lr
 8012afc:	20000088 	.word	0x20000088

08012b00 <abort>:
 8012b00:	b508      	push	{r3, lr}
 8012b02:	2006      	movs	r0, #6
 8012b04:	f000 f834 	bl	8012b70 <raise>
 8012b08:	2001      	movs	r0, #1
 8012b0a:	f7f1 fc2f 	bl	800436c <_exit>

08012b0e <_malloc_usable_size_r>:
 8012b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b12:	1f18      	subs	r0, r3, #4
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	bfbc      	itt	lt
 8012b18:	580b      	ldrlt	r3, [r1, r0]
 8012b1a:	18c0      	addlt	r0, r0, r3
 8012b1c:	4770      	bx	lr

08012b1e <_raise_r>:
 8012b1e:	291f      	cmp	r1, #31
 8012b20:	b538      	push	{r3, r4, r5, lr}
 8012b22:	4605      	mov	r5, r0
 8012b24:	460c      	mov	r4, r1
 8012b26:	d904      	bls.n	8012b32 <_raise_r+0x14>
 8012b28:	2316      	movs	r3, #22
 8012b2a:	6003      	str	r3, [r0, #0]
 8012b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b30:	bd38      	pop	{r3, r4, r5, pc}
 8012b32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012b34:	b112      	cbz	r2, 8012b3c <_raise_r+0x1e>
 8012b36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b3a:	b94b      	cbnz	r3, 8012b50 <_raise_r+0x32>
 8012b3c:	4628      	mov	r0, r5
 8012b3e:	f000 f831 	bl	8012ba4 <_getpid_r>
 8012b42:	4622      	mov	r2, r4
 8012b44:	4601      	mov	r1, r0
 8012b46:	4628      	mov	r0, r5
 8012b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b4c:	f000 b818 	b.w	8012b80 <_kill_r>
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d00a      	beq.n	8012b6a <_raise_r+0x4c>
 8012b54:	1c59      	adds	r1, r3, #1
 8012b56:	d103      	bne.n	8012b60 <_raise_r+0x42>
 8012b58:	2316      	movs	r3, #22
 8012b5a:	6003      	str	r3, [r0, #0]
 8012b5c:	2001      	movs	r0, #1
 8012b5e:	e7e7      	b.n	8012b30 <_raise_r+0x12>
 8012b60:	2100      	movs	r1, #0
 8012b62:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012b66:	4620      	mov	r0, r4
 8012b68:	4798      	blx	r3
 8012b6a:	2000      	movs	r0, #0
 8012b6c:	e7e0      	b.n	8012b30 <_raise_r+0x12>
	...

08012b70 <raise>:
 8012b70:	4b02      	ldr	r3, [pc, #8]	@ (8012b7c <raise+0xc>)
 8012b72:	4601      	mov	r1, r0
 8012b74:	6818      	ldr	r0, [r3, #0]
 8012b76:	f7ff bfd2 	b.w	8012b1e <_raise_r>
 8012b7a:	bf00      	nop
 8012b7c:	20000088 	.word	0x20000088

08012b80 <_kill_r>:
 8012b80:	b538      	push	{r3, r4, r5, lr}
 8012b82:	4d07      	ldr	r5, [pc, #28]	@ (8012ba0 <_kill_r+0x20>)
 8012b84:	2300      	movs	r3, #0
 8012b86:	4604      	mov	r4, r0
 8012b88:	4608      	mov	r0, r1
 8012b8a:	4611      	mov	r1, r2
 8012b8c:	602b      	str	r3, [r5, #0]
 8012b8e:	f7f1 fbdd 	bl	800434c <_kill>
 8012b92:	1c43      	adds	r3, r0, #1
 8012b94:	d102      	bne.n	8012b9c <_kill_r+0x1c>
 8012b96:	682b      	ldr	r3, [r5, #0]
 8012b98:	b103      	cbz	r3, 8012b9c <_kill_r+0x1c>
 8012b9a:	6023      	str	r3, [r4, #0]
 8012b9c:	bd38      	pop	{r3, r4, r5, pc}
 8012b9e:	bf00      	nop
 8012ba0:	20005fd8 	.word	0x20005fd8

08012ba4 <_getpid_r>:
 8012ba4:	f7f1 bbca 	b.w	800433c <_getpid>

08012ba8 <atan2f>:
 8012ba8:	f000 b856 	b.w	8012c58 <__ieee754_atan2f>

08012bac <fmaxf>:
 8012bac:	b508      	push	{r3, lr}
 8012bae:	ed2d 8b02 	vpush	{d8}
 8012bb2:	eeb0 8a40 	vmov.f32	s16, s0
 8012bb6:	eef0 8a60 	vmov.f32	s17, s1
 8012bba:	f000 f831 	bl	8012c20 <__fpclassifyf>
 8012bbe:	b930      	cbnz	r0, 8012bce <fmaxf+0x22>
 8012bc0:	eeb0 8a68 	vmov.f32	s16, s17
 8012bc4:	eeb0 0a48 	vmov.f32	s0, s16
 8012bc8:	ecbd 8b02 	vpop	{d8}
 8012bcc:	bd08      	pop	{r3, pc}
 8012bce:	eeb0 0a68 	vmov.f32	s0, s17
 8012bd2:	f000 f825 	bl	8012c20 <__fpclassifyf>
 8012bd6:	2800      	cmp	r0, #0
 8012bd8:	d0f4      	beq.n	8012bc4 <fmaxf+0x18>
 8012bda:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be2:	dded      	ble.n	8012bc0 <fmaxf+0x14>
 8012be4:	e7ee      	b.n	8012bc4 <fmaxf+0x18>

08012be6 <fminf>:
 8012be6:	b508      	push	{r3, lr}
 8012be8:	ed2d 8b02 	vpush	{d8}
 8012bec:	eeb0 8a40 	vmov.f32	s16, s0
 8012bf0:	eef0 8a60 	vmov.f32	s17, s1
 8012bf4:	f000 f814 	bl	8012c20 <__fpclassifyf>
 8012bf8:	b930      	cbnz	r0, 8012c08 <fminf+0x22>
 8012bfa:	eeb0 8a68 	vmov.f32	s16, s17
 8012bfe:	eeb0 0a48 	vmov.f32	s0, s16
 8012c02:	ecbd 8b02 	vpop	{d8}
 8012c06:	bd08      	pop	{r3, pc}
 8012c08:	eeb0 0a68 	vmov.f32	s0, s17
 8012c0c:	f000 f808 	bl	8012c20 <__fpclassifyf>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d0f4      	beq.n	8012bfe <fminf+0x18>
 8012c14:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1c:	d5ed      	bpl.n	8012bfa <fminf+0x14>
 8012c1e:	e7ee      	b.n	8012bfe <fminf+0x18>

08012c20 <__fpclassifyf>:
 8012c20:	ee10 3a10 	vmov	r3, s0
 8012c24:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8012c28:	d00d      	beq.n	8012c46 <__fpclassifyf+0x26>
 8012c2a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012c2e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012c32:	d30a      	bcc.n	8012c4a <__fpclassifyf+0x2a>
 8012c34:	4b07      	ldr	r3, [pc, #28]	@ (8012c54 <__fpclassifyf+0x34>)
 8012c36:	1e42      	subs	r2, r0, #1
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d908      	bls.n	8012c4e <__fpclassifyf+0x2e>
 8012c3c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012c40:	4258      	negs	r0, r3
 8012c42:	4158      	adcs	r0, r3
 8012c44:	4770      	bx	lr
 8012c46:	2002      	movs	r0, #2
 8012c48:	4770      	bx	lr
 8012c4a:	2004      	movs	r0, #4
 8012c4c:	4770      	bx	lr
 8012c4e:	2003      	movs	r0, #3
 8012c50:	4770      	bx	lr
 8012c52:	bf00      	nop
 8012c54:	007ffffe 	.word	0x007ffffe

08012c58 <__ieee754_atan2f>:
 8012c58:	ee10 2a90 	vmov	r2, s1
 8012c5c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8012c60:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012c64:	b510      	push	{r4, lr}
 8012c66:	eef0 7a40 	vmov.f32	s15, s0
 8012c6a:	d806      	bhi.n	8012c7a <__ieee754_atan2f+0x22>
 8012c6c:	ee10 0a10 	vmov	r0, s0
 8012c70:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8012c74:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012c78:	d904      	bls.n	8012c84 <__ieee754_atan2f+0x2c>
 8012c7a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8012c82:	bd10      	pop	{r4, pc}
 8012c84:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012c88:	d103      	bne.n	8012c92 <__ieee754_atan2f+0x3a>
 8012c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c8e:	f000 b883 	b.w	8012d98 <atanf>
 8012c92:	1794      	asrs	r4, r2, #30
 8012c94:	f004 0402 	and.w	r4, r4, #2
 8012c98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012c9c:	b943      	cbnz	r3, 8012cb0 <__ieee754_atan2f+0x58>
 8012c9e:	2c02      	cmp	r4, #2
 8012ca0:	d05e      	beq.n	8012d60 <__ieee754_atan2f+0x108>
 8012ca2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012d74 <__ieee754_atan2f+0x11c>
 8012ca6:	2c03      	cmp	r4, #3
 8012ca8:	bf08      	it	eq
 8012caa:	eef0 7a47 	vmoveq.f32	s15, s14
 8012cae:	e7e6      	b.n	8012c7e <__ieee754_atan2f+0x26>
 8012cb0:	b941      	cbnz	r1, 8012cc4 <__ieee754_atan2f+0x6c>
 8012cb2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8012d78 <__ieee754_atan2f+0x120>
 8012cb6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012d7c <__ieee754_atan2f+0x124>
 8012cba:	2800      	cmp	r0, #0
 8012cbc:	bfa8      	it	ge
 8012cbe:	eef0 7a47 	vmovge.f32	s15, s14
 8012cc2:	e7dc      	b.n	8012c7e <__ieee754_atan2f+0x26>
 8012cc4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012cc8:	d110      	bne.n	8012cec <__ieee754_atan2f+0x94>
 8012cca:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012cce:	f104 34ff 	add.w	r4, r4, #4294967295
 8012cd2:	d107      	bne.n	8012ce4 <__ieee754_atan2f+0x8c>
 8012cd4:	2c02      	cmp	r4, #2
 8012cd6:	d846      	bhi.n	8012d66 <__ieee754_atan2f+0x10e>
 8012cd8:	4b29      	ldr	r3, [pc, #164]	@ (8012d80 <__ieee754_atan2f+0x128>)
 8012cda:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012cde:	edd3 7a00 	vldr	s15, [r3]
 8012ce2:	e7cc      	b.n	8012c7e <__ieee754_atan2f+0x26>
 8012ce4:	2c02      	cmp	r4, #2
 8012ce6:	d841      	bhi.n	8012d6c <__ieee754_atan2f+0x114>
 8012ce8:	4b26      	ldr	r3, [pc, #152]	@ (8012d84 <__ieee754_atan2f+0x12c>)
 8012cea:	e7f6      	b.n	8012cda <__ieee754_atan2f+0x82>
 8012cec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012cf0:	d0df      	beq.n	8012cb2 <__ieee754_atan2f+0x5a>
 8012cf2:	1a5b      	subs	r3, r3, r1
 8012cf4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8012cf8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012cfc:	da1a      	bge.n	8012d34 <__ieee754_atan2f+0xdc>
 8012cfe:	2a00      	cmp	r2, #0
 8012d00:	da01      	bge.n	8012d06 <__ieee754_atan2f+0xae>
 8012d02:	313c      	adds	r1, #60	@ 0x3c
 8012d04:	db19      	blt.n	8012d3a <__ieee754_atan2f+0xe2>
 8012d06:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012d0a:	f000 f919 	bl	8012f40 <fabsf>
 8012d0e:	f000 f843 	bl	8012d98 <atanf>
 8012d12:	eef0 7a40 	vmov.f32	s15, s0
 8012d16:	2c01      	cmp	r4, #1
 8012d18:	d012      	beq.n	8012d40 <__ieee754_atan2f+0xe8>
 8012d1a:	2c02      	cmp	r4, #2
 8012d1c:	d017      	beq.n	8012d4e <__ieee754_atan2f+0xf6>
 8012d1e:	2c00      	cmp	r4, #0
 8012d20:	d0ad      	beq.n	8012c7e <__ieee754_atan2f+0x26>
 8012d22:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8012d88 <__ieee754_atan2f+0x130>
 8012d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d2a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012d8c <__ieee754_atan2f+0x134>
 8012d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d32:	e7a4      	b.n	8012c7e <__ieee754_atan2f+0x26>
 8012d34:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012d7c <__ieee754_atan2f+0x124>
 8012d38:	e7ed      	b.n	8012d16 <__ieee754_atan2f+0xbe>
 8012d3a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012d90 <__ieee754_atan2f+0x138>
 8012d3e:	e7ea      	b.n	8012d16 <__ieee754_atan2f+0xbe>
 8012d40:	ee17 3a90 	vmov	r3, s15
 8012d44:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012d48:	ee07 3a90 	vmov	s15, r3
 8012d4c:	e797      	b.n	8012c7e <__ieee754_atan2f+0x26>
 8012d4e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012d88 <__ieee754_atan2f+0x130>
 8012d52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d56:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8012d8c <__ieee754_atan2f+0x134>
 8012d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d5e:	e78e      	b.n	8012c7e <__ieee754_atan2f+0x26>
 8012d60:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012d8c <__ieee754_atan2f+0x134>
 8012d64:	e78b      	b.n	8012c7e <__ieee754_atan2f+0x26>
 8012d66:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8012d94 <__ieee754_atan2f+0x13c>
 8012d6a:	e788      	b.n	8012c7e <__ieee754_atan2f+0x26>
 8012d6c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012d90 <__ieee754_atan2f+0x138>
 8012d70:	e785      	b.n	8012c7e <__ieee754_atan2f+0x26>
 8012d72:	bf00      	nop
 8012d74:	c0490fdb 	.word	0xc0490fdb
 8012d78:	bfc90fdb 	.word	0xbfc90fdb
 8012d7c:	3fc90fdb 	.word	0x3fc90fdb
 8012d80:	08014490 	.word	0x08014490
 8012d84:	08014484 	.word	0x08014484
 8012d88:	33bbbd2e 	.word	0x33bbbd2e
 8012d8c:	40490fdb 	.word	0x40490fdb
 8012d90:	00000000 	.word	0x00000000
 8012d94:	3f490fdb 	.word	0x3f490fdb

08012d98 <atanf>:
 8012d98:	b538      	push	{r3, r4, r5, lr}
 8012d9a:	ee10 5a10 	vmov	r5, s0
 8012d9e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012da2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012da6:	eef0 7a40 	vmov.f32	s15, s0
 8012daa:	d310      	bcc.n	8012dce <atanf+0x36>
 8012dac:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012db0:	d904      	bls.n	8012dbc <atanf+0x24>
 8012db2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012db6:	eeb0 0a67 	vmov.f32	s0, s15
 8012dba:	bd38      	pop	{r3, r4, r5, pc}
 8012dbc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012ef4 <atanf+0x15c>
 8012dc0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012ef8 <atanf+0x160>
 8012dc4:	2d00      	cmp	r5, #0
 8012dc6:	bfc8      	it	gt
 8012dc8:	eef0 7a47 	vmovgt.f32	s15, s14
 8012dcc:	e7f3      	b.n	8012db6 <atanf+0x1e>
 8012dce:	4b4b      	ldr	r3, [pc, #300]	@ (8012efc <atanf+0x164>)
 8012dd0:	429c      	cmp	r4, r3
 8012dd2:	d810      	bhi.n	8012df6 <atanf+0x5e>
 8012dd4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012dd8:	d20a      	bcs.n	8012df0 <atanf+0x58>
 8012dda:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012f00 <atanf+0x168>
 8012dde:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012de6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dee:	dce2      	bgt.n	8012db6 <atanf+0x1e>
 8012df0:	f04f 33ff 	mov.w	r3, #4294967295
 8012df4:	e013      	b.n	8012e1e <atanf+0x86>
 8012df6:	f000 f8a3 	bl	8012f40 <fabsf>
 8012dfa:	4b42      	ldr	r3, [pc, #264]	@ (8012f04 <atanf+0x16c>)
 8012dfc:	429c      	cmp	r4, r3
 8012dfe:	d84f      	bhi.n	8012ea0 <atanf+0x108>
 8012e00:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012e04:	429c      	cmp	r4, r3
 8012e06:	d841      	bhi.n	8012e8c <atanf+0xf4>
 8012e08:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012e0c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012e10:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012e14:	2300      	movs	r3, #0
 8012e16:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012e1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012e1e:	1c5a      	adds	r2, r3, #1
 8012e20:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012e24:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012f08 <atanf+0x170>
 8012e28:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8012f0c <atanf+0x174>
 8012e2c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012f10 <atanf+0x178>
 8012e30:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012e34:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012e38:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012f14 <atanf+0x17c>
 8012e3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012e40:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012f18 <atanf+0x180>
 8012e44:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012e48:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012f1c <atanf+0x184>
 8012e4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012e50:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012f20 <atanf+0x188>
 8012e54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012e58:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012f24 <atanf+0x18c>
 8012e5c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012e60:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012f28 <atanf+0x190>
 8012e64:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012e68:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012f2c <atanf+0x194>
 8012e6c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012e70:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012f30 <atanf+0x198>
 8012e74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012e78:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012e7c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012e80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012e84:	d121      	bne.n	8012eca <atanf+0x132>
 8012e86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e8a:	e794      	b.n	8012db6 <atanf+0x1e>
 8012e8c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012e90:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012e94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012e98:	2301      	movs	r3, #1
 8012e9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012e9e:	e7be      	b.n	8012e1e <atanf+0x86>
 8012ea0:	4b24      	ldr	r3, [pc, #144]	@ (8012f34 <atanf+0x19c>)
 8012ea2:	429c      	cmp	r4, r3
 8012ea4:	d80b      	bhi.n	8012ebe <atanf+0x126>
 8012ea6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012eae:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012eb2:	2302      	movs	r3, #2
 8012eb4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012ebc:	e7af      	b.n	8012e1e <atanf+0x86>
 8012ebe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012ec2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012ec6:	2303      	movs	r3, #3
 8012ec8:	e7a9      	b.n	8012e1e <atanf+0x86>
 8012eca:	4a1b      	ldr	r2, [pc, #108]	@ (8012f38 <atanf+0x1a0>)
 8012ecc:	491b      	ldr	r1, [pc, #108]	@ (8012f3c <atanf+0x1a4>)
 8012ece:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012ed2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012ed6:	edd3 6a00 	vldr	s13, [r3]
 8012eda:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012ede:	2d00      	cmp	r5, #0
 8012ee0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ee4:	edd2 7a00 	vldr	s15, [r2]
 8012ee8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012eec:	bfb8      	it	lt
 8012eee:	eef1 7a67 	vneglt.f32	s15, s15
 8012ef2:	e760      	b.n	8012db6 <atanf+0x1e>
 8012ef4:	bfc90fdb 	.word	0xbfc90fdb
 8012ef8:	3fc90fdb 	.word	0x3fc90fdb
 8012efc:	3edfffff 	.word	0x3edfffff
 8012f00:	7149f2ca 	.word	0x7149f2ca
 8012f04:	3f97ffff 	.word	0x3f97ffff
 8012f08:	3c8569d7 	.word	0x3c8569d7
 8012f0c:	3d4bda59 	.word	0x3d4bda59
 8012f10:	bd6ef16b 	.word	0xbd6ef16b
 8012f14:	3d886b35 	.word	0x3d886b35
 8012f18:	3dba2e6e 	.word	0x3dba2e6e
 8012f1c:	3e124925 	.word	0x3e124925
 8012f20:	3eaaaaab 	.word	0x3eaaaaab
 8012f24:	bd15a221 	.word	0xbd15a221
 8012f28:	bd9d8795 	.word	0xbd9d8795
 8012f2c:	bde38e38 	.word	0xbde38e38
 8012f30:	be4ccccd 	.word	0xbe4ccccd
 8012f34:	401bffff 	.word	0x401bffff
 8012f38:	080144ac 	.word	0x080144ac
 8012f3c:	0801449c 	.word	0x0801449c

08012f40 <fabsf>:
 8012f40:	ee10 3a10 	vmov	r3, s0
 8012f44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012f48:	ee00 3a10 	vmov	s0, r3
 8012f4c:	4770      	bx	lr
	...

08012f50 <_init>:
 8012f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f52:	bf00      	nop
 8012f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f56:	bc08      	pop	{r3}
 8012f58:	469e      	mov	lr, r3
 8012f5a:	4770      	bx	lr

08012f5c <_fini>:
 8012f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f5e:	bf00      	nop
 8012f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f62:	bc08      	pop	{r3}
 8012f64:	469e      	mov	lr, r3
 8012f66:	4770      	bx	lr
