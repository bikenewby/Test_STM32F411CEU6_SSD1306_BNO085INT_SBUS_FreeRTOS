
Test_STM32F411CEU6_SSD1306_BNO085INT_SBUS_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012794  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f54  08012938  08012938  00013938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801388c  0801388c  00015244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801388c  0801388c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013894  08013894  00015244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013894  08013894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013898  08013898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  0801389c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d30  20000244  08013ae0  00015244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005f74  08013ae0  00015f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265de  00000000  00000000  00015274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d81  00000000  00000000  0003b852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f88  00000000  00000000  000405d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00007509  00000000  00000000  00042560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000236c0  00000000  00000000  00049a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a3a99  00000000  00000000  0006d129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00110bc2  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000187f  00000000  00000000  00110c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009808  00000000  00000000  00112484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0011bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801291c 	.word	0x0801291c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	0801291c 	.word	0x0801291c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <__NVIC_SystemReset+0x24>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ef6:	4904      	ldr	r1, [pc, #16]	@ (8000f08 <__NVIC_SystemReset+0x24>)
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <__NVIC_SystemReset+0x28>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000efe:	f3bf 8f4f 	dsb	sy
}
 8000f02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <__NVIC_SystemReset+0x20>
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	05fa0004 	.word	0x05fa0004

08000f10 <i2c_bus_scan>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Modified I2C bus scanner: stores found addresses in a string buffer
void i2c_bus_scan(char *found_devices, size_t bufsize) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	char addr_str[8];
	uint8_t first = 1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	75fb      	strb	r3, [r7, #23]
	found_devices[0] = '\0';
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]

	for (uint8_t addr = 1; addr < 127; addr++) {
 8000f24:	2301      	movs	r3, #1
 8000f26:	75bb      	strb	r3, [r7, #22]
 8000f28:	e033      	b.n	8000f92 <i2c_bus_scan+0x82>
		if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 8000f2a:	7dbb      	ldrb	r3, [r7, #22]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	b299      	uxth	r1, r3
 8000f32:	230a      	movs	r3, #10
 8000f34:	2201      	movs	r2, #1
 8000f36:	481b      	ldr	r0, [pc, #108]	@ (8000fa4 <i2c_bus_scan+0x94>)
 8000f38:	f007 feb2 	bl	8008ca0 <HAL_I2C_IsDeviceReady>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d124      	bne.n	8000f8c <i2c_bus_scan+0x7c>
			if (!first) {
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10b      	bne.n	8000f60 <i2c_bus_scan+0x50>
				strncat(found_devices, ",",
						bufsize - strlen(found_devices) - 1);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff f999 	bl	8000280 <strlen>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	1a9b      	subs	r3, r3, r2
				strncat(found_devices, ",",
 8000f54:	3b01      	subs	r3, #1
 8000f56:	461a      	mov	r2, r3
 8000f58:	4913      	ldr	r1, [pc, #76]	@ (8000fa8 <i2c_bus_scan+0x98>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f00f f9d5 	bl	801030a <strncat>
			}
			snprintf(addr_str, sizeof(addr_str), "0x%02X", addr);
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	f107 000c 	add.w	r0, r7, #12
 8000f66:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <i2c_bus_scan+0x9c>)
 8000f68:	2108      	movs	r1, #8
 8000f6a:	f00f f94d 	bl	8010208 <sniprintf>
			strncat(found_devices, addr_str,
					bufsize - strlen(found_devices) - 1);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff f986 	bl	8000280 <strlen>
 8000f74:	4602      	mov	r2, r0
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	1a9b      	subs	r3, r3, r2
			strncat(found_devices, addr_str,
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f00f f9c1 	bl	801030a <strncat>
			first = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
	for (uint8_t addr = 1; addr < 127; addr++) {
 8000f8c:	7dbb      	ldrb	r3, [r7, #22]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	75bb      	strb	r3, [r7, #22]
 8000f92:	7dbb      	ldrb	r3, [r7, #22]
 8000f94:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f96:	d9c8      	bls.n	8000f2a <i2c_bus_scan+0x1a>
		}
	}
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000260 	.word	0x20000260
 8000fa8:	080129b8 	.word	0x080129b8
 8000fac:	080129bc 	.word	0x080129bc

08000fb0 <bno085_read_chip_id>:

// Read BNO085 Chip ID register (Register 0x00)
uint8_t bno085_read_chip_id() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af02      	add	r7, sp, #8
	uint8_t reg = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t id = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Master_Transmit(&hi2c1, BNO085_ADDR, &reg, 1, HAL_MAX_DELAY)
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2194      	movs	r1, #148	@ 0x94
 8000fca:	480d      	ldr	r0, [pc, #52]	@ (8001000 <bno085_read_chip_id+0x50>)
 8000fcc:	f007 f80c 	bl	8007fe8 <HAL_I2C_Master_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <bno085_read_chip_id+0x2a>
			!= HAL_OK)
		return 0xFF; // Indicate error
 8000fd6:	23ff      	movs	r3, #255	@ 0xff
 8000fd8:	e00e      	b.n	8000ff8 <bno085_read_chip_id+0x48>
	if (HAL_I2C_Master_Receive(&hi2c1, BNO085_ADDR, &id, 1, HAL_MAX_DELAY)
 8000fda:	1dba      	adds	r2, r7, #6
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2194      	movs	r1, #148	@ 0x94
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <bno085_read_chip_id+0x50>)
 8000fe8:	f007 f8fc 	bl	80081e4 <HAL_I2C_Master_Receive>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <bno085_read_chip_id+0x46>
			!= HAL_OK)
		return 0xFF; // Indicate error
 8000ff2:	23ff      	movs	r3, #255	@ 0xff
 8000ff4:	e000      	b.n	8000ff8 <bno085_read_chip_id+0x48>
	return id;
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000260 	.word	0x20000260

08001004 <sh2_event_callback>:

void sh2_event_callback(void *cookie, sh2_AsyncEvent_t *pEvent) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	// Optional: handle async events (reset, etc.)
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <sh2_sensor_handler>:

static void sh2_sensor_handler(void *cookie, sh2_SensorEvent_t *event) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b09e      	sub	sp, #120	@ 0x78
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	// Handle sensor events from BNO085
	sh2_SensorValue_t value;
	if (sh2_decodeSensorEvent(&value, event) == 0) {
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	6839      	ldr	r1, [r7, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f004 f8d9 	bl	80051e4 <sh2_decodeSensorEvent>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d15c      	bne.n	80010f2 <sh2_sensor_handler+0xd6>
		if (value.sensorId == SH2_ROTATION_VECTOR) {
 8001038:	7a3b      	ldrb	r3, [r7, #8]
 800103a:	2b05      	cmp	r3, #5
 800103c:	d159      	bne.n	80010f2 <sh2_sensor_handler+0xd6>
			float q0 = value.un.rotationVector.real;
 800103e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001040:	673b      	str	r3, [r7, #112]	@ 0x70
			float q1 = value.un.rotationVector.i;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	66fb      	str	r3, [r7, #108]	@ 0x6c
			float q2 = value.un.rotationVector.j;
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	66bb      	str	r3, [r7, #104]	@ 0x68
			float q3 = value.un.rotationVector.k;
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	667b      	str	r3, [r7, #100]	@ 0x64
			float t3 = 2.0f * (q0 * q3 + q1 * q2);
 800104e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001052:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800105e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800106e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			float t4 = 1.0f - 2.0f * (q2 * q2 + q3 * q3);
 8001072:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001076:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800107a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800107e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001086:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800108a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001092:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
			float yaw = atan2f(t3, t4);
 8001096:	edd7 0a17 	vldr	s1, [r7, #92]	@ 0x5c
 800109a:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800109e:	f011 fa69 	bl	8012574 <atan2f>
 80010a2:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
			float yaw_deg = yaw * (180.0f / (float) M_PI);
 80010a6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80010aa:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80010fc <sh2_sensor_handler+0xe0>
 80010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
			if (yaw_deg < 0)
 80010b6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80010ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	d507      	bpl.n	80010d4 <sh2_sensor_handler+0xb8>
				yaw_deg += 360.0f;
 80010c4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80010c8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001100 <sh2_sensor_handler+0xe4>
 80010cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010d0:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
			osMutexAcquire(CompassMutexHandle, osWaitForever);
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <sh2_sensor_handler+0xe8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	4618      	mov	r0, r3
 80010de:	f00b fb0e 	bl	800c6fe <osMutexAcquire>
			compass_heading_deg = yaw_deg;
 80010e2:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <sh2_sensor_handler+0xec>)
 80010e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010e6:	6013      	str	r3, [r2, #0]
			osMutexRelease(CompassMutexHandle);
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <sh2_sensor_handler+0xe8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00b fb51 	bl	800c794 <osMutexRelease>
		}
	}
}
 80010f2:	bf00      	nop
 80010f4:	3778      	adds	r7, #120	@ 0x78
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	42652ee0 	.word	0x42652ee0
 8001100:	43b40000 	.word	0x43b40000
 8001104:	20000408 	.word	0x20000408
 8001108:	2000046c 	.word	0x2000046c

0800110c <bno085_setup>:

void bno085_setup(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	sh2_hal.open = sh2_hal_open;
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <bno085_setup+0x78>)
 8001112:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <bno085_setup+0x7c>)
 8001114:	601a      	str	r2, [r3, #0]
	sh2_hal.close = sh2_hal_close;
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <bno085_setup+0x78>)
 8001118:	4a1c      	ldr	r2, [pc, #112]	@ (800118c <bno085_setup+0x80>)
 800111a:	605a      	str	r2, [r3, #4]
	sh2_hal.read = sh2_hal_read;
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <bno085_setup+0x78>)
 800111e:	4a1c      	ldr	r2, [pc, #112]	@ (8001190 <bno085_setup+0x84>)
 8001120:	609a      	str	r2, [r3, #8]
	sh2_hal.write = sh2_hal_write;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <bno085_setup+0x78>)
 8001124:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <bno085_setup+0x88>)
 8001126:	60da      	str	r2, [r3, #12]
	sh2_hal.getTimeUs = sh2_hal_getTimeUs;
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <bno085_setup+0x78>)
 800112a:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <bno085_setup+0x8c>)
 800112c:	611a      	str	r2, [r3, #16]

	sh2_open(&sh2_hal, sh2_event_callback, NULL);
 800112e:	2200      	movs	r2, #0
 8001130:	491a      	ldr	r1, [pc, #104]	@ (800119c <bno085_setup+0x90>)
 8001132:	4814      	ldr	r0, [pc, #80]	@ (8001184 <bno085_setup+0x78>)
 8001134:	f003 ff40 	bl	8004fb8 <sh2_open>
	sh2_setSensorCallback(sh2_sensor_handler, NULL);
 8001138:	2100      	movs	r1, #0
 800113a:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <bno085_setup+0x94>)
 800113c:	f003 ffea 	bl	8005114 <sh2_setSensorCallback>

	sh2_config.changeSensitivityEnabled = false;
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <bno085_setup+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
	sh2_config.changeSensitivityRelative = false;
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <bno085_setup+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	705a      	strb	r2, [r3, #1]
	sh2_config.wakeupEnabled = false;
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <bno085_setup+0x98>)
 800114e:	2200      	movs	r2, #0
 8001150:	709a      	strb	r2, [r3, #2]
	sh2_config.alwaysOnEnabled = false;
 8001152:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <bno085_setup+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	70da      	strb	r2, [r3, #3]
	sh2_config.sniffEnabled = false;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <bno085_setup+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	711a      	strb	r2, [r3, #4]
	sh2_config.changeSensitivity = 0;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <bno085_setup+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	80da      	strh	r2, [r3, #6]
	sh2_config.reportInterval_us = 10000; // 100Hz
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <bno085_setup+0x98>)
 8001166:	f242 7210 	movw	r2, #10000	@ 0x2710
 800116a:	609a      	str	r2, [r3, #8]
	//sh2_config.reportInterval_us = 20000; // 50Hz
	sh2_config.batchInterval_us = 0;
 800116c:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <bno085_setup+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
	sh2_config.sensorSpecific = 0;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <bno085_setup+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]

	sh2_setSensorConfig(SH2_ROTATION_VECTOR, &sh2_config);
 8001178:	490a      	ldr	r1, [pc, #40]	@ (80011a4 <bno085_setup+0x98>)
 800117a:	2005      	movs	r0, #5
 800117c:	f003 ffe0 	bl	8005140 <sh2_setSensorConfig>
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200004c8 	.word	0x200004c8
 8001188:	0800663d 	.word	0x0800663d
 800118c:	08006653 	.word	0x08006653
 8001190:	08006669 	.word	0x08006669
 8001194:	080066e1 	.word	0x080066e1
 8001198:	0800673d 	.word	0x0800673d
 800119c:	08001005 	.word	0x08001005
 80011a0:	0800101d 	.word	0x0800101d
 80011a4:	200004dc 	.word	0x200004dc

080011a8 <sbus_to_percentage>:

// Convert SBUS channel value (172-1811) to percentage (-100 to +100)
int16_t sbus_to_percentage(uint16_t sbus_value) {
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
	if (sbus_value < 172)
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	2bab      	cmp	r3, #171	@ 0xab
 80011b6:	d801      	bhi.n	80011bc <sbus_to_percentage+0x14>
		sbus_value = 172;
 80011b8:	23ac      	movs	r3, #172	@ 0xac
 80011ba:	80fb      	strh	r3, [r7, #6]
	if (sbus_value > 1811)
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	f240 7213 	movw	r2, #1811	@ 0x713
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d902      	bls.n	80011cc <sbus_to_percentage+0x24>
		sbus_value = 1811;
 80011c6:	f240 7313 	movw	r3, #1811	@ 0x713
 80011ca:	80fb      	strh	r3, [r7, #6]

	int16_t result = (int16_t) (((int32_t) sbus_value - 992) * 100 / 820);
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 80011d2:	2264      	movs	r2, #100	@ 0x64
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	4a0c      	ldr	r2, [pc, #48]	@ (800120c <sbus_to_percentage+0x64>)
 80011da:	fb82 1203 	smull	r1, r2, r2, r3
 80011de:	1212      	asrs	r2, r2, #8
 80011e0:	17db      	asrs	r3, r3, #31
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	81fb      	strh	r3, [r7, #14]

	// Optional: Dead zone of ±5%
	if (result >= -5 && result <= 5) {
 80011e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ea:	f113 0f05 	cmn.w	r3, #5
 80011ee:	db05      	blt.n	80011fc <sbus_to_percentage+0x54>
 80011f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	dc01      	bgt.n	80011fc <sbus_to_percentage+0x54>
		result = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	81fb      	strh	r3, [r7, #14]
	}

	return result;
 80011fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	4fec04ff 	.word	0x4fec04ff

08001210 <calculate_omni_motor_speeds>:
// Calculate individual motor speeds for 3-wheel omnidirectional robot
// x: Left/Right movement (-100 to +100) - Positive = Right, Negative = Left
// y: Forward/Backward movement (-100 to +100) - Positive = Forward, Negative = Backward
// rotation: Rotational movement (-100 to +100) - Positive = Clockwise, Negative = Counter-clockwise
void calculate_omni_motor_speeds(int16_t x, int16_t y, int16_t rotation,
		int16_t *left_front, int16_t *right_front, int16_t *back) {
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	@ 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4603      	mov	r3, r0
 800121a:	81fb      	strh	r3, [r7, #14]
 800121c:	460b      	mov	r3, r1
 800121e:	81bb      	strh	r3, [r7, #12]
 8001220:	4613      	mov	r3, r2
 8001222:	817b      	strh	r3, [r7, #10]
	// Left Front (Motor 1B):   +0.5*x + 0.866*y - rotation  (FIXED: was +rotation)
	// Right Front (Motor 1A):  +0.5*x - 0.866*y - rotation  (FIXED: was +rotation)
	// Back (Motor 2A):         -1.0*x + 0*y - rotation      (FIXED: was +rotation)

	// Use integer math (multiply by 100 to maintain precision, then divide)
	int32_t lf = (+50 * x + 87 * y - 100 * rotation) / 100; // Left Front (FIXED)
 8001224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001228:	2232      	movs	r2, #50	@ 0x32
 800122a:	fb03 f202 	mul.w	r2, r3, r2
 800122e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001232:	2157      	movs	r1, #87	@ 0x57
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	441a      	add	r2, r3
 800123a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800123e:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	4413      	add	r3, r2
 8001248:	4a2e      	ldr	r2, [pc, #184]	@ (8001304 <calculate_omni_motor_speeds+0xf4>)
 800124a:	fb82 1203 	smull	r1, r2, r2, r3
 800124e:	1152      	asrs	r2, r2, #5
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	61fb      	str	r3, [r7, #28]
	int32_t rf = (+50 * x - 87 * y - 100 * rotation) / 100; // Right Front (FIXED)
 8001256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800125a:	2232      	movs	r2, #50	@ 0x32
 800125c:	fb03 f202 	mul.w	r2, r3, r2
 8001260:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001264:	f06f 0156 	mvn.w	r1, #86	@ 0x56
 8001268:	fb01 f303 	mul.w	r3, r1, r3
 800126c:	441a      	add	r2, r3
 800126e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001272:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	4413      	add	r3, r2
 800127c:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <calculate_omni_motor_speeds+0xf4>)
 800127e:	fb82 1203 	smull	r1, r2, r2, r3
 8001282:	1152      	asrs	r2, r2, #5
 8001284:	17db      	asrs	r3, r3, #31
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	61bb      	str	r3, [r7, #24]
	int32_t bk = (-100 * x + 0 * y - 100 * rotation) / 100;  // Back (FIXED)
 800128a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800128e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001292:	4413      	add	r3, r2
 8001294:	425b      	negs	r3, r3
 8001296:	617b      	str	r3, [r7, #20]

	// Clamp to -100 to +100
	if (lf > 100)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b64      	cmp	r3, #100	@ 0x64
 800129c:	dd01      	ble.n	80012a2 <calculate_omni_motor_speeds+0x92>
		lf = 100;
 800129e:	2364      	movs	r3, #100	@ 0x64
 80012a0:	61fb      	str	r3, [r7, #28]
	if (lf < -100)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80012a8:	da02      	bge.n	80012b0 <calculate_omni_motor_speeds+0xa0>
		lf = -100;
 80012aa:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80012ae:	61fb      	str	r3, [r7, #28]
	if (rf > 100)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b64      	cmp	r3, #100	@ 0x64
 80012b4:	dd01      	ble.n	80012ba <calculate_omni_motor_speeds+0xaa>
		rf = 100;
 80012b6:	2364      	movs	r3, #100	@ 0x64
 80012b8:	61bb      	str	r3, [r7, #24]
	if (rf < -100)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80012c0:	da02      	bge.n	80012c8 <calculate_omni_motor_speeds+0xb8>
		rf = -100;
 80012c2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80012c6:	61bb      	str	r3, [r7, #24]
	if (bk > 100)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b64      	cmp	r3, #100	@ 0x64
 80012cc:	dd01      	ble.n	80012d2 <calculate_omni_motor_speeds+0xc2>
		bk = 100;
 80012ce:	2364      	movs	r3, #100	@ 0x64
 80012d0:	617b      	str	r3, [r7, #20]
	if (bk < -100)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80012d8:	da02      	bge.n	80012e0 <calculate_omni_motor_speeds+0xd0>
		bk = -100;
 80012da:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80012de:	617b      	str	r3, [r7, #20]

	*left_front = (int16_t) lf;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	801a      	strh	r2, [r3, #0]
	*right_front = (int16_t) rf;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ee:	801a      	strh	r2, [r3, #0]
	*back = (int16_t) bk;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f6:	801a      	strh	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3724      	adds	r7, #36	@ 0x24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	51eb851f 	.word	0x51eb851f

08001308 <calculate_omni_motor_speeds_with_heading>:
// y: Forward/Backward movement (-100 to +100) - Positive = Forward, Negative = Backward
// rotation: Rotational movement (-100 to +100)
// heading_correction: PID output for heading lock (-100 to +100)
void calculate_omni_motor_speeds_with_heading(int16_t x, int16_t y,
		int16_t rotation, float heading_correction, int16_t *left_front,
		int16_t *right_front, int16_t *back) {
 8001308:	b480      	push	{r7}
 800130a:	b08b      	sub	sp, #44	@ 0x2c
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	4603      	mov	r3, r0
 8001316:	81fb      	strh	r3, [r7, #14]
 8001318:	460b      	mov	r3, r1
 800131a:	81bb      	strh	r3, [r7, #12]
 800131c:	4613      	mov	r3, r2
 800131e:	817b      	strh	r3, [r7, #10]

	// Blend manual rotation with heading correction
	// Give priority to manual input when operator is actively rotating
	float manual_rotation_f = (float) rotation;
 8001320:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	edc7 7a05 	vstr	s15, [r7, #20]
	float total_rotation;

	if (fabs(manual_rotation_f) > 10.0f) {
 8001330:	edd7 7a05 	vldr	s15, [r7, #20]
 8001334:	eef0 7ae7 	vabs.f32	s15, s15
 8001338:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800133c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	dd0c      	ble.n	8001360 <calculate_omni_motor_speeds_with_heading+0x58>
		// Manual rotation is active - blend with less heading correction
		total_rotation = manual_rotation_f + (heading_correction * 0.3f);
 8001346:	edd7 7a01 	vldr	s15, [r7, #4]
 800134a:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001494 <calculate_omni_motor_speeds_with_heading+0x18c>
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001352:	ed97 7a05 	vldr	s14, [r7, #20]
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800135e:	e007      	b.n	8001370 <calculate_omni_motor_speeds_with_heading+0x68>
	} else {
		// No manual rotation - use full heading correction
		total_rotation = manual_rotation_f + heading_correction;
 8001360:	ed97 7a05 	vldr	s14, [r7, #20]
 8001364:	edd7 7a01 	vldr	s15, [r7, #4]
 8001368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	// Clamp total rotation to prevent overflow
	if (total_rotation > 100.0f)
 8001370:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001374:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001498 <calculate_omni_motor_speeds_with_heading+0x190>
 8001378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	dd01      	ble.n	8001386 <calculate_omni_motor_speeds_with_heading+0x7e>
		total_rotation = 100.0f;
 8001382:	4b46      	ldr	r3, [pc, #280]	@ (800149c <calculate_omni_motor_speeds_with_heading+0x194>)
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
	if (total_rotation < -100.0f)
 8001386:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800138a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80014a0 <calculate_omni_motor_speeds_with_heading+0x198>
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d501      	bpl.n	800139c <calculate_omni_motor_speeds_with_heading+0x94>
		total_rotation = -100.0f;
 8001398:	4b42      	ldr	r3, [pc, #264]	@ (80014a4 <calculate_omni_motor_speeds_with_heading+0x19c>)
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24

	// 3-wheel omnidirectional kinematics with heading correction - FIXED ROTATION
	int32_t lf = (+50 * x + 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 800139c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a0:	2232      	movs	r2, #50	@ 0x32
 80013a2:	fb03 f202 	mul.w	r2, r3, r2
 80013a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013aa:	2157      	movs	r1, #87	@ 0x57
 80013ac:	fb01 f303 	mul.w	r3, r1, r3
 80013b0:	441a      	add	r2, r3
 80013b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ba:	ee17 1a90 	vmov	r1, s15
 80013be:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80013c2:	fb01 f303 	mul.w	r3, r1, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	4a37      	ldr	r2, [pc, #220]	@ (80014a8 <calculate_omni_motor_speeds_with_heading+0x1a0>)
 80013ca:	fb82 1203 	smull	r1, r2, r2, r3
 80013ce:	1152      	asrs	r2, r2, #5
 80013d0:	17db      	asrs	r3, r3, #31
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	623b      	str	r3, [r7, #32]
	int32_t rf = (+50 * x - 87 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 80013d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013da:	2232      	movs	r2, #50	@ 0x32
 80013dc:	fb03 f202 	mul.w	r2, r3, r2
 80013e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013e4:	f06f 0156 	mvn.w	r1, #86	@ 0x56
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	441a      	add	r2, r3
 80013ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f6:	ee17 1a90 	vmov	r1, s15
 80013fa:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4413      	add	r3, r2
 8001404:	4a28      	ldr	r2, [pc, #160]	@ (80014a8 <calculate_omni_motor_speeds_with_heading+0x1a0>)
 8001406:	fb82 1203 	smull	r1, r2, r2, r3
 800140a:	1152      	asrs	r2, r2, #5
 800140c:	17db      	asrs	r3, r3, #31
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	61fb      	str	r3, [r7, #28]
	int32_t bk = (-100 * x + 0 * y - (int32_t) total_rotation * 100) / 100; // FIXED
 8001412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001416:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800141a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141e:	ee17 2a90 	vmov	r2, s15
 8001422:	4413      	add	r3, r2
 8001424:	425b      	negs	r3, r3
 8001426:	61bb      	str	r3, [r7, #24]

	// Clamp to -100 to +100
	if (lf > 100)
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	2b64      	cmp	r3, #100	@ 0x64
 800142c:	dd01      	ble.n	8001432 <calculate_omni_motor_speeds_with_heading+0x12a>
		lf = 100;
 800142e:	2364      	movs	r3, #100	@ 0x64
 8001430:	623b      	str	r3, [r7, #32]
	if (lf < -100)
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001438:	da02      	bge.n	8001440 <calculate_omni_motor_speeds_with_heading+0x138>
		lf = -100;
 800143a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800143e:	623b      	str	r3, [r7, #32]
	if (rf > 100)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b64      	cmp	r3, #100	@ 0x64
 8001444:	dd01      	ble.n	800144a <calculate_omni_motor_speeds_with_heading+0x142>
		rf = 100;
 8001446:	2364      	movs	r3, #100	@ 0x64
 8001448:	61fb      	str	r3, [r7, #28]
	if (rf < -100)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001450:	da02      	bge.n	8001458 <calculate_omni_motor_speeds_with_heading+0x150>
		rf = -100;
 8001452:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001456:	61fb      	str	r3, [r7, #28]
	if (bk > 100)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b64      	cmp	r3, #100	@ 0x64
 800145c:	dd01      	ble.n	8001462 <calculate_omni_motor_speeds_with_heading+0x15a>
		bk = 100;
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	61bb      	str	r3, [r7, #24]
	if (bk < -100)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001468:	da02      	bge.n	8001470 <calculate_omni_motor_speeds_with_heading+0x168>
		bk = -100;
 800146a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800146e:	61bb      	str	r3, [r7, #24]

	*left_front = (int16_t) lf;
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	b21a      	sxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	801a      	strh	r2, [r3, #0]
	*right_front = (int16_t) rf;
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	b21a      	sxth	r2, r3
 800147c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147e:	801a      	strh	r2, [r3, #0]
	*back = (int16_t) bk;
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	b21a      	sxth	r2, r3
 8001484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001486:	801a      	strh	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	372c      	adds	r7, #44	@ 0x2c
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	3e99999a 	.word	0x3e99999a
 8001498:	42c80000 	.word	0x42c80000
 800149c:	42c80000 	.word	0x42c80000
 80014a0:	c2c80000 	.word	0xc2c80000
 80014a4:	c2c80000 	.word	0xc2c80000
 80014a8:	51eb851f 	.word	0x51eb851f

080014ac <apply_motor_speeds_3wheel>:

// Apply motor speeds to actual motors (3-wheel configuration)
void apply_motor_speeds_3wheel(int16_t left_front, int16_t right_front,
		int16_t back) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	460b      	mov	r3, r1
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	807b      	strh	r3, [r7, #2]
	const uint16_t pwm_val1 = 49; // For TIM1 (100% duty if Period = 49)
 80014be:	2331      	movs	r3, #49	@ 0x31
 80014c0:	81fb      	strh	r3, [r7, #14]

	// Motor 1B - Left Front
	if (left_front == 0) {
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d103      	bne.n	80014d2 <apply_motor_speeds_3wheel+0x26>
		tb6612fng_brake(MOTOR_1B);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f003 f918 	bl	8004700 <tb6612fng_brake>
 80014d0:	e027      	b.n	8001522 <apply_motor_speeds_3wheel+0x76>
	} else if (left_front > 0) {
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dd11      	ble.n	80014fe <apply_motor_speeds_3wheel+0x52>
		tb6612fng_drive(MOTOR_1B, TB6612FNG_FORWARD,
				(pwm_val1 * left_front) / 100);
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	4a41      	ldr	r2, [pc, #260]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 80014e6:	fb82 1203 	smull	r1, r2, r2, r3
 80014ea:	1152      	asrs	r2, r2, #5
 80014ec:	17db      	asrs	r3, r3, #31
 80014ee:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_1B, TB6612FNG_FORWARD,
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	2101      	movs	r1, #1
 80014f6:	2001      	movs	r0, #1
 80014f8:	f003 f8ca 	bl	8004690 <tb6612fng_drive>
 80014fc:	e011      	b.n	8001522 <apply_motor_speeds_3wheel+0x76>
	} else {
		tb6612fng_drive(MOTOR_1B, TB6612FNG_BACKWARD,
				(pwm_val1 * (-left_front)) / 100);
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001504:	4252      	negs	r2, r2
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	4a38      	ldr	r2, [pc, #224]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 800150c:	fb82 1203 	smull	r1, r2, r2, r3
 8001510:	1152      	asrs	r2, r2, #5
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_1B, TB6612FNG_BACKWARD,
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	2102      	movs	r1, #2
 800151c:	2001      	movs	r0, #1
 800151e:	f003 f8b7 	bl	8004690 <tb6612fng_drive>
	}

	// Motor 1A - Right Front
	if (right_front == 0) {
 8001522:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <apply_motor_speeds_3wheel+0x86>
		tb6612fng_brake(MOTOR_1A);
 800152a:	2000      	movs	r0, #0
 800152c:	f003 f8e8 	bl	8004700 <tb6612fng_brake>
 8001530:	e027      	b.n	8001582 <apply_motor_speeds_3wheel+0xd6>
	} else if (right_front > 0) {
 8001532:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	dd11      	ble.n	800155e <apply_motor_speeds_3wheel+0xb2>
		tb6612fng_drive(MOTOR_1A, TB6612FNG_FORWARD,
				(pwm_val1 * right_front) / 100);
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a29      	ldr	r2, [pc, #164]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 8001546:	fb82 1203 	smull	r1, r2, r2, r3
 800154a:	1152      	asrs	r2, r2, #5
 800154c:	17db      	asrs	r3, r3, #31
 800154e:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_1A, TB6612FNG_FORWARD,
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	2101      	movs	r1, #1
 8001556:	2000      	movs	r0, #0
 8001558:	f003 f89a 	bl	8004690 <tb6612fng_drive>
 800155c:	e011      	b.n	8001582 <apply_motor_speeds_3wheel+0xd6>
	} else {
		tb6612fng_drive(MOTOR_1A, TB6612FNG_BACKWARD,
				(pwm_val1 * (-right_front)) / 100);
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001564:	4252      	negs	r2, r2
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a20      	ldr	r2, [pc, #128]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 800156c:	fb82 1203 	smull	r1, r2, r2, r3
 8001570:	1152      	asrs	r2, r2, #5
 8001572:	17db      	asrs	r3, r3, #31
 8001574:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_1A, TB6612FNG_BACKWARD,
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	2102      	movs	r1, #2
 800157c:	2000      	movs	r0, #0
 800157e:	f003 f887 	bl	8004690 <tb6612fng_drive>
	}

	// Motor 2A - Back
	if (back == 0) {
 8001582:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <apply_motor_speeds_3wheel+0xe6>
		tb6612fng_brake(MOTOR_2A);
 800158a:	2002      	movs	r0, #2
 800158c:	f003 f8b8 	bl	8004700 <tb6612fng_brake>
		tb6612fng_drive(MOTOR_2A, TB6612FNG_FORWARD, (pwm_val1 * back) / 100);
	} else {
		tb6612fng_drive(MOTOR_2A, TB6612FNG_BACKWARD,
				(pwm_val1 * (-back)) / 100);
	}
}
 8001590:	e027      	b.n	80015e2 <apply_motor_speeds_3wheel+0x136>
	} else if (back > 0) {
 8001592:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001596:	2b00      	cmp	r3, #0
 8001598:	dd11      	ble.n	80015be <apply_motor_speeds_3wheel+0x112>
		tb6612fng_drive(MOTOR_2A, TB6612FNG_FORWARD, (pwm_val1 * back) / 100);
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	4a11      	ldr	r2, [pc, #68]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 80015a6:	fb82 1203 	smull	r1, r2, r2, r3
 80015aa:	1152      	asrs	r2, r2, #5
 80015ac:	17db      	asrs	r3, r3, #31
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	2101      	movs	r1, #1
 80015b6:	2002      	movs	r0, #2
 80015b8:	f003 f86a 	bl	8004690 <tb6612fng_drive>
}
 80015bc:	e011      	b.n	80015e2 <apply_motor_speeds_3wheel+0x136>
				(pwm_val1 * (-back)) / 100);
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015c4:	4252      	negs	r2, r2
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	4a08      	ldr	r2, [pc, #32]	@ (80015ec <apply_motor_speeds_3wheel+0x140>)
 80015cc:	fb82 1203 	smull	r1, r2, r2, r3
 80015d0:	1152      	asrs	r2, r2, #5
 80015d2:	17db      	asrs	r3, r3, #31
 80015d4:	1ad3      	subs	r3, r2, r3
		tb6612fng_drive(MOTOR_2A, TB6612FNG_BACKWARD,
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	2102      	movs	r1, #2
 80015dc:	2002      	movs	r0, #2
 80015de:	f003 f857 	bl	8004690 <tb6612fng_drive>
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	51eb851f 	.word	0x51eb851f

080015f0 <stop_all_motors_3wheel>:

// Stop all motors (3-wheel configuration)
void stop_all_motors_3wheel(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	tb6612fng_stop(MOTOR_1A); // Right Front
 80015f4:	2000      	movs	r0, #0
 80015f6:	f003 f869 	bl	80046cc <tb6612fng_stop>
	tb6612fng_stop(MOTOR_1B); // Left Front
 80015fa:	2001      	movs	r0, #1
 80015fc:	f003 f866 	bl	80046cc <tb6612fng_stop>
	tb6612fng_stop(MOTOR_2A); // Back
 8001600:	2002      	movs	r0, #2
 8001602:	f003 f863 	bl	80046cc <tb6612fng_stop>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <is_sbus_signal_valid>:

// Check if SBUS signal is valid and recent
// Enhanced SBUS signal check with recovery
uint8_t is_sbus_signal_valid(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 8001612:	f005 fc9d 	bl	8006f50 <HAL_GetTick>
 8001616:	6078      	str	r0, [r7, #4]

	// Check if we have received a valid frame recently
	if (sbus_signal_valid && (now - sbus_last_valid_time) <= SBUS_TIMEOUT_MS) {
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <is_sbus_signal_valid+0x70>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <is_sbus_signal_valid+0x26>
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <is_sbus_signal_valid+0x74>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	@ 0x64
 800162c:	d801      	bhi.n	8001632 <is_sbus_signal_valid+0x26>
		return 1;
 800162e:	2301      	movs	r3, #1
 8001630:	e01f      	b.n	8001672 <is_sbus_signal_valid+0x66>
	} else {
		sbus_signal_valid = 0; // Mark as invalid if timeout
 8001632:	4b12      	ldr	r3, [pc, #72]	@ (800167c <is_sbus_signal_valid+0x70>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]

		// If signal has been lost for a long time, try recovery
		if ((now - sbus_last_valid_time) > (SBUS_TIMEOUT_MS * 10)) {
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <is_sbus_signal_valid+0x74>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001644:	d914      	bls.n	8001670 <is_sbus_signal_valid+0x64>
			// Signal lost for 1 second - attempt recovery
			static uint32_t last_recovery_attempt = 0;
			if ((now - last_recovery_attempt) > 5000) {  // Try every 5 seconds
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <is_sbus_signal_valid+0x78>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d90c      	bls.n	8001670 <is_sbus_signal_valid+0x64>
				last_recovery_attempt = now;
 8001656:	4a0b      	ldr	r2, [pc, #44]	@ (8001684 <is_sbus_signal_valid+0x78>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6013      	str	r3, [r2, #0]

				// Reinitialize UART from main context (safer than interrupt)
				HAL_UART_AbortReceive(&huart2);
 800165c:	480a      	ldr	r0, [pc, #40]	@ (8001688 <is_sbus_signal_valid+0x7c>)
 800165e:	f009 fd46 	bl	800b0ee <HAL_UART_AbortReceive>
				MX_USART2_UART_Init();
 8001662:	f000 ff47 	bl	80024f4 <MX_USART2_UART_Init>
				HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8001666:	2219      	movs	r2, #25
 8001668:	4908      	ldr	r1, [pc, #32]	@ (800168c <is_sbus_signal_valid+0x80>)
 800166a:	4807      	ldr	r0, [pc, #28]	@ (8001688 <is_sbus_signal_valid+0x7c>)
 800166c:	f009 fd1a 	bl	800b0a4 <HAL_UART_Receive_DMA>
			}
		}

		return 0;
 8001670:	2300      	movs	r3, #0
	}
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000468 	.word	0x20000468
 8001680:	20000464 	.word	0x20000464
 8001684:	200004f0 	.word	0x200004f0
 8001688:	20000350 	.word	0x20000350
 800168c:	20000420 	.word	0x20000420

08001690 <calculate_heading_pid_simplified>:
	return diff;
}

// Simplified PID controller with reduced computational overhead
float calculate_heading_pid_simplified(float target_heading,
		float current_heading) {
 8001690:	b580      	push	{r7, lr}
 8001692:	ed2d 8b02 	vpush	{d8}
 8001696:	b096      	sub	sp, #88	@ 0x58
 8001698:	af00      	add	r7, sp, #0
 800169a:	ed87 0a01 	vstr	s0, [r7, #4]
 800169e:	edc7 0a00 	vstr	s1, [r7]
	static float error_history[3] = { 0 }; // Reduced from 5 to 3
	static uint8_t history_idx = 0;
	static uint32_t last_oscillation_time = 0;
	static uint32_t overshoot_cooldown = 0;

	uint32_t now = HAL_GetTick();
 80016a2:	f005 fc55 	bl	8006f50 <HAL_GetTick>
 80016a6:	6278      	str	r0, [r7, #36]	@ 0x24
	if (last_time == 0)
 80016a8:	4b9f      	ldr	r3, [pc, #636]	@ (8001928 <calculate_heading_pid_simplified+0x298>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <calculate_heading_pid_simplified+0x26>
		last_time = now;
 80016b0:	4a9d      	ldr	r2, [pc, #628]	@ (8001928 <calculate_heading_pid_simplified+0x298>)
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	6013      	str	r3, [r2, #0]

	float dt = (now - last_time) / 1000.0f;
 80016b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001928 <calculate_heading_pid_simplified+0x298>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c6:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800192c <calculate_heading_pid_simplified+0x29c>
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	edc7 7a08 	vstr	s15, [r7, #32]
	if (dt <= 0)
 80016d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80016d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	d802      	bhi.n	80016e6 <calculate_heading_pid_simplified+0x56>
		return output_filtered;
 80016e0:	4b93      	ldr	r3, [pc, #588]	@ (8001930 <calculate_heading_pid_simplified+0x2a0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	e29f      	b.n	8001c26 <calculate_heading_pid_simplified+0x596>

	// Calculate error with angle wrapping
	float error = target_heading - current_heading;
 80016e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ea:	edd7 7a00 	vldr	s15, [r7]
 80016ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	while (error > 180.0f)
 80016f6:	e007      	b.n	8001708 <calculate_heading_pid_simplified+0x78>
		error -= 360.0f;
 80016f8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80016fc:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001934 <calculate_heading_pid_simplified+0x2a4>
 8001700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001704:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	while (error > 180.0f)
 8001708:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800170c:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001938 <calculate_heading_pid_simplified+0x2a8>
 8001710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	dcee      	bgt.n	80016f8 <calculate_heading_pid_simplified+0x68>
	while (error < -180.0f)
 800171a:	e007      	b.n	800172c <calculate_heading_pid_simplified+0x9c>
		error += 360.0f;
 800171c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001720:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8001934 <calculate_heading_pid_simplified+0x2a4>
 8001724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001728:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	while (error < -180.0f)
 800172c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001730:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800193c <calculate_heading_pid_simplified+0x2ac>
 8001734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	d4ee      	bmi.n	800171c <calculate_heading_pid_simplified+0x8c>

	// Store error in simplified history
	error_history[history_idx] = error;
 800173e:	4b80      	ldr	r3, [pc, #512]	@ (8001940 <calculate_heading_pid_simplified+0x2b0>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4a80      	ldr	r2, [pc, #512]	@ (8001944 <calculate_heading_pid_simplified+0x2b4>)
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800174a:	601a      	str	r2, [r3, #0]
	history_idx = (history_idx + 1) % 3;
 800174c:	4b7c      	ldr	r3, [pc, #496]	@ (8001940 <calculate_heading_pid_simplified+0x2b0>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	4b7d      	ldr	r3, [pc, #500]	@ (8001948 <calculate_heading_pid_simplified+0x2b8>)
 8001754:	fb83 3102 	smull	r3, r1, r3, r2
 8001758:	17d3      	asrs	r3, r2, #31
 800175a:	1ac9      	subs	r1, r1, r3
 800175c:	460b      	mov	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	440b      	add	r3, r1
 8001762:	1ad1      	subs	r1, r2, r3
 8001764:	b2ca      	uxtb	r2, r1
 8001766:	4b76      	ldr	r3, [pc, #472]	@ (8001940 <calculate_heading_pid_simplified+0x2b0>)
 8001768:	701a      	strb	r2, [r3, #0]

	// Simplified oscillation detection (check only last 3 samples)
	uint8_t oscillation = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	if (fabs(error) < 20.0f) { // Only check when close to target
 8001770:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001774:	eef0 7ae7 	vabs.f32	s15, s15
 8001778:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800177c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	d53b      	bpl.n	80017fe <calculate_heading_pid_simplified+0x16e>
		int sign_changes = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for (int i = 0; i < 2; i++) {
 800178a:	2300      	movs	r3, #0
 800178c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800178e:	e019      	b.n	80017c4 <calculate_heading_pid_simplified+0x134>
			if ((error_history[i] * error_history[i + 1]) < 0) {
 8001790:	4a6c      	ldr	r2, [pc, #432]	@ (8001944 <calculate_heading_pid_simplified+0x2b4>)
 8001792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800179e:	3301      	adds	r3, #1
 80017a0:	4a68      	ldr	r2, [pc, #416]	@ (8001944 <calculate_heading_pid_simplified+0x2b4>)
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d502      	bpl.n	80017be <calculate_heading_pid_simplified+0x12e>
				sign_changes++;
 80017b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017ba:	3301      	adds	r3, #1
 80017bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for (int i = 0; i < 2; i++) {
 80017be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c0:	3301      	adds	r3, #1
 80017c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	dde2      	ble.n	8001790 <calculate_heading_pid_simplified+0x100>
			}
		}
		if (sign_changes >= 1 && (now - last_oscillation_time) > 1000) {
 80017ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dd16      	ble.n	80017fe <calculate_heading_pid_simplified+0x16e>
 80017d0:	4b5e      	ldr	r3, [pc, #376]	@ (800194c <calculate_heading_pid_simplified+0x2bc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017dc:	d90f      	bls.n	80017fe <calculate_heading_pid_simplified+0x16e>
			oscillation = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			last_oscillation_time = now;
 80017e4:	4a59      	ldr	r2, [pc, #356]	@ (800194c <calculate_heading_pid_simplified+0x2bc>)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	6013      	str	r3, [r2, #0]
			integral *= 0.5f; // Reduce integral windup
 80017ea:	4b59      	ldr	r3, [pc, #356]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80017f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f8:	4b55      	ldr	r3, [pc, #340]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 80017fa:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	// Simplified overshoot detection
	uint8_t overshoot = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if ((previous_error * error) < 0 && fabs(error) > 15.0f) {
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <calculate_heading_pid_simplified+0x2c4>)
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d521      	bpl.n	8001860 <calculate_heading_pid_simplified+0x1d0>
 800181c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001820:	eef0 7ae7 	vabs.f32	s15, s15
 8001824:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	dd16      	ble.n	8001860 <calculate_heading_pid_simplified+0x1d0>
		if ((now - overshoot_cooldown) > 1000) {
 8001832:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <calculate_heading_pid_simplified+0x2c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800183e:	d90f      	bls.n	8001860 <calculate_heading_pid_simplified+0x1d0>
			overshoot = 1;
 8001840:	2301      	movs	r3, #1
 8001842:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			overshoot_cooldown = now;
 8001846:	4a44      	ldr	r2, [pc, #272]	@ (8001958 <calculate_heading_pid_simplified+0x2c8>)
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	6013      	str	r3, [r2, #0]
			integral *= 0.7f;
 800184c:	4b40      	ldr	r3, [pc, #256]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800195c <calculate_heading_pid_simplified+0x2cc>
 8001856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185a:	4b3d      	ldr	r3, [pc, #244]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 800185c:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	// Simplified dead zone
	float dead_zone = oscillation ? 4.0f : (overshoot ? 2.0f : 1.0f);
 8001860:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <calculate_heading_pid_simplified+0x1ec>
 8001868:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <calculate_heading_pid_simplified+0x1e6>
 8001870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001874:	e004      	b.n	8001880 <calculate_heading_pid_simplified+0x1f0>
 8001876:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800187a:	e001      	b.n	8001880 <calculate_heading_pid_simplified+0x1f0>
 800187c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001880:	61fb      	str	r3, [r7, #28]

	if (fabs(error) < dead_zone) {
 8001882:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001886:	eef0 7ae7 	vabs.f32	s15, s15
 800188a:	ed97 7a07 	vldr	s14, [r7, #28]
 800188e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	dd1c      	ble.n	80018d2 <calculate_heading_pid_simplified+0x242>
		// Gentle decay near target
		integral *= 0.95f;
 8001898:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001960 <calculate_heading_pid_simplified+0x2d0>
 80018a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001950 <calculate_heading_pid_simplified+0x2c0>)
 80018a8:	edc3 7a00 	vstr	s15, [r3]
		output_filtered *= 0.9f;
 80018ac:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <calculate_heading_pid_simplified+0x2a0>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001964 <calculate_heading_pid_simplified+0x2d4>
 80018b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <calculate_heading_pid_simplified+0x2a0>)
 80018bc:	edc3 7a00 	vstr	s15, [r3]
		previous_error = error;
 80018c0:	4a24      	ldr	r2, [pc, #144]	@ (8001954 <calculate_heading_pid_simplified+0x2c4>)
 80018c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c4:	6013      	str	r3, [r2, #0]
		last_time = now;
 80018c6:	4a18      	ldr	r2, [pc, #96]	@ (8001928 <calculate_heading_pid_simplified+0x298>)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	6013      	str	r3, [r2, #0]
		return output_filtered;
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <calculate_heading_pid_simplified+0x2a0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e1a9      	b.n	8001c26 <calculate_heading_pid_simplified+0x596>
	}

	// Simplified adaptive gains based on error magnitude only
	float kp, ki, kd, max_output;
	if (fabs(error) > 60.0f) {
 80018d2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018d6:	eef0 7ae7 	vabs.f32	s15, s15
 80018da:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001968 <calculate_heading_pid_simplified+0x2d8>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	dd09      	ble.n	80018fc <calculate_heading_pid_simplified+0x26c>
		kp = 1.0f;
 80018e8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018ec:	643b      	str	r3, [r7, #64]	@ 0x40
		ki = 0.02f;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <calculate_heading_pid_simplified+0x2dc>)
 80018f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		kd = 0.1f;
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <calculate_heading_pid_simplified+0x2e0>)
 80018f4:	63bb      	str	r3, [r7, #56]	@ 0x38
		max_output = 25.0f;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <calculate_heading_pid_simplified+0x2e4>)
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018fa:	e04c      	b.n	8001996 <calculate_heading_pid_simplified+0x306>
	} else if (fabs(error) > 20.0f) {
 80018fc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001900:	eef0 7ae7 	vabs.f32	s15, s15
 8001904:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	dd38      	ble.n	8001984 <calculate_heading_pid_simplified+0x2f4>
		kp = 1.5f;
 8001912:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001916:	643b      	str	r3, [r7, #64]	@ 0x40
		ki = 0.03f;
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <calculate_heading_pid_simplified+0x2e8>)
 800191a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		kd = 0.15f;
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <calculate_heading_pid_simplified+0x2ec>)
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38
		max_output = 20.0f;
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <calculate_heading_pid_simplified+0x2f0>)
 8001922:	637b      	str	r3, [r7, #52]	@ 0x34
 8001924:	e037      	b.n	8001996 <calculate_heading_pid_simplified+0x306>
 8001926:	bf00      	nop
 8001928:	200004f4 	.word	0x200004f4
 800192c:	447a0000 	.word	0x447a0000
 8001930:	200004f8 	.word	0x200004f8
 8001934:	43b40000 	.word	0x43b40000
 8001938:	43340000 	.word	0x43340000
 800193c:	c3340000 	.word	0xc3340000
 8001940:	200004fc 	.word	0x200004fc
 8001944:	20000500 	.word	0x20000500
 8001948:	55555556 	.word	0x55555556
 800194c:	2000050c 	.word	0x2000050c
 8001950:	20000510 	.word	0x20000510
 8001954:	20000514 	.word	0x20000514
 8001958:	20000518 	.word	0x20000518
 800195c:	3f333333 	.word	0x3f333333
 8001960:	3f733333 	.word	0x3f733333
 8001964:	3f666666 	.word	0x3f666666
 8001968:	42700000 	.word	0x42700000
 800196c:	3ca3d70a 	.word	0x3ca3d70a
 8001970:	3dcccccd 	.word	0x3dcccccd
 8001974:	41c80000 	.word	0x41c80000
 8001978:	3cf5c28f 	.word	0x3cf5c28f
 800197c:	3e19999a 	.word	0x3e19999a
 8001980:	41a00000 	.word	0x41a00000
	} else {
		kp = 2.0f;
 8001984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001988:	643b      	str	r3, [r7, #64]	@ 0x40
		ki = 0.04f;
 800198a:	4bab      	ldr	r3, [pc, #684]	@ (8001c38 <calculate_heading_pid_simplified+0x5a8>)
 800198c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		kd = 0.2f;
 800198e:	4bab      	ldr	r3, [pc, #684]	@ (8001c3c <calculate_heading_pid_simplified+0x5ac>)
 8001990:	63bb      	str	r3, [r7, #56]	@ 0x38
		max_output = 15.0f;
 8001992:	4bab      	ldr	r3, [pc, #684]	@ (8001c40 <calculate_heading_pid_simplified+0x5b0>)
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	// Reduce gains if problems detected
	if (overshoot) {
 8001996:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01f      	beq.n	80019de <calculate_heading_pid_simplified+0x34e>
		kp *= 0.7f;
 800199e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019a2:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8001c44 <calculate_heading_pid_simplified+0x5b4>
 80019a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019aa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		ki *= 0.5f;
 80019ae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ba:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		kd *= 0.8f;
 80019be:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80019c2:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8001c48 <calculate_heading_pid_simplified+0x5b8>
 80019c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ca:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		max_output *= 0.8f;
 80019ce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019d2:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8001c48 <calculate_heading_pid_simplified+0x5b8>
 80019d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019da:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}
	if (oscillation) {
 80019de:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d01f      	beq.n	8001a26 <calculate_heading_pid_simplified+0x396>
		kp *= 0.5f;
 80019e6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		ki *= 0.3f;
 80019f6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019fa:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001c4c <calculate_heading_pid_simplified+0x5bc>
 80019fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a02:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		kd *= 0.6f;
 8001a06:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a0a:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8001c50 <calculate_heading_pid_simplified+0x5c0>
 8001a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a12:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		max_output *= 0.7f;
 8001a16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a1a:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001c44 <calculate_heading_pid_simplified+0x5b4>
 8001a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a22:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}

	// Calculate PID terms
	float proportional = kp * error;
 8001a26:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001a2a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a32:	edc7 7a06 	vstr	s15, [r7, #24]

	integral += error * dt;
 8001a36:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001a3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a42:	4b84      	ldr	r3, [pc, #528]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4c:	4b81      	ldr	r3, [pc, #516]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
	integral = fmaxf(-50.0f, fminf(50.0f, integral)); // Simple clamping
 8001a52:	4b80      	ldr	r3, [pc, #512]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 8001c58 <calculate_heading_pid_simplified+0x5c8>
 8001a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a60:	f010 fda7 	bl	80125b2 <fminf>
 8001a64:	eef0 7a40 	vmov.f32	s15, s0
 8001a68:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 8001c5c <calculate_heading_pid_simplified+0x5cc>
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	f010 fd82 	bl	8012578 <fmaxf>
 8001a74:	eef0 7a40 	vmov.f32	s15, s0
 8001a78:	4b76      	ldr	r3, [pc, #472]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a7a:	edc3 7a00 	vstr	s15, [r3]
	float integral_term = ki * integral;
 8001a7e:	4b75      	ldr	r3, [pc, #468]	@ (8001c54 <calculate_heading_pid_simplified+0x5c4>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	edc7 7a05 	vstr	s15, [r7, #20]

	float derivative = kd * (error - previous_error) / dt;
 8001a90:	4b73      	ldr	r3, [pc, #460]	@ (8001c60 <calculate_heading_pid_simplified+0x5d0>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001aa2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001aa6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aae:	edc7 7a04 	vstr	s15, [r7, #16]

	float raw_output = proportional + integral_term + derivative;
 8001ab2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	edc7 7a03 	vstr	s15, [r7, #12]

	// Simple output limiting
	raw_output = fmaxf(-max_output, fminf(max_output, raw_output));
 8001aca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ace:	eeb1 8a67 	vneg.f32	s16, s15
 8001ad2:	edd7 0a03 	vldr	s1, [r7, #12]
 8001ad6:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001ada:	f010 fd6a 	bl	80125b2 <fminf>
 8001ade:	eef0 7a40 	vmov.f32	s15, s0
 8001ae2:	eef0 0a67 	vmov.f32	s1, s15
 8001ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8001aea:	f010 fd45 	bl	8012578 <fmaxf>
 8001aee:	ed87 0a03 	vstr	s0, [r7, #12]

	// Simple rate limiting
	float rate_limit = fabs(error) > 30.0f ? 2.0f : 3.0f;
 8001af2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001af6:	eef0 7ae7 	vabs.f32	s15, s15
 8001afa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	dd02      	ble.n	8001b0e <calculate_heading_pid_simplified+0x47e>
 8001b08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b0c:	e000      	b.n	8001b10 <calculate_heading_pid_simplified+0x480>
 8001b0e:	4b55      	ldr	r3, [pc, #340]	@ (8001c64 <calculate_heading_pid_simplified+0x5d4>)
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
	if (overshoot)
 8001b12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <calculate_heading_pid_simplified+0x49a>
		rate_limit *= 0.7f;
 8001b1a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b1e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001c44 <calculate_heading_pid_simplified+0x5b4>
 8001b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b26:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	if (oscillation)
 8001b2a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <calculate_heading_pid_simplified+0x4b2>
		rate_limit *= 0.5f;
 8001b32:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	float output_diff = raw_output - output_filtered;
 8001b42:	4b49      	ldr	r3, [pc, #292]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b50:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	if (fabs(output_diff) > rate_limit) {
 8001b54:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b58:	eef0 7ae7 	vabs.f32	s15, s15
 8001b5c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d50f      	bpl.n	8001b8a <calculate_heading_pid_simplified+0x4fa>
		output_diff = (output_diff > 0) ? rate_limit : -rate_limit;
 8001b6a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	dd02      	ble.n	8001b7e <calculate_heading_pid_simplified+0x4ee>
 8001b78:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b7c:	e003      	b.n	8001b86 <calculate_heading_pid_simplified+0x4f6>
 8001b7e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b82:	eef1 7a67 	vneg.f32	s15, s15
 8001b86:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	}
	output_filtered += output_diff;
 8001b8a:	4b37      	ldr	r3, [pc, #220]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001b8c:	ed93 7a00 	vldr	s14, [r3]
 8001b90:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	4b33      	ldr	r3, [pc, #204]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001b9a:	edc3 7a00 	vstr	s15, [r3]

	// Simple approach damping for small errors
	if (fabs(error) < 20.0f && fabs(error) > 3.0f) {
 8001b9e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ba2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ba6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d529      	bpl.n	8001c08 <calculate_heading_pid_simplified+0x578>
 8001bb4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001bb8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bbc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	dd1e      	ble.n	8001c08 <calculate_heading_pid_simplified+0x578>
		float approach_factor = fabs(error) / 20.0f;
 8001bca:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001bce:	eeb0 7ae7 	vabs.f32	s14, s15
 8001bd2:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bda:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if (approach_factor < 0.6f)
 8001bde:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001be2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001c50 <calculate_heading_pid_simplified+0x5c0>
 8001be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	d501      	bpl.n	8001bf4 <calculate_heading_pid_simplified+0x564>
			approach_factor = 0.6f;
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <calculate_heading_pid_simplified+0x5dc>)
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
		output_filtered *= approach_factor;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001bf6:	ed93 7a00 	vldr	s14, [r3]
 8001bfa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c02:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001c04:	edc3 7a00 	vstr	s15, [r3]
	}

	// Update for next iteration
	previous_error = error;
 8001c08:	4a15      	ldr	r2, [pc, #84]	@ (8001c60 <calculate_heading_pid_simplified+0x5d0>)
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0c:	6013      	str	r3, [r2, #0]
	last_time = now;
 8001c0e:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <calculate_heading_pid_simplified+0x5e0>)
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	6013      	str	r3, [r2, #0]

	// Store for debugging
	heading_error = error;
 8001c14:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <calculate_heading_pid_simplified+0x5e4>)
 8001c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c18:	6013      	str	r3, [r2, #0]
	heading_pid_output = output_filtered;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <calculate_heading_pid_simplified+0x5e8>)
 8001c20:	6013      	str	r3, [r2, #0]

	return output_filtered;
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <calculate_heading_pid_simplified+0x5d8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
}
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	3758      	adds	r7, #88	@ 0x58
 8001c30:	46bd      	mov	sp, r7
 8001c32:	ecbd 8b02 	vpop	{d8}
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	3d23d70a 	.word	0x3d23d70a
 8001c3c:	3e4ccccd 	.word	0x3e4ccccd
 8001c40:	41700000 	.word	0x41700000
 8001c44:	3f333333 	.word	0x3f333333
 8001c48:	3f4ccccd 	.word	0x3f4ccccd
 8001c4c:	3e99999a 	.word	0x3e99999a
 8001c50:	3f19999a 	.word	0x3f19999a
 8001c54:	20000510 	.word	0x20000510
 8001c58:	42480000 	.word	0x42480000
 8001c5c:	c2480000 	.word	0xc2480000
 8001c60:	20000514 	.word	0x20000514
 8001c64:	40400000 	.word	0x40400000
 8001c68:	200004f8 	.word	0x200004f8
 8001c6c:	3f19999a 	.word	0x3f19999a
 8001c70:	200004f4 	.word	0x200004f4
 8001c74:	2000049c 	.word	0x2000049c
 8001c78:	200004a0 	.word	0x200004a0

08001c7c <reset_heading_pid>:

// Reset PID controller
void reset_heading_pid(void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	pid_integral = 0.0f;
 8001c80:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <reset_heading_pid+0x3c>)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
	pid_previous_error = 0.0f;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <reset_heading_pid+0x40>)
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
	pid_output_filtered = 0.0f;  // Reset filtered output
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <reset_heading_pid+0x44>)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
	pid_last_time = HAL_GetTick();
 8001c98:	f005 f95a 	bl	8006f50 <HAL_GetTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4a09      	ldr	r2, [pc, #36]	@ (8001cc4 <reset_heading_pid+0x48>)
 8001ca0:	6013      	str	r3, [r2, #0]
	heading_error = 0.0f;
 8001ca2:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <reset_heading_pid+0x4c>)
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
	heading_pid_output = 0.0f;
 8001caa:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <reset_heading_pid+0x50>)
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200004a4 	.word	0x200004a4
 8001cbc:	200004a8 	.word	0x200004a8
 8001cc0:	200004b4 	.word	0x200004b4
 8001cc4:	200004ac 	.word	0x200004ac
 8001cc8:	2000049c 	.word	0x2000049c
 8001ccc:	200004a0 	.word	0x200004a0

08001cd0 <set_heading_lock>:
// Updated set heading lock function
void set_heading_lock(float compass_heading) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	ed87 0a01 	vstr	s0, [r7, #4]
	locked_heading = compass_to_robot_front(compass_heading);
 8001cda:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cde:	f000 f821 	bl	8001d24 <compass_to_robot_front>
 8001ce2:	eef0 7a40 	vmov.f32	s15, s0
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <set_heading_lock+0x34>)
 8001ce8:	edc3 7a00 	vstr	s15, [r3]
	heading_lock_enabled = 1;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <set_heading_lock+0x38>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
	reset_heading_pid();
 8001cf2:	f7ff ffc3 	bl	8001c7c <reset_heading_pid>
	save_heading_lock_to_eeprom(); // Add this line
 8001cf6:	f000 f853 	bl	8001da0 <save_heading_lock_to_eeprom>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000498 	.word	0x20000498
 8001d08:	20000496 	.word	0x20000496

08001d0c <disable_heading_lock>:

// Disable heading lock
void disable_heading_lock(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	heading_lock_enabled = 0;
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <disable_heading_lock+0x14>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
	reset_heading_pid();
 8001d16:	f7ff ffb1 	bl	8001c7c <reset_heading_pid>
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000496 	.word	0x20000496

08001d24 <compass_to_robot_front>:

// Convert compass heading to robot front direction
float compass_to_robot_front(float compass_heading) {
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	ed87 0a01 	vstr	s0, [r7, #4]
	float robot_front = compass_heading + ROBOT_FRONT_OFFSET;
 8001d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d32:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001d98 <compass_to_robot_front+0x74>
 8001d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d3a:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalize to 0-360 range
	while (robot_front >= 360.0f) {
 8001d3e:	e007      	b.n	8001d50 <compass_to_robot_front+0x2c>
		robot_front -= 360.0f;
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d9c <compass_to_robot_front+0x78>
 8001d48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d4c:	edc7 7a03 	vstr	s15, [r7, #12]
	while (robot_front >= 360.0f) {
 8001d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d54:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001d9c <compass_to_robot_front+0x78>
 8001d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	daee      	bge.n	8001d40 <compass_to_robot_front+0x1c>
	}
	while (robot_front < 0.0f) {
 8001d62:	e007      	b.n	8001d74 <compass_to_robot_front+0x50>
		robot_front += 360.0f;
 8001d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d68:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001d9c <compass_to_robot_front+0x78>
 8001d6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d70:	edc7 7a03 	vstr	s15, [r7, #12]
	while (robot_front < 0.0f) {
 8001d74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	d4f0      	bmi.n	8001d64 <compass_to_robot_front+0x40>
	}

	return robot_front;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	ee07 3a90 	vmov	s15, r3
}
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	438d0000 	.word	0x438d0000
 8001d9c:	43b40000 	.word	0x43b40000

08001da0 <save_heading_lock_to_eeprom>:
 osMutexRelease(EEPROMMutexHandle);
 return result;
 }
 */

void save_heading_lock_to_eeprom(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	if (heading_lock_enabled) {
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <save_heading_lock_to_eeprom+0x54>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d020      	beq.n	8001df0 <save_heading_lock_to_eeprom+0x50>
		osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8001dae:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <save_heading_lock_to_eeprom+0x58>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f04f 31ff 	mov.w	r1, #4294967295
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00a fca1 	bl	800c6fe <osMutexAcquire>
		eeStorage.magic_number = EE_MAGIC_NUMBER;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <save_heading_lock_to_eeprom+0x5c>)
 8001dbe:	4a10      	ldr	r2, [pc, #64]	@ (8001e00 <save_heading_lock_to_eeprom+0x60>)
 8001dc0:	601a      	str	r2, [r3, #0]
		eeStorage.saved_locked_heading = locked_heading;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <save_heading_lock_to_eeprom+0x64>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <save_heading_lock_to_eeprom+0x5c>)
 8001dc8:	6053      	str	r3, [r2, #4]
		eeStorage.heading_lock_was_active = 1;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <save_heading_lock_to_eeprom+0x5c>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	721a      	strb	r2, [r3, #8]
		if (MB85rc_Bus_Write(MB85rc_ADDRESS, 0x0000, (uint8_t*) &eeStorage,
 8001dd0:	230c      	movs	r3, #12
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <save_heading_lock_to_eeprom+0x5c>)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	20a0      	movs	r0, #160	@ 0xa0
 8001dd8:	f001 fd10 	bl	80037fc <MB85rc_Bus_Write>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <save_heading_lock_to_eeprom+0x46>
				sizeof(eeStorage_t)) != HAL_OK) {
			// Handle error
			Error_Handler();
 8001de2:	f001 fcd3 	bl	800378c <Error_Handler>
		}
		osMutexRelease(I2C1MutexHandle);
 8001de6:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <save_heading_lock_to_eeprom+0x58>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f00a fcd2 	bl	800c794 <osMutexRelease>
	}
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000496 	.word	0x20000496
 8001df8:	2000040c 	.word	0x2000040c
 8001dfc:	200004bc 	.word	0x200004bc
 8001e00:	48454144 	.word	0x48454144
 8001e04:	20000498 	.word	0x20000498

08001e08 <restore_heading_lock_from_eeprom>:

bool restore_heading_lock_from_eeprom(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
	bool result = false;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <restore_heading_lock_from_eeprom+0x60>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00a fc6f 	bl	800c6fe <osMutexAcquire>
	if (MB85rc_Bus_Read(MB85rc_ADDRESS, 0x0000, (uint8_t*) &eeStorage,
 8001e20:	230c      	movs	r3, #12
 8001e22:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <restore_heading_lock_from_eeprom+0x64>)
 8001e24:	2100      	movs	r1, #0
 8001e26:	20a0      	movs	r0, #160	@ 0xa0
 8001e28:	f001 fd0c 	bl	8003844 <MB85rc_Bus_Read>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <restore_heading_lock_from_eeprom+0x2e>
			sizeof(eeStorage_t)) != HAL_OK) {
		// Handle error
		Error_Handler();
 8001e32:	f001 fcab 	bl	800378c <Error_Handler>
	}
	if (eeStorage.magic_number == EE_MAGIC_NUMBER
 8001e36:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <restore_heading_lock_from_eeprom+0x64>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <restore_heading_lock_from_eeprom+0x68>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d109      	bne.n	8001e54 <restore_heading_lock_from_eeprom+0x4c>
			&& eeStorage.heading_lock_was_active) {
 8001e40:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <restore_heading_lock_from_eeprom+0x64>)
 8001e42:	7a1b      	ldrb	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <restore_heading_lock_from_eeprom+0x4c>
		locked_heading = eeStorage.saved_locked_heading;
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <restore_heading_lock_from_eeprom+0x64>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a09      	ldr	r2, [pc, #36]	@ (8001e74 <restore_heading_lock_from_eeprom+0x6c>)
 8001e4e:	6013      	str	r3, [r2, #0]
		result = true;
 8001e50:	2301      	movs	r3, #1
 8001e52:	71fb      	strb	r3, [r7, #7]
	}
	osMutexRelease(I2C1MutexHandle);
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <restore_heading_lock_from_eeprom+0x60>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f00a fc9b 	bl	800c794 <osMutexRelease>
	return result;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	2000040c 	.word	0x2000040c
 8001e6c:	200004bc 	.word	0x200004bc
 8001e70:	48454144 	.word	0x48454144
 8001e74:	20000498 	.word	0x20000498

08001e78 <get_channel7_position>:

// Get the current position of channel 7 (assumed to be used for mode selection)
ch7_position_t get_channel7_position(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
	if (!is_sbus_signal_valid()) {
 8001e7e:	f7ff fbc5 	bl	800160c <is_sbus_signal_valid>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <get_channel7_position+0x14>
		return CH7_POSITION_UNKNOWN;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e023      	b.n	8001ed4 <get_channel7_position+0x5c>
	}

	uint16_t ch7_value = sbus_channels[6]; // Channel 7 (index 6)
 8001e8c:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <get_channel7_position+0x64>)
 8001e8e:	899b      	ldrh	r3, [r3, #12]
 8001e90:	80fb      	strh	r3, [r7, #6]

	// Define positions with dead zones (assuming SBUS range 172-1811)
	// Min: 172-500, Mid: 700-1283, Max: 1511-1811
	if (ch7_value >= 172 && ch7_value <= 500) {
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	2bab      	cmp	r3, #171	@ 0xab
 8001e96:	d905      	bls.n	8001ea4 <get_channel7_position+0x2c>
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e9e:	d801      	bhi.n	8001ea4 <get_channel7_position+0x2c>
		return CH7_POSITION_MIN;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e017      	b.n	8001ed4 <get_channel7_position+0x5c>
	} else if (ch7_value >= 700 && ch7_value <= 1283) {
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001eaa:	d306      	bcc.n	8001eba <get_channel7_position+0x42>
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	f240 5203 	movw	r2, #1283	@ 0x503
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d801      	bhi.n	8001eba <get_channel7_position+0x42>
		return CH7_POSITION_MID;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00c      	b.n	8001ed4 <get_channel7_position+0x5c>
	} else if (ch7_value >= 1511 && ch7_value <= 1811) {
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	f240 52e6 	movw	r2, #1510	@ 0x5e6
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d906      	bls.n	8001ed2 <get_channel7_position+0x5a>
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	f240 7213 	movw	r2, #1811	@ 0x713
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d801      	bhi.n	8001ed2 <get_channel7_position+0x5a>
		return CH7_POSITION_MAX;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e000      	b.n	8001ed4 <get_channel7_position+0x5c>
	}

	return CH7_POSITION_UNKNOWN; // In dead zone or invalid
 8001ed2:	2303      	movs	r3, #3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2000043c 	.word	0x2000043c

08001ee0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0aa      	sub	sp, #168	@ 0xa8
 8001ee4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ee6:	f004 fffd 	bl	8006ee4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001eea:	f000 f95d 	bl	80021a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001eee:	f000 fb4f 	bl	8002590 <MX_GPIO_Init>
	MX_DMA_Init();
 8001ef2:	f000 fb2d 	bl	8002550 <MX_DMA_Init>
	MX_I2C1_Init();
 8001ef6:	f000 f9c3 	bl	8002280 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8001efa:	f000 fafb 	bl	80024f4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001efe:	f000 fa07 	bl	8002310 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001f02:	f000 fa9f 	bl	8002444 <MX_TIM3_Init>
	MX_IWDG_Init();
 8001f06:	f000 f9e9 	bl	80022dc <MX_IWDG_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8001f0a:	2219      	movs	r2, #25
 8001f0c:	4981      	ldr	r1, [pc, #516]	@ (8002114 <main+0x234>)
 8001f0e:	4882      	ldr	r0, [pc, #520]	@ (8002118 <main+0x238>)
 8001f10:	f009 f8c8 	bl	800b0a4 <HAL_UART_Receive_DMA>

	TB6612FNG_Init(); // Initialize TB6612 drivers and PWM
 8001f14:	f002 fad0 	bl	80044b8 <TB6612FNG_Init>
	//  char display_str[48];

	// Set PC13 high to turn the onboard LED on
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	HAL_Delay(BNO085_BOOT_DELAY_MS);
 8001f18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f1c:	f005 f824 	bl	8006f68 <HAL_Delay>

	// Set PC13 high to turn the onboard LED off
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f26:	487d      	ldr	r0, [pc, #500]	@ (800211c <main+0x23c>)
 8001f28:	f005 fece 	bl	8007cc8 <HAL_GPIO_WritePin>

	i2c_bus_scan(i2c_devices, sizeof(i2c_devices)); // Scan and store result
 8001f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f30:	2180      	movs	r1, #128	@ 0x80
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe ffec 	bl	8000f10 <i2c_bus_scan>

	uint8_t chip_id = bno085_read_chip_id();
 8001f38:	f7ff f83a 	bl	8000fb0 <bno085_read_chip_id>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (chip_id == 0xFF) {
 8001f42:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001f46:	2bff      	cmp	r3, #255	@ 0xff
 8001f48:	d101      	bne.n	8001f4e <main+0x6e>
		// Optionally display error on OLED
		Error_Handler();
 8001f4a:	f001 fc1f 	bl	800378c <Error_Handler>
	}

	bno085_setup();
 8001f4e:	f7ff f8dd 	bl	800110c <bno085_setup>
	//HAL_Delay(100); // Give BNO085 time to boot
	sh2_clearTare(); // Now device uses absolute/magnetic north as reference
 8001f52:	f003 f91f 	bl	8005194 <sh2_clearTare>

	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c1) != 0) {
 8001f56:	4872      	ldr	r0, [pc, #456]	@ (8002120 <main+0x240>)
 8001f58:	f001 fcc0 	bl	80038dc <ssd1306_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <main+0x86>
		Error_Handler();
 8001f62:	f001 fc13 	bl	800378c <Error_Handler>
	}

	// Initialize the MB85RC256V EEPROM with the I2C handle
	MB85rc_Init(&hi2c1);
 8001f66:	486e      	ldr	r0, [pc, #440]	@ (8002120 <main+0x240>)
 8001f68:	f001 fc38 	bl	80037dc <MB85rc_Init>
	if (HAL_I2C_IsDeviceReady(&hi2c1, MB85rc_ADDRESS, 3, 100) != HAL_OK) {
 8001f6c:	2364      	movs	r3, #100	@ 0x64
 8001f6e:	2203      	movs	r2, #3
 8001f70:	21a0      	movs	r1, #160	@ 0xa0
 8001f72:	486b      	ldr	r0, [pc, #428]	@ (8002120 <main+0x240>)
 8001f74:	f006 fe94 	bl	8008ca0 <HAL_I2C_IsDeviceReady>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <main+0xa4>
	    // Device not ready, handle error
	    Error_Handler();
 8001f7e:	f001 fc05 	bl	800378c <Error_Handler>
 8001f82:	e03a      	b.n	8001ffa <main+0x11a>
	} else {
	    // FRAM is ready - display status information
	    ssd1306_Fill(Black);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f001 fdc9 	bl	8003b1c <ssd1306_Fill>
	    ssd1306_SetCursor(1, 0);
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f001 ff3d 	bl	8003e0c <ssd1306_SetCursor>
	    ssd1306_WriteString("FRAM MB85RC256V", Font_7x10, White);
 8001f92:	4a64      	ldr	r2, [pc, #400]	@ (8002124 <main+0x244>)
 8001f94:	2301      	movs	r3, #1
 8001f96:	ca06      	ldmia	r2, {r1, r2}
 8001f98:	4863      	ldr	r0, [pc, #396]	@ (8002128 <main+0x248>)
 8001f9a:	f001 ff11 	bl	8003dc0 <ssd1306_WriteString>

	    // Display FRAM address
	    char fram_info[32];
	    snprintf(fram_info, sizeof(fram_info), "Addr: 0x%02X", MB85rc_ADDRESS);
 8001f9e:	1d38      	adds	r0, r7, #4
 8001fa0:	23a0      	movs	r3, #160	@ 0xa0
 8001fa2:	4a62      	ldr	r2, [pc, #392]	@ (800212c <main+0x24c>)
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	f00e f92f 	bl	8010208 <sniprintf>
	    ssd1306_SetCursor(1, 12);
 8001faa:	210c      	movs	r1, #12
 8001fac:	2001      	movs	r0, #1
 8001fae:	f001 ff2d 	bl	8003e0c <ssd1306_SetCursor>
	    ssd1306_WriteString(fram_info, Font_7x10, White);
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	@ (8002124 <main+0x244>)
 8001fb4:	1d38      	adds	r0, r7, #4
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	ca06      	ldmia	r2, {r1, r2}
 8001fba:	f001 ff01 	bl	8003dc0 <ssd1306_WriteString>

	    // Display FRAM size (32KB for MB85RC256V)
	    ssd1306_SetCursor(1, 24);
 8001fbe:	2118      	movs	r1, #24
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f001 ff23 	bl	8003e0c <ssd1306_SetCursor>
	    ssd1306_WriteString("Size: 32KB", Font_7x10, White);
 8001fc6:	4a57      	ldr	r2, [pc, #348]	@ (8002124 <main+0x244>)
 8001fc8:	2301      	movs	r3, #1
 8001fca:	ca06      	ldmia	r2, {r1, r2}
 8001fcc:	4858      	ldr	r0, [pc, #352]	@ (8002130 <main+0x250>)
 8001fce:	f001 fef7 	bl	8003dc0 <ssd1306_WriteString>

	    // Display initialization status
	    ssd1306_SetCursor(1, 36);
 8001fd2:	2124      	movs	r1, #36	@ 0x24
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f001 ff19 	bl	8003e0c <ssd1306_SetCursor>
	    ssd1306_WriteString("Status: OK", Font_7x10, White);
 8001fda:	4a52      	ldr	r2, [pc, #328]	@ (8002124 <main+0x244>)
 8001fdc:	2301      	movs	r3, #1
 8001fde:	ca06      	ldmia	r2, {r1, r2}
 8001fe0:	4854      	ldr	r0, [pc, #336]	@ (8002134 <main+0x254>)
 8001fe2:	f001 feed 	bl	8003dc0 <ssd1306_WriteString>

	    ssd1306_UpdateScreen(&hi2c1);
 8001fe6:	484e      	ldr	r0, [pc, #312]	@ (8002120 <main+0x240>)
 8001fe8:	f001 fdbc 	bl	8003b64 <ssd1306_UpdateScreen>
	    HAL_IWDG_Refresh(&hiwdg);
 8001fec:	4852      	ldr	r0, [pc, #328]	@ (8002138 <main+0x258>)
 8001fee:	f007 fccd 	bl	800998c <HAL_IWDG_Refresh>
	    HAL_Delay(2000); // Show FRAM info for 2 seconds
 8001ff2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ff6:	f004 ffb7 	bl	8006f68 <HAL_Delay>
	}


	ssd1306_Fill(Black);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f001 fd8e 	bl	8003b1c <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1);
 8002000:	4847      	ldr	r0, [pc, #284]	@ (8002120 <main+0x240>)
 8002002:	f001 fdaf 	bl	8003b64 <ssd1306_UpdateScreen>

	HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog
 8002006:	484c      	ldr	r0, [pc, #304]	@ (8002138 <main+0x258>)
 8002008:	f007 fcc0 	bl	800998c <HAL_IWDG_Refresh>
	HAL_Delay(1000);
 800200c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002010:	f004 ffaa 	bl	8006f68 <HAL_Delay>

	// Write data to local screenbuffer
	ssd1306_SetCursor(1, 0);
 8002014:	2100      	movs	r1, #0
 8002016:	2001      	movs	r0, #1
 8002018:	f001 fef8 	bl	8003e0c <ssd1306_SetCursor>
	ssd1306_WriteString(APP_VERSION, Font_7x10, White);
 800201c:	4a41      	ldr	r2, [pc, #260]	@ (8002124 <main+0x244>)
 800201e:	2301      	movs	r3, #1
 8002020:	ca06      	ldmia	r2, {r1, r2}
 8002022:	4846      	ldr	r0, [pc, #280]	@ (800213c <main+0x25c>)
 8002024:	f001 fecc 	bl	8003dc0 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 12);
 8002028:	210c      	movs	r1, #12
 800202a:	2001      	movs	r0, #1
 800202c:	f001 feee 	bl	8003e0c <ssd1306_SetCursor>
	if (i2c_devices[0] == '\0') {
 8002030:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <main+0x166>
		ssd1306_WriteString("No I2C found", Font_7x10, White);
 8002038:	4a3a      	ldr	r2, [pc, #232]	@ (8002124 <main+0x244>)
 800203a:	2301      	movs	r3, #1
 800203c:	ca06      	ldmia	r2, {r1, r2}
 800203e:	4840      	ldr	r0, [pc, #256]	@ (8002140 <main+0x260>)
 8002040:	f001 febe 	bl	8003dc0 <ssd1306_WriteString>
 8002044:	e010      	b.n	8002068 <main+0x188>
	} else {
		ssd1306_WriteString("I2C:", Font_7x10, White);
 8002046:	4a37      	ldr	r2, [pc, #220]	@ (8002124 <main+0x244>)
 8002048:	2301      	movs	r3, #1
 800204a:	ca06      	ldmia	r2, {r1, r2}
 800204c:	483d      	ldr	r0, [pc, #244]	@ (8002144 <main+0x264>)
 800204e:	f001 feb7 	bl	8003dc0 <ssd1306_WriteString>
		ssd1306_SetCursor(1, 24);
 8002052:	2118      	movs	r1, #24
 8002054:	2001      	movs	r0, #1
 8002056:	f001 fed9 	bl	8003e0c <ssd1306_SetCursor>
		ssd1306_WriteString(i2c_devices, Font_7x10, White);
 800205a:	4a32      	ldr	r2, [pc, #200]	@ (8002124 <main+0x244>)
 800205c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002060:	2301      	movs	r3, #1
 8002062:	ca06      	ldmia	r2, {r1, r2}
 8002064:	f001 feac 	bl	8003dc0 <ssd1306_WriteString>
	}

	// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 8002068:	482d      	ldr	r0, [pc, #180]	@ (8002120 <main+0x240>)
 800206a:	f001 fd7b 	bl	8003b64 <ssd1306_UpdateScreen>

	HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog
 800206e:	4832      	ldr	r0, [pc, #200]	@ (8002138 <main+0x258>)
 8002070:	f007 fc8c 	bl	800998c <HAL_IWDG_Refresh>
	// Delay to see I2C info
	HAL_Delay(2000);
 8002074:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002078:	f004 ff76 	bl	8006f68 <HAL_Delay>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800207c:	f00a f9c2 	bl	800c404 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of CompassMutex */
	CompassMutexHandle = osMutexNew(&CompassMutex_attributes);
 8002080:	4831      	ldr	r0, [pc, #196]	@ (8002148 <main+0x268>)
 8002082:	f00a fab6 	bl	800c5f2 <osMutexNew>
 8002086:	4603      	mov	r3, r0
 8002088:	4a30      	ldr	r2, [pc, #192]	@ (800214c <main+0x26c>)
 800208a:	6013      	str	r3, [r2, #0]

	/* creation of I2C1Mutex */
	I2C1MutexHandle = osMutexNew(&I2C1Mutex_attributes);
 800208c:	4830      	ldr	r0, [pc, #192]	@ (8002150 <main+0x270>)
 800208e:	f00a fab0 	bl	800c5f2 <osMutexNew>
 8002092:	4603      	mov	r3, r0
 8002094:	4a2f      	ldr	r2, [pc, #188]	@ (8002154 <main+0x274>)
 8002096:	6013      	str	r3, [r2, #0]

	/* creation of EncoderMutex */
	EncoderMutexHandle = osMutexNew(&EncoderMutex_attributes);
 8002098:	482f      	ldr	r0, [pc, #188]	@ (8002158 <main+0x278>)
 800209a:	f00a faaa 	bl	800c5f2 <osMutexNew>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a2e      	ldr	r2, [pc, #184]	@ (800215c <main+0x27c>)
 80020a2:	6013      	str	r3, [r2, #0]

	/* creation of UARTMutex */
	UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 80020a4:	482e      	ldr	r0, [pc, #184]	@ (8002160 <main+0x280>)
 80020a6:	f00a faa4 	bl	800c5f2 <osMutexNew>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002164 <main+0x284>)
 80020ae:	6013      	str	r3, [r2, #0]

	/* creation of ModeMutex */
	ModeMutexHandle = osMutexNew(&ModeMutex_attributes);
 80020b0:	482d      	ldr	r0, [pc, #180]	@ (8002168 <main+0x288>)
 80020b2:	f00a fa9e 	bl	800c5f2 <osMutexNew>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4a2c      	ldr	r2, [pc, #176]	@ (800216c <main+0x28c>)
 80020ba:	6013      	str	r3, [r2, #0]

	/* creation of EEPROMMutex */
	EEPROMMutexHandle = osMutexNew(&EEPROMMutex_attributes);
 80020bc:	482c      	ldr	r0, [pc, #176]	@ (8002170 <main+0x290>)
 80020be:	f00a fa98 	bl	800c5f2 <osMutexNew>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <main+0x294>)
 80020c6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80020c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002178 <main+0x298>)
 80020ca:	2100      	movs	r1, #0
 80020cc:	482b      	ldr	r0, [pc, #172]	@ (800217c <main+0x29c>)
 80020ce:	f00a f9e3 	bl	800c498 <osThreadNew>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002180 <main+0x2a0>)
 80020d6:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of CompassTask */
	CompassTaskHandle = osThreadNew(StartCompassTask, NULL,
 80020d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002184 <main+0x2a4>)
 80020da:	2100      	movs	r1, #0
 80020dc:	482a      	ldr	r0, [pc, #168]	@ (8002188 <main+0x2a8>)
 80020de:	f00a f9db 	bl	800c498 <osThreadNew>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a29      	ldr	r2, [pc, #164]	@ (800218c <main+0x2ac>)
 80020e6:	6013      	str	r3, [r2, #0]
			&CompassTask_attributes);

	/* creation of DisplayTask */
	DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL,
 80020e8:	4a29      	ldr	r2, [pc, #164]	@ (8002190 <main+0x2b0>)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4829      	ldr	r0, [pc, #164]	@ (8002194 <main+0x2b4>)
 80020ee:	f00a f9d3 	bl	800c498 <osThreadNew>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a28      	ldr	r2, [pc, #160]	@ (8002198 <main+0x2b8>)
 80020f6:	6013      	str	r3, [r2, #0]
			&DisplayTask_attributes);

	/* creation of EncoderTask */
	EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL,
 80020f8:	4a28      	ldr	r2, [pc, #160]	@ (800219c <main+0x2bc>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	4828      	ldr	r0, [pc, #160]	@ (80021a0 <main+0x2c0>)
 80020fe:	f00a f9cb 	bl	800c498 <osThreadNew>
 8002102:	4603      	mov	r3, r0
 8002104:	4a27      	ldr	r2, [pc, #156]	@ (80021a4 <main+0x2c4>)
 8002106:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8002108:	f00a f9a0 	bl	800c44c <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		osDelay(1);
 800210c:	2001      	movs	r0, #1
 800210e:	f00a fa55 	bl	800c5bc <osDelay>
 8002112:	e7fb      	b.n	800210c <main+0x22c>
 8002114:	20000420 	.word	0x20000420
 8002118:	20000350 	.word	0x20000350
 800211c:	40020800 	.word	0x40020800
 8002120:	20000260 	.word	0x20000260
 8002124:	20000000 	.word	0x20000000
 8002128:	080129c4 	.word	0x080129c4
 800212c:	080129d4 	.word	0x080129d4
 8002130:	080129e4 	.word	0x080129e4
 8002134:	080129f0 	.word	0x080129f0
 8002138:	200002b4 	.word	0x200002b4
 800213c:	080129fc 	.word	0x080129fc
 8002140:	08012a08 	.word	0x08012a08
 8002144:	08012a18 	.word	0x08012a18
 8002148:	080133dc 	.word	0x080133dc
 800214c:	20000408 	.word	0x20000408
 8002150:	080133ec 	.word	0x080133ec
 8002154:	2000040c 	.word	0x2000040c
 8002158:	080133fc 	.word	0x080133fc
 800215c:	20000410 	.word	0x20000410
 8002160:	0801340c 	.word	0x0801340c
 8002164:	20000414 	.word	0x20000414
 8002168:	0801341c 	.word	0x0801341c
 800216c:	20000418 	.word	0x20000418
 8002170:	0801342c 	.word	0x0801342c
 8002174:	2000041c 	.word	0x2000041c
 8002178:	0801334c 	.word	0x0801334c
 800217c:	080029b1 	.word	0x080029b1
 8002180:	200003f8 	.word	0x200003f8
 8002184:	08013370 	.word	0x08013370
 8002188:	08002e51 	.word	0x08002e51
 800218c:	200003fc 	.word	0x200003fc
 8002190:	08013394 	.word	0x08013394
 8002194:	08002e79 	.word	0x08002e79
 8002198:	20000400 	.word	0x20000400
 800219c:	080133b8 	.word	0x080133b8
 80021a0:	080035f9 	.word	0x080035f9
 80021a4:	20000404 	.word	0x20000404

080021a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b094      	sub	sp, #80	@ 0x50
 80021ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021ae:	f107 0320 	add.w	r3, r7, #32
 80021b2:	2230      	movs	r2, #48	@ 0x30
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00e f89f 	bl	80102fa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <SystemClock_Config+0xd0>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	4a28      	ldr	r2, [pc, #160]	@ (8002278 <SystemClock_Config+0xd0>)
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021da:	6413      	str	r3, [r2, #64]	@ 0x40
 80021dc:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <SystemClock_Config+0xd0>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e8:	2300      	movs	r3, #0
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	4b23      	ldr	r3, [pc, #140]	@ (800227c <SystemClock_Config+0xd4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a22      	ldr	r2, [pc, #136]	@ (800227c <SystemClock_Config+0xd4>)
 80021f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b20      	ldr	r3, [pc, #128]	@ (800227c <SystemClock_Config+0xd4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8002204:	2309      	movs	r3, #9
 8002206:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002208:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800220e:	2301      	movs	r3, #1
 8002210:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002212:	2302      	movs	r3, #2
 8002214:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002216:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800221a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800221c:	2319      	movs	r3, #25
 800221e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 8002220:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002224:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002226:	2304      	movs	r3, #4
 8002228:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800222a:	2304      	movs	r3, #4
 800222c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800222e:	f107 0320 	add.w	r3, r7, #32
 8002232:	4618      	mov	r0, r3
 8002234:	f007 fbba 	bl	80099ac <HAL_RCC_OscConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0x9a>
		Error_Handler();
 800223e:	f001 faa5 	bl	800378c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002242:	230f      	movs	r3, #15
 8002244:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002246:	2302      	movs	r3, #2
 8002248:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800224e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002252:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f007 fe1c 	bl	8009e9c <HAL_RCC_ClockConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SystemClock_Config+0xc6>
		Error_Handler();
 800226a:	f001 fa8f 	bl	800378c <Error_Handler>
	}
}
 800226e:	bf00      	nop
 8002270:	3750      	adds	r7, #80	@ 0x50
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40007000 	.word	0x40007000

08002280 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <MX_I2C1_Init+0x50>)
 8002286:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <MX_I2C1_Init+0x54>)
 8002288:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800228a:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <MX_I2C1_Init+0x50>)
 800228c:	4a12      	ldr	r2, [pc, #72]	@ (80022d8 <MX_I2C1_Init+0x58>)
 800228e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <MX_I2C1_Init+0x50>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002296:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <MX_I2C1_Init+0x50>)
 8002298:	2200      	movs	r2, #0
 800229a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <MX_I2C1_Init+0x50>)
 800229e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022a2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022a4:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <MX_I2C1_Init+0x50>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <MX_I2C1_Init+0x50>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b0:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <MX_I2C1_Init+0x50>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <MX_I2C1_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80022bc:	4804      	ldr	r0, [pc, #16]	@ (80022d0 <MX_I2C1_Init+0x50>)
 80022be:	f005 fd4f 	bl	8007d60 <HAL_I2C_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80022c8:	f001 fa60 	bl	800378c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000260 	.word	0x20000260
 80022d4:	40005400 	.word	0x40005400
 80022d8:	00061a80 	.word	0x00061a80

080022dc <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 80022e0:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <MX_IWDG_Init+0x2c>)
 80022e2:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <MX_IWDG_Init+0x30>)
 80022e4:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <MX_IWDG_Init+0x2c>)
 80022e8:	2204      	movs	r2, #4
 80022ea:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 3125;
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <MX_IWDG_Init+0x2c>)
 80022ee:	f640 4235 	movw	r2, #3125	@ 0xc35
 80022f2:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80022f4:	4804      	ldr	r0, [pc, #16]	@ (8002308 <MX_IWDG_Init+0x2c>)
 80022f6:	f007 fb05 	bl	8009904 <HAL_IWDG_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_IWDG_Init+0x28>
		Error_Handler();
 8002300:	f001 fa44 	bl	800378c <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200002b4 	.word	0x200002b4
 800230c:	40003000 	.word	0x40003000

08002310 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b092      	sub	sp, #72	@ 0x48
 8002314:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002316:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2220      	movs	r2, #32
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f00d ffdd 	bl	80102fa <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002340:	4b3e      	ldr	r3, [pc, #248]	@ (800243c <MX_TIM1_Init+0x12c>)
 8002342:	4a3f      	ldr	r2, [pc, #252]	@ (8002440 <MX_TIM1_Init+0x130>)
 8002344:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 63;
 8002346:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <MX_TIM1_Init+0x12c>)
 8002348:	223f      	movs	r2, #63	@ 0x3f
 800234a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <MX_TIM1_Init+0x12c>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 49;
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <MX_TIM1_Init+0x12c>)
 8002354:	2231      	movs	r2, #49	@ 0x31
 8002356:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002358:	4b38      	ldr	r3, [pc, #224]	@ (800243c <MX_TIM1_Init+0x12c>)
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800235e:	4b37      	ldr	r3, [pc, #220]	@ (800243c <MX_TIM1_Init+0x12c>)
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002364:	4b35      	ldr	r3, [pc, #212]	@ (800243c <MX_TIM1_Init+0x12c>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800236a:	4834      	ldr	r0, [pc, #208]	@ (800243c <MX_TIM1_Init+0x12c>)
 800236c:	f008 f864 	bl	800a438 <HAL_TIM_PWM_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM1_Init+0x6a>
		Error_Handler();
 8002376:	f001 fa09 	bl	800378c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002382:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002386:	4619      	mov	r1, r3
 8002388:	482c      	ldr	r0, [pc, #176]	@ (800243c <MX_TIM1_Init+0x12c>)
 800238a:	f008 fd67 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8002394:	f001 f9fa 	bl	800378c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002398:	2360      	movs	r3, #96	@ 0x60
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a4:	2300      	movs	r3, #0
 80023a6:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80023b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b8:	2200      	movs	r2, #0
 80023ba:	4619      	mov	r1, r3
 80023bc:	481f      	ldr	r0, [pc, #124]	@ (800243c <MX_TIM1_Init+0x12c>)
 80023be:	f008 fa2b 	bl	800a818 <HAL_TIM_PWM_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM1_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 80023c8:	f001 f9e0 	bl	800378c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80023cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d0:	2204      	movs	r2, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4819      	ldr	r0, [pc, #100]	@ (800243c <MX_TIM1_Init+0x12c>)
 80023d6:	f008 fa1f 	bl	800a818 <HAL_TIM_PWM_ConfigChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 80023e0:	f001 f9d4 	bl	800378c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 80023e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e8:	220c      	movs	r2, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	4813      	ldr	r0, [pc, #76]	@ (800243c <MX_TIM1_Init+0x12c>)
 80023ee:	f008 fa13 	bl	800a818 <HAL_TIM_PWM_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM1_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 80023f8:	f001 f9c8 	bl	800378c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002414:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	4619      	mov	r1, r3
 800241e:	4807      	ldr	r0, [pc, #28]	@ (800243c <MX_TIM1_Init+0x12c>)
 8002420:	f008 fd8a 	bl	800af38 <HAL_TIMEx_ConfigBreakDeadTime>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM1_Init+0x11e>
			!= HAL_OK) {
		Error_Handler();
 800242a:	f001 f9af 	bl	800378c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800242e:	4803      	ldr	r0, [pc, #12]	@ (800243c <MX_TIM1_Init+0x12c>)
 8002430:	f001 fdb0 	bl	8003f94 <HAL_TIM_MspPostInit>

}
 8002434:	bf00      	nop
 8002436:	3748      	adds	r7, #72	@ 0x48
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200002c0 	.word	0x200002c0
 8002440:	40010000 	.word	0x40010000

08002444 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800244a:	f107 0320 	add.w	r3, r7, #32
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	611a      	str	r2, [r3, #16]
 8002462:	615a      	str	r2, [r3, #20]
 8002464:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002466:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <MX_TIM3_Init+0xa8>)
 8002468:	4a21      	ldr	r2, [pc, #132]	@ (80024f0 <MX_TIM3_Init+0xac>)
 800246a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 63;
 800246c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ec <MX_TIM3_Init+0xa8>)
 800246e:	223f      	movs	r2, #63	@ 0x3f
 8002470:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	4b1e      	ldr	r3, [pc, #120]	@ (80024ec <MX_TIM3_Init+0xa8>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 24;
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <MX_TIM3_Init+0xa8>)
 800247a:	2218      	movs	r2, #24
 800247c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <MX_TIM3_Init+0xa8>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <MX_TIM3_Init+0xa8>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800248a:	4818      	ldr	r0, [pc, #96]	@ (80024ec <MX_TIM3_Init+0xa8>)
 800248c:	f007 ffd4 	bl	800a438 <HAL_TIM_PWM_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM3_Init+0x56>
		Error_Handler();
 8002496:	f001 f979 	bl	800378c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80024a2:	f107 0320 	add.w	r3, r7, #32
 80024a6:	4619      	mov	r1, r3
 80024a8:	4810      	ldr	r0, [pc, #64]	@ (80024ec <MX_TIM3_Init+0xa8>)
 80024aa:	f008 fcd7 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM3_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 80024b4:	f001 f96a 	bl	800378c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b8:	2360      	movs	r3, #96	@ 0x60
 80024ba:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	2204      	movs	r2, #4
 80024cc:	4619      	mov	r1, r3
 80024ce:	4807      	ldr	r0, [pc, #28]	@ (80024ec <MX_TIM3_Init+0xa8>)
 80024d0:	f008 f9a2 	bl	800a818 <HAL_TIM_PWM_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80024da:	f001 f957 	bl	800378c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80024de:	4803      	ldr	r0, [pc, #12]	@ (80024ec <MX_TIM3_Init+0xa8>)
 80024e0:	f001 fd58 	bl	8003f94 <HAL_TIM_MspPostInit>

}
 80024e4:	bf00      	nop
 80024e6:	3728      	adds	r7, #40	@ 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000308 	.word	0x20000308
 80024f0:	40000400 	.word	0x40000400

080024f4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80024f8:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 80024fa:	4a13      	ldr	r2, [pc, #76]	@ (8002548 <MX_USART2_UART_Init+0x54>)
 80024fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 100000;
 80024fe:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 8002500:	4a12      	ldr	r2, [pc, #72]	@ (800254c <MX_USART2_UART_Init+0x58>)
 8002502:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002504:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 8002506:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800250a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_2;
 800250c:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 800250e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002512:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 8002516:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800251a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 800251c:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 800251e:	2204      	movs	r2, #4
 8002520:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002522:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800252e:	4805      	ldr	r0, [pc, #20]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 8002530:	f008 fd68 	bl	800b004 <HAL_UART_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 800253a:	f001 f927 	bl	800378c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000350 	.word	0x20000350
 8002548:	40004400 	.word	0x40004400
 800254c:	000186a0 	.word	0x000186a0

08002550 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <MX_DMA_Init+0x3c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a0b      	ldr	r2, [pc, #44]	@ (800258c <MX_DMA_Init+0x3c>)
 8002560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <MX_DMA_Init+0x3c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	2105      	movs	r1, #5
 8002576:	2010      	movs	r0, #16
 8002578:	f004 fdd2 	bl	8007120 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800257c:	2010      	movs	r0, #16
 800257e:	f004 fdeb 	bl	8007158 <HAL_NVIC_EnableIRQ>

}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	4b5e      	ldr	r3, [pc, #376]	@ (8002724 <MX_GPIO_Init+0x194>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002724 <MX_GPIO_Init+0x194>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002724 <MX_GPIO_Init+0x194>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b57      	ldr	r3, [pc, #348]	@ (8002724 <MX_GPIO_Init+0x194>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a56      	ldr	r2, [pc, #344]	@ (8002724 <MX_GPIO_Init+0x194>)
 80025cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b54      	ldr	r3, [pc, #336]	@ (8002724 <MX_GPIO_Init+0x194>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b50      	ldr	r3, [pc, #320]	@ (8002724 <MX_GPIO_Init+0x194>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a4f      	ldr	r2, [pc, #316]	@ (8002724 <MX_GPIO_Init+0x194>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002724 <MX_GPIO_Init+0x194>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	4b49      	ldr	r3, [pc, #292]	@ (8002724 <MX_GPIO_Init+0x194>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a48      	ldr	r2, [pc, #288]	@ (8002724 <MX_GPIO_Init+0x194>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b46      	ldr	r3, [pc, #280]	@ (8002724 <MX_GPIO_Init+0x194>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002616:	2200      	movs	r2, #0
 8002618:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800261c:	4842      	ldr	r0, [pc, #264]	@ (8002728 <MX_GPIO_Init+0x198>)
 800261e:	f005 fb53 	bl	8007cc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002622:	2200      	movs	r2, #0
 8002624:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002628:	4840      	ldr	r0, [pc, #256]	@ (800272c <MX_GPIO_Init+0x19c>)
 800262a:	f005 fb4d 	bl	8007cc8 <HAL_GPIO_WritePin>
	Motor_1A_IN1_Pin | Motor_1A_IN2_Pin | Motor_1B_IN2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800262e:	2200      	movs	r2, #0
 8002630:	f24f 0123 	movw	r1, #61475	@ 0xf023
 8002634:	483e      	ldr	r0, [pc, #248]	@ (8002730 <MX_GPIO_Init+0x1a0>)
 8002636:	f005 fb47 	bl	8007cc8 <HAL_GPIO_WritePin>
			Motor_2A_IN1_Pin | Motor_2A_IN2_Pin | TB6612__1_STBY_Pin
					| TB6612__2_STBY_Pin | Motor_2B_IN1_Pin | Motor_2B_IN2_Pin
					| Motor_1B_IN1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800263a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800263e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002640:	2301      	movs	r3, #1
 8002642:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	4835      	ldr	r0, [pc, #212]	@ (8002728 <MX_GPIO_Init+0x198>)
 8002654:	f005 f99c 	bl	8007990 <HAL_GPIO_Init>

	/*Configure GPIO pins : Motor_1A_IN1_Pin Motor_1A_IN2_Pin Motor_1B_IN2_Pin */
	GPIO_InitStruct.Pin =
 8002658:	f248 0303 	movw	r3, #32771	@ 0x8003
 800265c:	617b      	str	r3, [r7, #20]
	Motor_1A_IN1_Pin | Motor_1A_IN2_Pin | Motor_1B_IN2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265e:	2301      	movs	r3, #1
 8002660:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	482e      	ldr	r0, [pc, #184]	@ (800272c <MX_GPIO_Init+0x19c>)
 8002672:	f005 f98d 	bl	8007990 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_for_CLK___SNP00128_Pin */
	GPIO_InitStruct.Pin = INT_for_CLK___SNP00128_Pin;
 8002676:	2310      	movs	r3, #16
 8002678:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800267a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800267e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002680:	2301      	movs	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(INT_for_CLK___SNP00128_GPIO_Port, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	4828      	ldr	r0, [pc, #160]	@ (800272c <MX_GPIO_Init+0x19c>)
 800268c:	f005 f980 	bl	8007990 <HAL_GPIO_Init>

	/*Configure GPIO pin : for_DT___SNP00128_Pin */
	GPIO_InitStruct.Pin = for_DT___SNP00128_Pin;
 8002690:	2320      	movs	r3, #32
 8002692:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002698:	2301      	movs	r3, #1
 800269a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(for_DT___SNP00128_GPIO_Port, &GPIO_InitStruct);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	4822      	ldr	r0, [pc, #136]	@ (800272c <MX_GPIO_Init+0x19c>)
 80026a4:	f005 f974 	bl	8007990 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_for_SW___SNP00128_Pin */
	GPIO_InitStruct.Pin = INT_for_SW___SNP00128_Pin;
 80026a8:	2340      	movs	r3, #64	@ 0x40
 80026aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80026b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(INT_for_SW___SNP00128_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	481b      	ldr	r0, [pc, #108]	@ (800272c <MX_GPIO_Init+0x19c>)
 80026be:	f005 f967 	bl	8007990 <HAL_GPIO_Init>

	/*Configure GPIO pins : Motor_2A_IN1_Pin Motor_2A_IN2_Pin TB6612__1_STBY_Pin TB6612__2_STBY_Pin
	 Motor_2B_IN1_Pin Motor_2B_IN2_Pin Motor_1B_IN1_Pin */
	GPIO_InitStruct.Pin = Motor_2A_IN1_Pin | Motor_2A_IN2_Pin
 80026c2:	f24f 0323 	movw	r3, #61475	@ 0xf023
 80026c6:	617b      	str	r3, [r7, #20]
			| TB6612__1_STBY_Pin | TB6612__2_STBY_Pin | Motor_2B_IN1_Pin
			| Motor_2B_IN2_Pin | Motor_1B_IN1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	4815      	ldr	r0, [pc, #84]	@ (8002730 <MX_GPIO_Init+0x1a0>)
 80026dc:	f005 f958 	bl	8007990 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_for_BNO085_Pin */
	GPIO_InitStruct.Pin = INT_for_BNO085_Pin;
 80026e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80026ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(INT_for_BNO085_GPIO_Port, &GPIO_InitStruct);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4619      	mov	r1, r3
 80026f6:	480e      	ldr	r0, [pc, #56]	@ (8002730 <MX_GPIO_Init+0x1a0>)
 80026f8:	f005 f94a 	bl	8007990 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2105      	movs	r1, #5
 8002700:	200a      	movs	r0, #10
 8002702:	f004 fd0d 	bl	8007120 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002706:	200a      	movs	r0, #10
 8002708:	f004 fd26 	bl	8007158 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2105      	movs	r1, #5
 8002710:	2017      	movs	r0, #23
 8002712:	f004 fd05 	bl	8007120 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002716:	2017      	movs	r0, #23
 8002718:	f004 fd1e 	bl	8007158 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	@ 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	40020800 	.word	0x40020800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400

08002734 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// EXTI Callback for INT pin (e.g., PA0 for EXTI0)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	80fb      	strh	r3, [r7, #6]
	uint32_t now = HAL_GetTick();
 800273e:	f004 fc07 	bl	8006f50 <HAL_GetTick>
 8002742:	60f8      	str	r0, [r7, #12]

	// BNO085 INT (PA8)
	if (GPIO_Pin == GPIO_PIN_8) {
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800274a:	d102      	bne.n	8002752 <HAL_GPIO_EXTI_Callback+0x1e>
		bno085_int_flag = 1;
 800274c:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_GPIO_EXTI_Callback+0x108>)
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == ENC_CLK_Pin) {
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2b10      	cmp	r3, #16
 8002756:	d12c      	bne.n	80027b2 <HAL_GPIO_EXTI_Callback+0x7e>
		if (HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port, ENC_CLK_Pin)
 8002758:	2110      	movs	r1, #16
 800275a:	4839      	ldr	r0, [pc, #228]	@ (8002840 <HAL_GPIO_EXTI_Callback+0x10c>)
 800275c:	f005 fa9c 	bl	8007c98 <HAL_GPIO_ReadPin>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d125      	bne.n	80027b2 <HAL_GPIO_EXTI_Callback+0x7e>
				== GPIO_PIN_RESET) {
			if (now - last_clk_tick > ENCODER_DEBOUNCE_MS) {
 8002766:	4b37      	ldr	r3, [pc, #220]	@ (8002844 <HAL_GPIO_EXTI_Callback+0x110>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b96      	cmp	r3, #150	@ 0x96
 8002770:	d91f      	bls.n	80027b2 <HAL_GPIO_EXTI_Callback+0x7e>
				last_clk_tick = now;
 8002772:	4a34      	ldr	r2, [pc, #208]	@ (8002844 <HAL_GPIO_EXTI_Callback+0x110>)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6013      	str	r3, [r2, #0]
				osMutexAcquire(EncoderMutexHandle, 0);
 8002778:	4b33      	ldr	r3, [pc, #204]	@ (8002848 <HAL_GPIO_EXTI_Callback+0x114>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f009 ffbd 	bl	800c6fe <osMutexAcquire>
				if (HAL_GPIO_ReadPin(ENC_DT_GPIO_Port, ENC_DT_Pin)
 8002784:	2120      	movs	r1, #32
 8002786:	482e      	ldr	r0, [pc, #184]	@ (8002840 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002788:	f005 fa86 	bl	8007c98 <HAL_GPIO_ReadPin>
 800278c:	4603      	mov	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <HAL_GPIO_EXTI_Callback+0x6a>
						== GPIO_PIN_SET)
					encoder_count++;
 8002792:	4b2e      	ldr	r3, [pc, #184]	@ (800284c <HAL_GPIO_EXTI_Callback+0x118>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a2c      	ldr	r2, [pc, #176]	@ (800284c <HAL_GPIO_EXTI_Callback+0x118>)
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e004      	b.n	80027a8 <HAL_GPIO_EXTI_Callback+0x74>
				else
					encoder_count--;
 800279e:	4b2b      	ldr	r3, [pc, #172]	@ (800284c <HAL_GPIO_EXTI_Callback+0x118>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	4a29      	ldr	r2, [pc, #164]	@ (800284c <HAL_GPIO_EXTI_Callback+0x118>)
 80027a6:	6013      	str	r3, [r2, #0]
				osMutexRelease(EncoderMutexHandle);
 80027a8:	4b27      	ldr	r3, [pc, #156]	@ (8002848 <HAL_GPIO_EXTI_Callback+0x114>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f009 fff1 	bl	800c794 <osMutexRelease>
			}
		}
	}

	if (GPIO_Pin == ENC_SW_Pin) {
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	2b40      	cmp	r3, #64	@ 0x40
 80027b6:	d13d      	bne.n	8002834 <HAL_GPIO_EXTI_Callback+0x100>
		GPIO_PinState clk_state = HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port,
 80027b8:	2110      	movs	r1, #16
 80027ba:	4821      	ldr	r0, [pc, #132]	@ (8002840 <HAL_GPIO_EXTI_Callback+0x10c>)
 80027bc:	f005 fa6c 	bl	8007c98 <HAL_GPIO_ReadPin>
 80027c0:	4603      	mov	r3, r0
 80027c2:	72fb      	strb	r3, [r7, #11]
		ENC_CLK_Pin);
		GPIO_PinState dt_state = HAL_GPIO_ReadPin(ENC_DT_GPIO_Port,
 80027c4:	2120      	movs	r1, #32
 80027c6:	481e      	ldr	r0, [pc, #120]	@ (8002840 <HAL_GPIO_EXTI_Callback+0x10c>)
 80027c8:	f005 fa66 	bl	8007c98 <HAL_GPIO_ReadPin>
 80027cc:	4603      	mov	r3, r0
 80027ce:	72bb      	strb	r3, [r7, #10]
		ENC_DT_Pin);
		GPIO_PinState sw_state = HAL_GPIO_ReadPin(ENC_SW_GPIO_Port,
 80027d0:	2140      	movs	r1, #64	@ 0x40
 80027d2:	481b      	ldr	r0, [pc, #108]	@ (8002840 <HAL_GPIO_EXTI_Callback+0x10c>)
 80027d4:	f005 fa60 	bl	8007c98 <HAL_GPIO_ReadPin>
 80027d8:	4603      	mov	r3, r0
 80027da:	727b      	strb	r3, [r7, #9]
		ENC_SW_Pin);
		// Only count if button is actually pressed (logic low) and both CLK and DT are high
		// Note: When turn rotary knob left/right, SW pin is always pulled low together with CLK and DT pins.
		if (sw_state == GPIO_PIN_RESET) {
 80027dc:	7a7b      	ldrb	r3, [r7, #9]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d128      	bne.n	8002834 <HAL_GPIO_EXTI_Callback+0x100>
			if (dt_state == GPIO_PIN_SET) {
 80027e2:	7abb      	ldrb	r3, [r7, #10]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d125      	bne.n	8002834 <HAL_GPIO_EXTI_Callback+0x100>
				if (clk_state == GPIO_PIN_SET) {
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d122      	bne.n	8002834 <HAL_GPIO_EXTI_Callback+0x100>
					// Ignore SW if just rotated (within 10 ms of last CLK)
					if ((now - last_clk_tick) > CLK_SW_DEBOUNCE_MS) {
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <HAL_GPIO_EXTI_Callback+0x110>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b1e      	cmp	r3, #30
 80027f8:	d91c      	bls.n	8002834 <HAL_GPIO_EXTI_Callback+0x100>
						if (now - last_sw_tick > BUTTON_DEBOUNCE_MS) {
 80027fa:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <HAL_GPIO_EXTI_Callback+0x11c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002806:	d915      	bls.n	8002834 <HAL_GPIO_EXTI_Callback+0x100>
							last_sw_tick = now;
 8002808:	4a11      	ldr	r2, [pc, #68]	@ (8002850 <HAL_GPIO_EXTI_Callback+0x11c>)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6013      	str	r3, [r2, #0]
							osMutexAcquire(EncoderMutexHandle, 0);
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <HAL_GPIO_EXTI_Callback+0x114>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f009 ff72 	bl	800c6fe <osMutexAcquire>
							encoder_button_pressed = 1;
 800281a:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x120>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
							encoder_sw_count++; // Increment counter on each debounced press
 8002820:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <HAL_GPIO_EXTI_Callback+0x124>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	4a0c      	ldr	r2, [pc, #48]	@ (8002858 <HAL_GPIO_EXTI_Callback+0x124>)
 8002828:	6013      	str	r3, [r2, #0]
							osMutexRelease(EncoderMutexHandle);
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <HAL_GPIO_EXTI_Callback+0x114>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f009 ffb0 	bl	800c794 <osMutexRelease>
					}
				}
			}
		}
	}
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	2000046b 	.word	0x2000046b
 8002840:	40020000 	.word	0x40020000
 8002844:	2000047c 	.word	0x2000047c
 8002848:	20000410 	.word	0x20000410
 800284c:	20000470 	.word	0x20000470
 8002850:	20000480 	.word	0x20000480
 8002854:	20000474 	.word	0x20000474
 8002858:	20000478 	.word	0x20000478

0800285c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <HAL_UART_RxCpltCallback+0xc8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d156      	bne.n	800291c <HAL_UART_RxCpltCallback+0xc0>
		// Validate SBUS frame start and end bytes
		if (sbus_rx_buffer[0] == 0x0F && sbus_rx_buffer[24] == 0x00) {
 800286e:	4b2e      	ldr	r3, [pc, #184]	@ (8002928 <HAL_UART_RxCpltCallback+0xcc>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b0f      	cmp	r3, #15
 8002874:	d152      	bne.n	800291c <HAL_UART_RxCpltCallback+0xc0>
 8002876:	4b2c      	ldr	r3, [pc, #176]	@ (8002928 <HAL_UART_RxCpltCallback+0xcc>)
 8002878:	7e1b      	ldrb	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d14e      	bne.n	800291c <HAL_UART_RxCpltCallback+0xc0>
			// Valid SBUS frame received
			sbus_last_valid_time = HAL_GetTick();
 800287e:	f004 fb67 	bl	8006f50 <HAL_GetTick>
 8002882:	4603      	mov	r3, r0
 8002884:	4a29      	ldr	r2, [pc, #164]	@ (800292c <HAL_UART_RxCpltCallback+0xd0>)
 8002886:	6013      	str	r3, [r2, #0]
			sbus_signal_valid = 1;
 8002888:	4b29      	ldr	r3, [pc, #164]	@ (8002930 <HAL_UART_RxCpltCallback+0xd4>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]

			// Unpack all 16 channels
			for (int ch = 0; ch < 16; ch++) {
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e040      	b.n	8002916 <HAL_UART_RxCpltCallback+0xba>
				int byte_idx = 1 + (ch * 11) / 8;
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da00      	bge.n	80028a6 <HAL_UART_RxCpltCallback+0x4a>
 80028a4:	3307      	adds	r3, #7
 80028a6:	10db      	asrs	r3, r3, #3
 80028a8:	3301      	adds	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
				int bit_idx = (ch * 11) % 8;
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	425a      	negs	r2, r3
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	f002 0207 	and.w	r2, r2, #7
 80028c2:	bf58      	it	pl
 80028c4:	4253      	negpl	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
				uint16_t value = (sbus_rx_buffer[byte_idx]
 80028c8:	4a17      	ldr	r2, [pc, #92]	@ (8002928 <HAL_UART_RxCpltCallback+0xcc>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b21a      	sxth	r2, r3
						| (sbus_rx_buffer[byte_idx + 1] << 8)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	3301      	adds	r3, #1
 80028d6:	4914      	ldr	r1, [pc, #80]	@ (8002928 <HAL_UART_RxCpltCallback+0xcc>)
 80028d8:	5ccb      	ldrb	r3, [r1, r3]
 80028da:	b21b      	sxth	r3, r3
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	b21b      	sxth	r3, r3
 80028e0:	4313      	orrs	r3, r2
 80028e2:	b21b      	sxth	r3, r3
				uint16_t value = (sbus_rx_buffer[byte_idx]
 80028e4:	817b      	strh	r3, [r7, #10]
						| (sbus_rx_buffer[byte_idx + 2] << 16));
				value = (value >> bit_idx) & 0x07FF;
 80028e6:	897a      	ldrh	r2, [r7, #10]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	fa42 f303 	asr.w	r3, r2, r3
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f4:	817b      	strh	r3, [r7, #10]

				// Additional range validation
				if (value >= 172 && value <= 1811) {
 80028f6:	897b      	ldrh	r3, [r7, #10]
 80028f8:	2bab      	cmp	r3, #171	@ 0xab
 80028fa:	d909      	bls.n	8002910 <HAL_UART_RxCpltCallback+0xb4>
 80028fc:	897b      	ldrh	r3, [r7, #10]
 80028fe:	f240 7213 	movw	r2, #1811	@ 0x713
 8002902:	4293      	cmp	r3, r2
 8002904:	d804      	bhi.n	8002910 <HAL_UART_RxCpltCallback+0xb4>
					sbus_channels[ch] = value;
 8002906:	490b      	ldr	r1, [pc, #44]	@ (8002934 <HAL_UART_RxCpltCallback+0xd8>)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	897a      	ldrh	r2, [r7, #10]
 800290c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int ch = 0; ch < 16; ch++) {
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3301      	adds	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b0f      	cmp	r3, #15
 800291a:	ddbb      	ble.n	8002894 <HAL_UART_RxCpltCallback+0x38>
		} else {
			// Invalid frame - don't update sbus_signal_valid or channels
		}
		// DO NOT restart DMA - Circular mode handles this automatically
	}
}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40004400 	.word	0x40004400
 8002928:	20000420 	.word	0x20000420
 800292c:	20000464 	.word	0x20000464
 8002930:	20000468 	.word	0x20000468
 8002934:	2000043c 	.word	0x2000043c

08002938 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a13      	ldr	r2, [pc, #76]	@ (8002994 <HAL_UART_ErrorCallback+0x5c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d11f      	bne.n	800298a <HAL_UART_ErrorCallback+0x52>
		// Indicate error visually
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800294a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800294e:	4812      	ldr	r0, [pc, #72]	@ (8002998 <HAL_UART_ErrorCallback+0x60>)
 8002950:	f005 f9d3 	bl	8007cfa <HAL_GPIO_TogglePin>

		// Mark SBUS as invalid on UART error
		sbus_signal_valid = 0;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_UART_ErrorCallback+0x64>)
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]

		// Stop all motors immediately for safety
		stop_all_motors_3wheel();
 800295a:	f7fe fe49 	bl	80015f0 <stop_all_motors_3wheel>

		// Store error information
		osMutexAcquire(UARTMutexHandle, osWaitForever);
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_UART_ErrorCallback+0x68>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f04f 31ff 	mov.w	r1, #4294967295
 8002966:	4618      	mov	r0, r3
 8002968:	f009 fec9 	bl	800c6fe <osMutexAcquire>
		uart2_error_code = huart->ErrorCode;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	4a0c      	ldr	r2, [pc, #48]	@ (80029a4 <HAL_UART_ErrorCallback+0x6c>)
 8002972:	6013      	str	r3, [r2, #0]
		uart2_error_flag = 1;
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <HAL_UART_ErrorCallback+0x70>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
		osMutexRelease(UARTMutexHandle);
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_UART_ErrorCallback+0x68>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f009 ff08 	bl	800c794 <osMutexRelease>

		// Set flag for recovery in main task context
		sbus_recovery_requested = 1;
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_UART_ErrorCallback+0x74>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
	}
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40004400 	.word	0x40004400
 8002998:	40020800 	.word	0x40020800
 800299c:	20000468 	.word	0x20000468
 80029a0:	20000414 	.word	0x20000414
 80029a4:	2000045c 	.word	0x2000045c
 80029a8:	20000460 	.word	0x20000460
 80029ac:	2000046a 	.word	0x2000046a

080029b0 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b093      	sub	sp, #76	@ 0x4c
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	static ch7_position_t last_ch7_position = CH7_POSITION_UNKNOWN;
	static uint32_t ch7_stable_time = 0;
	const uint32_t CH7_DEBOUNCE_MS = 100; // Debounce time for channel 7
 80029b8:	2364      	movs	r3, #100	@ 0x64
 80029ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Infinite loop */
	for (;;) {
		robot_mode_t mode;
		robot_state_t state;
		uint8_t mode_changed = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		uint8_t state_changed = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		uint8_t sbus_valid = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		float current_compass_heading = 0.0f;
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
		float current_robot_front = 0.0f;
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]

		// --- SBUS Recovery Logic ---
		if (sbus_recovery_requested) {
 80029da:	4ba6      	ldr	r3, [pc, #664]	@ (8002c74 <StartDefaultTask+0x2c4>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <StartDefaultTask+0x6c>
			sbus_recovery_requested = 0;
 80029e4:	4ba3      	ldr	r3, [pc, #652]	@ (8002c74 <StartDefaultTask+0x2c4>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
			// Perform recovery attempts (non-blocking, watchdog-friendly)
			for (int attempt = 0; attempt < SBUS_MAX_RECOVERY_ATTEMPTS;
 80029ea:	2300      	movs	r3, #0
 80029ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029ee:	e012      	b.n	8002a16 <StartDefaultTask+0x66>
					attempt++) {
				HAL_UART_AbortReceive(&huart2);
 80029f0:	48a1      	ldr	r0, [pc, #644]	@ (8002c78 <StartDefaultTask+0x2c8>)
 80029f2:	f008 fb7c 	bl	800b0ee <HAL_UART_AbortReceive>
				MX_USART2_UART_Init();
 80029f6:	f7ff fd7d 	bl	80024f4 <MX_USART2_UART_Init>
				HAL_UART_Receive_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 80029fa:	2219      	movs	r2, #25
 80029fc:	499f      	ldr	r1, [pc, #636]	@ (8002c7c <StartDefaultTask+0x2cc>)
 80029fe:	489e      	ldr	r0, [pc, #632]	@ (8002c78 <StartDefaultTask+0x2c8>)
 8002a00:	f008 fb50 	bl	800b0a4 <HAL_UART_Receive_DMA>
				HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog during recovery
 8002a04:	489e      	ldr	r0, [pc, #632]	@ (8002c80 <StartDefaultTask+0x2d0>)
 8002a06:	f006 ffc1 	bl	800998c <HAL_IWDG_Refresh>
				osDelay(10); // Give hardware time to settle
 8002a0a:	200a      	movs	r0, #10
 8002a0c:	f009 fdd6 	bl	800c5bc <osDelay>
					attempt++) {
 8002a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a12:	3301      	adds	r3, #1
 8002a14:	63bb      	str	r3, [r7, #56]	@ 0x38
			for (int attempt = 0; attempt < SBUS_MAX_RECOVERY_ATTEMPTS;
 8002a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	dde9      	ble.n	80029f0 <StartDefaultTask+0x40>
				// Optionally check if recovery succeeded and break if so
			}
		}

		// Check SBUS signal validity
		sbus_valid = is_sbus_signal_valid();
 8002a1c:	f7fe fdf6 	bl	800160c <is_sbus_signal_valid>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		// Get current compass heading
		osMutexAcquire(CompassMutexHandle, osWaitForever);
 8002a26:	4b97      	ldr	r3, [pc, #604]	@ (8002c84 <StartDefaultTask+0x2d4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f009 fe65 	bl	800c6fe <osMutexAcquire>
		current_compass_heading = compass_heading_deg;
 8002a34:	4b94      	ldr	r3, [pc, #592]	@ (8002c88 <StartDefaultTask+0x2d8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
		osMutexRelease(CompassMutexHandle);
 8002a3a:	4b92      	ldr	r3, [pc, #584]	@ (8002c84 <StartDefaultTask+0x2d4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f009 fea8 	bl	800c794 <osMutexRelease>

		// Convert to robot front direction
		current_robot_front = compass_to_robot_front(current_compass_heading);
 8002a44:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002a48:	f7ff f96c 	bl	8001d24 <compass_to_robot_front>
 8002a4c:	ed87 0a08 	vstr	s0, [r7, #32]

		// Check for mode/state changes
		osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002a50:	4b8e      	ldr	r3, [pc, #568]	@ (8002c8c <StartDefaultTask+0x2dc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f009 fe50 	bl	800c6fe <osMutexAcquire>
		mode = current_mode;
 8002a5e:	4b8c      	ldr	r3, [pc, #560]	@ (8002c90 <StartDefaultTask+0x2e0>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	77fb      	strb	r3, [r7, #31]
		state = robot_state;
 8002a64:	4b8b      	ldr	r3, [pc, #556]	@ (8002c94 <StartDefaultTask+0x2e4>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	77bb      	strb	r3, [r7, #30]
		if (mode_change_request) {
 8002a6a:	4b8b      	ldr	r3, [pc, #556]	@ (8002c98 <StartDefaultTask+0x2e8>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <StartDefaultTask+0xd0>
			mode_change_request = 0;
 8002a74:	4b88      	ldr	r3, [pc, #544]	@ (8002c98 <StartDefaultTask+0x2e8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
			mode_changed = 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		}
		if (state_toggle_request) {
 8002a80:	4b86      	ldr	r3, [pc, #536]	@ (8002c9c <StartDefaultTask+0x2ec>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <StartDefaultTask+0xe6>
			state_toggle_request = 0;
 8002a8a:	4b84      	ldr	r3, [pc, #528]	@ (8002c9c <StartDefaultTask+0x2ec>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
			state_changed = 1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		}
		osMutexRelease(ModeMutexHandle);
 8002a96:	4b7d      	ldr	r3, [pc, #500]	@ (8002c8c <StartDefaultTask+0x2dc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f009 fe7a 	bl	800c794 <osMutexRelease>

		// ENHANCED: Check Channel 7 for automatic mode control
		if (sbus_valid) {
 8002aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8086 	beq.w	8002bb6 <StartDefaultTask+0x206>
			ch7_position_t current_ch7 = get_channel7_position();
 8002aaa:	f7ff f9e5 	bl	8001e78 <get_channel7_position>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	777b      	strb	r3, [r7, #29]
			uint32_t now = HAL_GetTick();
 8002ab2:	f004 fa4d 	bl	8006f50 <HAL_GetTick>
 8002ab6:	61b8      	str	r0, [r7, #24]

			// Debounce Channel 7 changes
			if (current_ch7 != last_ch7_position
 8002ab8:	4b79      	ldr	r3, [pc, #484]	@ (8002ca0 <StartDefaultTask+0x2f0>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	7f7a      	ldrb	r2, [r7, #29]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d070      	beq.n	8002ba4 <StartDefaultTask+0x1f4>
					&& current_ch7 != CH7_POSITION_UNKNOWN) {
 8002ac2:	7f7b      	ldrb	r3, [r7, #29]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d06d      	beq.n	8002ba4 <StartDefaultTask+0x1f4>
				if (ch7_stable_time == 0) {
 8002ac8:	4b76      	ldr	r3, [pc, #472]	@ (8002ca4 <StartDefaultTask+0x2f4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d103      	bne.n	8002ad8 <StartDefaultTask+0x128>
					ch7_stable_time = now; // Start debounce timer
 8002ad0:	4a74      	ldr	r2, [pc, #464]	@ (8002ca4 <StartDefaultTask+0x2f4>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6013      	str	r3, [r2, #0]
				if (ch7_stable_time == 0) {
 8002ad6:	e075      	b.n	8002bc4 <StartDefaultTask+0x214>
				} else if ((now - ch7_stable_time) >= CH7_DEBOUNCE_MS) {
 8002ad8:	4b72      	ldr	r3, [pc, #456]	@ (8002ca4 <StartDefaultTask+0x2f4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d86e      	bhi.n	8002bc4 <StartDefaultTask+0x214>
					// Channel 7 position has been stable for debounce time
					robot_mode_t target_mode;
					robot_state_t target_state;

					switch (current_ch7) {
 8002ae6:	7f7b      	ldrb	r3, [r7, #29]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d014      	beq.n	8002b16 <StartDefaultTask+0x166>
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	dc19      	bgt.n	8002b24 <StartDefaultTask+0x174>
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <StartDefaultTask+0x14a>
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d007      	beq.n	8002b08 <StartDefaultTask+0x158>
 8002af8:	e014      	b.n	8002b24 <StartDefaultTask+0x174>
					case CH7_POSITION_MIN:
						target_mode = MODE_DISPLAY_SENSORS;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						target_state = STATE_IDLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
						break;
 8002b06:	e014      	b.n	8002b32 <StartDefaultTask+0x182>
					case CH7_POSITION_MID:
						target_mode = MODE_MOVEMENT;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						target_state = STATE_RUNNING;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
						break;
 8002b14:	e00d      	b.n	8002b32 <StartDefaultTask+0x182>
					case CH7_POSITION_MAX:
						target_mode = MODE_MOVEMENT_HL;
 8002b16:	2302      	movs	r3, #2
 8002b18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						target_state = STATE_RUNNING;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
						break;
 8002b22:	e006      	b.n	8002b32 <StartDefaultTask+0x182>
					default:
						target_mode = mode; // No change
 8002b24:	7ffb      	ldrb	r3, [r7, #31]
 8002b26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						target_state = state;
 8002b2a:	7fbb      	ldrb	r3, [r7, #30]
 8002b2c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
						break;
 8002b30:	bf00      	nop
					}

					// Apply changes if different from current
					osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002b32:	4b56      	ldr	r3, [pc, #344]	@ (8002c8c <StartDefaultTask+0x2dc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f04f 31ff 	mov.w	r1, #4294967295
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f009 fddf 	bl	800c6fe <osMutexAcquire>
					if (target_mode != current_mode
 8002b40:	4b53      	ldr	r3, [pc, #332]	@ (8002c90 <StartDefaultTask+0x2e0>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d106      	bne.n	8002b5c <StartDefaultTask+0x1ac>
							|| target_state != robot_state) {
 8002b4e:	4b51      	ldr	r3, [pc, #324]	@ (8002c94 <StartDefaultTask+0x2e4>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d017      	beq.n	8002b8c <StartDefaultTask+0x1dc>
						current_mode = target_mode;
 8002b5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002c90 <StartDefaultTask+0x2e0>)
 8002b5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b62:	7013      	strb	r3, [r2, #0]
						selected_mode = target_mode; // Keep encoder selection in sync
 8002b64:	4a50      	ldr	r2, [pc, #320]	@ (8002ca8 <StartDefaultTask+0x2f8>)
 8002b66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b6a:	7013      	strb	r3, [r2, #0]
						robot_state = target_state;
 8002b6c:	4a49      	ldr	r2, [pc, #292]	@ (8002c94 <StartDefaultTask+0x2e4>)
 8002b6e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002b72:	7013      	strb	r3, [r2, #0]
						mode_change_request = 1;
 8002b74:	4b48      	ldr	r3, [pc, #288]	@ (8002c98 <StartDefaultTask+0x2e8>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
						state_toggle_request = 1;
 8002b7a:	4b48      	ldr	r3, [pc, #288]	@ (8002c9c <StartDefaultTask+0x2ec>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
						mode_changed = 1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						state_changed = 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
					}
					osMutexRelease(ModeMutexHandle);
 8002b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c8c <StartDefaultTask+0x2dc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f009 fdff 	bl	800c794 <osMutexRelease>

					last_ch7_position = current_ch7;
 8002b96:	4a42      	ldr	r2, [pc, #264]	@ (8002ca0 <StartDefaultTask+0x2f0>)
 8002b98:	7f7b      	ldrb	r3, [r7, #29]
 8002b9a:	7013      	strb	r3, [r2, #0]
					ch7_stable_time = 0; // Reset debounce timer
 8002b9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <StartDefaultTask+0x2f4>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
				if (ch7_stable_time == 0) {
 8002ba2:	e00f      	b.n	8002bc4 <StartDefaultTask+0x214>
				}
			} else if (current_ch7 == last_ch7_position) {
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca0 <StartDefaultTask+0x2f0>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	7f7a      	ldrb	r2, [r7, #29]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10b      	bne.n	8002bc6 <StartDefaultTask+0x216>
				ch7_stable_time = 0; // Reset debounce if position unchanged
 8002bae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca4 <StartDefaultTask+0x2f4>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e007      	b.n	8002bc6 <StartDefaultTask+0x216>
			}
		} else {
			// SBUS invalid - reset Channel 7 tracking
			last_ch7_position = CH7_POSITION_UNKNOWN;
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca0 <StartDefaultTask+0x2f0>)
 8002bb8:	2203      	movs	r2, #3
 8002bba:	701a      	strb	r2, [r3, #0]
			ch7_stable_time = 0;
 8002bbc:	4b39      	ldr	r3, [pc, #228]	@ (8002ca4 <StartDefaultTask+0x2f4>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e000      	b.n	8002bc6 <StartDefaultTask+0x216>
				if (ch7_stable_time == 0) {
 8002bc4:	bf00      	nop
		}

		// Handle mode changes
		if (mode_changed) {
 8002bc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <StartDefaultTask+0x232>
			// Stop all motors when changing modes
			stop_all_motors_3wheel();
 8002bce:	f7fe fd0f 	bl	80015f0 <stop_all_motors_3wheel>
			// Disable heading lock when changing modes
			disable_heading_lock();
 8002bd2:	f7ff f89b 	bl	8001d0c <disable_heading_lock>
			// Reset recovery state
			sbus_was_lost = 0;
 8002bd6:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <StartDefaultTask+0x2fc>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
			heading_lock_was_enabled = 0;
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <StartDefaultTask+0x300>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
		}

		// Handle state changes
		if (state_changed) {
 8002be2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01d      	beq.n	8002c26 <StartDefaultTask+0x276>
			if (state == STATE_IDLE) {
 8002bea:	7fbb      	ldrb	r3, [r7, #30]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <StartDefaultTask+0x256>
				// Stop all motors when going to idle
				stop_all_motors_3wheel();
 8002bf0:	f7fe fcfe 	bl	80015f0 <stop_all_motors_3wheel>
				// Disable heading lock when going to idle
				disable_heading_lock();
 8002bf4:	f7ff f88a 	bl	8001d0c <disable_heading_lock>
				// Reset recovery state
				sbus_was_lost = 0;
 8002bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8002cac <StartDefaultTask+0x2fc>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
				heading_lock_was_enabled = 0;
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb0 <StartDefaultTask+0x300>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e00f      	b.n	8002c26 <StartDefaultTask+0x276>
			} else if (state == STATE_RUNNING && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002c06:	7fbb      	ldrb	r3, [r7, #30]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10c      	bne.n	8002c26 <StartDefaultTask+0x276>
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d109      	bne.n	8002c26 <StartDefaultTask+0x276>
			// Enable heading lock when starting movement mode with heading lock
			// Use current compass heading (function will convert to robot front)
				set_heading_lock(current_compass_heading);
 8002c12:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002c16:	f7ff f85b 	bl	8001cd0 <set_heading_lock>
				// Reset recovery state for new session
				sbus_was_lost = 0;
 8002c1a:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <StartDefaultTask+0x2fc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
				heading_lock_was_enabled = 1;
 8002c20:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <StartDefaultTask+0x300>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
			}
		}

		// ENHANCED SBUS RECOVERY LOGIC
		if (mode == MODE_MOVEMENT || mode == MODE_MOVEMENT_HL) { // UPDATED
 8002c26:	7ffb      	ldrb	r3, [r7, #31]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d003      	beq.n	8002c34 <StartDefaultTask+0x284>
 8002c2c:	7ffb      	ldrb	r3, [r7, #31]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	f040 80ef 	bne.w	8002e12 <StartDefaultTask+0x462>
			if (sbus_valid) {
 8002c34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80c7 	beq.w	8002dcc <StartDefaultTask+0x41c>
				// SBUS signal is valid

				// Check if we just recovered from SBUS loss
				if (sbus_was_lost && mode == MODE_MOVEMENT_HL
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <StartDefaultTask+0x2fc>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d03e      	beq.n	8002cc6 <StartDefaultTask+0x316>
 8002c48:	7ffb      	ldrb	r3, [r7, #31]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d13b      	bne.n	8002cc6 <StartDefaultTask+0x316>
						&& state == STATE_RUNNING) {
 8002c4e:	7fbb      	ldrb	r3, [r7, #30]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d138      	bne.n	8002cc6 <StartDefaultTask+0x316>
					if (heading_lock_was_enabled) {
 8002c54:	4b16      	ldr	r3, [pc, #88]	@ (8002cb0 <StartDefaultTask+0x300>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d030      	beq.n	8002cc0 <StartDefaultTask+0x310>
						// Try to restore from EEPROM first
						if (restore_heading_lock_from_eeprom()) {
 8002c5e:	f7ff f8d3 	bl	8001e08 <restore_heading_lock_from_eeprom>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d027      	beq.n	8002cb8 <StartDefaultTask+0x308>
							heading_lock_enabled = 1;
 8002c68:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <StartDefaultTask+0x304>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
							reset_heading_pid();
 8002c6e:	f7ff f805 	bl	8001c7c <reset_heading_pid>
 8002c72:	e025      	b.n	8002cc0 <StartDefaultTask+0x310>
 8002c74:	2000046a 	.word	0x2000046a
 8002c78:	20000350 	.word	0x20000350
 8002c7c:	20000420 	.word	0x20000420
 8002c80:	200002b4 	.word	0x200002b4
 8002c84:	20000408 	.word	0x20000408
 8002c88:	2000046c 	.word	0x2000046c
 8002c8c:	20000418 	.word	0x20000418
 8002c90:	20000484 	.word	0x20000484
 8002c94:	20000486 	.word	0x20000486
 8002c98:	20000487 	.word	0x20000487
 8002c9c:	20000488 	.word	0x20000488
 8002ca0:	20000008 	.word	0x20000008
 8002ca4:	2000051c 	.word	0x2000051c
 8002ca8:	20000485 	.word	0x20000485
 8002cac:	200004b8 	.word	0x200004b8
 8002cb0:	200004b9 	.word	0x200004b9
 8002cb4:	20000496 	.word	0x20000496
						} else {
							// Fallback to current heading
							set_heading_lock(current_compass_heading);
 8002cb8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002cbc:	f7ff f808 	bl	8001cd0 <set_heading_lock>
						}
					}
					sbus_was_lost = 0;
 8002cc0:	4b57      	ldr	r3, [pc, #348]	@ (8002e20 <StartDefaultTask+0x470>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]

				// Updated SBUS channel mapping:
				// Channel 2 (index 1): Left/Right (X-axis)
				// Channel 5 (index 4): Forward/Backward (Y-axis)
				// Channel 4 (index 3): Rotation (Z-axis)
				int16_t x = sbus_to_percentage(sbus_channels[1]); // Channel 2: Left/Right
 8002cc6:	4b57      	ldr	r3, [pc, #348]	@ (8002e24 <StartDefaultTask+0x474>)
 8002cc8:	885b      	ldrh	r3, [r3, #2]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fa6b 	bl	80011a8 <sbus_to_percentage>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	82fb      	strh	r3, [r7, #22]
				int16_t y = sbus_to_percentage(sbus_channels[4]); // Channel 5: Forward/Backward
 8002cd6:	4b53      	ldr	r3, [pc, #332]	@ (8002e24 <StartDefaultTask+0x474>)
 8002cd8:	891b      	ldrh	r3, [r3, #8]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe fa63 	bl	80011a8 <sbus_to_percentage>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	82bb      	strh	r3, [r7, #20]
				int16_t rot = sbus_to_percentage(sbus_channels[3]); // Channel 4: Rotation
 8002ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8002e24 <StartDefaultTask+0x474>)
 8002ce8:	88db      	ldrh	r3, [r3, #6]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe fa5b 	bl	80011a8 <sbus_to_percentage>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	827b      	strh	r3, [r7, #18]

				// Calculate heading correction if heading lock is enabled
				float heading_correction = 0.0f;
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	@ 0x30
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002cfc:	4b4a      	ldr	r3, [pc, #296]	@ (8002e28 <StartDefaultTask+0x478>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <StartDefaultTask+0x372>
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d10a      	bne.n	8002d22 <StartDefaultTask+0x372>
					heading_correction = calculate_heading_pid_simplified(
 8002d0c:	4b47      	ldr	r3, [pc, #284]	@ (8002e2c <StartDefaultTask+0x47c>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	edd7 0a08 	vldr	s1, [r7, #32]
 8002d16:	eeb0 0a67 	vmov.f32	s0, s15
 8002d1a:	f7fe fcb9 	bl	8001690 <calculate_heading_pid_simplified>
 8002d1e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
							locked_heading, current_robot_front);
				}

				// Calculate individual motor speeds for 3-wheel omnidirectional
				int16_t lf, rf, bk;
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8002d22:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <StartDefaultTask+0x478>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d016      	beq.n	8002d5a <StartDefaultTask+0x3aa>
 8002d2c:	7ffb      	ldrb	r3, [r7, #31]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d113      	bne.n	8002d5a <StartDefaultTask+0x3aa>
					calculate_omni_motor_speeds_with_heading(x, y, rot,
 8002d32:	f107 0410 	add.w	r4, r7, #16
 8002d36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002d3a:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002d3e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002d42:	f107 030c 	add.w	r3, r7, #12
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	f107 030e 	add.w	r3, r7, #14
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	4623      	mov	r3, r4
 8002d50:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8002d54:	f7fe fad8 	bl	8001308 <calculate_omni_motor_speeds_with_heading>
 8002d58:	e010      	b.n	8002d7c <StartDefaultTask+0x3cc>
							heading_correction, &lf, &rf, &bk);
				} else {
					calculate_omni_motor_speeds(x, y, rot, &lf, &rf, &bk);
 8002d5a:	f107 0410 	add.w	r4, r7, #16
 8002d5e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002d62:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002d66:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002d6a:	f107 030c 	add.w	r3, r7, #12
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	f107 030e 	add.w	r3, r7, #14
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	4623      	mov	r3, r4
 8002d78:	f7fe fa4a 	bl	8001210 <calculate_omni_motor_speeds>
				}

				// Update shared variables
				joystick_x = x;
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e30 <StartDefaultTask+0x480>)
 8002d7e:	8afb      	ldrh	r3, [r7, #22]
 8002d80:	8013      	strh	r3, [r2, #0]
				joystick_y = y;
 8002d82:	4a2c      	ldr	r2, [pc, #176]	@ (8002e34 <StartDefaultTask+0x484>)
 8002d84:	8abb      	ldrh	r3, [r7, #20]
 8002d86:	8013      	strh	r3, [r2, #0]
				joystick_rotation = rot;
 8002d88:	4a2b      	ldr	r2, [pc, #172]	@ (8002e38 <StartDefaultTask+0x488>)
 8002d8a:	8a7b      	ldrh	r3, [r7, #18]
 8002d8c:	8013      	strh	r3, [r2, #0]
				motor_left_front = lf;   // Motor 1B
 8002d8e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002d92:	4b2a      	ldr	r3, [pc, #168]	@ (8002e3c <StartDefaultTask+0x48c>)
 8002d94:	801a      	strh	r2, [r3, #0]
				motor_right_front = rf;  // Motor 1A
 8002d96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d9a:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <StartDefaultTask+0x490>)
 8002d9c:	801a      	strh	r2, [r3, #0]
				motor_back = bk;         // Motor 2A
 8002d9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002da2:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <StartDefaultTask+0x494>)
 8002da4:	801a      	strh	r2, [r3, #0]

				// Apply to actual motors for both movement modes when running
				if ((mode == MODE_MOVEMENT || mode == MODE_MOVEMENT_HL)
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d002      	beq.n	8002db2 <StartDefaultTask+0x402>
 8002dac:	7ffb      	ldrb	r3, [r7, #31]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d12f      	bne.n	8002e12 <StartDefaultTask+0x462>
						&& state == STATE_RUNNING) { // UPDATED
 8002db2:	7fbb      	ldrb	r3, [r7, #30]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d12c      	bne.n	8002e12 <StartDefaultTask+0x462>
					apply_motor_speeds_3wheel(lf, rf, bk);
 8002db8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002dbc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002dc0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fb71 	bl	80014ac <apply_motor_speeds_3wheel>
 8002dca:	e022      	b.n	8002e12 <StartDefaultTask+0x462>
				}
			} else {
				// SBUS signal lost

				// Remember heading lock state before disabling it
				if (!sbus_was_lost) {
 8002dcc:	4b14      	ldr	r3, [pc, #80]	@ (8002e20 <StartDefaultTask+0x470>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <StartDefaultTask+0x436>
					// First time detecting SBUS loss
					heading_lock_was_enabled = heading_lock_enabled;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <StartDefaultTask+0x478>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <StartDefaultTask+0x498>)
 8002dde:	701a      	strb	r2, [r3, #0]
					sbus_was_lost = 1;
 8002de0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e20 <StartDefaultTask+0x470>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
				}

				// Stop all motors immediately for safety
				stop_all_motors_3wheel();
 8002de6:	f7fe fc03 	bl	80015f0 <stop_all_motors_3wheel>
				// Temporarily disable heading lock (but remember its state)
				disable_heading_lock();
 8002dea:	f7fe ff8f 	bl	8001d0c <disable_heading_lock>

				// Reset joystick values to indicate no signal
				joystick_x = 0;
 8002dee:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <StartDefaultTask+0x480>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	801a      	strh	r2, [r3, #0]
				joystick_y = 0;
 8002df4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <StartDefaultTask+0x484>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	801a      	strh	r2, [r3, #0]
				joystick_rotation = 0;
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <StartDefaultTask+0x488>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	801a      	strh	r2, [r3, #0]
				motor_left_front = 0;
 8002e00:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <StartDefaultTask+0x48c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	801a      	strh	r2, [r3, #0]
				motor_right_front = 0;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <StartDefaultTask+0x490>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	801a      	strh	r2, [r3, #0]
				motor_back = 0;
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <StartDefaultTask+0x494>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	801a      	strh	r2, [r3, #0]
			}
		}

		HAL_IWDG_Refresh(&hiwdg); // Refresh watchdog
 8002e12:	480e      	ldr	r0, [pc, #56]	@ (8002e4c <StartDefaultTask+0x49c>)
 8002e14:	f006 fdba 	bl	800998c <HAL_IWDG_Refresh>

		osDelay(50); // Update at 20Hz
 8002e18:	2032      	movs	r0, #50	@ 0x32
 8002e1a:	f009 fbcf 	bl	800c5bc <osDelay>
	for (;;) {
 8002e1e:	e5cd      	b.n	80029bc <StartDefaultTask+0xc>
 8002e20:	200004b8 	.word	0x200004b8
 8002e24:	2000043c 	.word	0x2000043c
 8002e28:	20000496 	.word	0x20000496
 8002e2c:	20000498 	.word	0x20000498
 8002e30:	2000048a 	.word	0x2000048a
 8002e34:	2000048c 	.word	0x2000048c
 8002e38:	2000048e 	.word	0x2000048e
 8002e3c:	20000490 	.word	0x20000490
 8002e40:	20000492 	.word	0x20000492
 8002e44:	20000494 	.word	0x20000494
 8002e48:	200004b9 	.word	0x200004b9
 8002e4c:	200002b4 	.word	0x200002b4

08002e50 <StartCompassTask>:
 * @brief Function implementing the CompassTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCompassTask */
void StartCompassTask(void *argument) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCompassTask */
	/* Infinite loop */
	for (;;) {
		if (bno085_int_flag) {
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <StartCompassTask+0x24>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <StartCompassTask+0x1c>
			bno085_int_flag = 0;
 8002e62:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <StartCompassTask+0x24>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
			sh2_service();
 8002e68:	f002 f940 	bl	80050ec <sh2_service>
		}
		osDelay(10);
 8002e6c:	200a      	movs	r0, #10
 8002e6e:	f009 fba5 	bl	800c5bc <osDelay>
		if (bno085_int_flag) {
 8002e72:	e7f1      	b.n	8002e58 <StartCompassTask+0x8>
 8002e74:	2000046b 	.word	0x2000046b

08002e78 <StartDisplayTask>:
 * @brief Function implementing the DisplayTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument) {
 8002e78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e7c:	b0b4      	sub	sp, #208	@ 0xd0
 8002e7e:	af08      	add	r7, sp, #32
 8002e80:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDisplayTask */
	char display_str[48];
	const char *mode_names[] = { "SENSOR", "MOVE", "MOVE_HL" }; // UPDATED NAMES
 8002e82:	4aaa      	ldr	r2, [pc, #680]	@ (800312c <StartDisplayTask+0x2b4>)
 8002e84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e88:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char *state_names[] = { "IDLE", "RUN" };
 8002e8e:	4aa8      	ldr	r2, [pc, #672]	@ (8003130 <StartDisplayTask+0x2b8>)
 8002e90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e98:	e883 0003 	stmia.w	r3, {r0, r1}
		robot_mode_t mode;
		robot_mode_t sel_mode;
		robot_state_t state;
		float heading;
		int32_t sw_count, enc_count;
		uint8_t show_uart_error = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		uint8_t sbus_valid = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
		uint32_t error_code = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		// Check SBUS signal validity
		sbus_valid = is_sbus_signal_valid();
 8002eae:	f7fe fbad 	bl	800160c <is_sbus_signal_valid>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

		// Check for UART error under mutex
		osMutexAcquire(UARTMutexHandle, osWaitForever);
 8002eb8:	4b9e      	ldr	r3, [pc, #632]	@ (8003134 <StartDisplayTask+0x2bc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f009 fc1c 	bl	800c6fe <osMutexAcquire>
		if (uart2_error_flag) {
 8002ec6:	4b9c      	ldr	r3, [pc, #624]	@ (8003138 <StartDisplayTask+0x2c0>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <StartDisplayTask+0x6c>
			show_uart_error = 1;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
			error_code = uart2_error_code;
 8002ed6:	4b99      	ldr	r3, [pc, #612]	@ (800313c <StartDisplayTask+0x2c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			uart2_error_flag = 0; // Clear after displaying
 8002ede:	4b96      	ldr	r3, [pc, #600]	@ (8003138 <StartDisplayTask+0x2c0>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
		}
		osMutexRelease(UARTMutexHandle);
 8002ee4:	4b93      	ldr	r3, [pc, #588]	@ (8003134 <StartDisplayTask+0x2bc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f009 fc53 	bl	800c794 <osMutexRelease>

		if (show_uart_error) {
 8002eee:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03a      	beq.n	8002f6c <StartDisplayTask+0xf4>
			char err_str[32];
			// Show more detailed error information
			snprintf(err_str, sizeof(err_str), "UART Err: 0x%lX A:%d",
 8002ef6:	4b92      	ldr	r3, [pc, #584]	@ (8003140 <StartDisplayTask+0x2c8>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f107 0008 	add.w	r0, r7, #8
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f06:	4a8f      	ldr	r2, [pc, #572]	@ (8003144 <StartDisplayTask+0x2cc>)
 8002f08:	2120      	movs	r1, #32
 8002f0a:	f00d f97d 	bl	8010208 <sniprintf>
					error_code, sbus_recovery_attempts);
			ssd1306_Fill(Black);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f000 fe04 	bl	8003b1c <ssd1306_Fill>
			ssd1306_SetCursor(1, 0);
 8002f14:	2100      	movs	r1, #0
 8002f16:	2001      	movs	r0, #1
 8002f18:	f000 ff78 	bl	8003e0c <ssd1306_SetCursor>
			ssd1306_WriteString(err_str, Font_7x10, White);
 8002f1c:	4a8a      	ldr	r2, [pc, #552]	@ (8003148 <StartDisplayTask+0x2d0>)
 8002f1e:	f107 0008 	add.w	r0, r7, #8
 8002f22:	2301      	movs	r3, #1
 8002f24:	ca06      	ldmia	r2, {r1, r2}
 8002f26:	f000 ff4b 	bl	8003dc0 <ssd1306_WriteString>

			// Show recovery status
			snprintf(err_str, sizeof(err_str), "Recovery: %s",
					(sbus_recovery_attempts < SBUS_MAX_RECOVERY_ATTEMPTS) ?
 8002f2a:	4b85      	ldr	r3, [pc, #532]	@ (8003140 <StartDisplayTask+0x2c8>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b2db      	uxtb	r3, r3
			snprintf(err_str, sizeof(err_str), "Recovery: %s",
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d801      	bhi.n	8002f38 <StartDisplayTask+0xc0>
 8002f34:	4b85      	ldr	r3, [pc, #532]	@ (800314c <StartDisplayTask+0x2d4>)
 8002f36:	e000      	b.n	8002f3a <StartDisplayTask+0xc2>
 8002f38:	4b85      	ldr	r3, [pc, #532]	@ (8003150 <StartDisplayTask+0x2d8>)
 8002f3a:	f107 0008 	add.w	r0, r7, #8
 8002f3e:	4a85      	ldr	r2, [pc, #532]	@ (8003154 <StartDisplayTask+0x2dc>)
 8002f40:	2120      	movs	r1, #32
 8002f42:	f00d f961 	bl	8010208 <sniprintf>
							"TRYING" : "FAILED");
			ssd1306_SetCursor(1, 12);
 8002f46:	210c      	movs	r1, #12
 8002f48:	2001      	movs	r0, #1
 8002f4a:	f000 ff5f 	bl	8003e0c <ssd1306_SetCursor>
			ssd1306_WriteString(err_str, Font_7x10, White);
 8002f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003148 <StartDisplayTask+0x2d0>)
 8002f50:	f107 0008 	add.w	r0, r7, #8
 8002f54:	2301      	movs	r3, #1
 8002f56:	ca06      	ldmia	r2, {r1, r2}
 8002f58:	f000 ff32 	bl	8003dc0 <ssd1306_WriteString>

			ssd1306_UpdateScreen(&hi2c1);
 8002f5c:	487e      	ldr	r0, [pc, #504]	@ (8003158 <StartDisplayTask+0x2e0>)
 8002f5e:	f000 fe01 	bl	8003b64 <ssd1306_UpdateScreen>
			osDelay(2000); // Show error for 2s
 8002f62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002f66:	f009 fb29 	bl	800c5bc <osDelay>
			continue;
 8002f6a:	e334      	b.n	80035d6 <StartDisplayTask+0x75e>
		}

		// Get current mode, selected mode, and state
		osMutexAcquire(ModeMutexHandle, osWaitForever);
 8002f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800315c <StartDisplayTask+0x2e4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295
 8002f74:	4618      	mov	r0, r3
 8002f76:	f009 fbc2 	bl	800c6fe <osMutexAcquire>
		mode = current_mode;
 8002f7a:	4b79      	ldr	r3, [pc, #484]	@ (8003160 <StartDisplayTask+0x2e8>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
		sel_mode = selected_mode;
 8002f82:	4b78      	ldr	r3, [pc, #480]	@ (8003164 <StartDisplayTask+0x2ec>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
		state = robot_state;
 8002f8a:	4b77      	ldr	r3, [pc, #476]	@ (8003168 <StartDisplayTask+0x2f0>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
		osMutexRelease(ModeMutexHandle);
 8002f92:	4b72      	ldr	r3, [pc, #456]	@ (800315c <StartDisplayTask+0x2e4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f009 fbfc 	bl	800c794 <osMutexRelease>

		// Get compass heading
		osMutexAcquire(CompassMutexHandle, osWaitForever);
 8002f9c:	4b73      	ldr	r3, [pc, #460]	@ (800316c <StartDisplayTask+0x2f4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f009 fbaa 	bl	800c6fe <osMutexAcquire>
		heading = compass_heading_deg;
 8002faa:	4b71      	ldr	r3, [pc, #452]	@ (8003170 <StartDisplayTask+0x2f8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		osMutexRelease(CompassMutexHandle);
 8002fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800316c <StartDisplayTask+0x2f4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f009 fbec 	bl	800c794 <osMutexRelease>

		// Get encoder data
		osMutexAcquire(EncoderMutexHandle, osWaitForever);
 8002fbc:	4b6d      	ldr	r3, [pc, #436]	@ (8003174 <StartDisplayTask+0x2fc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f009 fb9a 	bl	800c6fe <osMutexAcquire>
		sw_count = encoder_sw_count;
 8002fca:	4b6b      	ldr	r3, [pc, #428]	@ (8003178 <StartDisplayTask+0x300>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		enc_count = encoder_count;
 8002fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800317c <StartDisplayTask+0x304>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		osMutexRelease(EncoderMutexHandle);
 8002fda:	4b66      	ldr	r3, [pc, #408]	@ (8003174 <StartDisplayTask+0x2fc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f009 fbd8 	bl	800c794 <osMutexRelease>

		ssd1306_Fill(Black);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f000 fd99 	bl	8003b1c <ssd1306_Fill>

		// Line 1: Show selected mode with indicator if different from current
		// Add SBUS status, recovery status, and heading lock indicator
		if (sel_mode == mode) {
 8002fea:	f897 20a4 	ldrb.w	r2, [r7, #164]	@ 0xa4
 8002fee:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d141      	bne.n	800307a <StartDisplayTask+0x202>
			// Current mode - show with state, SBUS status, recovery status, and heading lock
			char sbus_status = sbus_valid ? 'S' : '!';
 8002ff6:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <StartDisplayTask+0x18a>
 8002ffe:	2353      	movs	r3, #83	@ 0x53
 8003000:	e000      	b.n	8003004 <StartDisplayTask+0x18c>
 8003002:	2321      	movs	r3, #33	@ 0x21
 8003004:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
			char recovery_status = sbus_was_lost ? 'R' : ' '; // R = recovering
 8003008:	4b5d      	ldr	r3, [pc, #372]	@ (8003180 <StartDisplayTask+0x308>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <StartDisplayTask+0x19e>
 8003012:	2352      	movs	r3, #82	@ 0x52
 8003014:	e000      	b.n	8003018 <StartDisplayTask+0x1a0>
 8003016:	2320      	movs	r3, #32
 8003018:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			char heading_status =
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 800301c:	4b59      	ldr	r3, [pc, #356]	@ (8003184 <StartDisplayTask+0x30c>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
			char heading_status =
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <StartDisplayTask+0x1ba>
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 8003026:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800302a:	2b02      	cmp	r3, #2
 800302c:	d101      	bne.n	8003032 <StartDisplayTask+0x1ba>
			char heading_status =
 800302e:	2348      	movs	r3, #72	@ 0x48
 8003030:	e000      	b.n	8003034 <StartDisplayTask+0x1bc>
 8003032:	2320      	movs	r3, #32
 8003034:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
							'H' : ' '; // UPDATED

			snprintf(display_str, sizeof(display_str), "%s %s %c%c%c",
 8003038:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	33b0      	adds	r3, #176	@ 0xb0
 8003040:	443b      	add	r3, r7
 8003042:	f853 5c70 	ldr.w	r5, [r3, #-112]
 8003046:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	33b0      	adds	r3, #176	@ 0xb0
 800304e:	443b      	add	r3, r7
 8003050:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003054:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8003058:	f897 108f 	ldrb.w	r1, [r7, #143]	@ 0x8f
 800305c:	f897 008e 	ldrb.w	r0, [r7, #142]	@ 0x8e
 8003060:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003064:	9003      	str	r0, [sp, #12]
 8003066:	9102      	str	r1, [sp, #8]
 8003068:	9201      	str	r2, [sp, #4]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	462b      	mov	r3, r5
 800306e:	4a46      	ldr	r2, [pc, #280]	@ (8003188 <StartDisplayTask+0x310>)
 8003070:	2130      	movs	r1, #48	@ 0x30
 8003072:	4620      	mov	r0, r4
 8003074:	f00d f8c8 	bl	8010208 <sniprintf>
 8003078:	e040      	b.n	80030fc <StartDisplayTask+0x284>
					mode_names[mode], state_names[state], sbus_status,
					recovery_status, heading_status);
		} else {
			// Selected mode (different from current) - show with arrow indicator
			char sbus_status = sbus_valid ? 'S' : '!';
 800307a:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <StartDisplayTask+0x20e>
 8003082:	2353      	movs	r3, #83	@ 0x53
 8003084:	e000      	b.n	8003088 <StartDisplayTask+0x210>
 8003086:	2321      	movs	r3, #33	@ 0x21
 8003088:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
			char recovery_status = sbus_was_lost ? 'R' : ' ';
 800308c:	4b3c      	ldr	r3, [pc, #240]	@ (8003180 <StartDisplayTask+0x308>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <StartDisplayTask+0x222>
 8003096:	2352      	movs	r3, #82	@ 0x52
 8003098:	e000      	b.n	800309c <StartDisplayTask+0x224>
 800309a:	2320      	movs	r3, #32
 800309c:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
			char heading_status =
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 80030a0:	4b38      	ldr	r3, [pc, #224]	@ (8003184 <StartDisplayTask+0x30c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
			char heading_status =
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <StartDisplayTask+0x23e>
					(heading_lock_enabled && mode == MODE_MOVEMENT_HL) ?
 80030aa:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d101      	bne.n	80030b6 <StartDisplayTask+0x23e>
			char heading_status =
 80030b2:	2348      	movs	r3, #72	@ 0x48
 80030b4:	e000      	b.n	80030b8 <StartDisplayTask+0x240>
 80030b6:	2320      	movs	r3, #32
 80030b8:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
							'H' : ' '; // UPDATED

			snprintf(display_str, sizeof(display_str), ">%s< %s %c%c%c",
 80030bc:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	33b0      	adds	r3, #176	@ 0xb0
 80030c4:	443b      	add	r3, r7
 80030c6:	f853 5c70 	ldr.w	r5, [r3, #-112]
 80030ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	33b0      	adds	r3, #176	@ 0xb0
 80030d2:	443b      	add	r3, r7
 80030d4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80030d8:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 80030dc:	f897 1092 	ldrb.w	r1, [r7, #146]	@ 0x92
 80030e0:	f897 0091 	ldrb.w	r0, [r7, #145]	@ 0x91
 80030e4:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80030e8:	9003      	str	r0, [sp, #12]
 80030ea:	9102      	str	r1, [sp, #8]
 80030ec:	9201      	str	r2, [sp, #4]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	462b      	mov	r3, r5
 80030f2:	4a26      	ldr	r2, [pc, #152]	@ (800318c <StartDisplayTask+0x314>)
 80030f4:	2130      	movs	r1, #48	@ 0x30
 80030f6:	4620      	mov	r0, r4
 80030f8:	f00d f886 	bl	8010208 <sniprintf>
					mode_names[sel_mode], state_names[state], sbus_status,
					recovery_status, heading_status);
		}
		ssd1306_SetCursor(1, 0);
 80030fc:	2100      	movs	r1, #0
 80030fe:	2001      	movs	r0, #1
 8003100:	f000 fe84 	bl	8003e0c <ssd1306_SetCursor>
		ssd1306_WriteString(display_str, Font_7x10, White);
 8003104:	4a10      	ldr	r2, [pc, #64]	@ (8003148 <StartDisplayTask+0x2d0>)
 8003106:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800310a:	2301      	movs	r3, #1
 800310c:	ca06      	ldmia	r2, {r1, r2}
 800310e:	f000 fe57 	bl	8003dc0 <ssd1306_WriteString>

		// Display content based on current active mode (not selected mode)
		switch (mode) {
 8003112:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8003116:	2b00      	cmp	r3, #0
 8003118:	d03a      	beq.n	8003190 <StartDisplayTask+0x318>
 800311a:	2b00      	cmp	r3, #0
 800311c:	f2c0 8242 	blt.w	80035a4 <StartDisplayTask+0x72c>
 8003120:	3b01      	subs	r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	f200 823e 	bhi.w	80035a4 <StartDisplayTask+0x72c>
 8003128:	e0ed      	b.n	8003306 <StartDisplayTask+0x48e>
 800312a:	bf00      	nop
 800312c:	08012b88 	.word	0x08012b88
 8003130:	08012ba0 	.word	0x08012ba0
 8003134:	20000414 	.word	0x20000414
 8003138:	20000460 	.word	0x20000460
 800313c:	2000045c 	.word	0x2000045c
 8003140:	20000469 	.word	0x20000469
 8003144:	08012a20 	.word	0x08012a20
 8003148:	20000000 	.word	0x20000000
 800314c:	08012a38 	.word	0x08012a38
 8003150:	08012a40 	.word	0x08012a40
 8003154:	08012a48 	.word	0x08012a48
 8003158:	20000260 	.word	0x20000260
 800315c:	20000418 	.word	0x20000418
 8003160:	20000484 	.word	0x20000484
 8003164:	20000485 	.word	0x20000485
 8003168:	20000486 	.word	0x20000486
 800316c:	20000408 	.word	0x20000408
 8003170:	2000046c 	.word	0x2000046c
 8003174:	20000410 	.word	0x20000410
 8003178:	20000478 	.word	0x20000478
 800317c:	20000470 	.word	0x20000470
 8003180:	200004b8 	.word	0x200004b8
 8003184:	20000496 	.word	0x20000496
 8003188:	08012a58 	.word	0x08012a58
 800318c:	08012a68 	.word	0x08012a68
		case MODE_DISPLAY_SENSORS:
			// Line 2: Show both compass and robot front headings
			float robot_front = compass_to_robot_front(heading);
 8003190:	ed97 0a27 	vldr	s0, [r7, #156]	@ 0x9c
 8003194:	f7fe fdc6 	bl	8001d24 <compass_to_robot_front>
 8003198:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
			snprintf(display_str, sizeof(display_str), "C:%.0f R:%.0f deg",
 800319c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80031a0:	f7fd f9da 	bl	8000558 <__aeabi_f2d>
 80031a4:	4604      	mov	r4, r0
 80031a6:	460d      	mov	r5, r1
 80031a8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80031ac:	f7fd f9d4 	bl	8000558 <__aeabi_f2d>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80031b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80031bc:	e9cd 4500 	strd	r4, r5, [sp]
 80031c0:	4ab6      	ldr	r2, [pc, #728]	@ (800349c <StartDisplayTask+0x624>)
 80031c2:	2130      	movs	r1, #48	@ 0x30
 80031c4:	f00d f820 	bl	8010208 <sniprintf>
					heading, robot_front);
			ssd1306_SetCursor(1, 12);
 80031c8:	210c      	movs	r1, #12
 80031ca:	2001      	movs	r0, #1
 80031cc:	f000 fe1e 	bl	8003e0c <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 80031d0:	4ab3      	ldr	r2, [pc, #716]	@ (80034a0 <StartDisplayTask+0x628>)
 80031d2:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80031d6:	2301      	movs	r3, #1
 80031d8:	ca06      	ldmia	r2, {r1, r2}
 80031da:	f000 fdf1 	bl	8003dc0 <ssd1306_WriteString>

			// Line 3: Encoder data and Channel 7 position
			const char *ch7_names[] = { "MIN", "MID", "MAX", "???" };
 80031de:	4bb1      	ldr	r3, [pc, #708]	@ (80034a4 <StartDisplayTask+0x62c>)
 80031e0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80031e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ch7_position_t ch7_pos =
					sbus_valid ? get_channel7_position() : CH7_POSITION_UNKNOWN;
 80031ea:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <StartDisplayTask+0x382>
 80031f2:	f7fe fe41 	bl	8001e78 <get_channel7_position>
 80031f6:	4603      	mov	r3, r0
 80031f8:	e000      	b.n	80031fc <StartDisplayTask+0x384>
 80031fa:	2303      	movs	r3, #3
			ch7_position_t ch7_pos =
 80031fc:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			snprintf(display_str, sizeof(display_str), "SW:%ld ENC:%ld CH7:%s",
 8003200:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	33b0      	adds	r3, #176	@ 0xb0
 8003208:	443b      	add	r3, r7
 800320a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800320e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800321e:	4aa2      	ldr	r2, [pc, #648]	@ (80034a8 <StartDisplayTask+0x630>)
 8003220:	2130      	movs	r1, #48	@ 0x30
 8003222:	f00c fff1 	bl	8010208 <sniprintf>
					(long) sw_count, (long) enc_count, ch7_names[ch7_pos]);
			ssd1306_SetCursor(1, 24);
 8003226:	2118      	movs	r1, #24
 8003228:	2001      	movs	r0, #1
 800322a:	f000 fdef 	bl	8003e0c <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 800322e:	4a9c      	ldr	r2, [pc, #624]	@ (80034a0 <StartDisplayTask+0x628>)
 8003230:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003234:	2301      	movs	r3, #1
 8003236:	ca06      	ldmia	r2, {r1, r2}
 8003238:	f000 fdc2 	bl	8003dc0 <ssd1306_WriteString>

			// Line 4: SBUS channels including Channel 7 raw value
			if (sbus_valid) {
 800323c:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02a      	beq.n	800329a <StartDisplayTask+0x422>
				int16_t ch2_pct = sbus_to_percentage(sbus_channels[1]);
 8003244:	4b99      	ldr	r3, [pc, #612]	@ (80034ac <StartDisplayTask+0x634>)
 8003246:	885b      	ldrh	r3, [r3, #2]
 8003248:	b29b      	uxth	r3, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd ffac 	bl	80011a8 <sbus_to_percentage>
 8003250:	4603      	mov	r3, r0
 8003252:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
				int16_t ch5_pct = sbus_to_percentage(sbus_channels[4]);
 8003256:	4b95      	ldr	r3, [pc, #596]	@ (80034ac <StartDisplayTask+0x634>)
 8003258:	891b      	ldrh	r3, [r3, #8]
 800325a:	b29b      	uxth	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd ffa3 	bl	80011a8 <sbus_to_percentage>
 8003262:	4603      	mov	r3, r0
 8003264:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
				int16_t ch4_pct = sbus_to_percentage(sbus_channels[3]);
 8003268:	4b90      	ldr	r3, [pc, #576]	@ (80034ac <StartDisplayTask+0x634>)
 800326a:	88db      	ldrh	r3, [r3, #6]
 800326c:	b29b      	uxth	r3, r3
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd ff9a 	bl	80011a8 <sbus_to_percentage>
 8003274:	4603      	mov	r3, r0
 8003276:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
				snprintf(display_str, sizeof(display_str), "2:%3d 5:%3d 4:%3d",
 800327a:	f9b7 1080 	ldrsh.w	r1, [r7, #128]	@ 0x80
 800327e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8003282:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	@ 0x7c
 8003286:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	460b      	mov	r3, r1
 8003290:	4a87      	ldr	r2, [pc, #540]	@ (80034b0 <StartDisplayTask+0x638>)
 8003292:	2130      	movs	r1, #48	@ 0x30
 8003294:	f00c ffb8 	bl	8010208 <sniprintf>
 8003298:	e006      	b.n	80032a8 <StartDisplayTask+0x430>
						ch2_pct, ch5_pct, ch4_pct);
			} else {
				snprintf(display_str, sizeof(display_str), "SBUS SIGNAL LOST");
 800329a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800329e:	4a85      	ldr	r2, [pc, #532]	@ (80034b4 <StartDisplayTask+0x63c>)
 80032a0:	2130      	movs	r1, #48	@ 0x30
 80032a2:	4618      	mov	r0, r3
 80032a4:	f00c ffb0 	bl	8010208 <sniprintf>
			}
			ssd1306_SetCursor(1, 36);
 80032a8:	2124      	movs	r1, #36	@ 0x24
 80032aa:	2001      	movs	r0, #1
 80032ac:	f000 fdae 	bl	8003e0c <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 80032b0:	4a7b      	ldr	r2, [pc, #492]	@ (80034a0 <StartDisplayTask+0x628>)
 80032b2:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80032b6:	2301      	movs	r3, #1
 80032b8:	ca06      	ldmia	r2, {r1, r2}
 80032ba:	f000 fd81 	bl	8003dc0 <ssd1306_WriteString>

		    // Line 5: FRAM status
		    if (HAL_I2C_IsDeviceReady(&hi2c1, MB85rc_ADDRESS, 1, 50) == HAL_OK) {
 80032be:	2332      	movs	r3, #50	@ 0x32
 80032c0:	2201      	movs	r2, #1
 80032c2:	21a0      	movs	r1, #160	@ 0xa0
 80032c4:	487c      	ldr	r0, [pc, #496]	@ (80034b8 <StartDisplayTask+0x640>)
 80032c6:	f005 fceb 	bl	8008ca0 <HAL_I2C_IsDeviceReady>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <StartDisplayTask+0x468>
		        snprintf(display_str, sizeof(display_str), "FRAM: OK");
 80032d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032d4:	4a79      	ldr	r2, [pc, #484]	@ (80034bc <StartDisplayTask+0x644>)
 80032d6:	2130      	movs	r1, #48	@ 0x30
 80032d8:	4618      	mov	r0, r3
 80032da:	f00c ff95 	bl	8010208 <sniprintf>
 80032de:	e006      	b.n	80032ee <StartDisplayTask+0x476>
		    } else {
		        snprintf(display_str, sizeof(display_str), "FRAM: ERR");
 80032e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032e4:	4a76      	ldr	r2, [pc, #472]	@ (80034c0 <StartDisplayTask+0x648>)
 80032e6:	2130      	movs	r1, #48	@ 0x30
 80032e8:	4618      	mov	r0, r3
 80032ea:	f00c ff8d 	bl	8010208 <sniprintf>
		    }
		    ssd1306_SetCursor(1, 48);
 80032ee:	2130      	movs	r1, #48	@ 0x30
 80032f0:	2001      	movs	r0, #1
 80032f2:	f000 fd8b 	bl	8003e0c <ssd1306_SetCursor>
		    ssd1306_WriteString(display_str, Font_7x10, White);
 80032f6:	4a6a      	ldr	r2, [pc, #424]	@ (80034a0 <StartDisplayTask+0x628>)
 80032f8:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80032fc:	2301      	movs	r3, #1
 80032fe:	ca06      	ldmia	r2, {r1, r2}
 8003300:	f000 fd5e 	bl	8003dc0 <ssd1306_WriteString>
			break;
 8003304:	e161      	b.n	80035ca <StartDisplayTask+0x752>

		case MODE_MOVEMENT:        // UPDATED - was MODE_MOVEMENT_SIMULATOR
		case MODE_MOVEMENT_HL:     // UPDATED - was MODE_MOVEMENT
			if (sbus_valid) {
 8003306:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8113 	beq.w	8003536 <StartDisplayTask+0x6be>
				// Line 2: Joystick input values (LR=Left/Right, FB=Forward/Backward, R=Rotation)
				snprintf(display_str, sizeof(display_str),
 8003310:	4b6c      	ldr	r3, [pc, #432]	@ (80034c4 <StartDisplayTask+0x64c>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b21b      	sxth	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	4b6b      	ldr	r3, [pc, #428]	@ (80034c8 <StartDisplayTask+0x650>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b21b      	sxth	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	4b6a      	ldr	r3, [pc, #424]	@ (80034cc <StartDisplayTask+0x654>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b21b      	sxth	r3, r3
 8003326:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	9200      	str	r2, [sp, #0]
 800332e:	460b      	mov	r3, r1
 8003330:	4a67      	ldr	r2, [pc, #412]	@ (80034d0 <StartDisplayTask+0x658>)
 8003332:	2130      	movs	r1, #48	@ 0x30
 8003334:	f00c ff68 	bl	8010208 <sniprintf>
						"LR:%3d FB:%3d R:%3d", joystick_x, joystick_y,
						joystick_rotation);
				ssd1306_SetCursor(1, 12);
 8003338:	210c      	movs	r1, #12
 800333a:	2001      	movs	r0, #1
 800333c:	f000 fd66 	bl	8003e0c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8003340:	4a57      	ldr	r2, [pc, #348]	@ (80034a0 <StartDisplayTask+0x628>)
 8003342:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003346:	2301      	movs	r3, #1
 8003348:	ca06      	ldmia	r2, {r1, r2}
 800334a:	f000 fd39 	bl	8003dc0 <ssd1306_WriteString>

				// Line 3: Show heading lock info with oscillation detection
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 800334e:	4b61      	ldr	r3, [pc, #388]	@ (80034d4 <StartDisplayTask+0x65c>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05f      	beq.n	8003418 <StartDisplayTask+0x5a0>
 8003358:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800335c:	2b02      	cmp	r3, #2
 800335e:	d15b      	bne.n	8003418 <StartDisplayTask+0x5a0>
					float current_robot_front = compass_to_robot_front(heading);
 8003360:	ed97 0a27 	vldr	s0, [r7, #156]	@ 0x9c
 8003364:	f7fe fcde 	bl	8001d24 <compass_to_robot_front>
 8003368:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88

					// Enhanced status indicators
					char status_char = ' ';
 800336c:	2320      	movs	r3, #32
 800336e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (oscillation_detected) {
 8003372:	4b59      	ldr	r3, [pc, #356]	@ (80034d8 <StartDisplayTask+0x660>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <StartDisplayTask+0x50c>
						status_char = '~'; // Oscillation detected
 800337c:	237e      	movs	r3, #126	@ 0x7e
 800337e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8003382:	e025      	b.n	80033d0 <StartDisplayTask+0x558>
					} else if (overshoot_detected) {
 8003384:	4b55      	ldr	r3, [pc, #340]	@ (80034dc <StartDisplayTask+0x664>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <StartDisplayTask+0x51e>
						status_char = 'O'; // Overshoot detected
 800338e:	234f      	movs	r3, #79	@ 0x4f
 8003390:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8003394:	e01c      	b.n	80033d0 <StartDisplayTask+0x558>
					} else if (fabs(heading_error) > 2.0f) { // Reduced threshold
 8003396:	4b52      	ldr	r3, [pc, #328]	@ (80034e0 <StartDisplayTask+0x668>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	eef0 7ae7 	vabs.f32	s15, s15
 80033a0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80033a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ac:	dd0d      	ble.n	80033ca <StartDisplayTask+0x552>
						status_char = (heading_pid_output > 0) ? 'R' : 'L'; // Turning Right/Left
 80033ae:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <StartDisplayTask+0x66c>)
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	dd01      	ble.n	80033c2 <StartDisplayTask+0x54a>
 80033be:	2352      	movs	r3, #82	@ 0x52
 80033c0:	e000      	b.n	80033c4 <StartDisplayTask+0x54c>
 80033c2:	234c      	movs	r3, #76	@ 0x4c
 80033c4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80033c8:	e002      	b.n	80033d0 <StartDisplayTask+0x558>
					} else {
						status_char = '='; // Near target
 80033ca:	233d      	movs	r3, #61	@ 0x3d
 80033cc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					}

					snprintf(display_str, sizeof(display_str),
 80033d0:	4b45      	ldr	r3, [pc, #276]	@ (80034e8 <StartDisplayTask+0x670>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f8bf 	bl	8000558 <__aeabi_f2d>
 80033da:	4604      	mov	r4, r0
 80033dc:	460d      	mov	r5, r1
 80033de:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80033e2:	f7fd f8b9 	bl	8000558 <__aeabi_f2d>
 80033e6:	4680      	mov	r8, r0
 80033e8:	4689      	mov	r9, r1
 80033ea:	4b3d      	ldr	r3, [pc, #244]	@ (80034e0 <StartDisplayTask+0x668>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8b2 	bl	8000558 <__aeabi_f2d>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	f897 10a7 	ldrb.w	r1, [r7, #167]	@ 0xa7
 80033fc:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003400:	9106      	str	r1, [sp, #24]
 8003402:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003406:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800340a:	e9cd 4500 	strd	r4, r5, [sp]
 800340e:	4a37      	ldr	r2, [pc, #220]	@ (80034ec <StartDisplayTask+0x674>)
 8003410:	2130      	movs	r1, #48	@ 0x30
 8003412:	f00c fef9 	bl	8010208 <sniprintf>
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 8003416:	e00e      	b.n	8003436 <StartDisplayTask+0x5be>
							"L:%.0f N:%.0f E:%.1f%c", locked_heading,
							current_robot_front, heading_error, status_char);
				} else {
					// Show motor values
					snprintf(display_str, sizeof(display_str), "LF:%4d RF:%4d",
 8003418:	4b35      	ldr	r3, [pc, #212]	@ (80034f0 <StartDisplayTask+0x678>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b21b      	sxth	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	4b34      	ldr	r3, [pc, #208]	@ (80034f4 <StartDisplayTask+0x67c>)
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b21b      	sxth	r3, r3
 8003426:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	4a32      	ldr	r2, [pc, #200]	@ (80034f8 <StartDisplayTask+0x680>)
 8003430:	2130      	movs	r1, #48	@ 0x30
 8003432:	f00c fee9 	bl	8010208 <sniprintf>
							motor_left_front, motor_right_front);
				}
				ssd1306_SetCursor(1, 24);
 8003436:	2118      	movs	r1, #24
 8003438:	2001      	movs	r0, #1
 800343a:	f000 fce7 	bl	8003e0c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 800343e:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <StartDisplayTask+0x628>)
 8003440:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003444:	2301      	movs	r3, #1
 8003446:	ca06      	ldmia	r2, {r1, r2}
 8003448:	f000 fcba 	bl	8003dc0 <ssd1306_WriteString>

				// Line 4: PID output with overshoot indicator
				if (heading_lock_enabled && mode == MODE_MOVEMENT_HL) { // UPDATED
 800344c:	4b21      	ldr	r3, [pc, #132]	@ (80034d4 <StartDisplayTask+0x65c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d05a      	beq.n	800350c <StartDisplayTask+0x694>
 8003456:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800345a:	2b02      	cmp	r3, #2
 800345c:	d156      	bne.n	800350c <StartDisplayTask+0x694>
					snprintf(display_str, sizeof(display_str),
 800345e:	4b21      	ldr	r3, [pc, #132]	@ (80034e4 <StartDisplayTask+0x66c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd f878 	bl	8000558 <__aeabi_f2d>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4923      	ldr	r1, [pc, #140]	@ (80034fc <StartDisplayTask+0x684>)
 800346e:	8809      	ldrh	r1, [r1, #0]
 8003470:	b209      	sxth	r1, r1
 8003472:	460c      	mov	r4, r1
							"PID:%.1f BK:%4d%s", heading_pid_output, motor_back,
							overshoot_detected ? " OS" : "");
 8003474:	4919      	ldr	r1, [pc, #100]	@ (80034dc <StartDisplayTask+0x664>)
 8003476:	7809      	ldrb	r1, [r1, #0]
 8003478:	b2c9      	uxtb	r1, r1
					snprintf(display_str, sizeof(display_str),
 800347a:	2900      	cmp	r1, #0
 800347c:	d001      	beq.n	8003482 <StartDisplayTask+0x60a>
 800347e:	4920      	ldr	r1, [pc, #128]	@ (8003500 <StartDisplayTask+0x688>)
 8003480:	e000      	b.n	8003484 <StartDisplayTask+0x60c>
 8003482:	4920      	ldr	r1, [pc, #128]	@ (8003504 <StartDisplayTask+0x68c>)
 8003484:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003488:	9103      	str	r1, [sp, #12]
 800348a:	9402      	str	r4, [sp, #8]
 800348c:	e9cd 2300 	strd	r2, r3, [sp]
 8003490:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <StartDisplayTask+0x690>)
 8003492:	2130      	movs	r1, #48	@ 0x30
 8003494:	f00c feb8 	bl	8010208 <sniprintf>
 8003498:	e041      	b.n	800351e <StartDisplayTask+0x6a6>
 800349a:	bf00      	nop
 800349c:	08012a78 	.word	0x08012a78
 80034a0:	20000000 	.word	0x20000000
 80034a4:	08012bb8 	.word	0x08012bb8
 80034a8:	08012a8c 	.word	0x08012a8c
 80034ac:	2000043c 	.word	0x2000043c
 80034b0:	08012aa4 	.word	0x08012aa4
 80034b4:	08012ab8 	.word	0x08012ab8
 80034b8:	20000260 	.word	0x20000260
 80034bc:	08012acc 	.word	0x08012acc
 80034c0:	08012ad8 	.word	0x08012ad8
 80034c4:	2000048a 	.word	0x2000048a
 80034c8:	2000048c 	.word	0x2000048c
 80034cc:	2000048e 	.word	0x2000048e
 80034d0:	08012ae4 	.word	0x08012ae4
 80034d4:	20000496 	.word	0x20000496
 80034d8:	200004b1 	.word	0x200004b1
 80034dc:	200004b0 	.word	0x200004b0
 80034e0:	2000049c 	.word	0x2000049c
 80034e4:	200004a0 	.word	0x200004a0
 80034e8:	20000498 	.word	0x20000498
 80034ec:	08012af8 	.word	0x08012af8
 80034f0:	20000490 	.word	0x20000490
 80034f4:	20000492 	.word	0x20000492
 80034f8:	08012b10 	.word	0x08012b10
 80034fc:	20000494 	.word	0x20000494
 8003500:	08012b20 	.word	0x08012b20
 8003504:	08012b24 	.word	0x08012b24
 8003508:	08012b28 	.word	0x08012b28
				} else {
					snprintf(display_str, sizeof(display_str), "BK:%4d",
 800350c:	4b32      	ldr	r3, [pc, #200]	@ (80035d8 <StartDisplayTask+0x760>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b21b      	sxth	r3, r3
 8003512:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003516:	4a31      	ldr	r2, [pc, #196]	@ (80035dc <StartDisplayTask+0x764>)
 8003518:	2130      	movs	r1, #48	@ 0x30
 800351a:	f00c fe75 	bl	8010208 <sniprintf>
							motor_back);
				}
				ssd1306_SetCursor(1, 36);
 800351e:	2124      	movs	r1, #36	@ 0x24
 8003520:	2001      	movs	r0, #1
 8003522:	f000 fc73 	bl	8003e0c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8003526:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <StartDisplayTask+0x768>)
 8003528:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800352c:	2301      	movs	r3, #1
 800352e:	ca06      	ldmia	r2, {r1, r2}
 8003530:	f000 fc46 	bl	8003dc0 <ssd1306_WriteString>

				snprintf(display_str, sizeof(display_str), "FOR SAFETY");
				ssd1306_SetCursor(1, 36);
				ssd1306_WriteString(display_str, Font_7x10, White);
			}
			break;
 8003534:	e049      	b.n	80035ca <StartDisplayTask+0x752>
				snprintf(display_str, sizeof(display_str), "SBUS SIGNAL LOST");
 8003536:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800353a:	4a2a      	ldr	r2, [pc, #168]	@ (80035e4 <StartDisplayTask+0x76c>)
 800353c:	2130      	movs	r1, #48	@ 0x30
 800353e:	4618      	mov	r0, r3
 8003540:	f00c fe62 	bl	8010208 <sniprintf>
				ssd1306_SetCursor(1, 12);
 8003544:	210c      	movs	r1, #12
 8003546:	2001      	movs	r0, #1
 8003548:	f000 fc60 	bl	8003e0c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 800354c:	4a24      	ldr	r2, [pc, #144]	@ (80035e0 <StartDisplayTask+0x768>)
 800354e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003552:	2301      	movs	r3, #1
 8003554:	ca06      	ldmia	r2, {r1, r2}
 8003556:	f000 fc33 	bl	8003dc0 <ssd1306_WriteString>
				snprintf(display_str, sizeof(display_str), "MOTORS STOPPED");
 800355a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800355e:	4a22      	ldr	r2, [pc, #136]	@ (80035e8 <StartDisplayTask+0x770>)
 8003560:	2130      	movs	r1, #48	@ 0x30
 8003562:	4618      	mov	r0, r3
 8003564:	f00c fe50 	bl	8010208 <sniprintf>
				ssd1306_SetCursor(1, 24);
 8003568:	2118      	movs	r1, #24
 800356a:	2001      	movs	r0, #1
 800356c:	f000 fc4e 	bl	8003e0c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8003570:	4a1b      	ldr	r2, [pc, #108]	@ (80035e0 <StartDisplayTask+0x768>)
 8003572:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8003576:	2301      	movs	r3, #1
 8003578:	ca06      	ldmia	r2, {r1, r2}
 800357a:	f000 fc21 	bl	8003dc0 <ssd1306_WriteString>
				snprintf(display_str, sizeof(display_str), "FOR SAFETY");
 800357e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003582:	4a1a      	ldr	r2, [pc, #104]	@ (80035ec <StartDisplayTask+0x774>)
 8003584:	2130      	movs	r1, #48	@ 0x30
 8003586:	4618      	mov	r0, r3
 8003588:	f00c fe3e 	bl	8010208 <sniprintf>
				ssd1306_SetCursor(1, 36);
 800358c:	2124      	movs	r1, #36	@ 0x24
 800358e:	2001      	movs	r0, #1
 8003590:	f000 fc3c 	bl	8003e0c <ssd1306_SetCursor>
				ssd1306_WriteString(display_str, Font_7x10, White);
 8003594:	4a12      	ldr	r2, [pc, #72]	@ (80035e0 <StartDisplayTask+0x768>)
 8003596:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800359a:	2301      	movs	r3, #1
 800359c:	ca06      	ldmia	r2, {r1, r2}
 800359e:	f000 fc0f 	bl	8003dc0 <ssd1306_WriteString>
			break;
 80035a2:	e012      	b.n	80035ca <StartDisplayTask+0x752>

		case MODE_COUNT:
		default:
			// Handle invalid mode - should never happen
			snprintf(display_str, sizeof(display_str), "INVALID MODE");
 80035a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80035a8:	4a11      	ldr	r2, [pc, #68]	@ (80035f0 <StartDisplayTask+0x778>)
 80035aa:	2130      	movs	r1, #48	@ 0x30
 80035ac:	4618      	mov	r0, r3
 80035ae:	f00c fe2b 	bl	8010208 <sniprintf>
			ssd1306_SetCursor(1, 12);
 80035b2:	210c      	movs	r1, #12
 80035b4:	2001      	movs	r0, #1
 80035b6:	f000 fc29 	bl	8003e0c <ssd1306_SetCursor>
			ssd1306_WriteString(display_str, Font_7x10, White);
 80035ba:	4a09      	ldr	r2, [pc, #36]	@ (80035e0 <StartDisplayTask+0x768>)
 80035bc:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80035c0:	2301      	movs	r3, #1
 80035c2:	ca06      	ldmia	r2, {r1, r2}
 80035c4:	f000 fbfc 	bl	8003dc0 <ssd1306_WriteString>
			break;
 80035c8:	bf00      	nop
		}

		ssd1306_UpdateScreen(&hi2c1);
 80035ca:	480a      	ldr	r0, [pc, #40]	@ (80035f4 <StartDisplayTask+0x77c>)
 80035cc:	f000 faca 	bl	8003b64 <ssd1306_UpdateScreen>
		//osDelay(100);
		osDelay(200); // Update display every 200ms (5Hz) for smoother updates
 80035d0:	20c8      	movs	r0, #200	@ 0xc8
 80035d2:	f008 fff3 	bl	800c5bc <osDelay>
	for (;;) {
 80035d6:	e461      	b.n	8002e9c <StartDisplayTask+0x24>
 80035d8:	20000494 	.word	0x20000494
 80035dc:	08012b3c 	.word	0x08012b3c
 80035e0:	20000000 	.word	0x20000000
 80035e4:	08012ab8 	.word	0x08012ab8
 80035e8:	08012b44 	.word	0x08012b44
 80035ec:	08012b54 	.word	0x08012b54
 80035f0:	08012b60 	.word	0x08012b60
 80035f4:	20000260 	.word	0x20000260

080035f8 <StartEncoderTask>:
 * @brief Function implementing the EncoderTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderTask */
	int32_t last_count = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
	robot_mode_t temp_mode = MODE_DISPLAY_SENSORS;
 8003604:	2300      	movs	r3, #0
 8003606:	76fb      	strb	r3, [r7, #27]
	/* Infinite loop */
	for (;;) {
		osMutexAcquire(EncoderMutexHandle, osWaitForever);
 8003608:	4b4e      	ldr	r3, [pc, #312]	@ (8003744 <StartEncoderTask+0x14c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f04f 31ff 	mov.w	r1, #4294967295
 8003610:	4618      	mov	r0, r3
 8003612:	f009 f874 	bl	800c6fe <osMutexAcquire>
		int32_t count = encoder_count;
 8003616:	4b4c      	ldr	r3, [pc, #304]	@ (8003748 <StartEncoderTask+0x150>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	617b      	str	r3, [r7, #20]
		uint8_t button = encoder_button_pressed;
 800361c:	4b4b      	ldr	r3, [pc, #300]	@ (800374c <StartEncoderTask+0x154>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	74fb      	strb	r3, [r7, #19]
		if (button)
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <StartEncoderTask+0x36>
			encoder_button_pressed = 0;
 8003628:	4b48      	ldr	r3, [pc, #288]	@ (800374c <StartEncoderTask+0x154>)
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
		osMutexRelease(EncoderMutexHandle);
 800362e:	4b45      	ldr	r3, [pc, #276]	@ (8003744 <StartEncoderTask+0x14c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f009 f8ae 	bl	800c794 <osMutexRelease>

		if (count != last_count) {
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	429a      	cmp	r2, r3
 800363e:	d044      	beq.n	80036ca <StartEncoderTask+0xd2>
			// Handle encoder movement - change mode selection
			int32_t diff = count - last_count;
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	60fb      	str	r3, [r7, #12]
			last_count = count;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	61fb      	str	r3, [r7, #28]

			osMutexAcquire(ModeMutexHandle, osWaitForever);
 800364c:	4b40      	ldr	r3, [pc, #256]	@ (8003750 <StartEncoderTask+0x158>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	4618      	mov	r0, r3
 8003656:	f009 f852 	bl	800c6fe <osMutexAcquire>
			robot_state_t state = robot_state;
 800365a:	4b3e      	ldr	r3, [pc, #248]	@ (8003754 <StartEncoderTask+0x15c>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	72fb      	strb	r3, [r7, #11]
			osMutexRelease(ModeMutexHandle);
 8003660:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <StartEncoderTask+0x158>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f009 f895 	bl	800c794 <osMutexRelease>

			// Only allow mode change when robot is idle
			if (state == STATE_IDLE) {
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d12c      	bne.n	80036ca <StartEncoderTask+0xd2>
				if (diff > 0) {
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	dd0d      	ble.n	8003692 <StartEncoderTask+0x9a>
					temp_mode = (robot_mode_t) ((temp_mode + 1) % MODE_COUNT);
 8003676:	7efb      	ldrb	r3, [r7, #27]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	4b37      	ldr	r3, [pc, #220]	@ (8003758 <StartEncoderTask+0x160>)
 800367c:	fb83 3102 	smull	r3, r1, r3, r2
 8003680:	17d3      	asrs	r3, r2, #31
 8003682:	1ac9      	subs	r1, r1, r3
 8003684:	460b      	mov	r3, r1
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	440b      	add	r3, r1
 800368a:	1ad1      	subs	r1, r2, r3
 800368c:	460b      	mov	r3, r1
 800368e:	76fb      	strb	r3, [r7, #27]
 8003690:	e00c      	b.n	80036ac <StartEncoderTask+0xb4>
				} else {
					temp_mode = (robot_mode_t) ((temp_mode + MODE_COUNT - 1)
 8003692:	7efb      	ldrb	r3, [r7, #27]
 8003694:	1c9a      	adds	r2, r3, #2
							% MODE_COUNT);
 8003696:	4b30      	ldr	r3, [pc, #192]	@ (8003758 <StartEncoderTask+0x160>)
 8003698:	fb83 3102 	smull	r3, r1, r3, r2
 800369c:	17d3      	asrs	r3, r2, #31
 800369e:	1ac9      	subs	r1, r1, r3
 80036a0:	460b      	mov	r3, r1
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	440b      	add	r3, r1
 80036a6:	1ad1      	subs	r1, r2, r3
					temp_mode = (robot_mode_t) ((temp_mode + MODE_COUNT - 1)
 80036a8:	460b      	mov	r3, r1
 80036aa:	76fb      	strb	r3, [r7, #27]
				}

				// Update the shared selected_mode variable
				osMutexAcquire(ModeMutexHandle, osWaitForever);
 80036ac:	4b28      	ldr	r3, [pc, #160]	@ (8003750 <StartEncoderTask+0x158>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	4618      	mov	r0, r3
 80036b6:	f009 f822 	bl	800c6fe <osMutexAcquire>
				selected_mode = temp_mode;
 80036ba:	4a28      	ldr	r2, [pc, #160]	@ (800375c <StartEncoderTask+0x164>)
 80036bc:	7efb      	ldrb	r3, [r7, #27]
 80036be:	7013      	strb	r3, [r2, #0]
				osMutexRelease(ModeMutexHandle);
 80036c0:	4b23      	ldr	r3, [pc, #140]	@ (8003750 <StartEncoderTask+0x158>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f009 f865 	bl	800c794 <osMutexRelease>
			}
		}

		if (button) {
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d035      	beq.n	800373c <StartEncoderTask+0x144>
			// Handle button press
			osMutexAcquire(ModeMutexHandle, osWaitForever);
 80036d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003750 <StartEncoderTask+0x158>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f04f 31ff 	mov.w	r1, #4294967295
 80036d8:	4618      	mov	r0, r3
 80036da:	f009 f810 	bl	800c6fe <osMutexAcquire>
			robot_mode_t current = current_mode;
 80036de:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <StartEncoderTask+0x168>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	72bb      	strb	r3, [r7, #10]
			robot_state_t state = robot_state;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <StartEncoderTask+0x15c>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	727b      	strb	r3, [r7, #9]

			if (state == STATE_IDLE) {
 80036ea:	7a7b      	ldrb	r3, [r7, #9]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11a      	bne.n	8003726 <StartEncoderTask+0x12e>
				// If idle, either change mode or start movement (for movement modes)
				if (temp_mode != current) {
 80036f0:	7efa      	ldrb	r2, [r7, #27]
 80036f2:	7abb      	ldrb	r3, [r7, #10]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d009      	beq.n	800370c <StartEncoderTask+0x114>
					// Change mode
					current_mode = temp_mode;
 80036f8:	4a19      	ldr	r2, [pc, #100]	@ (8003760 <StartEncoderTask+0x168>)
 80036fa:	7efb      	ldrb	r3, [r7, #27]
 80036fc:	7013      	strb	r3, [r2, #0]
					selected_mode = temp_mode;  // Keep them in sync
 80036fe:	4a17      	ldr	r2, [pc, #92]	@ (800375c <StartEncoderTask+0x164>)
 8003700:	7efb      	ldrb	r3, [r7, #27]
 8003702:	7013      	strb	r3, [r2, #0]
					mode_change_request = 1;
 8003704:	4b17      	ldr	r3, [pc, #92]	@ (8003764 <StartEncoderTask+0x16c>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e012      	b.n	8003732 <StartEncoderTask+0x13a>
				} else if (current == MODE_MOVEMENT // UPDATED
 800370c:	7abb      	ldrb	r3, [r7, #10]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d002      	beq.n	8003718 <StartEncoderTask+0x120>
				|| current == MODE_MOVEMENT_HL) { // UPDATED
 8003712:	7abb      	ldrb	r3, [r7, #10]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d10c      	bne.n	8003732 <StartEncoderTask+0x13a>
				// Start movement
					robot_state = STATE_RUNNING;
 8003718:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <StartEncoderTask+0x15c>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
					state_toggle_request = 1;
 800371e:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <StartEncoderTask+0x170>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e005      	b.n	8003732 <StartEncoderTask+0x13a>
				}
			} else {
				// If running, stop movement
				robot_state = STATE_IDLE;
 8003726:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <StartEncoderTask+0x15c>)
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
				state_toggle_request = 1;
 800372c:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <StartEncoderTask+0x170>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
			}
			osMutexRelease(ModeMutexHandle);
 8003732:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <StartEncoderTask+0x158>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f009 f82c 	bl	800c794 <osMutexRelease>
		}
		//osDelay(10);
		osDelay(20); // Update encoder every 20ms (50Hz)
 800373c:	2014      	movs	r0, #20
 800373e:	f008 ff3d 	bl	800c5bc <osDelay>
	for (;;) {
 8003742:	e761      	b.n	8003608 <StartEncoderTask+0x10>
 8003744:	20000410 	.word	0x20000410
 8003748:	20000470 	.word	0x20000470
 800374c:	20000474 	.word	0x20000474
 8003750:	20000418 	.word	0x20000418
 8003754:	20000486 	.word	0x20000486
 8003758:	55555556 	.word	0x55555556
 800375c:	20000485 	.word	0x20000485
 8003760:	20000484 	.word	0x20000484
 8003764:	20000487 	.word	0x20000487
 8003768:	20000488 	.word	0x20000488

0800376c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377c:	d101      	bne.n	8003782 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800377e:	f003 fbd3 	bl	8006f28 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
	/* User can add his own implementation to report the HAL error return state */

	// Don't disable interrupts - allow system to continue
	// __disable_irq();  // ❌ REMOVE THIS LINE
	// Enable GPIOC clock if not already enabled
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <Error_Handler+0x48>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	4a0e      	ldr	r2, [pc, #56]	@ (80037d4 <Error_Handler+0x48>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <Error_Handler+0x48>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]

	// Flash LED to indicate error, but don't get stuck
	for (int i = 0; i < 10; i++) {  // Flash 10 times then continue
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	e00a      	b.n	80037ca <Error_Handler+0x3e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80037b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037b8:	4807      	ldr	r0, [pc, #28]	@ (80037d8 <Error_Handler+0x4c>)
 80037ba:	f004 fa9e 	bl	8007cfa <HAL_GPIO_TogglePin>
		HAL_Delay(100);  // Shorter delay
 80037be:	2064      	movs	r0, #100	@ 0x64
 80037c0:	f003 fbd2 	bl	8006f68 <HAL_Delay>
	for (int i = 0; i < 10; i++) {  // Flash 10 times then continue
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3301      	adds	r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	ddf1      	ble.n	80037b4 <Error_Handler+0x28>
	}

	// Instead of infinite loop, try to recover
	// Reset system if this is a critical error
	NVIC_SystemReset();
 80037d0:	f7fd fb88 	bl	8000ee4 <__NVIC_SystemReset>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40020800 	.word	0x40020800

080037dc <MB85rc_Init>:
I2C_HandleTypeDef *i2c;

/**
  * @brief  Initialize local I2C handle
  */
void MB85rc_Init(I2C_HandleTypeDef *hi2c) {
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 80037e4:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <MB85rc_Init+0x1c>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6013      	str	r3, [r2, #0]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000520 	.word	0x20000520

080037fc <MB85rc_Bus_Write>:
  * @param  memAddr  	Internal memory address
  * @param  pData 		Pointer to data buffer
  * @param  Len  		Amount of data to be Write
  */
HAL_StatusTypeDef MB85rc_Bus_Write(uint16_t DevAddr, uint16_t memAddr, uint8_t *pData, uint16_t Len)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	@ 0x28
 8003800:	af04      	add	r7, sp, #16
 8003802:	60ba      	str	r2, [r7, #8]
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	81fb      	strh	r3, [r7, #14]
 800380a:	460b      	mov	r3, r1
 800380c:	81bb      	strh	r3, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef halStatus = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]

	halStatus = HAL_I2C_Mem_Write(i2c, DevAddr, memAddr, I2C_MEMADD_SIZE_16BIT, pData, Len, HAL_MAX_DELAY);
 8003816:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <MB85rc_Bus_Write+0x44>)
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	89ba      	ldrh	r2, [r7, #12]
 800381c:	89f9      	ldrh	r1, [r7, #14]
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	9302      	str	r3, [sp, #8]
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2310      	movs	r3, #16
 800382e:	f004 ff0b 	bl	8008648 <HAL_I2C_Mem_Write>
 8003832:	4603      	mov	r3, r0
 8003834:	75fb      	strb	r3, [r7, #23]

    return halStatus;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000520 	.word	0x20000520

08003844 <MB85rc_Bus_Read>:
  * @param  memAddr  	Internal memory address
  * @param  pData 		Pointer to data buffer
  * @param  Len  		Amount of data to be read
  */
HAL_StatusTypeDef MB85rc_Bus_Read(uint16_t DevAddr, uint16_t memAddr, uint8_t *pData, uint16_t Len)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	@ 0x28
 8003848:	af04      	add	r7, sp, #16
 800384a:	60ba      	str	r2, [r7, #8]
 800384c:	461a      	mov	r2, r3
 800384e:	4603      	mov	r3, r0
 8003850:	81fb      	strh	r3, [r7, #14]
 8003852:	460b      	mov	r3, r1
 8003854:	81bb      	strh	r3, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef halStatus = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	75fb      	strb	r3, [r7, #23]

	halStatus = HAL_I2C_Mem_Read(i2c, DevAddr, memAddr, I2C_MEMADD_SIZE_16BIT, pData, Len, HAL_MAX_DELAY);
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <MB85rc_Bus_Read+0x44>)
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	89ba      	ldrh	r2, [r7, #12]
 8003864:	89f9      	ldrh	r1, [r7, #14]
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	9302      	str	r3, [sp, #8]
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2310      	movs	r3, #16
 8003876:	f004 ffe1 	bl	800883c <HAL_I2C_Mem_Read>
 800387a:	4603      	mov	r3, r0
 800387c:	75fb      	strb	r3, [r7, #23]

    return halStatus;
 800387e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000520 	.word	0x20000520

0800388c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af04      	add	r7, sp, #16
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
	osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8003898:	4b0f      	ldr	r3, [pc, #60]	@ (80038d8 <ssd1306_WriteCommand+0x4c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f04f 31ff 	mov.w	r1, #4294967295
 80038a0:	4618      	mov	r0, r3
 80038a2:	f008 ff2c 	bl	800c6fe <osMutexAcquire>
	uint8_t res = HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80038a6:	230a      	movs	r3, #10
 80038a8:	9302      	str	r3, [sp, #8]
 80038aa:	2301      	movs	r3, #1
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	1cfb      	adds	r3, r7, #3
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2301      	movs	r3, #1
 80038b4:	2200      	movs	r2, #0
 80038b6:	2178      	movs	r1, #120	@ 0x78
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f004 fec5 	bl	8008648 <HAL_I2C_Mem_Write>
 80038be:	4603      	mov	r3, r0
 80038c0:	73fb      	strb	r3, [r7, #15]
    osMutexRelease(I2C1MutexHandle);
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <ssd1306_WriteCommand+0x4c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f008 ff64 	bl	800c794 <osMutexRelease>
    return res;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	2000040c 	.word	0x2000040c

080038dc <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80038e4:	2064      	movs	r0, #100	@ 0x64
 80038e6:	f003 fb3f 	bl	8006f68 <HAL_Delay>
    int status = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80038ee:	21ae      	movs	r1, #174	@ 0xae
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ffcb 	bl	800388c <ssd1306_WriteCommand>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4413      	add	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8003900:	2120      	movs	r1, #32
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ffc2 	bl	800388c <ssd1306_WriteCommand>
 8003908:	4603      	mov	r3, r0
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003912:	2110      	movs	r1, #16
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ffb9 	bl	800388c <ssd1306_WriteCommand>
 800391a:	4603      	mov	r3, r0
 800391c:	461a      	mov	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8003924:	21b0      	movs	r1, #176	@ 0xb0
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ffb0 	bl	800388c <ssd1306_WriteCommand>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8003936:	21c8      	movs	r1, #200	@ 0xc8
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ffa7 	bl	800388c <ssd1306_WriteCommand>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8003948:	2100      	movs	r1, #0
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ff9e 	bl	800388c <ssd1306_WriteCommand>
 8003950:	4603      	mov	r3, r0
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800395a:	2110      	movs	r1, #16
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff95 	bl	800388c <ssd1306_WriteCommand>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 800396c:	2140      	movs	r1, #64	@ 0x40
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ff8c 	bl	800388c <ssd1306_WriteCommand>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800397e:	2181      	movs	r1, #129	@ 0x81
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff83 	bl	800388c <ssd1306_WriteCommand>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4413      	add	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8003990:	21ff      	movs	r1, #255	@ 0xff
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ff7a 	bl	800388c <ssd1306_WriteCommand>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80039a2:	21a1      	movs	r1, #161	@ 0xa1
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff71 	bl	800388c <ssd1306_WriteCommand>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80039b4:	21a6      	movs	r1, #166	@ 0xa6
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ff68 	bl	800388c <ssd1306_WriteCommand>
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80039c6:	21a8      	movs	r1, #168	@ 0xa8
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ff5f 	bl	800388c <ssd1306_WriteCommand>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4413      	add	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80039d8:	213f      	movs	r1, #63	@ 0x3f
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ff56 	bl	800388c <ssd1306_WriteCommand>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80039ea:	21a4      	movs	r1, #164	@ 0xa4
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff4d 	bl	800388c <ssd1306_WriteCommand>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80039fc:	21d3      	movs	r1, #211	@ 0xd3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff ff44 	bl	800388c <ssd1306_WriteCommand>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8003a0e:	2100      	movs	r1, #0
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff3b 	bl	800388c <ssd1306_WriteCommand>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8003a20:	21d5      	movs	r1, #213	@ 0xd5
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ff32 	bl	800388c <ssd1306_WriteCommand>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8003a32:	21f0      	movs	r1, #240	@ 0xf0
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff29 	bl	800388c <ssd1306_WriteCommand>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8003a44:	21d9      	movs	r1, #217	@ 0xd9
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff20 	bl	800388c <ssd1306_WriteCommand>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8003a56:	2122      	movs	r1, #34	@ 0x22
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff17 	bl	800388c <ssd1306_WriteCommand>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8003a68:	21da      	movs	r1, #218	@ 0xda
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff0e 	bl	800388c <ssd1306_WriteCommand>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8003a7a:	2112      	movs	r1, #18
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff05 	bl	800388c <ssd1306_WriteCommand>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8003a8c:	21db      	movs	r1, #219	@ 0xdb
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fefc 	bl	800388c <ssd1306_WriteCommand>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff fef3 	bl	800388c <ssd1306_WriteCommand>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8003ab0:	218d      	movs	r1, #141	@ 0x8d
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff feea 	bl	800388c <ssd1306_WriteCommand>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8003ac2:	2114      	movs	r1, #20
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fee1 	bl	800388c <ssd1306_WriteCommand>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8003ad4:	21af      	movs	r1, #175	@ 0xaf
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fed8 	bl	800388c <ssd1306_WriteCommand>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <ssd1306_Init+0x214>
        return 1;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e00f      	b.n	8003b10 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f000 f813 	bl	8003b1c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f834 	bl	8003b64 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003afc:	4b06      	ldr	r3, [pc, #24]	@ (8003b18 <ssd1306_Init+0x23c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003b02:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <ssd1306_Init+0x23c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003b08:	4b03      	ldr	r3, [pc, #12]	@ (8003b18 <ssd1306_Init+0x23c>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	715a      	strb	r2, [r3, #5]

    return 0;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000934 	.word	0x20000934

08003b1c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e00d      	b.n	8003b48 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <ssd1306_Fill+0x1a>
 8003b32:	2100      	movs	r1, #0
 8003b34:	e000      	b.n	8003b38 <ssd1306_Fill+0x1c>
 8003b36:	21ff      	movs	r1, #255	@ 0xff
 8003b38:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <ssd1306_Fill+0x44>)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	460a      	mov	r2, r1
 8003b40:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3301      	adds	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f5b3 6f82 	cmp.w	r3, #1040	@ 0x410
 8003b4e:	d3ed      	bcc.n	8003b2c <ssd1306_Fill+0x10>
    }
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000524 	.word	0x20000524

08003b64 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	e030      	b.n	8003bd4 <ssd1306_UpdateScreen+0x70>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	3b50      	subs	r3, #80	@ 0x50
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff fe86 	bl	800388c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8003b80:	2100      	movs	r1, #0
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fe82 	bl	800388c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8003b88:	2110      	movs	r1, #16
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fe7e 	bl	800388c <ssd1306_WriteCommand>

        osMutexAcquire(I2C1MutexHandle, osWaitForever);
 8003b90:	4b14      	ldr	r3, [pc, #80]	@ (8003be4 <ssd1306_UpdateScreen+0x80>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f04f 31ff 	mov.w	r1, #4294967295
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f008 fdb0 	bl	800c6fe <osMutexAcquire>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	019b      	lsls	r3, r3, #6
 8003ba4:	4413      	add	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b0f      	ldr	r3, [pc, #60]	@ (8003be8 <ssd1306_UpdateScreen+0x84>)
 8003bac:	4413      	add	r3, r2
 8003bae:	2264      	movs	r2, #100	@ 0x64
 8003bb0:	9202      	str	r2, [sp, #8]
 8003bb2:	2282      	movs	r2, #130	@ 0x82
 8003bb4:	9201      	str	r2, [sp, #4]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	2240      	movs	r2, #64	@ 0x40
 8003bbc:	2178      	movs	r1, #120	@ 0x78
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f004 fd42 	bl	8008648 <HAL_I2C_Mem_Write>
        osMutexRelease(I2C1MutexHandle);
 8003bc4:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <ssd1306_UpdateScreen+0x80>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f008 fde3 	bl	800c794 <osMutexRelease>
    for (i = 0; i < 8; i++) {
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b07      	cmp	r3, #7
 8003bd8:	d9cb      	bls.n	8003b72 <ssd1306_UpdateScreen+0xe>
    }
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	2000040c 	.word	0x2000040c
 8003be8:	20000524 	.word	0x20000524

08003bec <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8003bec:	b490      	push	{r4, r7}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	71fb      	strb	r3, [r7, #7]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	71bb      	strb	r3, [r7, #6]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	2b81      	cmp	r3, #129	@ 0x81
 8003c02:	d854      	bhi.n	8003cae <ssd1306_DrawPixel+0xc2>
 8003c04:	79bb      	ldrb	r3, [r7, #6]
 8003c06:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c08:	d851      	bhi.n	8003cae <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8003c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb8 <ssd1306_DrawPixel+0xcc>)
 8003c0c:	791b      	ldrb	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d006      	beq.n	8003c20 <ssd1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR)!color;
 8003c12:	797b      	ldrb	r3, [r7, #5]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8003c20:	797b      	ldrb	r3, [r7, #5]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d120      	bne.n	8003c68 <ssd1306_DrawPixel+0x7c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003c26:	79fa      	ldrb	r2, [r7, #7]
 8003c28:	79bb      	ldrb	r3, [r7, #6]
 8003c2a:	08db      	lsrs	r3, r3, #3
 8003c2c:	b2d8      	uxtb	r0, r3
 8003c2e:	4601      	mov	r1, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	019b      	lsls	r3, r3, #6
 8003c34:	440b      	add	r3, r1
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	4a20      	ldr	r2, [pc, #128]	@ (8003cbc <ssd1306_DrawPixel+0xd0>)
 8003c3c:	5cd3      	ldrb	r3, [r2, r3]
 8003c3e:	b25a      	sxtb	r2, r3
 8003c40:	79bb      	ldrb	r3, [r7, #6]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	b25b      	sxtb	r3, r3
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	b25c      	sxtb	r4, r3
 8003c52:	79fa      	ldrb	r2, [r7, #7]
 8003c54:	4601      	mov	r1, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	019b      	lsls	r3, r3, #6
 8003c5a:	440b      	add	r3, r1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4413      	add	r3, r2
 8003c60:	b2e1      	uxtb	r1, r4
 8003c62:	4a16      	ldr	r2, [pc, #88]	@ (8003cbc <ssd1306_DrawPixel+0xd0>)
 8003c64:	54d1      	strb	r1, [r2, r3]
 8003c66:	e023      	b.n	8003cb0 <ssd1306_DrawPixel+0xc4>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003c68:	79fa      	ldrb	r2, [r7, #7]
 8003c6a:	79bb      	ldrb	r3, [r7, #6]
 8003c6c:	08db      	lsrs	r3, r3, #3
 8003c6e:	b2d8      	uxtb	r0, r3
 8003c70:	4601      	mov	r1, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	440b      	add	r3, r1
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003cbc <ssd1306_DrawPixel+0xd0>)
 8003c7e:	5cd3      	ldrb	r3, [r2, r3]
 8003c80:	b25a      	sxtb	r2, r3
 8003c82:	79bb      	ldrb	r3, [r7, #6]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	4013      	ands	r3, r2
 8003c96:	b25c      	sxtb	r4, r3
 8003c98:	79fa      	ldrb	r2, [r7, #7]
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	019b      	lsls	r3, r3, #6
 8003ca0:	440b      	add	r3, r1
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b2e1      	uxtb	r1, r4
 8003ca8:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <ssd1306_DrawPixel+0xd0>)
 8003caa:	54d1      	strb	r1, [r2, r3]
 8003cac:	e000      	b.n	8003cb0 <ssd1306_DrawPixel+0xc4>
        return;
 8003cae:	bf00      	nop
    }
}
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc90      	pop	{r4, r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	20000934 	.word	0x20000934
 8003cbc:	20000524 	.word	0x20000524

08003cc0 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	1d38      	adds	r0, r7, #4
 8003cca:	e880 0006 	stmia.w	r0, {r1, r2}
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	73fb      	strb	r3, [r7, #15]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003cd8:	4b38      	ldr	r3, [pc, #224]	@ (8003dbc <ssd1306_WriteChar+0xfc>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	793b      	ldrb	r3, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	2b81      	cmp	r3, #129	@ 0x81
 8003ce4:	dc06      	bgt.n	8003cf4 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8003ce6:	4b35      	ldr	r3, [pc, #212]	@ (8003dbc <ssd1306_WriteChar+0xfc>)
 8003ce8:	885b      	ldrh	r3, [r3, #2]
 8003cea:	461a      	mov	r2, r3
 8003cec:	797b      	ldrb	r3, [r7, #5]
 8003cee:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003cf0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cf2:	dd01      	ble.n	8003cf8 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e05c      	b.n	8003db2 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	e04c      	b.n	8003d98 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	3b20      	subs	r3, #32
 8003d04:	7979      	ldrb	r1, [r7, #5]
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	440b      	add	r3, r1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	e034      	b.n	8003d88 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d012      	beq.n	8003d54 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003d2e:	4b23      	ldr	r3, [pc, #140]	@ (8003dbc <ssd1306_WriteChar+0xfc>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	b2d8      	uxtb	r0, r3
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dbc <ssd1306_WriteChar+0xfc>)
 8003d3e:	885b      	ldrh	r3, [r3, #2]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	7bba      	ldrb	r2, [r7, #14]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7ff ff4d 	bl	8003bec <ssd1306_DrawPixel>
 8003d52:	e016      	b.n	8003d82 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003d54:	4b19      	ldr	r3, [pc, #100]	@ (8003dbc <ssd1306_WriteChar+0xfc>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	b2d8      	uxtb	r0, r3
 8003d62:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <ssd1306_WriteChar+0xfc>)
 8003d64:	885b      	ldrh	r3, [r3, #2]
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	b2d9      	uxtb	r1, r3
 8003d70:	7bbb      	ldrb	r3, [r7, #14]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf0c      	ite	eq
 8003d76:	2301      	moveq	r3, #1
 8003d78:	2300      	movne	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f7ff ff35 	bl	8003bec <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	3301      	adds	r3, #1
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	793b      	ldrb	r3, [r7, #4]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d3c5      	bcc.n	8003d1e <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	797b      	ldrb	r3, [r7, #5]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d3ad      	bcc.n	8003cfe <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003da2:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <ssd1306_WriteChar+0xfc>)
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	793a      	ldrb	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <ssd1306_WriteChar+0xfc>)
 8003dae:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	@ 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd90      	pop	{r4, r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000934 	.word	0x20000934

08003dc0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	1d38      	adds	r0, r7, #4
 8003dca:	e880 0006 	stmia.w	r0, {r1, r2}
 8003dce:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8003dd0:	e012      	b.n	8003df8 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	7818      	ldrb	r0, [r3, #0]
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	1d3a      	adds	r2, r7, #4
 8003dda:	ca06      	ldmia	r2, {r1, r2}
 8003ddc:	f7ff ff70 	bl	8003cc0 <ssd1306_WriteChar>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d002      	beq.n	8003df2 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	e008      	b.n	8003e04 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3301      	adds	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
    while (*str)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e8      	bne.n	8003dd2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	781b      	ldrb	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	460a      	mov	r2, r1
 8003e16:	71fb      	strb	r3, [r7, #7]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	4b05      	ldr	r3, [pc, #20]	@ (8003e38 <ssd1306_SetCursor+0x2c>)
 8003e22:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003e24:	79bb      	ldrb	r3, [r7, #6]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	4b03      	ldr	r3, [pc, #12]	@ (8003e38 <ssd1306_SetCursor+0x2c>)
 8003e2a:	805a      	strh	r2, [r3, #2]
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	20000934 	.word	0x20000934

08003e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	4a11      	ldr	r2, [pc, #68]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e52:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e6e:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	210f      	movs	r1, #15
 8003e7e:	f06f 0001 	mvn.w	r0, #1
 8003e82:	f003 f94d 	bl	8007120 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	@ 0x28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	f107 0314 	add.w	r3, r7, #20
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a19      	ldr	r2, [pc, #100]	@ (8003f18 <HAL_I2C_MspInit+0x84>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d12b      	bne.n	8003f0e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <HAL_I2C_MspInit+0x88>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	4a17      	ldr	r2, [pc, #92]	@ (8003f1c <HAL_I2C_MspInit+0x88>)
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec6:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <HAL_I2C_MspInit+0x88>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ed2:	23c0      	movs	r3, #192	@ 0xc0
 8003ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ed6:	2312      	movs	r3, #18
 8003ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee6:	f107 0314 	add.w	r3, r7, #20
 8003eea:	4619      	mov	r1, r3
 8003eec:	480c      	ldr	r0, [pc, #48]	@ (8003f20 <HAL_I2C_MspInit+0x8c>)
 8003eee:	f003 fd4f 	bl	8007990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_I2C_MspInit+0x88>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	4a08      	ldr	r2, [pc, #32]	@ (8003f1c <HAL_I2C_MspInit+0x88>)
 8003efc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_I2C_MspInit+0x88>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003f0e:	bf00      	nop
 8003f10:	3728      	adds	r7, #40	@ 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40005400 	.word	0x40005400
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40020400 	.word	0x40020400

08003f24 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a15      	ldr	r2, [pc, #84]	@ (8003f88 <HAL_TIM_PWM_MspInit+0x64>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10e      	bne.n	8003f54 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <HAL_TIM_PWM_MspInit+0x68>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	4a13      	ldr	r2, [pc, #76]	@ (8003f8c <HAL_TIM_PWM_MspInit+0x68>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f46:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <HAL_TIM_PWM_MspInit+0x68>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003f52:	e012      	b.n	8003f7a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0d      	ldr	r2, [pc, #52]	@ (8003f90 <HAL_TIM_PWM_MspInit+0x6c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10d      	bne.n	8003f7a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <HAL_TIM_PWM_MspInit+0x68>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	4a09      	ldr	r2, [pc, #36]	@ (8003f8c <HAL_TIM_PWM_MspInit+0x68>)
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f6e:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <HAL_TIM_PWM_MspInit+0x68>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40000400 	.word	0x40000400

08003f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	@ 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9c:	f107 0314 	add.w	r3, r7, #20
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a24      	ldr	r2, [pc, #144]	@ (8004044 <HAL_TIM_MspPostInit+0xb0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d11f      	bne.n	8003ff6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	4b23      	ldr	r3, [pc, #140]	@ (8004048 <HAL_TIM_MspPostInit+0xb4>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	4a22      	ldr	r2, [pc, #136]	@ (8004048 <HAL_TIM_MspPostInit+0xb4>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_TIM_MspPostInit+0xb4>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_1A_PWM_Pin|Motor_1B_PWM_Pin|Motor_2A_PWM_Pin;
 8003fd2:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8003fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	4619      	mov	r1, r3
 8003fee:	4817      	ldr	r0, [pc, #92]	@ (800404c <HAL_TIM_MspPostInit+0xb8>)
 8003ff0:	f003 fcce 	bl	8007990 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ff4:	e022      	b.n	800403c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a15      	ldr	r2, [pc, #84]	@ (8004050 <HAL_TIM_MspPostInit+0xbc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d11d      	bne.n	800403c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <HAL_TIM_MspPostInit+0xb4>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004008:	4a0f      	ldr	r2, [pc, #60]	@ (8004048 <HAL_TIM_MspPostInit+0xb4>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004010:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <HAL_TIM_MspPostInit+0xb4>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_2B_PWM_Pin;
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004020:	2302      	movs	r3, #2
 8004022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004028:	2300      	movs	r3, #0
 800402a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800402c:	2302      	movs	r3, #2
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Motor_2B_PWM_GPIO_Port, &GPIO_InitStruct);
 8004030:	f107 0314 	add.w	r3, r7, #20
 8004034:	4619      	mov	r1, r3
 8004036:	4805      	ldr	r0, [pc, #20]	@ (800404c <HAL_TIM_MspPostInit+0xb8>)
 8004038:	f003 fcaa 	bl	8007990 <HAL_GPIO_Init>
}
 800403c:	bf00      	nop
 800403e:	3728      	adds	r7, #40	@ 0x28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40010000 	.word	0x40010000
 8004048:	40023800 	.word	0x40023800
 800404c:	40020000 	.word	0x40020000
 8004050:	40000400 	.word	0x40000400

08004054 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a3c      	ldr	r2, [pc, #240]	@ (8004164 <HAL_UART_MspInit+0x110>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d172      	bne.n	800415c <HAL_UART_MspInit+0x108>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <HAL_UART_MspInit+0x114>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	4a3a      	ldr	r2, [pc, #232]	@ (8004168 <HAL_UART_MspInit+0x114>)
 8004080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004084:	6413      	str	r3, [r2, #64]	@ 0x40
 8004086:	4b38      	ldr	r3, [pc, #224]	@ (8004168 <HAL_UART_MspInit+0x114>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	4b34      	ldr	r3, [pc, #208]	@ (8004168 <HAL_UART_MspInit+0x114>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	4a33      	ldr	r2, [pc, #204]	@ (8004168 <HAL_UART_MspInit+0x114>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a2:	4b31      	ldr	r3, [pc, #196]	@ (8004168 <HAL_UART_MspInit+0x114>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040ae:	2304      	movs	r3, #4
 80040b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b2:	2302      	movs	r3, #2
 80040b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ba:	2303      	movs	r3, #3
 80040bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040be:	2307      	movs	r3, #7
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c2:	f107 0314 	add.w	r3, r7, #20
 80040c6:	4619      	mov	r1, r3
 80040c8:	4828      	ldr	r0, [pc, #160]	@ (800416c <HAL_UART_MspInit+0x118>)
 80040ca:	f003 fc61 	bl	8007990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_RX_SBUS_RX_Pin;
 80040ce:	2308      	movs	r3, #8
 80040d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d2:	2302      	movs	r3, #2
 80040d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040d6:	2301      	movs	r3, #1
 80040d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040da:	2303      	movs	r3, #3
 80040dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040de:	2307      	movs	r3, #7
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USART2_RX_SBUS_RX_GPIO_Port, &GPIO_InitStruct);
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	4619      	mov	r1, r3
 80040e8:	4820      	ldr	r0, [pc, #128]	@ (800416c <HAL_UART_MspInit+0x118>)
 80040ea:	f003 fc51 	bl	8007990 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80040ee:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 80040f0:	4a20      	ldr	r2, [pc, #128]	@ (8004174 <HAL_UART_MspInit+0x120>)
 80040f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80040f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 80040f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80040fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004102:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004104:	2200      	movs	r2, #0
 8004106:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004108:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 800410a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800410e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004110:	4b17      	ldr	r3, [pc, #92]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004112:	2200      	movs	r2, #0
 8004114:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004116:	4b16      	ldr	r3, [pc, #88]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800411c:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 800411e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004122:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004124:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004126:	2200      	movs	r2, #0
 8004128:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800412a:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 800412c:	2200      	movs	r2, #0
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004130:	480f      	ldr	r0, [pc, #60]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004132:	f003 f81f 	bl	8007174 <HAL_DMA_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 800413c:	f7ff fb26 	bl	800378c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a0b      	ldr	r2, [pc, #44]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004144:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004146:	4a0a      	ldr	r2, [pc, #40]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800414c:	2200      	movs	r2, #0
 800414e:	2105      	movs	r1, #5
 8004150:	2026      	movs	r0, #38	@ 0x26
 8004152:	f002 ffe5 	bl	8007120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004156:	2026      	movs	r0, #38	@ 0x26
 8004158:	f002 fffe 	bl	8007158 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800415c:	bf00      	nop
 800415e:	3728      	adds	r7, #40	@ 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40004400 	.word	0x40004400
 8004168:	40023800 	.word	0x40023800
 800416c:	40020000 	.word	0x40020000
 8004170:	20000398 	.word	0x20000398
 8004174:	40026088 	.word	0x40026088

08004178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	@ 0x38
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	4b34      	ldr	r3, [pc, #208]	@ (8004260 <HAL_InitTick+0xe8>)
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	4a33      	ldr	r2, [pc, #204]	@ (8004260 <HAL_InitTick+0xe8>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6413      	str	r3, [r2, #64]	@ 0x40
 8004198:	4b31      	ldr	r3, [pc, #196]	@ (8004260 <HAL_InitTick+0xe8>)
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041a4:	f107 0210 	add.w	r2, r7, #16
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f006 f854 	bl	800a25c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80041b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80041be:	f006 f825 	bl	800a20c <HAL_RCC_GetPCLK1Freq>
 80041c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80041c4:	e004      	b.n	80041d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80041c6:	f006 f821 	bl	800a20c <HAL_RCC_GetPCLK1Freq>
 80041ca:	4603      	mov	r3, r0
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	4a24      	ldr	r2, [pc, #144]	@ (8004264 <HAL_InitTick+0xec>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	0c9b      	lsrs	r3, r3, #18
 80041da:	3b01      	subs	r3, #1
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80041de:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <HAL_InitTick+0xf0>)
 80041e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041e4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80041e6:	4b20      	ldr	r3, [pc, #128]	@ (8004268 <HAL_InitTick+0xf0>)
 80041e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041ec:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80041ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004268 <HAL_InitTick+0xf0>)
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80041f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004268 <HAL_InitTick+0xf0>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <HAL_InitTick+0xf0>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004200:	4b19      	ldr	r3, [pc, #100]	@ (8004268 <HAL_InitTick+0xf0>)
 8004202:	2200      	movs	r2, #0
 8004204:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004206:	4818      	ldr	r0, [pc, #96]	@ (8004268 <HAL_InitTick+0xf0>)
 8004208:	f006 f85a 	bl	800a2c0 <HAL_TIM_Base_Init>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004212:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11b      	bne.n	8004252 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800421a:	4813      	ldr	r0, [pc, #76]	@ (8004268 <HAL_InitTick+0xf0>)
 800421c:	f006 f8aa 	bl	800a374 <HAL_TIM_Base_Start_IT>
 8004220:	4603      	mov	r3, r0
 8004222:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004226:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800422a:	2b00      	cmp	r3, #0
 800422c:	d111      	bne.n	8004252 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800422e:	201c      	movs	r0, #28
 8004230:	f002 ff92 	bl	8007158 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b0f      	cmp	r3, #15
 8004238:	d808      	bhi.n	800424c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800423a:	2200      	movs	r2, #0
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	201c      	movs	r0, #28
 8004240:	f002 ff6e 	bl	8007120 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004244:	4a09      	ldr	r2, [pc, #36]	@ (800426c <HAL_InitTick+0xf4>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e002      	b.n	8004252 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004252:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004256:	4618      	mov	r0, r3
 8004258:	3738      	adds	r7, #56	@ 0x38
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	431bde83 	.word	0x431bde83
 8004268:	2000093c 	.word	0x2000093c
 800426c:	20000070 	.word	0x20000070

08004270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <NMI_Handler+0x4>

08004278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <HardFault_Handler+0x4>

08004280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <MemManage_Handler+0x4>

08004288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <BusFault_Handler+0x4>

08004290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <UsageFault_Handler+0x4>

08004298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_for_CLK___SNP00128_Pin);
 80042aa:	2010      	movs	r0, #16
 80042ac:	f003 fd40 	bl	8007d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80042b8:	4802      	ldr	r0, [pc, #8]	@ (80042c4 <DMA1_Stream5_IRQHandler+0x10>)
 80042ba:	f003 f8f3 	bl	80074a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000398 	.word	0x20000398

080042c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_for_SW___SNP00128_Pin);
 80042cc:	2040      	movs	r0, #64	@ 0x40
 80042ce:	f003 fd2f 	bl	8007d30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_for_BNO085_Pin);
 80042d2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80042d6:	f003 fd2b 	bl	8007d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042e4:	4802      	ldr	r0, [pc, #8]	@ (80042f0 <TIM2_IRQHandler+0x10>)
 80042e6:	f006 f9a7 	bl	800a638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000093c 	.word	0x2000093c

080042f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042f8:	4802      	ldr	r0, [pc, #8]	@ (8004304 <USART2_IRQHandler+0x10>)
 80042fa:	f006 ff9b 	bl	800b234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000350 	.word	0x20000350

08004308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return 1;
 800430c:	2301      	movs	r3, #1
}
 800430e:	4618      	mov	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <_kill>:

int _kill(int pid, int sig)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004322:	f00c f8ad 	bl	8010480 <__errno>
 8004326:	4603      	mov	r3, r0
 8004328:	2216      	movs	r2, #22
 800432a:	601a      	str	r2, [r3, #0]
  return -1;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <_exit>:

void _exit (int status)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004340:	f04f 31ff 	mov.w	r1, #4294967295
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ffe7 	bl	8004318 <_kill>
  while (1) {}    /* Make sure we hang here */
 800434a:	bf00      	nop
 800434c:	e7fd      	b.n	800434a <_exit+0x12>

0800434e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e00a      	b.n	8004376 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004360:	f3af 8000 	nop.w
 8004364:	4601      	mov	r1, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	60ba      	str	r2, [r7, #8]
 800436c:	b2ca      	uxtb	r2, r1
 800436e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3301      	adds	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	dbf0      	blt.n	8004360 <_read+0x12>
  }

  return len;
 800437e:	687b      	ldr	r3, [r7, #4]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e009      	b.n	80043ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	60ba      	str	r2, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3301      	adds	r3, #1
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	dbf1      	blt.n	800439a <_write+0x12>
  }
  return len;
 80043b6:	687b      	ldr	r3, [r7, #4]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_close>:

int _close(int file)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043e8:	605a      	str	r2, [r3, #4]
  return 0;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <_isatty>:

int _isatty(int file)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004400:	2301      	movs	r3, #1
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004430:	4a14      	ldr	r2, [pc, #80]	@ (8004484 <_sbrk+0x5c>)
 8004432:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <_sbrk+0x60>)
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <_sbrk+0x64>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <_sbrk+0x64>)
 8004446:	4a12      	ldr	r2, [pc, #72]	@ (8004490 <_sbrk+0x68>)
 8004448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <_sbrk+0x64>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d207      	bcs.n	8004468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004458:	f00c f812 	bl	8010480 <__errno>
 800445c:	4603      	mov	r3, r0
 800445e:	220c      	movs	r2, #12
 8004460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	e009      	b.n	800447c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004468:	4b08      	ldr	r3, [pc, #32]	@ (800448c <_sbrk+0x64>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800446e:	4b07      	ldr	r3, [pc, #28]	@ (800448c <_sbrk+0x64>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	4a05      	ldr	r2, [pc, #20]	@ (800448c <_sbrk+0x64>)
 8004478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20020000 	.word	0x20020000
 8004488:	00000400 	.word	0x00000400
 800448c:	20000984 	.word	0x20000984
 8004490:	20005f78 	.word	0x20005f78

08004494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <SystemInit+0x20>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449e:	4a05      	ldr	r2, [pc, #20]	@ (80044b4 <SystemInit+0x20>)
 80044a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <TB6612FNG_Init>:
    {GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1, &htim1, TIM_CHANNEL_4},
    // MOTOR_2B: PB14, PB15, TIM3_CH2 (PA7)
    {GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_15, &htim3, TIM_CHANNEL_2}
};

void TB6612FNG_Init(void) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
    for (int i = 0; i < MOTOR_COUNT; i++) {
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	e042      	b.n	800454a <TB6612FNG_Init+0x92>
        HAL_GPIO_WritePin(tb6612fng_channels[i].IN1_Port, tb6612fng_channels[i].IN1_Pin, GPIO_PIN_RESET);
 80044c4:	492a      	ldr	r1, [pc, #168]	@ (8004570 <TB6612FNG_Init+0xb8>)
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	440b      	add	r3, r1
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	4926      	ldr	r1, [pc, #152]	@ (8004570 <TB6612FNG_Init+0xb8>)
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	440b      	add	r3, r1
 80044e2:	3304      	adds	r3, #4
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	2200      	movs	r2, #0
 80044e8:	4619      	mov	r1, r3
 80044ea:	f003 fbed 	bl	8007cc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(tb6612fng_channels[i].IN2_Port, tb6612fng_channels[i].IN2_Pin, GPIO_PIN_RESET);
 80044ee:	4920      	ldr	r1, [pc, #128]	@ (8004570 <TB6612FNG_Init+0xb8>)
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	3308      	adds	r3, #8
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	491b      	ldr	r1, [pc, #108]	@ (8004570 <TB6612FNG_Init+0xb8>)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	440b      	add	r3, r1
 800450e:	330c      	adds	r3, #12
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	4619      	mov	r1, r3
 8004516:	f003 fbd7 	bl	8007cc8 <HAL_GPIO_WritePin>
        HAL_TIM_PWM_Start(tb6612fng_channels[i].PWM_Timer, tb6612fng_channels[i].PWM_Channel);
 800451a:	4915      	ldr	r1, [pc, #84]	@ (8004570 <TB6612FNG_Init+0xb8>)
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	440b      	add	r3, r1
 8004528:	3310      	adds	r3, #16
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	4910      	ldr	r1, [pc, #64]	@ (8004570 <TB6612FNG_Init+0xb8>)
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	440b      	add	r3, r1
 800453a:	3314      	adds	r3, #20
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4619      	mov	r1, r3
 8004540:	f005 ffca 	bl	800a4d8 <HAL_TIM_PWM_Start>
    for (int i = 0; i < MOTOR_COUNT; i++) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3301      	adds	r3, #1
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b03      	cmp	r3, #3
 800454e:	ddb9      	ble.n	80044c4 <TB6612FNG_Init+0xc>
    }
    // Set STBY pins high to enable drivers (if used)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // TB6612 #1 STBY
 8004550:	2201      	movs	r2, #1
 8004552:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004556:	4807      	ldr	r0, [pc, #28]	@ (8004574 <TB6612FNG_Init+0xbc>)
 8004558:	f003 fbb6 	bl	8007cc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // TB6612 #2 STBY
 800455c:	2201      	movs	r2, #1
 800455e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004562:	4804      	ldr	r0, [pc, #16]	@ (8004574 <TB6612FNG_Init+0xbc>)
 8004564:	f003 fbb0 	bl	8007cc8 <HAL_GPIO_WritePin>
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000010 	.word	0x20000010
 8004574:	40020400 	.word	0x40020400

08004578 <TB6612FNG_Set>:

void TB6612FNG_Set(TB6612FNG_Channel* ch, TB6612FNG_Dir dir, uint16_t speed) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
 8004584:	4613      	mov	r3, r2
 8004586:	803b      	strh	r3, [r7, #0]
    if (!ch) return;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d07c      	beq.n	8004688 <TB6612FNG_Set+0x110>
    // Get timer period
    uint32_t period = ch->PWM_Timer->Instance->ARR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	60fb      	str	r3, [r7, #12]
    if (speed > period) speed = period; // Clamp speed to period
 8004598:	883b      	ldrh	r3, [r7, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	429a      	cmp	r2, r3
 800459e:	d201      	bcs.n	80045a4 <TB6612FNG_Set+0x2c>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	803b      	strh	r3, [r7, #0]

    switch (dir) {
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d028      	beq.n	80045fc <TB6612FNG_Set+0x84>
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	dc37      	bgt.n	800461e <TB6612FNG_Set+0xa6>
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d002      	beq.n	80045b8 <TB6612FNG_Set+0x40>
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d011      	beq.n	80045da <TB6612FNG_Set+0x62>
 80045b6:	e032      	b.n	800461e <TB6612FNG_Set+0xa6>
        case TB6612FNG_FORWARD:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_SET);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	889b      	ldrh	r3, [r3, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	4619      	mov	r1, r3
 80045c4:	f003 fb80 	bl	8007cc8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_RESET);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6898      	ldr	r0, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	899b      	ldrh	r3, [r3, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	4619      	mov	r1, r3
 80045d4:	f003 fb78 	bl	8007cc8 <HAL_GPIO_WritePin>
            break;
 80045d8:	e032      	b.n	8004640 <TB6612FNG_Set+0xc8>
        case TB6612FNG_BACKWARD:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_RESET);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	889b      	ldrh	r3, [r3, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	4619      	mov	r1, r3
 80045e6:	f003 fb6f 	bl	8007cc8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_SET);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6898      	ldr	r0, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	899b      	ldrh	r3, [r3, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	4619      	mov	r1, r3
 80045f6:	f003 fb67 	bl	8007cc8 <HAL_GPIO_WritePin>
            break;
 80045fa:	e021      	b.n	8004640 <TB6612FNG_Set+0xc8>
        case TB6612FNG_BRAKE:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_SET);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	889b      	ldrh	r3, [r3, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	4619      	mov	r1, r3
 8004608:	f003 fb5e 	bl	8007cc8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_SET);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6898      	ldr	r0, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	899b      	ldrh	r3, [r3, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	4619      	mov	r1, r3
 8004618:	f003 fb56 	bl	8007cc8 <HAL_GPIO_WritePin>
            break;
 800461c:	e010      	b.n	8004640 <TB6612FNG_Set+0xc8>
        case TB6612FNG_STOP:
        default:
            HAL_GPIO_WritePin(ch->IN1_Port, ch->IN1_Pin, GPIO_PIN_RESET);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	889b      	ldrh	r3, [r3, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	4619      	mov	r1, r3
 800462a:	f003 fb4d 	bl	8007cc8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(ch->IN2_Port, ch->IN2_Pin, GPIO_PIN_RESET);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6898      	ldr	r0, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	899b      	ldrh	r3, [r3, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	4619      	mov	r1, r3
 800463a:	f003 fb45 	bl	8007cc8 <HAL_GPIO_WritePin>
            break;
 800463e:	bf00      	nop
    }
    __HAL_TIM_SET_COMPARE(ch->PWM_Timer, ch->PWM_Channel, speed);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <TB6612FNG_Set+0xdc>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	883a      	ldrh	r2, [r7, #0]
 8004650:	635a      	str	r2, [r3, #52]	@ 0x34
 8004652:	e01a      	b.n	800468a <TB6612FNG_Set+0x112>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	2b04      	cmp	r3, #4
 800465a:	d105      	bne.n	8004668 <TB6612FNG_Set+0xf0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	883b      	ldrh	r3, [r7, #0]
 8004664:	6393      	str	r3, [r2, #56]	@ 0x38
 8004666:	e010      	b.n	800468a <TB6612FNG_Set+0x112>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d105      	bne.n	800467c <TB6612FNG_Set+0x104>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	883b      	ldrh	r3, [r7, #0]
 8004678:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800467a:	e006      	b.n	800468a <TB6612FNG_Set+0x112>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	883b      	ldrh	r3, [r7, #0]
 8004684:	6413      	str	r3, [r2, #64]	@ 0x40
 8004686:	e000      	b.n	800468a <TB6612FNG_Set+0x112>
    if (!ch) return;
 8004688:	bf00      	nop
}
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <tb6612fng_drive>:


void tb6612fng_drive(TB6612FNG_Motor motor, TB6612FNG_Dir dir, uint16_t speed) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
 800469a:	460b      	mov	r3, r1
 800469c:	71bb      	strb	r3, [r7, #6]
 800469e:	4613      	mov	r3, r2
 80046a0:	80bb      	strh	r3, [r7, #4]
    if (motor < MOTOR_COUNT)
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d80b      	bhi.n	80046c0 <tb6612fng_drive+0x30>
        TB6612FNG_Set(&tb6612fng_channels[motor], dir, speed);
 80046a8:	79fa      	ldrb	r2, [r7, #7]
 80046aa:	4613      	mov	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	4a05      	ldr	r2, [pc, #20]	@ (80046c8 <tb6612fng_drive+0x38>)
 80046b4:	4413      	add	r3, r2
 80046b6:	88ba      	ldrh	r2, [r7, #4]
 80046b8:	79b9      	ldrb	r1, [r7, #6]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff ff5c 	bl	8004578 <TB6612FNG_Set>
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000010 	.word	0x20000010

080046cc <tb6612fng_stop>:

void tb6612fng_stop(TB6612FNG_Motor motor) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
    if (motor < MOTOR_COUNT)
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d80b      	bhi.n	80046f4 <tb6612fng_stop+0x28>
        TB6612FNG_Set(&tb6612fng_channels[motor], TB6612FNG_STOP, 0);
 80046dc:	79fa      	ldrb	r2, [r7, #7]
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4a05      	ldr	r2, [pc, #20]	@ (80046fc <tb6612fng_stop+0x30>)
 80046e8:	4413      	add	r3, r2
 80046ea:	2200      	movs	r2, #0
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff ff42 	bl	8004578 <TB6612FNG_Set>
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000010 	.word	0x20000010

08004700 <tb6612fng_brake>:

void tb6612fng_brake(TB6612FNG_Motor motor) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
    if (motor < MOTOR_COUNT)
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d80b      	bhi.n	8004728 <tb6612fng_brake+0x28>
        TB6612FNG_Set(&tb6612fng_channels[motor], TB6612FNG_BRAKE, 0);
 8004710:	79fa      	ldrb	r2, [r7, #7]
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4a05      	ldr	r2, [pc, #20]	@ (8004730 <tb6612fng_brake+0x30>)
 800471c:	4413      	add	r3, r2
 800471e:	2200      	movs	r2, #0
 8004720:	2103      	movs	r1, #3
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff28 	bl	8004578 <TB6612FNG_Set>
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000010 	.word	0x20000010

08004734 <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <opStart+0x18>
 8004746:	f06f 0302 	mvn.w	r3, #2
 800474a:	e014      	b.n	8004776 <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
 8004760:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	61da      	str	r2, [r3, #28]
    }

    return rc;
 8004774:	68fb      	ldr	r3, [r7, #12]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	4613      	mov	r3, r2
 800478a:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	4798      	blx	r3
    }
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00f      	beq.n	8004808 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 80047fc:	e004      	b.n	8004808 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 80047fe:	f04f 31ff 	mov.w	r1, #4294967295
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff ffd6 	bl	80047b4 <opCompleted>
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e00f      	b.n	8004840 <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 8004820:	4a0c      	ldr	r2, [pc, #48]	@ (8004854 <getReportLen+0x44>)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004828:	79fa      	ldrb	r2, [r7, #7]
 800482a:	429a      	cmp	r2, r3
 800482c:	d105      	bne.n	800483a <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 800482e:	4a09      	ldr	r2, [pc, #36]	@ (8004854 <getReportLen+0x44>)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4413      	add	r3, r2
 8004836:	785b      	ldrb	r3, [r3, #1]
 8004838:	e006      	b.n	8004848 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3301      	adds	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b2f      	cmp	r3, #47	@ 0x2f
 8004844:	d9ec      	bls.n	8004820 <getReportLen+0x10>
        }
    }

    return 0;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	08013454 	.word	0x08013454

08004858 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	@ 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint32_t count = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 8094 	bne.w	80049a8 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        return;
 800488e:	e090      	b.n	80049b2 <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	3301      	adds	r3, #1
 8004894:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 8004896:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff ffb4 	bl	8004810 <getReportLen>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 80048ac:	7dbb      	ldrb	r3, [r7, #22]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
            return;
 80048c0:	e077      	b.n	80049b2 <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	2bf1      	cmp	r3, #241	@ 0xf1
 80048c6:	d107      	bne.n	80048d8 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 80048c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4413      	add	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	789b      	ldrb	r3, [r3, #2]
 80048d4:	2b84      	cmp	r3, #132	@ 0x84
 80048d6:	e059      	b.n	800498c <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	2bfc      	cmp	r3, #252	@ 0xfc
 80048dc:	d156      	bne.n	800498c <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d052      	beq.n	800498c <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 80048e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	4413      	add	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 80048ee:	4b32      	ldr	r3, [pc, #200]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 80048f0:	2202      	movs	r2, #2
 80048f2:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	785a      	ldrb	r2, [r3, #1]
 80048f8:	4b2f      	ldr	r3, [pc, #188]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 80048fa:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	789b      	ldrb	r3, [r3, #2]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 800490e:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 8004910:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	789b      	ldrb	r3, [r3, #2]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8004924:	4b24      	ldr	r3, [pc, #144]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 8004926:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	789b      	ldrb	r3, [r3, #2]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 800493a:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 800493c:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	789b      	ldrb	r3, [r3, #2]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 8004950:	4b19      	ldr	r3, [pc, #100]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 8004952:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800495a:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 800495c:	4b16      	ldr	r3, [pc, #88]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 800495e:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 8004966:	4a14      	ldr	r2, [pc, #80]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 8004968:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 8004970:	4a11      	ldr	r2, [pc, #68]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 8004972:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 800497a:	4a0f      	ldr	r2, [pc, #60]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 800497c:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004986:	490c      	ldr	r1, [pc, #48]	@ (80049b8 <sensorhubControlHdlr+0x160>)
 8004988:	4610      	mov	r0, r2
 800498a:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 800498c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	4413      	add	r3, r2
 8004992:	7dba      	ldrb	r2, [r7, #22]
 8004994:	b292      	uxth	r2, r2
 8004996:	4619      	mov	r1, r3
 8004998:	69f8      	ldr	r0, [r7, #28]
 800499a:	f7ff fef0 	bl	800477e <opRx>
            cursor += reportLen;
 800499e:	7dbb      	ldrb	r3, [r7, #22]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049a4:	4413      	add	r3, r2
 80049a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (cursor < len) {
 80049a8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	f4ff af6f 	bcc.w	8004890 <sensorhubControlHdlr+0x38>
        }
    }
}
 80049b2:	3728      	adds	r7, #40	@ 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000b00 	.word	0x20000b00

080049bc <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	4610      	mov	r0, r2
 80049da:	4798      	blx	r3
 80049dc:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fea7 	bl	8004734 <opStart>
 80049e6:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <opProcess+0x36>
        return status;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	e034      	b.n	8004a5c <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 80049f6:	e015      	b.n	8004a24 <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f04f 32ff 	mov.w	r2, #4294967295
 8004a06:	621a      	str	r2, [r3, #32]
            break;
 8004a08:	e01b      	b.n	8004a42 <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f002 fa17 	bl	8006e42 <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4798      	blx	r3
 8004a22:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0e1      	beq.n	80049f8 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d3da      	bcc.n	80049f8 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d006      	beq.n	8004a58 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f06f 0205 	mvn.w	r2, #5
 8004a56:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 8004a64:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004a68:	b087      	sub	sp, #28
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	4613      	mov	r3, r2
 8004a72:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 8004a74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <touSTimestamp+0x80>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d204      	bcs.n	8004a88 <touSTimestamp+0x24>
        rollovers++;
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae8 <touSTimestamp+0x84>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	4a18      	ldr	r2, [pc, #96]	@ (8004ae8 <touSTimestamp+0x84>)
 8004a86:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 8004a88:	4a16      	ldr	r2, [pc, #88]	@ (8004ae4 <touSTimestamp+0x80>)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 8004a8e:	4b16      	ldr	r3, [pc, #88]	@ (8004ae8 <touSTimestamp+0x84>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	469a      	mov	sl, r3
 8004a96:	4693      	mov	fp, r2
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	4653      	mov	r3, sl
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	2264      	movs	r2, #100	@ 0x64
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	461c      	mov	r4, r3
 8004abe:	4615      	mov	r5, r2
 8004ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ac4:	eb12 0804 	adds.w	r8, r2, r4
 8004ac8:	eb43 0905 	adc.w	r9, r3, r5
 8004acc:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8004ad0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000b1c 	.word	0x20000b1c
 8004ae8:	20000b20 	.word	0x20000b20

08004aec <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004aec:	b5b0      	push	{r4, r5, r7, lr}
 8004aee:	b0a0      	sub	sp, #128	@ 0x80
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

    int32_t referenceDelta = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (cursor < len) {
 8004b06:	e098      	b.n	8004c3a <sensorhubInputHdlr+0x14e>
        // Get next report id
        uint8_t reportId = payload[cursor];
 8004b08:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4413      	add	r3, r2
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8004b16:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fe78 	bl	8004810 <getReportLen>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        if (reportLen == 0) {
 8004b26:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d107      	bne.n	8004b3e <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8004b3c:	e083      	b.n	8004c46 <sensorhubInputHdlr+0x15a>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 8004b3e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004b42:	2bfb      	cmp	r3, #251	@ 0xfb
 8004b44:	d10a      	bne.n	8004b5c <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8004b46:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	667b      	str	r3, [r7, #100]	@ 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 8004b50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b52:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004b56:	425b      	negs	r3, r3
 8004b58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b5a:	e066      	b.n	8004c2a <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 8004b5c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004b60:	2bfa      	cmp	r3, #250	@ 0xfa
 8004b62:	d10b      	bne.n	8004b7c <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 8004b64:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	66bb      	str	r3, [r7, #104]	@ 0x68

                referenceDelta += rpt->timebase;
 8004b6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b70:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004b74:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004b76:	4413      	add	r3, r2
 8004b78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b7a:	e056      	b.n	8004c2a <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 8004b7c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004b80:	2bef      	cmp	r3, #239	@ 0xef
 8004b82:	d10b      	bne.n	8004b9c <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 8004b84:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8004b90:	b292      	uxth	r2, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff fdf2 	bl	800477e <opRx>
 8004b9a:	e046      	b.n	8004c2a <sensorhubInputHdlr+0x13e>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 8004b9c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	673b      	str	r3, [r7, #112]	@ 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 8004ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ba8:	3302      	adds	r3, #2
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	019b      	lsls	r3, r3, #6
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004bb8:	3203      	adds	r2, #3
 8004bba:	7812      	ldrb	r2, [r2, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8004bc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004bca:	6838      	ldr	r0, [r7, #0]
 8004bcc:	f7ff ff4a 	bl	8004a64 <touSTimestamp>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8004bd8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8004bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bde:	4413      	add	r3, r2
 8004be0:	2264      	movs	r2, #100	@ 0x64
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	17da      	asrs	r2, r3, #31
 8004be8:	461c      	mov	r4, r3
 8004bea:	4615      	mov	r5, r2
 8004bec:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8004bf0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004bf4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                memcpy(event.report, pReport, reportLen);
 8004bf8:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8004bfc:	f107 0310 	add.w	r3, r7, #16
 8004c00:	3312      	adds	r3, #18
 8004c02:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8004c04:	4618      	mov	r0, r3
 8004c06:	f00b fc68 	bl	80104da <memcpy>
                event.len = reportLen;
 8004c0a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004c0e:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <sensorhubInputHdlr+0x13e>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004c22:	f107 0110 	add.w	r1, r7, #16
 8004c26:	4610      	mov	r0, r2
 8004c28:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 8004c2a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004c34:	4413      	add	r3, r2
 8004c36:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    while (cursor < len) {
 8004c3a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	f4ff af61 	bcc.w	8004b08 <sensorhubInputHdlr+0x1c>
        }
    }
}
 8004c46:	3780      	adds	r7, #128	@ 0x80
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bdb0      	pop	{r4, r5, r7, pc}

08004c4c <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	6978      	ldr	r0, [r7, #20]
 8004c68:	f7ff ff40 	bl	8004aec <sensorhubInputHdlr>
}
 8004c6c:	bf00      	nop
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8004c88:	88fa      	ldrh	r2, [r7, #6]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	6978      	ldr	r0, [r7, #20]
 8004c90:	f7ff ff2c 	bl	8004aec <sensorhubInputHdlr>
}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004c9c:	b5b0      	push	{r4, r5, r7, lr}
 8004c9e:	b09c      	sub	sp, #112	@ 0x70
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	66bb      	str	r3, [r7, #104]	@ 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 8004cb6:	232a      	movs	r3, #42	@ 0x2a
 8004cb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    uint8_t reportLen = getReportLen(reportId);
 8004cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fda5 	bl	8004810 <getReportLen>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    while (cursor < len) {
 8004ccc:	e02d      	b.n	8004d2a <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	461c      	mov	r4, r3
 8004cd4:	4615      	mov	r5, r2
 8004cd6:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8004cda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004cde:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        memcpy(event.report, payload+cursor, reportLen);
 8004ce2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	18d1      	adds	r1, r2, r3
 8004cea:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004cee:	f107 0310 	add.w	r3, r7, #16
 8004cf2:	3312      	adds	r3, #18
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f00b fbf0 	bl	80104da <memcpy>
        event.len = reportLen;
 8004cfa:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004cfe:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 8004d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8004d0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d10:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d12:	f107 0110 	add.w	r1, r7, #16
 8004d16:	4610      	mov	r0, r2
 8004d18:	4798      	blx	r3
        }

        cursor += reportLen;
 8004d1a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d24:	4413      	add	r3, r2
 8004d26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    while (cursor < len) {
 8004d2a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d3cc      	bcc.n	8004cce <sensorhubInputGyroRvHdlr+0x32>
    }
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	3770      	adds	r7, #112	@ 0x70
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d40 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d007      	beq.n	8004d6a <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        return;
 8004d68:	e021      	b.n	8004dae <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d114      	bne.n	8004d9c <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2201      	movs	r2, #1
 8004d76:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f7ff fd2d 	bl	80047d8 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <executableDeviceHdlr+0x74>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00f      	beq.n	8004dac <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d94:	4907      	ldr	r1, [pc, #28]	@ (8004db4 <executableDeviceHdlr+0x74>)
 8004d96:	4610      	mov	r0, r2
 8004d98:	4798      	blx	r3
            }
            break;
 8004d9a:	e007      	b.n	8004dac <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            break;
 8004daa:	e000      	b.n	8004dae <executableDeviceHdlr+0x6e>
            break;
 8004dac:	bf00      	nop
    }
}
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000b00 	.word	0x20000b00

08004db8 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6858      	ldr	r0, [r3, #4]
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	2102      	movs	r1, #2
 8004dd0:	f002 f806 	bl	8006de0 <shtp_send>
 8004dd4:	4603      	mov	r3, r0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b08a      	sub	sp, #40	@ 0x28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <setSensorConfigStart+0x28>
 8004dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dfe:	f043 0302 	orr.w	r3, r3, #2
 8004e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <setSensorConfigStart+0x3c>
 8004e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	789b      	ldrb	r3, [r3, #2]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <setSensorConfigStart+0x50>
 8004e22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e26:	f043 0304 	orr.w	r3, r3, #4
 8004e2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <setSensorConfigStart+0x64>
 8004e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e3a:	f043 0308 	orr.w	r3, r3, #8
 8004e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	791b      	ldrb	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <setSensorConfigStart+0x78>
 8004e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e4e:	f043 0310 	orr.w	r3, r3, #16
 8004e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    memset(&req, 0, sizeof(req));
 8004e56:	f107 0308 	add.w	r3, r7, #8
 8004e5a:	2211      	movs	r2, #17
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f00b fa4b 	bl	80102fa <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 8004e64:	23fd      	movs	r3, #253	@ 0xfd
 8004e66:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e6e:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 8004e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e74:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	88db      	ldrh	r3, [r3, #6]
 8004e7a:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	2211      	movs	r2, #17
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff ff8a 	bl	8004db8 <sendCtrl>
 8004ea4:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 8004ea6:	69f9      	ldr	r1, [r7, #28]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff fc83 	bl	80047b4 <opCompleted>

    return rc;
 8004eae:	69fb      	ldr	r3, [r7, #28]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3728      	adds	r7, #40	@ 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <sendCmd>:

// ------------------------------------------------------------------------
// Support for sending commands

static int sendCmd(sh2_t *pSh2, uint8_t cmd, uint8_t p[COMMAND_PARAMS])
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	@ 0x28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	72fb      	strb	r3, [r7, #11]
    int rc = SH2_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	623b      	str	r3, [r7, #32]
    CommandReq_t req;

    // Clear request structure
    memset(&req, 0, sizeof(req));
 8004eca:	f107 0314 	add.w	r3, r7, #20
 8004ece:	220c      	movs	r2, #12
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f00b fa11 	bl	80102fa <memset>
    
    // Create a command sequence number for this command
    pSh2->lastCmdId = cmd;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	7afa      	ldrb	r2, [r7, #11]
 8004edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    pSh2->cmdSeq = pSh2->nextCmdSeq++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	b2d1      	uxtb	r1, r2
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	f882 1036 	strb.w	r1, [r2, #54]	@ 0x36
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
    
    // set up request to issue
    req.reportId = SENSORHUB_COMMAND_REQ;
 8004ef6:	23f2      	movs	r3, #242	@ 0xf2
 8004ef8:	753b      	strb	r3, [r7, #20]
    req.seq = pSh2->cmdSeq;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f00:	757b      	strb	r3, [r7, #21]
    req.command = cmd;
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	75bb      	strb	r3, [r7, #22]
    for (int n = 0; n < COMMAND_PARAMS; n++) {
 8004f06:	2300      	movs	r3, #0
 8004f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f0a:	e00c      	b.n	8004f26 <sendCmd+0x6e>
        req.p[n] = p[n];
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4413      	add	r3, r2
 8004f12:	7819      	ldrb	r1, [r3, #0]
 8004f14:	f107 0217 	add.w	r2, r7, #23
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	4413      	add	r3, r2
 8004f1c:	460a      	mov	r2, r1
 8004f1e:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < COMMAND_PARAMS; n++) {
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	3301      	adds	r3, #1
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	ddef      	ble.n	8004f0c <sendCmd+0x54>
    }
    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8004f2c:	f107 0314 	add.w	r3, r7, #20
 8004f30:	220c      	movs	r2, #12
 8004f32:	4619      	mov	r1, r3
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff ff3f 	bl	8004db8 <sendCtrl>
 8004f3a:	6238      	str	r0, [r7, #32]
    
    return rc;
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3728      	adds	r7, #40	@ 0x28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <sendCmdStart>:

// ------------------------------------------------------------------------
// Generic Send Command

static int sendCmdStart(sh2_t *pSh2)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
    int status = sendCmd(pSh2, pSh2->opData.sendCmd.req.command,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
                     pSh2->opData.sendCmd.req.p);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3327      	adds	r3, #39	@ 0x27
    int status = sendCmd(pSh2, pSh2->opData.sendCmd.req.command,
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ffac 	bl	8004eb8 <sendCmd>
 8004f60:	60f8      	str	r0, [r7, #12]

    opCompleted(pSh2, status);
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff fc25 	bl	80047b4 <opCompleted>

    return status;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 8004f80:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb0 <shtpEventCallback+0x3c>)
 8004f82:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8004f84:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb4 <shtpEventCallback+0x40>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb4 <shtpEventCallback+0x40>)
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d006      	beq.n	8004fa6 <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fa0:	4904      	ldr	r1, [pc, #16]	@ (8004fb4 <shtpEventCallback+0x40>)
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4798      	blx	r3
    }
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000988 	.word	0x20000988
 8004fb4:	20000b00 	.word	0x20000b00

08004fb8 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 8004fc4:	4b41      	ldr	r3, [pc, #260]	@ (80050cc <sh2_open+0x114>)
 8004fc6:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <sh2_open+0x1c>
 8004fce:	f06f 0301 	mvn.w	r3, #1
 8004fd2:	e077      	b.n	80050c4 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8004fd4:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8004fd8:	2100      	movs	r1, #0
 8004fda:	69b8      	ldr	r0, [r7, #24]
 8004fdc:	f00b f98d 	bl	80102fa <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	639a      	str	r2, [r3, #56]	@ 0x38
    pSh2->eventCookie = eventCookie;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pSh2->sensorCallback = 0;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = 0;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2200      	movs	r2, #0
 8005002:	645a      	str	r2, [r3, #68]	@ 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f001 fe71 	bl	8006cf0 <shtp_open>
 800500e:	4602      	mov	r2, r0
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
 8005020:	e050      	b.n	80050c4 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4929      	ldr	r1, [pc, #164]	@ (80050d0 <sh2_open+0x118>)
 800502a:	4618      	mov	r0, r3
 800502c:	f001 fe94 	bl	8006d58 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	6858      	ldr	r0, [r3, #4]
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	4a27      	ldr	r2, [pc, #156]	@ (80050d4 <sh2_open+0x11c>)
 8005038:	2102      	movs	r1, #2
 800503a:	f001 fea1 	bl	8006d80 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	6858      	ldr	r0, [r3, #4]
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	4a24      	ldr	r2, [pc, #144]	@ (80050d8 <sh2_open+0x120>)
 8005046:	2103      	movs	r1, #3
 8005048:	f001 fe9a 	bl	8006d80 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	6858      	ldr	r0, [r3, #4]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	4a22      	ldr	r2, [pc, #136]	@ (80050dc <sh2_open+0x124>)
 8005054:	2104      	movs	r1, #4
 8005056:	f001 fe93 	bl	8006d80 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	6858      	ldr	r0, [r3, #4]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	4a1f      	ldr	r2, [pc, #124]	@ (80050e0 <sh2_open+0x128>)
 8005062:	2105      	movs	r1, #5
 8005064:	f001 fe8c 	bl	8006d80 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	6858      	ldr	r0, [r3, #4]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	4a1d      	ldr	r2, [pc, #116]	@ (80050e4 <sh2_open+0x12c>)
 8005070:	2101      	movs	r1, #1
 8005072:	f001 fe85 	bl	8006d80 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
 8005084:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 800508a:	e00c      	b.n	80050a6 <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4618      	mov	r0, r3
 8005092:	f001 fed6 	bl	8006e42 <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	4610      	mov	r0, r2
 80050a2:	4798      	blx	r3
 80050a4:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	4a0e      	ldr	r2, [pc, #56]	@ (80050e8 <sh2_open+0x130>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d807      	bhi.n	80050c2 <sh2_open+0x10a>
           (!pSh2->resetComplete))
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	7a1b      	ldrb	r3, [r3, #8]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f083 0301 	eor.w	r3, r3, #1
 80050bc:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e4      	bne.n	800508c <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000988 	.word	0x20000988
 80050d0:	08004f75 	.word	0x08004f75
 80050d4:	08004859 	.word	0x08004859
 80050d8:	08004c4d 	.word	0x08004c4d
 80050dc:	08004c75 	.word	0x08004c75
 80050e0:	08004c9d 	.word	0x08004c9d
 80050e4:	08004d41 	.word	0x08004d41
 80050e8:	00030d3f 	.word	0x00030d3f

080050ec <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 80050f2:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <sh2_service+0x24>)
 80050f4:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4618      	mov	r0, r3
 8005104:	f001 fe9d 	bl	8006e42 <shtp_service>
    }
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000988 	.word	0x20000988

08005114 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 800511e:	4b07      	ldr	r3, [pc, #28]	@ (800513c <sh2_setSensorCallback+0x28>)
 8005120:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = cookie;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44

    return SH2_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	20000988 	.word	0x20000988

08005140 <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	6039      	str	r1, [r7, #0]
 800514a:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 800514c:	4b0f      	ldr	r3, [pc, #60]	@ (800518c <sh2_setSensorConfig+0x4c>)
 800514e:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	e012      	b.n	8005184 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3324      	adds	r3, #36	@ 0x24
 8005162:	2210      	movs	r2, #16
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f00b f8c7 	bl	80102fa <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	79fa      	ldrb	r2, [r7, #7]
 8005170:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	625a      	str	r2, [r3, #36]	@ 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 800517a:	4905      	ldr	r1, [pc, #20]	@ (8005190 <sh2_setSensorConfig+0x50>)
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff fc1d 	bl	80049bc <opProcess>
 8005182:	4603      	mov	r3, r0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000988 	.word	0x20000988
 8005190:	080134b4 	.word	0x080134b4

08005194 <sh2_clearTare>:
 * @brief Clears the previously applied tare operation.
 *
 * @return SH2_OK \n");
 */
int sh2_clearTare(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 800519a:	4b10      	ldr	r3, [pc, #64]	@ (80051dc <sh2_clearTare+0x48>)
 800519c:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp == 0) {
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <sh2_clearTare+0x18>
        return SH2_ERR;  // sh2 API isn't open
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295
 80051aa:	e013      	b.n	80051d4 <sh2_clearTare+0x40>
    }

    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3324      	adds	r3, #36	@ 0x24
 80051b0:	2210      	movs	r2, #16
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f00b f8a0 	bl	80102fa <memset>
    
    
    pSh2->opData.sendCmd.req.command = SH2_CMD_TARE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2203      	movs	r2, #3
 80051be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pSh2->opData.sendCmd.req.p[0] = SH2_TARE_SET_REORIENTATION;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

    return opProcess(pSh2, &sendCmdOp);
 80051ca:	4905      	ldr	r1, [pc, #20]	@ (80051e0 <sh2_clearTare+0x4c>)
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fbf5 	bl	80049bc <opProcess>
 80051d2:	4603      	mov	r3, r0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000988 	.word	0x20000988
 80051e0:	080134c4 	.word	0x080134c4

080051e4 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	7c5a      	ldrb	r2, [r3, #17]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b2a      	cmp	r3, #42	@ 0x2a
 800520c:	d00b      	beq.n	8005226 <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	7cda      	ldrb	r2, [r3, #19]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	7d1b      	ldrb	r3, [r3, #20]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	b2da      	uxtb	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	709a      	strb	r2, [r3, #2]
 8005224:	e005      	b.n	8005232 <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	3b01      	subs	r3, #1
 8005238:	2b2d      	cmp	r3, #45	@ 0x2d
 800523a:	f200 8155 	bhi.w	80054e8 <sh2_decodeSensorEvent+0x304>
 800523e:	a201      	add	r2, pc, #4	@ (adr r2, 8005244 <sh2_decodeSensorEvent+0x60>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005309 	.word	0x08005309
 8005248:	08005339 	.word	0x08005339
 800524c:	0800535d 	.word	0x0800535d
 8005250:	08005315 	.word	0x08005315
 8005254:	08005375 	.word	0x08005375
 8005258:	08005321 	.word	0x08005321
 800525c:	08005345 	.word	0x08005345
 8005260:	08005381 	.word	0x08005381
 8005264:	0800538d 	.word	0x0800538d
 8005268:	08005399 	.word	0x08005399
 800526c:	080053a5 	.word	0x080053a5
 8005270:	080053b1 	.word	0x080053b1
 8005274:	080053bd 	.word	0x080053bd
 8005278:	080053c9 	.word	0x080053c9
 800527c:	08005369 	.word	0x08005369
 8005280:	080053e1 	.word	0x080053e1
 8005284:	080053f9 	.word	0x080053f9
 8005288:	08005405 	.word	0x08005405
 800528c:	08005411 	.word	0x08005411
 8005290:	080052fd 	.word	0x080052fd
 8005294:	0800532d 	.word	0x0800532d
 8005298:	08005351 	.word	0x08005351
 800529c:	080053d5 	.word	0x080053d5
 80052a0:	080053ed 	.word	0x080053ed
 80052a4:	0800541d 	.word	0x0800541d
 80052a8:	08005429 	.word	0x08005429
 80052ac:	08005435 	.word	0x08005435
 80052b0:	08005441 	.word	0x08005441
 80052b4:	080054e9 	.word	0x080054e9
 80052b8:	0800544d 	.word	0x0800544d
 80052bc:	08005459 	.word	0x08005459
 80052c0:	08005465 	.word	0x08005465
 80052c4:	08005471 	.word	0x08005471
 80052c8:	0800547d 	.word	0x0800547d
 80052cc:	08005489 	.word	0x08005489
 80052d0:	080054e9 	.word	0x080054e9
 80052d4:	080054e9 	.word	0x080054e9
 80052d8:	080054e9 	.word	0x080054e9
 80052dc:	080054e9 	.word	0x080054e9
 80052e0:	08005495 	.word	0x08005495
 80052e4:	080054a1 	.word	0x080054a1
 80052e8:	080054ad 	.word	0x080054ad
 80052ec:	080054b9 	.word	0x080054b9
 80052f0:	080054c5 	.word	0x080054c5
 80052f4:	080054d1 	.word	0x080054d1
 80052f8:	080054dd 	.word	0x080054dd
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 80052fc:	6839      	ldr	r1, [r7, #0]
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8fc 	bl	80054fc <decodeRawAccelerometer>
 8005304:	60f8      	str	r0, [r7, #12]
            break;
 8005306:	e0f3      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f924 	bl	8005558 <decodeAccelerometer>
 8005310:	60f8      	str	r0, [r7, #12]
            break;
 8005312:	e0ed      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f95e 	bl	80055d8 <decodeLinearAcceleration>
 800531c:	60f8      	str	r0, [r7, #12]
            break;
 800531e:	e0e7      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f998 	bl	8005658 <decodeGravity>
 8005328:	60f8      	str	r0, [r7, #12]
            break;
 800532a:	e0e1      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9d2 	bl	80056d8 <decodeRawGyroscope>
 8005334:	60f8      	str	r0, [r7, #12]
            break;
 8005336:	e0db      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa04 	bl	8005748 <decodeGyroscopeCalibrated>
 8005340:	60f8      	str	r0, [r7, #12]
            break;
 8005342:	e0d5      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa3e 	bl	80057c8 <decodeGyroscopeUncal>
 800534c:	60f8      	str	r0, [r7, #12]
            break;
 800534e:	e0cf      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 faaa 	bl	80058ac <decodeRawMagnetometer>
 8005358:	60f8      	str	r0, [r7, #12]
            break;
 800535a:	e0c9      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fad2 	bl	8005908 <decodeMagneticFieldCalibrated>
 8005364:	60f8      	str	r0, [r7, #12]
            break;
 8005366:	e0c3      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fb0c 	bl	8005988 <decodeMagneticFieldUncal>
 8005370:	60f8      	str	r0, [r7, #12]
            break;
 8005372:	e0bd      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb78 	bl	8005a6c <decodeRotationVector>
 800537c:	60f8      	str	r0, [r7, #12]
            break;
 800537e:	e0b7      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fbd6 	bl	8005b34 <decodeGameRotationVector>
 8005388:	60f8      	str	r0, [r7, #12]
            break;
 800538a:	e0b1      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fc20 	bl	8005bd4 <decodeGeomagneticRotationVector>
 8005394:	60f8      	str	r0, [r7, #12]
            break;
 8005396:	e0ab      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fc7e 	bl	8005c9c <decodePressure>
 80053a0:	60f8      	str	r0, [r7, #12]
            break;
 80053a2:	e0a5      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 80053a4:	6839      	ldr	r1, [r7, #0]
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fc94 	bl	8005cd4 <decodeAmbientLight>
 80053ac:	60f8      	str	r0, [r7, #12]
            break;
 80053ae:	e09f      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fcaa 	bl	8005d0c <decodeHumidity>
 80053b8:	60f8      	str	r0, [r7, #12]
            break;
 80053ba:	e099      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fcc2 	bl	8005d48 <decodeProximity>
 80053c4:	60f8      	str	r0, [r7, #12]
            break;
 80053c6:	e093      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fcda 	bl	8005d84 <decodeTemperature>
 80053d0:	60f8      	str	r0, [r7, #12]
            break;
 80053d2:	e08d      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fcf2 	bl	8005dc0 <decodeReserved>
 80053dc:	60f8      	str	r0, [r7, #12]
            break;
 80053de:	e087      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fd0a 	bl	8005dfc <decodeTapDetector>
 80053e8:	60f8      	str	r0, [r7, #12]
            break;
 80053ea:	e081      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fd14 	bl	8005e1c <decodeStepDetector>
 80053f4:	60f8      	str	r0, [r7, #12]
            break;
 80053f6:	e07b      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fd20 	bl	8005e40 <decodeStepCounter>
 8005400:	60f8      	str	r0, [r7, #12]
            break;
 8005402:	e075      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fd35 	bl	8005e76 <decodeSignificantMotion>
 800540c:	60f8      	str	r0, [r7, #12]
            break;
 800540e:	e06f      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fd42 	bl	8005e9c <decodeStabilityClassifier>
 8005418:	60f8      	str	r0, [r7, #12]
            break;
 800541a:	e069      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fd4c 	bl	8005ebc <decodeShakeDetector>
 8005424:	60f8      	str	r0, [r7, #12]
            break;
 8005426:	e063      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fd59 	bl	8005ee2 <decodeFlipDetector>
 8005430:	60f8      	str	r0, [r7, #12]
            break;
 8005432:	e05d      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fd66 	bl	8005f08 <decodePickupDetector>
 800543c:	60f8      	str	r0, [r7, #12]
            break;
 800543e:	e057      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fd73 	bl	8005f2e <decodeStabilityDetector>
 8005448:	60f8      	str	r0, [r7, #12]
            break;
 800544a:	e051      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fd80 	bl	8005f54 <decodePersonalActivityClassifier>
 8005454:	60f8      	str	r0, [r7, #12]
            break;
 8005456:	e04b      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fdad 	bl	8005fba <decodeSleepDetector>
 8005460:	60f8      	str	r0, [r7, #12]
            break;
 8005462:	e045      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fdb7 	bl	8005fda <decodeTiltDetector>
 800546c:	60f8      	str	r0, [r7, #12]
            break;
 800546e:	e03f      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fdc4 	bl	8006000 <decodePocketDetector>
 8005478:	60f8      	str	r0, [r7, #12]
            break;
 800547a:	e039      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fdd1 	bl	8006026 <decodeCircleDetector>
 8005484:	60f8      	str	r0, [r7, #12]
            break;
 8005486:	e033      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fdde 	bl	800604c <decodeHeartRateMonitor>
 8005490:	60f8      	str	r0, [r7, #12]
            break;
 8005492:	e02d      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fdec 	bl	8006074 <decodeArvrStabilizedRV>
 800549c:	60f8      	str	r0, [r7, #12]
            break;
 800549e:	e027      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fe4a 	bl	800613c <decodeArvrStabilizedGRV>
 80054a8:	60f8      	str	r0, [r7, #12]
            break;
 80054aa:	e021      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fe94 	bl	80061dc <decodeGyroIntegratedRV>
 80054b4:	60f8      	str	r0, [r7, #12]
            break;
 80054b6:	e01b      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 ff14 	bl	80062e8 <decodeIZroRequest>
 80054c0:	60f8      	str	r0, [r7, #12]
            break;
 80054c2:	e015      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 ff22 	bl	8006310 <decodeRawOptFlow>
 80054cc:	60f8      	str	r0, [r7, #12]
            break;
 80054ce:	e00f      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 ff9a 	bl	800640c <decodeDeadReckoningPose>
 80054d8:	60f8      	str	r0, [r7, #12]
            break;
 80054da:	e009      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f001 f87e 	bl	80065e0 <decodeWheelEncoder>
 80054e4:	60f8      	str	r0, [r7, #12]
            break;
 80054e6:	e003      	b.n	80054f0 <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 80054e8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ec:	60fb      	str	r3, [r7, #12]
            break;
 80054ee:	bf00      	nop
    }

    return rc;
 80054f0:	68fb      	ldr	r3, [r7, #12]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop

080054fc <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	3316      	adds	r3, #22
 800550a:	4618      	mov	r0, r3
 800550c:	f001 f969 	bl	80067e2 <read16>
 8005510:	4603      	mov	r3, r0
 8005512:	461a      	mov	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	3318      	adds	r3, #24
 800551c:	4618      	mov	r0, r3
 800551e:	f001 f960 	bl	80067e2 <read16>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	331a      	adds	r3, #26
 800552e:	4618      	mov	r0, r3
 8005530:	f001 f957 	bl	80067e2 <read16>
 8005534:	4603      	mov	r3, r0
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	331e      	adds	r3, #30
 8005540:	4618      	mov	r0, r3
 8005542:	f001 f965 	bl	8006810 <read32>
 8005546:	4603      	mov	r3, r0
 8005548:	461a      	mov	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	3316      	adds	r3, #22
 8005566:	4618      	mov	r0, r3
 8005568:	f001 f93b 	bl	80067e2 <read16>
 800556c:	4603      	mov	r3, r0
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005576:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80055d4 <decodeAccelerometer+0x7c>
 800557a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	3318      	adds	r3, #24
 8005588:	4618      	mov	r0, r3
 800558a:	f001 f92a 	bl	80067e2 <read16>
 800558e:	4603      	mov	r3, r0
 8005590:	ee07 3a90 	vmov	s15, r3
 8005594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005598:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80055d4 <decodeAccelerometer+0x7c>
 800559c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	331a      	adds	r3, #26
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 f919 	bl	80067e2 <read16>
 80055b0:	4603      	mov	r3, r0
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ba:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80055d4 <decodeAccelerometer+0x7c>
 80055be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	3b800000 	.word	0x3b800000

080055d8 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	3316      	adds	r3, #22
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 f8fb 	bl	80067e2 <read16>
 80055ec:	4603      	mov	r3, r0
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005654 <decodeLinearAcceleration+0x7c>
 80055fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	3318      	adds	r3, #24
 8005608:	4618      	mov	r0, r3
 800560a:	f001 f8ea 	bl	80067e2 <read16>
 800560e:	4603      	mov	r3, r0
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005618:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005654 <decodeLinearAcceleration+0x7c>
 800561c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	331a      	adds	r3, #26
 800562a:	4618      	mov	r0, r3
 800562c:	f001 f8d9 	bl	80067e2 <read16>
 8005630:	4603      	mov	r3, r0
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800563a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005654 <decodeLinearAcceleration+0x7c>
 800563e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	3b800000 	.word	0x3b800000

08005658 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	3316      	adds	r3, #22
 8005666:	4618      	mov	r0, r3
 8005668:	f001 f8bb 	bl	80067e2 <read16>
 800566c:	4603      	mov	r3, r0
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005676:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80056d4 <decodeGravity+0x7c>
 800567a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	3318      	adds	r3, #24
 8005688:	4618      	mov	r0, r3
 800568a:	f001 f8aa 	bl	80067e2 <read16>
 800568e:	4603      	mov	r3, r0
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005698:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80056d4 <decodeGravity+0x7c>
 800569c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	331a      	adds	r3, #26
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 f899 	bl	80067e2 <read16>
 80056b0:	4603      	mov	r3, r0
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ba:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80056d4 <decodeGravity+0x7c>
 80056be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	3b800000 	.word	0x3b800000

080056d8 <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	3316      	adds	r3, #22
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 f87b 	bl	80067e2 <read16>
 80056ec:	4603      	mov	r3, r0
 80056ee:	461a      	mov	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	3318      	adds	r3, #24
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f872 	bl	80067e2 <read16>
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	331a      	adds	r3, #26
 800570a:	4618      	mov	r0, r3
 800570c:	f001 f869 	bl	80067e2 <read16>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	331c      	adds	r3, #28
 800571c:	4618      	mov	r0, r3
 800571e:	f001 f860 	bl	80067e2 <read16>
 8005722:	4603      	mov	r3, r0
 8005724:	461a      	mov	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	331e      	adds	r3, #30
 800572e:	4618      	mov	r0, r3
 8005730:	f001 f86e 	bl	8006810 <read32>
 8005734:	4603      	mov	r3, r0
 8005736:	461a      	mov	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	3316      	adds	r3, #22
 8005756:	4618      	mov	r0, r3
 8005758:	f001 f843 	bl	80067e2 <read16>
 800575c:	4603      	mov	r3, r0
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005766:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80057c4 <decodeGyroscopeCalibrated+0x7c>
 800576a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	3318      	adds	r3, #24
 8005778:	4618      	mov	r0, r3
 800577a:	f001 f832 	bl	80067e2 <read16>
 800577e:	4603      	mov	r3, r0
 8005780:	ee07 3a90 	vmov	s15, r3
 8005784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005788:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80057c4 <decodeGyroscopeCalibrated+0x7c>
 800578c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	331a      	adds	r3, #26
 800579a:	4618      	mov	r0, r3
 800579c:	f001 f821 	bl	80067e2 <read16>
 80057a0:	4603      	mov	r3, r0
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057aa:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80057c4 <decodeGyroscopeCalibrated+0x7c>
 80057ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	3b000000 	.word	0x3b000000

080057c8 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	3316      	adds	r3, #22
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 f803 	bl	80067e2 <read16>
 80057dc:	4603      	mov	r3, r0
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80058a8 <decodeGyroscopeUncal+0xe0>
 80057ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	3318      	adds	r3, #24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fff2 	bl	80067e2 <read16>
 80057fe:	4603      	mov	r3, r0
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005808:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80058a8 <decodeGyroscopeUncal+0xe0>
 800580c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	331a      	adds	r3, #26
 800581a:	4618      	mov	r0, r3
 800581c:	f000 ffe1 	bl	80067e2 <read16>
 8005820:	4603      	mov	r3, r0
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800582a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80058a8 <decodeGyroscopeUncal+0xe0>
 800582e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	331c      	adds	r3, #28
 800583c:	4618      	mov	r0, r3
 800583e:	f000 ffd0 	bl	80067e2 <read16>
 8005842:	4603      	mov	r3, r0
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800584c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80058a8 <decodeGyroscopeUncal+0xe0>
 8005850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	331e      	adds	r3, #30
 800585e:	4618      	mov	r0, r3
 8005860:	f000 ffbf 	bl	80067e2 <read16>
 8005864:	4603      	mov	r3, r0
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800586e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80058a8 <decodeGyroscopeUncal+0xe0>
 8005872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	3320      	adds	r3, #32
 8005880:	4618      	mov	r0, r3
 8005882:	f000 ffae 	bl	80067e2 <read16>
 8005886:	4603      	mov	r3, r0
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005890:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80058a8 <decodeGyroscopeUncal+0xe0>
 8005894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	3b000000 	.word	0x3b000000

080058ac <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	3316      	adds	r3, #22
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 ff91 	bl	80067e2 <read16>
 80058c0:	4603      	mov	r3, r0
 80058c2:	461a      	mov	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	3318      	adds	r3, #24
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 ff88 	bl	80067e2 <read16>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	331a      	adds	r3, #26
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 ff7f 	bl	80067e2 <read16>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	331e      	adds	r3, #30
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 ff8d 	bl	8006810 <read32>
 80058f6:	4603      	mov	r3, r0
 80058f8:	461a      	mov	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	3316      	adds	r3, #22
 8005916:	4618      	mov	r0, r3
 8005918:	f000 ff63 	bl	80067e2 <read16>
 800591c:	4603      	mov	r3, r0
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005926:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005984 <decodeMagneticFieldCalibrated+0x7c>
 800592a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	3318      	adds	r3, #24
 8005938:	4618      	mov	r0, r3
 800593a:	f000 ff52 	bl	80067e2 <read16>
 800593e:	4603      	mov	r3, r0
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005948:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005984 <decodeMagneticFieldCalibrated+0x7c>
 800594c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	331a      	adds	r3, #26
 800595a:	4618      	mov	r0, r3
 800595c:	f000 ff41 	bl	80067e2 <read16>
 8005960:	4603      	mov	r3, r0
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800596a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005984 <decodeMagneticFieldCalibrated+0x7c>
 800596e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	3d800000 	.word	0x3d800000

08005988 <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	3316      	adds	r3, #22
 8005996:	4618      	mov	r0, r3
 8005998:	f000 ff23 	bl	80067e2 <read16>
 800599c:	4603      	mov	r3, r0
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059a6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005a68 <decodeMagneticFieldUncal+0xe0>
 80059aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	3318      	adds	r3, #24
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 ff12 	bl	80067e2 <read16>
 80059be:	4603      	mov	r3, r0
 80059c0:	ee07 3a90 	vmov	s15, r3
 80059c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059c8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8005a68 <decodeMagneticFieldUncal+0xe0>
 80059cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	331a      	adds	r3, #26
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 ff01 	bl	80067e2 <read16>
 80059e0:	4603      	mov	r3, r0
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005a68 <decodeMagneticFieldUncal+0xe0>
 80059ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	331c      	adds	r3, #28
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fef0 	bl	80067e2 <read16>
 8005a02:	4603      	mov	r3, r0
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a0c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005a68 <decodeMagneticFieldUncal+0xe0>
 8005a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	331e      	adds	r3, #30
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fedf 	bl	80067e2 <read16>
 8005a24:	4603      	mov	r3, r0
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005a68 <decodeMagneticFieldUncal+0xe0>
 8005a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	3320      	adds	r3, #32
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fece 	bl	80067e2 <read16>
 8005a46:	4603      	mov	r3, r0
 8005a48:	ee07 3a90 	vmov	s15, r3
 8005a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a50:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005a68 <decodeMagneticFieldUncal+0xe0>
 8005a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	3d800000 	.word	0x3d800000

08005a6c <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	3316      	adds	r3, #22
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 feb1 	bl	80067e2 <read16>
 8005a80:	4603      	mov	r3, r0
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a8a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005b2c <decodeRotationVector+0xc0>
 8005a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	3318      	adds	r3, #24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fea0 	bl	80067e2 <read16>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aac:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005b2c <decodeRotationVector+0xc0>
 8005ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	331a      	adds	r3, #26
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fe8f 	bl	80067e2 <read16>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ace:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005b2c <decodeRotationVector+0xc0>
 8005ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	331c      	adds	r3, #28
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fe7e 	bl	80067e2 <read16>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005b2c <decodeRotationVector+0xc0>
 8005af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	331e      	adds	r3, #30
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fe6d 	bl	80067e2 <read16>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b12:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005b30 <decodeRotationVector+0xc4>
 8005b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	38800000 	.word	0x38800000
 8005b30:	39800000 	.word	0x39800000

08005b34 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	3316      	adds	r3, #22
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fe4d 	bl	80067e2 <read16>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b52:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005bd0 <decodeGameRotationVector+0x9c>
 8005b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	3318      	adds	r3, #24
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fe3c 	bl	80067e2 <read16>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	ee07 3a90 	vmov	s15, r3
 8005b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b74:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005bd0 <decodeGameRotationVector+0x9c>
 8005b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	331a      	adds	r3, #26
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fe2b 	bl	80067e2 <read16>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b96:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005bd0 <decodeGameRotationVector+0x9c>
 8005b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	331c      	adds	r3, #28
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fe1a 	bl	80067e2 <read16>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	ee07 3a90 	vmov	s15, r3
 8005bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005bd0 <decodeGameRotationVector+0x9c>
 8005bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	38800000 	.word	0x38800000

08005bd4 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	3316      	adds	r3, #22
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fdfd 	bl	80067e2 <read16>
 8005be8:	4603      	mov	r3, r0
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bf2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005c94 <decodeGeomagneticRotationVector+0xc0>
 8005bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	3318      	adds	r3, #24
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fdec 	bl	80067e2 <read16>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c14:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005c94 <decodeGeomagneticRotationVector+0xc0>
 8005c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	331a      	adds	r3, #26
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fddb 	bl	80067e2 <read16>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c36:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005c94 <decodeGeomagneticRotationVector+0xc0>
 8005c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	331c      	adds	r3, #28
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fdca 	bl	80067e2 <read16>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c58:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005c94 <decodeGeomagneticRotationVector+0xc0>
 8005c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	331e      	adds	r3, #30
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fdb9 	bl	80067e2 <read16>
 8005c70:	4603      	mov	r3, r0
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c7a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005c98 <decodeGeomagneticRotationVector+0xc4>
 8005c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	38800000 	.word	0x38800000
 8005c98:	39800000 	.word	0x39800000

08005c9c <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	3316      	adds	r3, #22
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fdb0 	bl	8006810 <read32>
 8005cb0:	ee07 0a90 	vmov	s15, r0
 8005cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005cd0 <decodePressure+0x34>
 8005cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	35800000 	.word	0x35800000

08005cd4 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	3316      	adds	r3, #22
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fd94 	bl	8006810 <read32>
 8005ce8:	ee07 0a90 	vmov	s15, r0
 8005cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cf0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005d08 <decodeAmbientLight+0x34>
 8005cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	3b800000 	.word	0x3b800000

08005d0c <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	3316      	adds	r3, #22
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fd61 	bl	80067e2 <read16>
 8005d20:	4603      	mov	r3, r0
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d2a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005d44 <decodeHumidity+0x38>
 8005d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	3b800000 	.word	0x3b800000

08005d48 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	3316      	adds	r3, #22
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fd43 	bl	80067e2 <read16>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d66:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005d80 <decodeProximity+0x38>
 8005d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	3d800000 	.word	0x3d800000

08005d84 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	3316      	adds	r3, #22
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fd25 	bl	80067e2 <read16>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005da2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005dbc <decodeTemperature+0x38>
 8005da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	3c000000 	.word	0x3c000000

08005dc0 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	3316      	adds	r3, #22
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fd07 	bl	80067e2 <read16>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dde:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005df8 <decodeReserved+0x38>
 8005de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	3c000000 	.word	0x3c000000

08005dfc <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	7d9a      	ldrb	r2, [r3, #22]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	3316      	adds	r3, #22
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fcac 	bl	8006788 <readu32>
 8005e30:	4602      	mov	r2, r0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	3316      	adds	r3, #22
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fc9a 	bl	8006788 <readu32>
 8005e54:	4602      	mov	r2, r0
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	331a      	adds	r3, #26
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fc92 	bl	8006788 <readu32>
 8005e64:	4603      	mov	r3, r0
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	3316      	adds	r3, #22
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fc68 	bl	800675a <readu16>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	7d9a      	ldrb	r2, [r3, #22]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	3316      	adds	r3, #22
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fc45 	bl	800675a <readu16>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	3316      	adds	r3, #22
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fc32 	bl	800675a <readu16>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	461a      	mov	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	3316      	adds	r3, #22
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fc1f 	bl	800675a <readu16>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	3316      	adds	r3, #22
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fc0c 	bl	800675a <readu16>
 8005f42:	4603      	mov	r3, r0
 8005f44:	461a      	mov	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	7d9b      	ldrb	r3, [r3, #22]
 8005f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	7d9b      	ldrb	r3, [r3, #22]
 8005f70:	b25b      	sxtb	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	09db      	lsrs	r3, r3, #7
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	7dda      	ldrb	r2, [r3, #23]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e00d      	b.n	8005fa6 <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3306      	adds	r3, #6
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	4413      	add	r3, r2
 8005f92:	7c99      	ldrb	r1, [r3, #18]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	3317      	adds	r3, #23
 8005f9c:	460a      	mov	r2, r1
 8005f9e:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b09      	cmp	r3, #9
 8005faa:	ddee      	ble.n	8005f8a <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	7d9a      	ldrb	r2, [r3, #22]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	3316      	adds	r3, #22
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fbb6 	bl	800675a <readu16>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	3316      	adds	r3, #22
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fba3 	bl	800675a <readu16>
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	3316      	adds	r3, #22
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fb90 	bl	800675a <readu16>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	3316      	adds	r3, #22
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fb7d 	bl	800675a <readu16>
 8006060:	4603      	mov	r3, r0
 8006062:	461a      	mov	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	3316      	adds	r3, #22
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fbad 	bl	80067e2 <read16>
 8006088:	4603      	mov	r3, r0
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006092:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006134 <decodeArvrStabilizedRV+0xc0>
 8006096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	3318      	adds	r3, #24
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fb9c 	bl	80067e2 <read16>
 80060aa:	4603      	mov	r3, r0
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8006134 <decodeArvrStabilizedRV+0xc0>
 80060b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	331a      	adds	r3, #26
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fb8b 	bl	80067e2 <read16>
 80060cc:	4603      	mov	r3, r0
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060d6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006134 <decodeArvrStabilizedRV+0xc0>
 80060da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	331c      	adds	r3, #28
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fb7a 	bl	80067e2 <read16>
 80060ee:	4603      	mov	r3, r0
 80060f0:	ee07 3a90 	vmov	s15, r3
 80060f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060f8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8006134 <decodeArvrStabilizedRV+0xc0>
 80060fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	331e      	adds	r3, #30
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fb69 	bl	80067e2 <read16>
 8006110:	4603      	mov	r3, r0
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800611a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006138 <decodeArvrStabilizedRV+0xc4>
 800611e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	38800000 	.word	0x38800000
 8006138:	39800000 	.word	0x39800000

0800613c <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	3316      	adds	r3, #22
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fb49 	bl	80067e2 <read16>
 8006150:	4603      	mov	r3, r0
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800615a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80061d8 <decodeArvrStabilizedGRV+0x9c>
 800615e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	3318      	adds	r3, #24
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fb38 	bl	80067e2 <read16>
 8006172:	4603      	mov	r3, r0
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800617c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80061d8 <decodeArvrStabilizedGRV+0x9c>
 8006180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	331a      	adds	r3, #26
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fb27 	bl	80067e2 <read16>
 8006194:	4603      	mov	r3, r0
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800619e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80061d8 <decodeArvrStabilizedGRV+0x9c>
 80061a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	331c      	adds	r3, #28
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fb16 	bl	80067e2 <read16>
 80061b6:	4603      	mov	r3, r0
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061c0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80061d8 <decodeArvrStabilizedGRV+0x9c>
 80061c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	38800000 	.word	0x38800000

080061dc <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	3312      	adds	r3, #18
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 faf9 	bl	80067e2 <read16>
 80061f0:	4603      	mov	r3, r0
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061fa:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80062e0 <decodeGyroIntegratedRV+0x104>
 80061fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	3314      	adds	r3, #20
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fae8 	bl	80067e2 <read16>
 8006212:	4603      	mov	r3, r0
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800621c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80062e0 <decodeGyroIntegratedRV+0x104>
 8006220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	3316      	adds	r3, #22
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fad7 	bl	80067e2 <read16>
 8006234:	4603      	mov	r3, r0
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800623e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80062e0 <decodeGyroIntegratedRV+0x104>
 8006242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	3318      	adds	r3, #24
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fac6 	bl	80067e2 <read16>
 8006256:	4603      	mov	r3, r0
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006260:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80062e0 <decodeGyroIntegratedRV+0x104>
 8006264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	331a      	adds	r3, #26
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fab5 	bl	80067e2 <read16>
 8006278:	4603      	mov	r3, r0
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006282:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80062e4 <decodeGyroIntegratedRV+0x108>
 8006286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	331c      	adds	r3, #28
 8006294:	4618      	mov	r0, r3
 8006296:	f000 faa4 	bl	80067e2 <read16>
 800629a:	4603      	mov	r3, r0
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062a4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80062e4 <decodeGyroIntegratedRV+0x108>
 80062a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	331e      	adds	r3, #30
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fa93 	bl	80067e2 <read16>
 80062bc:	4603      	mov	r3, r0
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062c6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80062e4 <decodeGyroIntegratedRV+0x108>
 80062ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    return SH2_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	38800000 	.word	0x38800000
 80062e4:	3a800000 	.word	0x3a800000

080062e8 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	7d9a      	ldrb	r2, [r3, #22]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	7dda      	ldrb	r2, [r3, #23]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	3316      	adds	r3, #22
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fa5f 	bl	80067e2 <read16>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	3318      	adds	r3, #24
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fa56 	bl	80067e2 <read16>
 8006336:	4603      	mov	r3, r0
 8006338:	461a      	mov	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	331a      	adds	r3, #26
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fa4d 	bl	80067e2 <read16>
 8006348:	4603      	mov	r3, r0
 800634a:	461a      	mov	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	331c      	adds	r3, #28
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fa35 	bl	80067c4 <read8>
 800635a:	4603      	mov	r3, r0
 800635c:	b2da      	uxtb	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	331d      	adds	r3, #29
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fa2b 	bl	80067c4 <read8>
 800636e:	4603      	mov	r3, r0
 8006370:	b2da      	uxtb	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	331e      	adds	r3, #30
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fa21 	bl	80067c4 <read8>
 8006382:	4603      	mov	r3, r0
 8006384:	b2da      	uxtb	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	331f      	adds	r3, #31
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fa17 	bl	80067c4 <read8>
 8006396:	4603      	mov	r3, r0
 8006398:	b2da      	uxtb	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	3320      	adds	r3, #32
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fa0d 	bl	80067c4 <read8>
 80063aa:	4603      	mov	r3, r0
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	3321      	adds	r3, #33	@ 0x21
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fa03 	bl	80067c4 <read8>
 80063be:	4603      	mov	r3, r0
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	3322      	adds	r3, #34	@ 0x22
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f9f9 	bl	80067c4 <read8>
 80063d2:	4603      	mov	r3, r0
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	3324      	adds	r3, #36	@ 0x24
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 f9fe 	bl	80067e2 <read16>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	3326      	adds	r3, #38	@ 0x26
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fa0c 	bl	8006810 <read32>
 80063f8:	4603      	mov	r3, r0
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	3316      	adds	r3, #22
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f9f8 	bl	8006810 <read32>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	331a      	adds	r3, #26
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f9ef 	bl	8006810 <read32>
 8006432:	ee07 0a90 	vmov	s15, r0
 8006436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800643a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80065d4 <decodeDeadReckoningPose+0x1c8>
 800643e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	331e      	adds	r3, #30
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f9df 	bl	8006810 <read32>
 8006452:	ee07 0a90 	vmov	s15, r0
 8006456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800645a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80065d4 <decodeDeadReckoningPose+0x1c8>
 800645e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	3322      	adds	r3, #34	@ 0x22
 800646c:	4618      	mov	r0, r3
 800646e:	f000 f9cf 	bl	8006810 <read32>
 8006472:	ee07 0a90 	vmov	s15, r0
 8006476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800647a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80065d4 <decodeDeadReckoningPose+0x1c8>
 800647e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	3326      	adds	r3, #38	@ 0x26
 800648c:	4618      	mov	r0, r3
 800648e:	f000 f9bf 	bl	8006810 <read32>
 8006492:	ee07 0a90 	vmov	s15, r0
 8006496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800649a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80065d8 <decodeDeadReckoningPose+0x1cc>
 800649e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	332a      	adds	r3, #42	@ 0x2a
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 f9af 	bl	8006810 <read32>
 80064b2:	ee07 0a90 	vmov	s15, r0
 80064b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ba:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80065d8 <decodeDeadReckoningPose+0x1cc>
 80064be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	332e      	adds	r3, #46	@ 0x2e
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 f99f 	bl	8006810 <read32>
 80064d2:	ee07 0a90 	vmov	s15, r0
 80064d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064da:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80065d8 <decodeDeadReckoningPose+0x1cc>
 80064de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	3332      	adds	r3, #50	@ 0x32
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f98f 	bl	8006810 <read32>
 80064f2:	ee07 0a90 	vmov	s15, r0
 80064f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064fa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80065d8 <decodeDeadReckoningPose+0x1cc>
 80064fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	3336      	adds	r3, #54	@ 0x36
 800650c:	4618      	mov	r0, r3
 800650e:	f000 f97f 	bl	8006810 <read32>
 8006512:	ee07 0a90 	vmov	s15, r0
 8006516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800651a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80065dc <decodeDeadReckoningPose+0x1d0>
 800651e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	333a      	adds	r3, #58	@ 0x3a
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f96f 	bl	8006810 <read32>
 8006532:	ee07 0a90 	vmov	s15, r0
 8006536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800653a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80065dc <decodeDeadReckoningPose+0x1d0>
 800653e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	333e      	adds	r3, #62	@ 0x3e
 800654c:	4618      	mov	r0, r3
 800654e:	f000 f95f 	bl	8006810 <read32>
 8006552:	ee07 0a90 	vmov	s15, r0
 8006556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800655a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80065dc <decodeDeadReckoningPose+0x1d0>
 800655e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	3342      	adds	r3, #66	@ 0x42
 800656c:	4618      	mov	r0, r3
 800656e:	f000 f94f 	bl	8006810 <read32>
 8006572:	ee07 0a90 	vmov	s15, r0
 8006576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800657a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80065dc <decodeDeadReckoningPose+0x1d0>
 800657e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	3346      	adds	r3, #70	@ 0x46
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f93f 	bl	8006810 <read32>
 8006592:	ee07 0a90 	vmov	s15, r0
 8006596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800659a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80065dc <decodeDeadReckoningPose+0x1d0>
 800659e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	334a      	adds	r3, #74	@ 0x4a
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 f92f 	bl	8006810 <read32>
 80065b2:	ee07 0a90 	vmov	s15, r0
 80065b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ba:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80065dc <decodeDeadReckoningPose+0x1d0>
 80065be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    return SH2_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	37000000 	.word	0x37000000
 80065d8:	30800000 	.word	0x30800000
 80065dc:	33000000 	.word	0x33000000

080065e0 <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	3316      	adds	r3, #22
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 f90e 	bl	8006810 <read32>
 80065f4:	4603      	mov	r3, r0
 80065f6:	461a      	mov	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	331a      	adds	r3, #26
 8006600:	4618      	mov	r0, r3
 8006602:	f000 f8df 	bl	80067c4 <read8>
 8006606:	4603      	mov	r3, r0
 8006608:	b2da      	uxtb	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	331b      	adds	r3, #27
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f8d6 	bl	80067c4 <read8>
 8006618:	4603      	mov	r3, r0
 800661a:	b2da      	uxtb	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	331c      	adds	r3, #28
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f8dc 	bl	80067e2 <read16>
 800662a:	4603      	mov	r3, r0
 800662c:	b29a      	uxth	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <sh2_hal_open>:

extern I2C_HandleTypeDef hi2c1;
extern osMutexId_t I2C1MutexHandle; // Use the same mutex for accessing I2C1
#define BNO085_I2C_ADDR   (0x4A << 1)

int sh2_hal_open(sh2_Hal_t *self)   { return 0; }
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	2300      	movs	r3, #0
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <sh2_hal_close>:
void sh2_hal_close(sh2_Hal_t *self) { }
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <sh2_hal_read>:

int sh2_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t_us) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
    osMutexAcquire(I2C1MutexHandle, osWaitForever);
 800667a:	4b17      	ldr	r3, [pc, #92]	@ (80066d8 <sh2_hal_read+0x70>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f04f 31ff 	mov.w	r1, #4294967295
 8006682:	4618      	mov	r0, r3
 8006684:	f006 f83b 	bl	800c6fe <osMutexAcquire>
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c1, BNO085_I2C_ADDR, pBuffer, len, 1000);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006690:	9200      	str	r2, [sp, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	2194      	movs	r1, #148	@ 0x94
 8006696:	4811      	ldr	r0, [pc, #68]	@ (80066dc <sh2_hal_read+0x74>)
 8006698:	f001 fda4 	bl	80081e4 <HAL_I2C_Master_Receive>
 800669c:	4603      	mov	r3, r0
 800669e:	74fb      	strb	r3, [r7, #19]
    osMutexRelease(I2C1MutexHandle);
 80066a0:	4b0d      	ldr	r3, [pc, #52]	@ (80066d8 <sh2_hal_read+0x70>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f006 f875 	bl	800c794 <osMutexRelease>
    if (status == HAL_OK) {
 80066aa:	7cfb      	ldrb	r3, [r7, #19]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10d      	bne.n	80066cc <sh2_hal_read+0x64>
        if (t_us) *t_us = HAL_GetTick() * 1000;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <sh2_hal_read+0x60>
 80066b6:	f000 fc4b 	bl	8006f50 <HAL_GetTick>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80066c0:	fb03 f202 	mul.w	r2, r3, r2
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	601a      	str	r2, [r3, #0]
        ret = len;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	617b      	str	r3, [r7, #20]
    }
    return ret;
 80066cc:	697b      	ldr	r3, [r7, #20]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2000040c 	.word	0x2000040c
 80066dc:	20000260 	.word	0x20000260

080066e0 <sh2_hal_write>:

int sh2_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
    int ret = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
    osMutexAcquire(I2C1MutexHandle, osWaitForever);
 80066f0:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <sh2_hal_write+0x54>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f04f 31ff 	mov.w	r1, #4294967295
 80066f8:	4618      	mov	r0, r3
 80066fa:	f006 f800 	bl	800c6fe <osMutexAcquire>
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BNO085_I2C_ADDR, pBuffer, len, 1000);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006706:	9200      	str	r2, [sp, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	2194      	movs	r1, #148	@ 0x94
 800670c:	480a      	ldr	r0, [pc, #40]	@ (8006738 <sh2_hal_write+0x58>)
 800670e:	f001 fc6b 	bl	8007fe8 <HAL_I2C_Master_Transmit>
 8006712:	4603      	mov	r3, r0
 8006714:	74fb      	strb	r3, [r7, #19]
    osMutexRelease(I2C1MutexHandle);
 8006716:	4b07      	ldr	r3, [pc, #28]	@ (8006734 <sh2_hal_write+0x54>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f006 f83a 	bl	800c794 <osMutexRelease>
    if (status == HAL_OK) ret = len;
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <sh2_hal_write+0x4a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	617b      	str	r3, [r7, #20]
    return ret;
 800672a:	697b      	ldr	r3, [r7, #20]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	2000040c 	.word	0x2000040c
 8006738:	20000260 	.word	0x20000260

0800673c <sh2_hal_getTimeUs>:

uint32_t sh2_hal_getTimeUs(sh2_Hal_t *self) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
    return HAL_GetTick() * 1000;
 8006744:	f000 fc04 	bl	8006f50 <HAL_GetTick>
 8006748:	4603      	mov	r3, r0
 800674a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800674e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	b21a      	sxth	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3301      	adds	r3, #1
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b21b      	sxth	r3, r3
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	b21b      	sxth	r3, r3
 8006774:	4313      	orrs	r3, r2
 8006776:	b21b      	sxth	r3, r3
 8006778:	81fb      	strh	r3, [r7, #14]
    return retval;
 800677a:	89fb      	ldrh	r3, [r7, #14]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3301      	adds	r3, #1
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	021b      	lsls	r3, r3, #8
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3302      	adds	r3, #2
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3303      	adds	r3, #3
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	061b      	lsls	r3, r3, #24
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
    return retval;
 80067b6:	68fb      	ldr	r3, [r7, #12]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	73fb      	strb	r3, [r7, #15]
    return retval;
 80067d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	b21a      	sxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3301      	adds	r3, #1
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b21b      	sxth	r3, r3
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	b21b      	sxth	r3, r3
 80067fc:	4313      	orrs	r3, r2
 80067fe:	81fb      	strh	r3, [r7, #14]
    return retval;
 8006800:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3301      	adds	r3, #1
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3302      	adds	r3, #2
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3303      	adds	r3, #3
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	061b      	lsls	r3, r3, #24
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
    return retval;
 800683e:	68fb      	ldr	r3, [r7, #12]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8006852:	2300      	movs	r3, #0
 8006854:	607b      	str	r3, [r7, #4]
 8006856:	e00b      	b.n	8006870 <shtp_init+0x24>
        instances[n].pHal = 0;
 8006858:	4a0b      	ldr	r2, [pc, #44]	@ (8006888 <shtp_init+0x3c>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f640 1114 	movw	r1, #2324	@ 0x914
 8006860:	fb01 f303 	mul.w	r3, r1, r3
 8006864:	4413      	add	r3, r2
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3301      	adds	r3, #1
 800686e:	607b      	str	r3, [r7, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	ddf0      	ble.n	8006858 <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 8006876:	4b05      	ldr	r3, [pc, #20]	@ (800688c <shtp_init+0x40>)
 8006878:	2201      	movs	r2, #1
 800687a:	701a      	strb	r2, [r3, #0]
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	20000b24 	.word	0x20000b24
 800688c:	20001438 	.word	0x20001438

08006890 <getInstance>:

static shtp_t *getInstance(void)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	e014      	b.n	80068c6 <getInstance+0x36>
        if (instances[n].pHal == 0) {
 800689c:	4a0f      	ldr	r2, [pc, #60]	@ (80068dc <getInstance+0x4c>)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f640 1114 	movw	r1, #2324	@ 0x914
 80068a4:	fb01 f303 	mul.w	r3, r1, r3
 80068a8:	4413      	add	r3, r2
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d107      	bne.n	80068c0 <getInstance+0x30>
            // This instance is free
            return &instances[n];
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f640 1214 	movw	r2, #2324	@ 0x914
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
 80068ba:	4a08      	ldr	r2, [pc, #32]	@ (80068dc <getInstance+0x4c>)
 80068bc:	4413      	add	r3, r2
 80068be:	e006      	b.n	80068ce <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3301      	adds	r3, #1
 80068c4:	607b      	str	r3, [r7, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dde7      	ble.n	800689c <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000b24 	.word	0x20000b24

080068e0 <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	460a      	mov	r2, r1
 80068ea:	80fb      	strh	r3, [r7, #6]
 80068ec:	4613      	mov	r3, r2
 80068ee:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	88bb      	ldrh	r3, [r7, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d201      	bcs.n	80068fc <min_u16+0x1c>
        return a;
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	e000      	b.n	80068fe <min_u16+0x1e>
    }
    else {
        return b;
 80068fc:	88bb      	ldrh	r3, [r7, #4]
    }
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 800690a:	b590      	push	{r4, r7, lr}
 800690c:	b089      	sub	sp, #36	@ 0x24
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	460b      	mov	r3, r1
 8006918:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 800691e:	2300      	movs	r3, #0
 8006920:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	833b      	strh	r3, [r7, #24]
    remaining = len;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 800692e:	e079      	b.n	8006a24 <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8006930:	8afb      	ldrh	r3, [r7, #22]
 8006932:	217c      	movs	r1, #124	@ 0x7c
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff ffd3 	bl	80068e0 <min_u16>
 800693a:	4603      	mov	r3, r0
 800693c:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 800693e:	8abb      	ldrh	r3, [r7, #20]
 8006940:	3304      	adds	r3, #4
 8006942:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 8006944:	8a7b      	ldrh	r3, [r7, #18]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 800694c:	8a7b      	ldrh	r3, [r7, #18]
 800694e:	0a1b      	lsrs	r3, r3, #8
 8006950:	b29b      	uxth	r3, r3
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006958:	b2da      	uxtb	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 800695e:	7efb      	ldrb	r3, [r7, #27]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d006      	beq.n	8006972 <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	7b5b      	ldrb	r3, [r3, #13]
 8006968:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800696c:	b2da      	uxtb	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	7afa      	ldrb	r2, [r7, #11]
 8006976:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8006978:	7afa      	ldrb	r2, [r7, #11]
 800697a:	68f9      	ldr	r1, [r7, #12]
 800697c:	4613      	mov	r3, r2
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 800698a:	7819      	ldrb	r1, [r3, #0]
 800698c:	1c4b      	adds	r3, r1, #1
 800698e:	b2dc      	uxtb	r4, r3
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	4613      	mov	r3, r2
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4403      	add	r3, r0
 800699c:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 80069a0:	4622      	mov	r2, r4
 80069a2:	701a      	strb	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	460a      	mov	r2, r1
 80069a8:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	330c      	adds	r3, #12
 80069ae:	1d18      	adds	r0, r3, #4
 80069b0:	8b3b      	ldrh	r3, [r7, #24]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	4413      	add	r3, r2
 80069b6:	8aba      	ldrh	r2, [r7, #20]
 80069b8:	4619      	mov	r1, r3
 80069ba:	f009 fd8e 	bl	80104da <memcpy>
        remaining -= transferLen;
 80069be:	8afa      	ldrh	r2, [r7, #22]
 80069c0:	8abb      	ldrh	r3, [r7, #20]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 80069c6:	8b3a      	ldrh	r2, [r7, #24]
 80069c8:	8abb      	ldrh	r3, [r7, #20]
 80069ca:	4413      	add	r3, r2
 80069cc:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	6810      	ldr	r0, [r2, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	f102 010c 	add.w	r1, r2, #12
 80069de:	8a7a      	ldrh	r2, [r7, #18]
 80069e0:	4798      	blx	r3
 80069e2:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 80069e4:	e00d      	b.n	8006a02 <txProcess+0xf8>
        {
            shtp_service(pShtp);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fa2b 	bl	8006e42 <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	6810      	ldr	r0, [r2, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f102 010c 	add.w	r1, r2, #12
 80069fc:	8a7a      	ldrh	r2, [r7, #18]
 80069fe:	4798      	blx	r3
 8006a00:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ee      	beq.n	80069e6 <txProcess+0xdc>
        }
        
        if (status < 0)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da08      	bge.n	8006a20 <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
            return status;
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	e005      	b.n	8006a2c <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8006a20:	2301      	movs	r3, #1
 8006a22:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 8006a24:	8afb      	ldrh	r3, [r7, #22]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d182      	bne.n	8006930 <txProcess+0x26>
    }

    return SH2_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3724      	adds	r7, #36	@ 0x24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}

08006a34 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	4613      	mov	r3, r2
 8006a42:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d813      	bhi.n	8006a7a <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8139 	beq.w	8006cdc <rxAssemble+0x2a8>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	6892      	ldr	r2, [r2, #8]
 8006a72:	2101      	movs	r1, #1
 8006a74:	4610      	mov	r0, r2
 8006a76:	4798      	blx	r3
        }
        return;
 8006a78:	e130      	b.n	8006cdc <rxAssemble+0x2a8>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	3301      	adds	r3, #1
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a92:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	3301      	adds	r3, #1
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	b25b      	sxtb	r3, r3
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	09db      	lsrs	r3, r3, #7
 8006aa0:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	789b      	ldrb	r3, [r3, #2]
 8006aa6:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	78db      	ldrb	r3, [r3, #3]
 8006aac:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 8006aae:	7dfa      	ldrb	r2, [r7, #23]
 8006ab0:	68f9      	ldr	r1, [r7, #12]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	440b      	add	r3, r1
 8006abc:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	7dba      	ldrb	r2, [r7, #22]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d00a      	beq.n	8006ade <rxAssemble+0xaa>
        if (pShtp->eventCallback) {
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d006      	beq.n	8006ade <rxAssemble+0xaa>
            pShtp->eventCallback(pShtp->eventCookie,
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	6892      	ldr	r2, [r2, #8]
 8006ad8:	2106      	movs	r1, #6
 8006ada:	4610      	mov	r0, r2
 8006adc:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 8006ade:	8abb      	ldrh	r3, [r7, #20]
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d813      	bhi.n	8006b0c <rxAssemble+0xd8>
        pShtp->rxShortFragments++;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 80f2 	beq.w	8006ce0 <rxAssemble+0x2ac>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	6892      	ldr	r2, [r2, #8]
 8006b04:	2101      	movs	r1, #1
 8006b06:	4610      	mov	r0, r2
 8006b08:	4798      	blx	r3
        }
        return;
 8006b0a:	e0e9      	b.n	8006ce0 <rxAssemble+0x2ac>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b07      	cmp	r3, #7
 8006b10:	d913      	bls.n	8006b3a <rxAssemble+0x106>
        // Invalid channel id.
        pShtp->rxBadChan++;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

        if (pShtp->eventCallback) {
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80dd 	beq.w	8006ce4 <rxAssemble+0x2b0>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	6892      	ldr	r2, [r2, #8]
 8006b32:	2103      	movs	r1, #3
 8006b34:	4610      	mov	r0, r2
 8006b36:	4798      	blx	r3
        }
        return;
 8006b38:	e0d4      	b.n	8006ce4 <rxAssemble+0x2b0>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d040      	beq.n	8006bc6 <rxAssemble+0x192>
        // Check this against previously received data.
        if (!continuation ||
 8006b44:	7cfb      	ldrb	r3, [r7, #19]
 8006b46:	f083 0301 	eor.w	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d119      	bne.n	8006b84 <rxAssemble+0x150>
            (chan != pShtp->inChan) ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
        if (!continuation ||
 8006b56:	7dfa      	ldrb	r2, [r7, #23]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d113      	bne.n	8006b84 <rxAssemble+0x150>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8006b5c:	7dfa      	ldrb	r2, [r7, #23]
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	4613      	mov	r3, r2
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8006b6e:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8006b70:	7dba      	ldrb	r2, [r7, #22]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d106      	bne.n	8006b84 <rxAssemble+0x150>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 8006b76:	8abb      	ldrh	r3, [r7, #20]
 8006b78:	3b04      	subs	r3, #4
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f8b2 208c 	ldrh.w	r2, [r2, #140]	@ 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d020      	beq.n	8006bc6 <rxAssemble+0x192>
            
            if (pShtp->eventCallback) {
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d006      	beq.n	8006b9a <rxAssemble+0x166>
                pShtp->eventCallback(pShtp->eventCookie,
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	6892      	ldr	r2, [r2, #8]
 8006b94:	2105      	movs	r1, #5
 8006b96:	4610      	mov	r0, r2
 8006b98:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

            pShtp->rxInterruptedPayloads++;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            if (pShtp->eventCallback) {
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d006      	beq.n	8006bc6 <rxAssemble+0x192>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	6892      	ldr	r2, [r2, #8]
 8006bc0:	2107      	movs	r1, #7
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 8006bc6:	7dfa      	ldrb	r2, [r7, #23]
 8006bc8:	7dbb      	ldrb	r3, [r7, #22]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	b2d8      	uxtb	r0, r3
 8006bce:	68f9      	ldr	r1, [r7, #12]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8006bde:	4602      	mov	r2, r0
 8006be0:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d122      	bne.n	8006c32 <rxAssemble+0x1fe>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 8006bec:	8abb      	ldrh	r3, [r7, #20]
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf2:	d912      	bls.n	8006c1a <rxAssemble+0x1e6>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
            
            if (pShtp->eventCallback) {
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d06e      	beq.n	8006ce8 <rxAssemble+0x2b4>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	6892      	ldr	r2, [r2, #8]
 8006c12:	2102      	movs	r1, #2
 8006c14:	4610      	mov	r0, r2
 8006c16:	4798      	blx	r3
            }

            return;
 8006c18:	e066      	b.n	8006ce8 <rxAssemble+0x2b4>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
        pShtp->inChan = chan;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	7dfa      	ldrb	r2, [r7, #23]
 8006c2e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	8abb      	ldrh	r3, [r7, #20]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d901      	bls.n	8006c3e <rxAssemble+0x20a>
        // Only use the valid portion of the transfer
        len = payloadLen;
 8006c3a:	8abb      	ldrh	r3, [r7, #20]
 8006c3c:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	338f      	adds	r3, #143	@ 0x8f
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	@ 0x490
 8006c48:	1898      	adds	r0, r3, r2
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	1d19      	adds	r1, r3, #4
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	3b04      	subs	r3, #4
 8006c52:	461a      	mov	r2, r3
 8006c54:	f009 fc41 	bl	80104da <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	4413      	add	r3, r2
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b04      	subs	r3, #4
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
    pShtp->inRemaining = payloadLen - len;
 8006c6e:	8aba      	ldrh	r2, [r7, #20]
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d131      	bne.n	8006cea <rxAssemble+0x2b6>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 8006c86:	7dfa      	ldrb	r2, [r7, #23]
 8006c88:	68f9      	ldr	r1, [r7, #12]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d025      	beq.n	8006cea <rxAssemble+0x2b6>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006c9e:	7dfa      	ldrb	r2, [r7, #23]
 8006ca0:	68f9      	ldr	r1, [r7, #12]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8006cb0:	681c      	ldr	r4, [r3, #0]
 8006cb2:	7dfa      	ldrb	r2, [r7, #23]
 8006cb4:	68f9      	ldr	r1, [r7, #12]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006cc4:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f103 018f 	add.w	r1, r3, #143	@ 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8006cd8:	47a0      	blx	r4
 8006cda:	e006      	b.n	8006cea <rxAssemble+0x2b6>
        return;
 8006cdc:	bf00      	nop
 8006cde:	e004      	b.n	8006cea <rxAssemble+0x2b6>
        return;
 8006ce0:	bf00      	nop
 8006ce2:	e002      	b.n	8006cea <rxAssemble+0x2b6>
        return;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <rxAssemble+0x2b6>
            return;
 8006ce8:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd90      	pop	{r4, r7, pc}

08006cf0 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8006cf8:	4b16      	ldr	r3, [pc, #88]	@ (8006d54 <shtp_open+0x64>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f083 0301 	eor.w	r3, r3, #1
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 8006d06:	f7ff fda1 	bl	800684c <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <shtp_open+0x24>
        // Error
        return 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e01b      	b.n	8006d4c <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8006d14:	f7ff fdbc 	bl	8006890 <getInstance>
 8006d18:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e013      	b.n	8006d4c <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8006d24:	f640 1214 	movw	r2, #2324	@ 0x914
 8006d28:	2100      	movs	r1, #0
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f009 fae5 	bl	80102fa <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
 8006d38:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <shtp_open+0x54>
        return 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e003      	b.n	8006d4c <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	601a      	str	r2, [r3, #0]

    return pShtp;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20001438 	.word	0x20001438

08006d58 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	609a      	str	r2, [r3, #8]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <shtp_listenChan+0x20>
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
 8006d9c:	2b07      	cmp	r3, #7
 8006d9e:	d902      	bls.n	8006da6 <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8006da0:	f06f 0301 	mvn.w	r3, #1
 8006da4:	e016      	b.n	8006dd4 <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 8006da6:	7afa      	ldrb	r2, [r7, #11]
 8006da8:	6979      	ldr	r1, [r7, #20]
 8006daa:	4613      	mov	r3, r2
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 8006dbc:	7afa      	ldrb	r2, [r7, #11]
 8006dbe:	6979      	ldr	r1, [r7, #20]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	461a      	mov	r2, r3
 8006dec:	460b      	mov	r3, r1
 8006dee:	72fb      	strb	r3, [r7, #11]
 8006df0:	4613      	mov	r3, r2
 8006df2:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 8006df8:	893b      	ldrh	r3, [r7, #8]
 8006dfa:	2b80      	cmp	r3, #128	@ 0x80
 8006dfc:	d909      	bls.n	8006e12 <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
        return SH2_ERR_BAD_PARAM;
 8006e0c:	f06f 0301 	mvn.w	r3, #1
 8006e10:	e013      	b.n	8006e3a <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	2b07      	cmp	r3, #7
 8006e16:	d909      	bls.n	8006e2c <shtp_send+0x4c>
        pShtp->badTxChan++;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
        return SH2_ERR_BAD_PARAM;
 8006e26:	f06f 0301 	mvn.w	r3, #1
 8006e2a:	e006      	b.n	8006e3a <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8006e2c:	893b      	ldrh	r3, [r7, #8]
 8006e2e:	7af9      	ldrb	r1, [r7, #11]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6978      	ldr	r0, [r7, #20]
 8006e34:	f7ff fd69 	bl	800690a <txProcess>
 8006e38:	4603      	mov	r3, r0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8006e42:	b590      	push	{r4, r7, lr}
 8006e44:	b087      	sub	sp, #28
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689c      	ldr	r4, [r3, #8]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8006e62:	f107 030c 	add.w	r3, r7, #12
 8006e66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e6a:	47a0      	blx	r4
 8006e6c:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dd08      	ble.n	8006e86 <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6978      	ldr	r0, [r7, #20]
 8006e82:	f7ff fdd7 	bl	8006a34 <rxAssemble>
    }
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd90      	pop	{r4, r7, pc}
	...

08006e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006ec8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006e94:	f7fd fafe 	bl	8004494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006e98:	480c      	ldr	r0, [pc, #48]	@ (8006ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006e9a:	490d      	ldr	r1, [pc, #52]	@ (8006ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ea0:	e002      	b.n	8006ea8 <LoopCopyDataInit>

08006ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ea6:	3304      	adds	r3, #4

08006ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006eac:	d3f9      	bcc.n	8006ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006eae:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8006edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8006eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006eb4:	e001      	b.n	8006eba <LoopFillZerobss>

08006eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006eb8:	3204      	adds	r2, #4

08006eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ebc:	d3fb      	bcc.n	8006eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006ebe:	f009 fae5 	bl	801048c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ec2:	f7fb f80d 	bl	8001ee0 <main>
  bx  lr    
 8006ec6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ed0:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8006ed4:	0801389c 	.word	0x0801389c
  ldr r2, =_sbss
 8006ed8:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8006edc:	20005f74 	.word	0x20005f74

08006ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ee0:	e7fe      	b.n	8006ee0 <ADC_IRQHandler>
	...

08006ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f24 <HAL_Init+0x40>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a0d      	ldr	r2, [pc, #52]	@ (8006f24 <HAL_Init+0x40>)
 8006eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <HAL_Init+0x40>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8006f24 <HAL_Init+0x40>)
 8006efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f00:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <HAL_Init+0x40>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a07      	ldr	r2, [pc, #28]	@ (8006f24 <HAL_Init+0x40>)
 8006f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f0c:	2003      	movs	r0, #3
 8006f0e:	f000 f8fc 	bl	800710a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f12:	200f      	movs	r0, #15
 8006f14:	f7fd f930 	bl	8004178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f18:	f7fc ff90 	bl	8003e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	40023c00 	.word	0x40023c00

08006f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f2c:	4b06      	ldr	r3, [pc, #24]	@ (8006f48 <HAL_IncTick+0x20>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	4b06      	ldr	r3, [pc, #24]	@ (8006f4c <HAL_IncTick+0x24>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4413      	add	r3, r2
 8006f38:	4a04      	ldr	r2, [pc, #16]	@ (8006f4c <HAL_IncTick+0x24>)
 8006f3a:	6013      	str	r3, [r2, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	20000074 	.word	0x20000074
 8006f4c:	2000143c 	.word	0x2000143c

08006f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  return uwTick;
 8006f54:	4b03      	ldr	r3, [pc, #12]	@ (8006f64 <HAL_GetTick+0x14>)
 8006f56:	681b      	ldr	r3, [r3, #0]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	2000143c 	.word	0x2000143c

08006f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f70:	f7ff ffee 	bl	8006f50 <HAL_GetTick>
 8006f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f80:	d005      	beq.n	8006f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f82:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <HAL_Delay+0x44>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f8e:	bf00      	nop
 8006f90:	f7ff ffde 	bl	8006f50 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d8f7      	bhi.n	8006f90 <HAL_Delay+0x28>
  {
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000074 	.word	0x20000074

08006fb0 <__NVIC_SetPriorityGrouping>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006fcc:	4013      	ands	r3, r2
 8006fce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fe2:	4a04      	ldr	r2, [pc, #16]	@ (8006ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	60d3      	str	r3, [r2, #12]
}
 8006fe8:	bf00      	nop
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	e000ed00 	.word	0xe000ed00

08006ff8 <__NVIC_GetPriorityGrouping>:
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ffc:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <__NVIC_GetPriorityGrouping+0x18>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	0a1b      	lsrs	r3, r3, #8
 8007002:	f003 0307 	and.w	r3, r3, #7
}
 8007006:	4618      	mov	r0, r3
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	e000ed00 	.word	0xe000ed00

08007014 <__NVIC_EnableIRQ>:
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800701e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007022:	2b00      	cmp	r3, #0
 8007024:	db0b      	blt.n	800703e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	f003 021f 	and.w	r2, r3, #31
 800702c:	4907      	ldr	r1, [pc, #28]	@ (800704c <__NVIC_EnableIRQ+0x38>)
 800702e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	2001      	movs	r0, #1
 8007036:	fa00 f202 	lsl.w	r2, r0, r2
 800703a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800703e:	bf00      	nop
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	e000e100 	.word	0xe000e100

08007050 <__NVIC_SetPriority>:
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	6039      	str	r1, [r7, #0]
 800705a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800705c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007060:	2b00      	cmp	r3, #0
 8007062:	db0a      	blt.n	800707a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	b2da      	uxtb	r2, r3
 8007068:	490c      	ldr	r1, [pc, #48]	@ (800709c <__NVIC_SetPriority+0x4c>)
 800706a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800706e:	0112      	lsls	r2, r2, #4
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	440b      	add	r3, r1
 8007074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007078:	e00a      	b.n	8007090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	b2da      	uxtb	r2, r3
 800707e:	4908      	ldr	r1, [pc, #32]	@ (80070a0 <__NVIC_SetPriority+0x50>)
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	3b04      	subs	r3, #4
 8007088:	0112      	lsls	r2, r2, #4
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	440b      	add	r3, r1
 800708e:	761a      	strb	r2, [r3, #24]
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	e000e100 	.word	0xe000e100
 80070a0:	e000ed00 	.word	0xe000ed00

080070a4 <NVIC_EncodePriority>:
{
 80070a4:	b480      	push	{r7}
 80070a6:	b089      	sub	sp, #36	@ 0x24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f1c3 0307 	rsb	r3, r3, #7
 80070be:	2b04      	cmp	r3, #4
 80070c0:	bf28      	it	cs
 80070c2:	2304      	movcs	r3, #4
 80070c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	3304      	adds	r3, #4
 80070ca:	2b06      	cmp	r3, #6
 80070cc:	d902      	bls.n	80070d4 <NVIC_EncodePriority+0x30>
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3b03      	subs	r3, #3
 80070d2:	e000      	b.n	80070d6 <NVIC_EncodePriority+0x32>
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070d8:	f04f 32ff 	mov.w	r2, #4294967295
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	fa02 f303 	lsl.w	r3, r2, r3
 80070e2:	43da      	mvns	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	401a      	ands	r2, r3
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070ec:	f04f 31ff 	mov.w	r1, #4294967295
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	fa01 f303 	lsl.w	r3, r1, r3
 80070f6:	43d9      	mvns	r1, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070fc:	4313      	orrs	r3, r2
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3724      	adds	r7, #36	@ 0x24
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff ff4c 	bl	8006fb0 <__NVIC_SetPriorityGrouping>
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007132:	f7ff ff61 	bl	8006ff8 <__NVIC_GetPriorityGrouping>
 8007136:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	6978      	ldr	r0, [r7, #20]
 800713e:	f7ff ffb1 	bl	80070a4 <NVIC_EncodePriority>
 8007142:	4602      	mov	r2, r0
 8007144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007148:	4611      	mov	r1, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff ff80 	bl	8007050 <__NVIC_SetPriority>
}
 8007150:	bf00      	nop
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff ff54 	bl	8007014 <__NVIC_EnableIRQ>
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007180:	f7ff fee6 	bl	8006f50 <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e099      	b.n	80072c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0201 	bic.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071b0:	e00f      	b.n	80071d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071b2:	f7ff fecd 	bl	8006f50 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b05      	cmp	r3, #5
 80071be:	d908      	bls.n	80071d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2220      	movs	r2, #32
 80071c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2203      	movs	r2, #3
 80071ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e078      	b.n	80072c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e8      	bne.n	80071b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4b38      	ldr	r3, [pc, #224]	@ (80072cc <HAL_DMA_Init+0x158>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800720a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007228:	2b04      	cmp	r3, #4
 800722a:	d107      	bne.n	800723c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	4313      	orrs	r3, r2
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0307 	bic.w	r3, r3, #7
 8007252:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	2b04      	cmp	r3, #4
 8007264:	d117      	bne.n	8007296 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	4313      	orrs	r3, r2
 800726e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00e      	beq.n	8007296 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fb0d 	bl	8007898 <DMA_CheckFifoParam>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2240      	movs	r2, #64	@ 0x40
 8007288:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007292:	2301      	movs	r3, #1
 8007294:	e016      	b.n	80072c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fac4 	bl	800782c <DMA_CalcBaseAndBitshift>
 80072a4:	4603      	mov	r3, r0
 80072a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ac:	223f      	movs	r2, #63	@ 0x3f
 80072ae:	409a      	lsls	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	f010803f 	.word	0xf010803f

080072d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_DMA_Start_IT+0x26>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e040      	b.n	8007378 <HAL_DMA_Start_IT+0xa8>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b01      	cmp	r3, #1
 8007308:	d12f      	bne.n	800736a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fa56 	bl	80077d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007328:	223f      	movs	r2, #63	@ 0x3f
 800732a:	409a      	lsls	r2, r3
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0216 	orr.w	r2, r2, #22
 800733e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0208 	orr.w	r2, r2, #8
 8007356:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	e005      	b.n	8007376 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007372:	2302      	movs	r3, #2
 8007374:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800738c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800738e:	f7ff fddf 	bl	8006f50 <HAL_GetTick>
 8007392:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d008      	beq.n	80073b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2280      	movs	r2, #128	@ 0x80
 80073a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e052      	b.n	8007458 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0216 	bic.w	r2, r2, #22
 80073c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695a      	ldr	r2, [r3, #20]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <HAL_DMA_Abort+0x62>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0208 	bic.w	r2, r2, #8
 80073f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0201 	bic.w	r2, r2, #1
 8007400:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007402:	e013      	b.n	800742c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007404:	f7ff fda4 	bl	8006f50 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b05      	cmp	r3, #5
 8007410:	d90c      	bls.n	800742c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2203      	movs	r2, #3
 800741c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e015      	b.n	8007458 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e4      	bne.n	8007404 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800743e:	223f      	movs	r2, #63	@ 0x3f
 8007440:	409a      	lsls	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d004      	beq.n	800747e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2280      	movs	r2, #128	@ 0x80
 8007478:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e00c      	b.n	8007498 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2205      	movs	r2, #5
 8007482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074b0:	4b8e      	ldr	r3, [pc, #568]	@ (80076ec <HAL_DMA_IRQHandler+0x248>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a8e      	ldr	r2, [pc, #568]	@ (80076f0 <HAL_DMA_IRQHandler+0x24c>)
 80074b6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ba:	0a9b      	lsrs	r3, r3, #10
 80074bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ce:	2208      	movs	r2, #8
 80074d0:	409a      	lsls	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4013      	ands	r3, r2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01a      	beq.n	8007510 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d013      	beq.n	8007510 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0204 	bic.w	r2, r2, #4
 80074f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074fc:	2208      	movs	r2, #8
 80074fe:	409a      	lsls	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007508:	f043 0201 	orr.w	r2, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007514:	2201      	movs	r2, #1
 8007516:	409a      	lsls	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d012      	beq.n	8007546 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007532:	2201      	movs	r2, #1
 8007534:	409a      	lsls	r2, r3
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800753e:	f043 0202 	orr.w	r2, r3, #2
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800754a:	2204      	movs	r2, #4
 800754c:	409a      	lsls	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4013      	ands	r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d012      	beq.n	800757c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007568:	2204      	movs	r2, #4
 800756a:	409a      	lsls	r2, r3
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007574:	f043 0204 	orr.w	r2, r3, #4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007580:	2210      	movs	r2, #16
 8007582:	409a      	lsls	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4013      	ands	r3, r2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d043      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d03c      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800759e:	2210      	movs	r2, #16
 80075a0:	409a      	lsls	r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d018      	beq.n	80075e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d108      	bne.n	80075d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d024      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
 80075d2:	e01f      	b.n	8007614 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01b      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	4798      	blx	r3
 80075e4:	e016      	b.n	8007614 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d107      	bne.n	8007604 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0208 	bic.w	r2, r2, #8
 8007602:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007618:	2220      	movs	r2, #32
 800761a:	409a      	lsls	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4013      	ands	r3, r2
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 808f 	beq.w	8007744 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8087 	beq.w	8007744 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800763a:	2220      	movs	r2, #32
 800763c:	409a      	lsls	r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b05      	cmp	r3, #5
 800764c:	d136      	bne.n	80076bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0216 	bic.w	r2, r2, #22
 800765c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695a      	ldr	r2, [r3, #20]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800766c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <HAL_DMA_IRQHandler+0x1da>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0208 	bic.w	r2, r2, #8
 800768c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007692:	223f      	movs	r2, #63	@ 0x3f
 8007694:	409a      	lsls	r2, r3
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d07e      	beq.n	80077b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
        }
        return;
 80076ba:	e079      	b.n	80077b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01d      	beq.n	8007706 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10d      	bne.n	80076f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d031      	beq.n	8007744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
 80076e8:	e02c      	b.n	8007744 <HAL_DMA_IRQHandler+0x2a0>
 80076ea:	bf00      	nop
 80076ec:	2000000c 	.word	0x2000000c
 80076f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d023      	beq.n	8007744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4798      	blx	r3
 8007704:	e01e      	b.n	8007744 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10f      	bne.n	8007734 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0210 	bic.w	r2, r2, #16
 8007722:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007748:	2b00      	cmp	r3, #0
 800774a:	d032      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d022      	beq.n	800779e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2205      	movs	r2, #5
 800775c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0201 	bic.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	3301      	adds	r3, #1
 8007774:	60bb      	str	r3, [r7, #8]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	429a      	cmp	r2, r3
 800777a:	d307      	bcc.n	800778c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f2      	bne.n	8007770 <HAL_DMA_IRQHandler+0x2cc>
 800778a:	e000      	b.n	800778e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800778c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
 80077ae:	e000      	b.n	80077b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80077b0:	bf00      	nop
    }
  }
}
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b40      	cmp	r3, #64	@ 0x40
 80077fc:	d108      	bne.n	8007810 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800780e:	e007      	b.n	8007820 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	3b10      	subs	r3, #16
 800783c:	4a14      	ldr	r2, [pc, #80]	@ (8007890 <DMA_CalcBaseAndBitshift+0x64>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	091b      	lsrs	r3, r3, #4
 8007844:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007846:	4a13      	ldr	r2, [pc, #76]	@ (8007894 <DMA_CalcBaseAndBitshift+0x68>)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b03      	cmp	r3, #3
 8007858:	d909      	bls.n	800786e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	1d1a      	adds	r2, r3, #4
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	659a      	str	r2, [r3, #88]	@ 0x58
 800786c:	e007      	b.n	800787e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	aaaaaaab 	.word	0xaaaaaaab
 8007894:	080134d4 	.word	0x080134d4

08007898 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d11f      	bne.n	80078f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d856      	bhi.n	8007966 <DMA_CheckFifoParam+0xce>
 80078b8:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <DMA_CheckFifoParam+0x28>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	080078e3 	.word	0x080078e3
 80078c8:	080078d1 	.word	0x080078d1
 80078cc:	08007967 	.word	0x08007967
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d046      	beq.n	800796a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078e0:	e043      	b.n	800796a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80078ea:	d140      	bne.n	800796e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078f0:	e03d      	b.n	800796e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078fa:	d121      	bne.n	8007940 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d837      	bhi.n	8007972 <DMA_CheckFifoParam+0xda>
 8007902:	a201      	add	r2, pc, #4	@ (adr r2, 8007908 <DMA_CheckFifoParam+0x70>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	08007919 	.word	0x08007919
 800790c:	0800791f 	.word	0x0800791f
 8007910:	08007919 	.word	0x08007919
 8007914:	08007931 	.word	0x08007931
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	73fb      	strb	r3, [r7, #15]
      break;
 800791c:	e030      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007922:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d025      	beq.n	8007976 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800792e:	e022      	b.n	8007976 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007938:	d11f      	bne.n	800797a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800793e:	e01c      	b.n	800797a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d903      	bls.n	800794e <DMA_CheckFifoParam+0xb6>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d003      	beq.n	8007954 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800794c:	e018      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	73fb      	strb	r3, [r7, #15]
      break;
 8007952:	e015      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00e      	beq.n	800797e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
      break;
 8007964:	e00b      	b.n	800797e <DMA_CheckFifoParam+0xe6>
      break;
 8007966:	bf00      	nop
 8007968:	e00a      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 800796a:	bf00      	nop
 800796c:	e008      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 800796e:	bf00      	nop
 8007970:	e006      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 8007972:	bf00      	nop
 8007974:	e004      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 8007976:	bf00      	nop
 8007978:	e002      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;   
 800797a:	bf00      	nop
 800797c:	e000      	b.n	8007980 <DMA_CheckFifoParam+0xe8>
      break;
 800797e:	bf00      	nop
    }
  } 
  
  return status; 
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop

08007990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007990:	b480      	push	{r7}
 8007992:	b089      	sub	sp, #36	@ 0x24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800799e:	2300      	movs	r3, #0
 80079a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	e159      	b.n	8007c60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80079ac:	2201      	movs	r2, #1
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4013      	ands	r3, r2
 80079be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	f040 8148 	bne.w	8007c5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d005      	beq.n	80079e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d130      	bne.n	8007a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	2203      	movs	r2, #3
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43db      	mvns	r3, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4013      	ands	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a18:	2201      	movs	r2, #1
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	43db      	mvns	r3, r3
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4013      	ands	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	091b      	lsrs	r3, r3, #4
 8007a2e:	f003 0201 	and.w	r2, r3, #1
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d017      	beq.n	8007a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	43db      	mvns	r3, r3
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	4013      	ands	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d123      	bne.n	8007ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	08da      	lsrs	r2, r3, #3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3208      	adds	r2, #8
 8007a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	220f      	movs	r2, #15
 8007aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4013      	ands	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	08da      	lsrs	r2, r3, #3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3208      	adds	r2, #8
 8007ace:	69b9      	ldr	r1, [r7, #24]
 8007ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	2203      	movs	r2, #3
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f003 0203 	and.w	r2, r3, #3
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 80a2 	beq.w	8007c5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	4b57      	ldr	r3, [pc, #348]	@ (8007c78 <HAL_GPIO_Init+0x2e8>)
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1e:	4a56      	ldr	r2, [pc, #344]	@ (8007c78 <HAL_GPIO_Init+0x2e8>)
 8007b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b26:	4b54      	ldr	r3, [pc, #336]	@ (8007c78 <HAL_GPIO_Init+0x2e8>)
 8007b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b32:	4a52      	ldr	r2, [pc, #328]	@ (8007c7c <HAL_GPIO_Init+0x2ec>)
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	089b      	lsrs	r3, r3, #2
 8007b38:	3302      	adds	r3, #2
 8007b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	220f      	movs	r2, #15
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	43db      	mvns	r3, r3
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	4013      	ands	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a49      	ldr	r2, [pc, #292]	@ (8007c80 <HAL_GPIO_Init+0x2f0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d019      	beq.n	8007b92 <HAL_GPIO_Init+0x202>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a48      	ldr	r2, [pc, #288]	@ (8007c84 <HAL_GPIO_Init+0x2f4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <HAL_GPIO_Init+0x1fe>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a47      	ldr	r2, [pc, #284]	@ (8007c88 <HAL_GPIO_Init+0x2f8>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00d      	beq.n	8007b8a <HAL_GPIO_Init+0x1fa>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a46      	ldr	r2, [pc, #280]	@ (8007c8c <HAL_GPIO_Init+0x2fc>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d007      	beq.n	8007b86 <HAL_GPIO_Init+0x1f6>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a45      	ldr	r2, [pc, #276]	@ (8007c90 <HAL_GPIO_Init+0x300>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d101      	bne.n	8007b82 <HAL_GPIO_Init+0x1f2>
 8007b7e:	2304      	movs	r3, #4
 8007b80:	e008      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b82:	2307      	movs	r3, #7
 8007b84:	e006      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b86:	2303      	movs	r3, #3
 8007b88:	e004      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e002      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <HAL_GPIO_Init+0x204>
 8007b92:	2300      	movs	r3, #0
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	f002 0203 	and.w	r2, r2, #3
 8007b9a:	0092      	lsls	r2, r2, #2
 8007b9c:	4093      	lsls	r3, r2
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ba4:	4935      	ldr	r1, [pc, #212]	@ (8007c7c <HAL_GPIO_Init+0x2ec>)
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	089b      	lsrs	r3, r3, #2
 8007baa:	3302      	adds	r3, #2
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007bb2:	4b38      	ldr	r3, [pc, #224]	@ (8007c94 <HAL_GPIO_Init+0x304>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	43db      	mvns	r3, r3
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8007c94 <HAL_GPIO_Init+0x304>)
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8007c94 <HAL_GPIO_Init+0x304>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	4013      	ands	r3, r2
 8007bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007c00:	4a24      	ldr	r2, [pc, #144]	@ (8007c94 <HAL_GPIO_Init+0x304>)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007c06:	4b23      	ldr	r3, [pc, #140]	@ (8007c94 <HAL_GPIO_Init+0x304>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	43db      	mvns	r3, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4013      	ands	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007c94 <HAL_GPIO_Init+0x304>)
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c30:	4b18      	ldr	r3, [pc, #96]	@ (8007c94 <HAL_GPIO_Init+0x304>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c54:	4a0f      	ldr	r2, [pc, #60]	@ (8007c94 <HAL_GPIO_Init+0x304>)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	2b0f      	cmp	r3, #15
 8007c64:	f67f aea2 	bls.w	80079ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c68:	bf00      	nop
 8007c6a:	bf00      	nop
 8007c6c:	3724      	adds	r7, #36	@ 0x24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	40013800 	.word	0x40013800
 8007c80:	40020000 	.word	0x40020000
 8007c84:	40020400 	.word	0x40020400
 8007c88:	40020800 	.word	0x40020800
 8007c8c:	40020c00 	.word	0x40020c00
 8007c90:	40021000 	.word	0x40021000
 8007c94:	40013c00 	.word	0x40013c00

08007c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	887b      	ldrh	r3, [r7, #2]
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	e001      	b.n	8007cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007cd8:	787b      	ldrb	r3, [r7, #1]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cde:	887a      	ldrh	r2, [r7, #2]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ce4:	e003      	b.n	8007cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ce6:	887b      	ldrh	r3, [r7, #2]
 8007ce8:	041a      	lsls	r2, r3, #16
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	619a      	str	r2, [r3, #24]
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d0c:	887a      	ldrh	r2, [r7, #2]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4013      	ands	r3, r2
 8007d12:	041a      	lsls	r2, r3, #16
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	43d9      	mvns	r1, r3
 8007d18:	887b      	ldrh	r3, [r7, #2]
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	619a      	str	r2, [r3, #24]
}
 8007d22:	bf00      	nop
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
	...

08007d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007d3a:	4b08      	ldr	r3, [pc, #32]	@ (8007d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d3c:	695a      	ldr	r2, [r3, #20]
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	4013      	ands	r3, r2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d006      	beq.n	8007d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d46:	4a05      	ldr	r2, [pc, #20]	@ (8007d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d48:	88fb      	ldrh	r3, [r7, #6]
 8007d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fa fcf0 	bl	8002734 <HAL_GPIO_EXTI_Callback>
  }
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40013c00 	.word	0x40013c00

08007d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e12b      	b.n	8007fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fc f884 	bl	8003e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2224      	movs	r2, #36	@ 0x24
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0201 	bic.w	r2, r2, #1
 8007da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f002 fa22 	bl	800a20c <HAL_RCC_GetPCLK1Freq>
 8007dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	4a81      	ldr	r2, [pc, #516]	@ (8007fd4 <HAL_I2C_Init+0x274>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d807      	bhi.n	8007de4 <HAL_I2C_Init+0x84>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4a80      	ldr	r2, [pc, #512]	@ (8007fd8 <HAL_I2C_Init+0x278>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	bf94      	ite	ls
 8007ddc:	2301      	movls	r3, #1
 8007dde:	2300      	movhi	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e006      	b.n	8007df2 <HAL_I2C_Init+0x92>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a7d      	ldr	r2, [pc, #500]	@ (8007fdc <HAL_I2C_Init+0x27c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bf94      	ite	ls
 8007dec:	2301      	movls	r3, #1
 8007dee:	2300      	movhi	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e0e7      	b.n	8007fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4a78      	ldr	r2, [pc, #480]	@ (8007fe0 <HAL_I2C_Init+0x280>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	0c9b      	lsrs	r3, r3, #18
 8007e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a6a      	ldr	r2, [pc, #424]	@ (8007fd4 <HAL_I2C_Init+0x274>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d802      	bhi.n	8007e34 <HAL_I2C_Init+0xd4>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3301      	adds	r3, #1
 8007e32:	e009      	b.n	8007e48 <HAL_I2C_Init+0xe8>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	4a69      	ldr	r2, [pc, #420]	@ (8007fe4 <HAL_I2C_Init+0x284>)
 8007e40:	fba2 2303 	umull	r2, r3, r2, r3
 8007e44:	099b      	lsrs	r3, r3, #6
 8007e46:	3301      	adds	r3, #1
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007e5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	495c      	ldr	r1, [pc, #368]	@ (8007fd4 <HAL_I2C_Init+0x274>)
 8007e64:	428b      	cmp	r3, r1
 8007e66:	d819      	bhi.n	8007e9c <HAL_I2C_Init+0x13c>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1e59      	subs	r1, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e76:	1c59      	adds	r1, r3, #1
 8007e78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007e7c:	400b      	ands	r3, r1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <HAL_I2C_Init+0x138>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	1e59      	subs	r1, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e90:	3301      	adds	r3, #1
 8007e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e96:	e051      	b.n	8007f3c <HAL_I2C_Init+0x1dc>
 8007e98:	2304      	movs	r3, #4
 8007e9a:	e04f      	b.n	8007f3c <HAL_I2C_Init+0x1dc>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d111      	bne.n	8007ec8 <HAL_I2C_Init+0x168>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	1e58      	subs	r0, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6859      	ldr	r1, [r3, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	440b      	add	r3, r1
 8007eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bf0c      	ite	eq
 8007ec0:	2301      	moveq	r3, #1
 8007ec2:	2300      	movne	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	e012      	b.n	8007eee <HAL_I2C_Init+0x18e>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	1e58      	subs	r0, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6859      	ldr	r1, [r3, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	440b      	add	r3, r1
 8007ed6:	0099      	lsls	r1, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ede:	3301      	adds	r3, #1
 8007ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	bf0c      	ite	eq
 8007ee8:	2301      	moveq	r3, #1
 8007eea:	2300      	movne	r3, #0
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <HAL_I2C_Init+0x196>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e022      	b.n	8007f3c <HAL_I2C_Init+0x1dc>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10e      	bne.n	8007f1c <HAL_I2C_Init+0x1bc>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	1e58      	subs	r0, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6859      	ldr	r1, [r3, #4]
 8007f06:	460b      	mov	r3, r1
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	440b      	add	r3, r1
 8007f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f10:	3301      	adds	r3, #1
 8007f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f1a:	e00f      	b.n	8007f3c <HAL_I2C_Init+0x1dc>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	1e58      	subs	r0, r3, #1
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6859      	ldr	r1, [r3, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	0099      	lsls	r1, r3, #2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f32:	3301      	adds	r3, #1
 8007f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	6809      	ldr	r1, [r1, #0]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	69da      	ldr	r2, [r3, #28]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007f6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6911      	ldr	r1, [r2, #16]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	68d2      	ldr	r2, [r2, #12]
 8007f76:	4311      	orrs	r1, r2
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6812      	ldr	r2, [r2, #0]
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695a      	ldr	r2, [r3, #20]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	000186a0 	.word	0x000186a0
 8007fd8:	001e847f 	.word	0x001e847f
 8007fdc:	003d08ff 	.word	0x003d08ff
 8007fe0:	431bde83 	.word	0x431bde83
 8007fe4:	10624dd3 	.word	0x10624dd3

08007fe8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	607a      	str	r2, [r7, #4]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	817b      	strh	r3, [r7, #10]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ffc:	f7fe ffa8 	bl	8006f50 <HAL_GetTick>
 8008000:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b20      	cmp	r3, #32
 800800c:	f040 80e0 	bne.w	80081d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	2319      	movs	r3, #25
 8008016:	2201      	movs	r2, #1
 8008018:	4970      	ldr	r1, [pc, #448]	@ (80081dc <HAL_I2C_Master_Transmit+0x1f4>)
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f001 fa3c 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008026:	2302      	movs	r3, #2
 8008028:	e0d3      	b.n	80081d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_I2C_Master_Transmit+0x50>
 8008034:	2302      	movs	r3, #2
 8008036:	e0cc      	b.n	80081d2 <HAL_I2C_Master_Transmit+0x1ea>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b01      	cmp	r3, #1
 800804c:	d007      	beq.n	800805e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 0201 	orr.w	r2, r2, #1
 800805c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800806c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2221      	movs	r2, #33	@ 0x21
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2210      	movs	r2, #16
 800807a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	893a      	ldrh	r2, [r7, #8]
 800808e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4a50      	ldr	r2, [pc, #320]	@ (80081e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800809e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80080a0:	8979      	ldrh	r1, [r7, #10]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 ff28 	bl	8008efc <I2C_MasterRequestWrite>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e08d      	b.n	80081d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080b6:	2300      	movs	r3, #0
 80080b8:	613b      	str	r3, [r7, #16]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	613b      	str	r3, [r7, #16]
 80080ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80080cc:	e066      	b.n	800819c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	6a39      	ldr	r1, [r7, #32]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f001 fafa 	bl	80096cc <I2C_WaitOnTXEFlagUntilTimeout>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00d      	beq.n	80080fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d107      	bne.n	80080f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e06b      	b.n	80081d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fe:	781a      	ldrb	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b04      	cmp	r3, #4
 8008136:	d11b      	bne.n	8008170 <HAL_I2C_Master_Transmit+0x188>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800813c:	2b00      	cmp	r3, #0
 800813e:	d017      	beq.n	8008170 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008168:	3b01      	subs	r3, #1
 800816a:	b29a      	uxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	6a39      	ldr	r1, [r7, #32]
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f001 faf1 	bl	800975c <I2C_WaitOnBTFFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00d      	beq.n	800819c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008184:	2b04      	cmp	r3, #4
 8008186:	d107      	bne.n	8008198 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008196:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e01a      	b.n	80081d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d194      	bne.n	80080ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	e000      	b.n	80081d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80081d0:	2302      	movs	r3, #2
  }
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	00100002 	.word	0x00100002
 80081e0:	ffff0000 	.word	0xffff0000

080081e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08c      	sub	sp, #48	@ 0x30
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	461a      	mov	r2, r3
 80081f0:	460b      	mov	r3, r1
 80081f2:	817b      	strh	r3, [r7, #10]
 80081f4:	4613      	mov	r3, r2
 80081f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081f8:	f7fe feaa 	bl	8006f50 <HAL_GetTick>
 80081fc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b20      	cmp	r3, #32
 8008208:	f040 8217 	bne.w	800863a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	2319      	movs	r3, #25
 8008212:	2201      	movs	r2, #1
 8008214:	497c      	ldr	r1, [pc, #496]	@ (8008408 <HAL_I2C_Master_Receive+0x224>)
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f001 f93e 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008222:	2302      	movs	r3, #2
 8008224:	e20a      	b.n	800863c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800822c:	2b01      	cmp	r3, #1
 800822e:	d101      	bne.n	8008234 <HAL_I2C_Master_Receive+0x50>
 8008230:	2302      	movs	r3, #2
 8008232:	e203      	b.n	800863c <HAL_I2C_Master_Receive+0x458>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b01      	cmp	r3, #1
 8008248:	d007      	beq.n	800825a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0201 	orr.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2222      	movs	r2, #34	@ 0x22
 800826e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2210      	movs	r2, #16
 8008276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	893a      	ldrh	r2, [r7, #8]
 800828a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4a5c      	ldr	r2, [pc, #368]	@ (800840c <HAL_I2C_Master_Receive+0x228>)
 800829a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800829c:	8979      	ldrh	r1, [r7, #10]
 800829e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 feac 	bl	8009000 <I2C_MasterRequestRead>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e1c4      	b.n	800863c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d113      	bne.n	80082e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ba:	2300      	movs	r3, #0
 80082bc:	623b      	str	r3, [r7, #32]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	623b      	str	r3, [r7, #32]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	623b      	str	r3, [r7, #32]
 80082ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e198      	b.n	8008614 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d11b      	bne.n	8008322 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082fa:	2300      	movs	r3, #0
 80082fc:	61fb      	str	r3, [r7, #28]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	e178      	b.n	8008614 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008326:	2b02      	cmp	r3, #2
 8008328:	d11b      	bne.n	8008362 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008338:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	61bb      	str	r3, [r7, #24]
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	e158      	b.n	8008614 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008388:	e144      	b.n	8008614 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800838e:	2b03      	cmp	r3, #3
 8008390:	f200 80f1 	bhi.w	8008576 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008398:	2b01      	cmp	r3, #1
 800839a:	d123      	bne.n	80083e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800839c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800839e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f001 fa23 	bl	80097ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e145      	b.n	800863c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691a      	ldr	r2, [r3, #16]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083cc:	3b01      	subs	r3, #1
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083e2:	e117      	b.n	8008614 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d14e      	bne.n	800848a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f2:	2200      	movs	r2, #0
 80083f4:	4906      	ldr	r1, [pc, #24]	@ (8008410 <HAL_I2C_Master_Receive+0x22c>)
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f001 f84e 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d008      	beq.n	8008414 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e11a      	b.n	800863c <HAL_I2C_Master_Receive+0x458>
 8008406:	bf00      	nop
 8008408:	00100002 	.word	0x00100002
 800840c:	ffff0000 	.word	0xffff0000
 8008410:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691a      	ldr	r2, [r3, #16]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842e:	b2d2      	uxtb	r2, r2
 8008430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008436:	1c5a      	adds	r2, r3, #1
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008440:	3b01      	subs	r3, #1
 8008442:	b29a      	uxth	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800844c:	b29b      	uxth	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800847e:	b29b      	uxth	r3, r3
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008488:	e0c4      	b.n	8008614 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	2200      	movs	r2, #0
 8008492:	496c      	ldr	r1, [pc, #432]	@ (8008644 <HAL_I2C_Master_Receive+0x460>)
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 ffff 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0cb      	b.n	800863c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	2200      	movs	r2, #0
 80084ee:	4955      	ldr	r1, [pc, #340]	@ (8008644 <HAL_I2C_Master_Receive+0x460>)
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 ffd1 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e09d      	b.n	800863c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800850e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691a      	ldr	r2, [r3, #16]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854c:	b2d2      	uxtb	r2, r2
 800854e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800855e:	3b01      	subs	r3, #1
 8008560:	b29a      	uxth	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008574:	e04e      	b.n	8008614 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008578:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f001 f936 	bl	80097ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e058      	b.n	800863c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	3b01      	subs	r3, #1
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d124      	bne.n	8008614 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d107      	bne.n	80085e2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085e0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	691a      	ldr	r2, [r3, #16]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800860a:	b29b      	uxth	r3, r3
 800860c:	3b01      	subs	r3, #1
 800860e:	b29a      	uxth	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008618:	2b00      	cmp	r3, #0
 800861a:	f47f aeb6 	bne.w	800838a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2220      	movs	r2, #32
 8008622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	e000      	b.n	800863c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800863a:	2302      	movs	r3, #2
  }
}
 800863c:	4618      	mov	r0, r3
 800863e:	3728      	adds	r7, #40	@ 0x28
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	00010004 	.word	0x00010004

08008648 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af02      	add	r7, sp, #8
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	4608      	mov	r0, r1
 8008652:	4611      	mov	r1, r2
 8008654:	461a      	mov	r2, r3
 8008656:	4603      	mov	r3, r0
 8008658:	817b      	strh	r3, [r7, #10]
 800865a:	460b      	mov	r3, r1
 800865c:	813b      	strh	r3, [r7, #8]
 800865e:	4613      	mov	r3, r2
 8008660:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008662:	f7fe fc75 	bl	8006f50 <HAL_GetTick>
 8008666:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b20      	cmp	r3, #32
 8008672:	f040 80d9 	bne.w	8008828 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	2319      	movs	r3, #25
 800867c:	2201      	movs	r2, #1
 800867e:	496d      	ldr	r1, [pc, #436]	@ (8008834 <HAL_I2C_Mem_Write+0x1ec>)
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 ff09 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800868c:	2302      	movs	r3, #2
 800868e:	e0cc      	b.n	800882a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <HAL_I2C_Mem_Write+0x56>
 800869a:	2302      	movs	r3, #2
 800869c:	e0c5      	b.n	800882a <HAL_I2C_Mem_Write+0x1e2>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d007      	beq.n	80086c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0201 	orr.w	r2, r2, #1
 80086c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2221      	movs	r2, #33	@ 0x21
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2240      	movs	r2, #64	@ 0x40
 80086e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a3a      	ldr	r2, [r7, #32]
 80086ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80086f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a4d      	ldr	r2, [pc, #308]	@ (8008838 <HAL_I2C_Mem_Write+0x1f0>)
 8008704:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008706:	88f8      	ldrh	r0, [r7, #6]
 8008708:	893a      	ldrh	r2, [r7, #8]
 800870a:	8979      	ldrh	r1, [r7, #10]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	4603      	mov	r3, r0
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 fd40 	bl	800919c <I2C_RequestMemoryWrite>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d052      	beq.n	80087c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e081      	b.n	800882a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 ffce 	bl	80096cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00d      	beq.n	8008752 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873a:	2b04      	cmp	r3, #4
 800873c:	d107      	bne.n	800874e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800874c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e06b      	b.n	800882a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008756:	781a      	ldrb	r2, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800876c:	3b01      	subs	r3, #1
 800876e:	b29a      	uxth	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	b29a      	uxth	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	2b04      	cmp	r3, #4
 800878e:	d11b      	bne.n	80087c8 <HAL_I2C_Mem_Write+0x180>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008794:	2b00      	cmp	r3, #0
 8008796:	d017      	beq.n	80087c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879c:	781a      	ldrb	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1aa      	bne.n	8008726 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 ffc1 	bl	800975c <I2C_WaitOnBTFFlagUntilTimeout>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00d      	beq.n	80087fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d107      	bne.n	80087f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e016      	b.n	800882a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800880a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2220      	movs	r2, #32
 8008810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	e000      	b.n	800882a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008828:	2302      	movs	r3, #2
  }
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	00100002 	.word	0x00100002
 8008838:	ffff0000 	.word	0xffff0000

0800883c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08c      	sub	sp, #48	@ 0x30
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	4608      	mov	r0, r1
 8008846:	4611      	mov	r1, r2
 8008848:	461a      	mov	r2, r3
 800884a:	4603      	mov	r3, r0
 800884c:	817b      	strh	r3, [r7, #10]
 800884e:	460b      	mov	r3, r1
 8008850:	813b      	strh	r3, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008856:	f7fe fb7b 	bl	8006f50 <HAL_GetTick>
 800885a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b20      	cmp	r3, #32
 8008866:	f040 8214 	bne.w	8008c92 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800886a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2319      	movs	r3, #25
 8008870:	2201      	movs	r2, #1
 8008872:	497b      	ldr	r1, [pc, #492]	@ (8008a60 <HAL_I2C_Mem_Read+0x224>)
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 fe0f 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008880:	2302      	movs	r3, #2
 8008882:	e207      	b.n	8008c94 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800888a:	2b01      	cmp	r3, #1
 800888c:	d101      	bne.n	8008892 <HAL_I2C_Mem_Read+0x56>
 800888e:	2302      	movs	r3, #2
 8008890:	e200      	b.n	8008c94 <HAL_I2C_Mem_Read+0x458>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d007      	beq.n	80088b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0201 	orr.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80088c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2222      	movs	r2, #34	@ 0x22
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2240      	movs	r2, #64	@ 0x40
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80088e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4a5b      	ldr	r2, [pc, #364]	@ (8008a64 <HAL_I2C_Mem_Read+0x228>)
 80088f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088fa:	88f8      	ldrh	r0, [r7, #6]
 80088fc:	893a      	ldrh	r2, [r7, #8]
 80088fe:	8979      	ldrh	r1, [r7, #10]
 8008900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	4603      	mov	r3, r0
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 fcdc 	bl	80092c8 <I2C_RequestMemoryRead>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e1bc      	b.n	8008c94 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800891e:	2b00      	cmp	r3, #0
 8008920:	d113      	bne.n	800894a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008922:	2300      	movs	r3, #0
 8008924:	623b      	str	r3, [r7, #32]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	623b      	str	r3, [r7, #32]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	623b      	str	r3, [r7, #32]
 8008936:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	e190      	b.n	8008c6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800894e:	2b01      	cmp	r3, #1
 8008950:	d11b      	bne.n	800898a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008962:	2300      	movs	r3, #0
 8008964:	61fb      	str	r3, [r7, #28]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	61fb      	str	r3, [r7, #28]
 8008976:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	e170      	b.n	8008c6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800898e:	2b02      	cmp	r3, #2
 8008990:	d11b      	bne.n	80089ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089b2:	2300      	movs	r3, #0
 80089b4:	61bb      	str	r3, [r7, #24]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	61bb      	str	r3, [r7, #24]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	61bb      	str	r3, [r7, #24]
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	e150      	b.n	8008c6c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	617b      	str	r3, [r7, #20]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80089e0:	e144      	b.n	8008c6c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	f200 80f1 	bhi.w	8008bce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d123      	bne.n	8008a3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fef7 	bl	80097ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e145      	b.n	8008c94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a24:	3b01      	subs	r3, #1
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008a3a:	e117      	b.n	8008c6c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d14e      	bne.n	8008ae2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	4906      	ldr	r1, [pc, #24]	@ (8008a68 <HAL_I2C_Mem_Read+0x22c>)
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fd22 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e11a      	b.n	8008c94 <HAL_I2C_Mem_Read+0x458>
 8008a5e:	bf00      	nop
 8008a60:	00100002 	.word	0x00100002
 8008a64:	ffff0000 	.word	0xffff0000
 8008a68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a86:	b2d2      	uxtb	r2, r2
 8008a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ae0:	e0c4      	b.n	8008c6c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae8:	2200      	movs	r2, #0
 8008aea:	496c      	ldr	r1, [pc, #432]	@ (8008c9c <HAL_I2C_Mem_Read+0x460>)
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 fcd3 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0cb      	b.n	8008c94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	691a      	ldr	r2, [r3, #16]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	2200      	movs	r2, #0
 8008b46:	4955      	ldr	r1, [pc, #340]	@ (8008c9c <HAL_I2C_Mem_Read+0x460>)
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fca5 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e09d      	b.n	8008c94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691a      	ldr	r2, [r3, #16]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b84:	3b01      	subs	r3, #1
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	3b01      	subs	r3, #1
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	691a      	ldr	r2, [r3, #16]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008bcc:	e04e      	b.n	8008c6c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 fe0a 	bl	80097ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e058      	b.n	8008c94 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	691a      	ldr	r2, [r3, #16]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bec:	b2d2      	uxtb	r2, r2
 8008bee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d124      	bne.n	8008c6c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d107      	bne.n	8008c3a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c38:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c44:	b2d2      	uxtb	r2, r2
 8008c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f47f aeb6 	bne.w	80089e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e000      	b.n	8008c94 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008c92:	2302      	movs	r3, #2
  }
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3728      	adds	r7, #40	@ 0x28
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	00010004 	.word	0x00010004

08008ca0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08a      	sub	sp, #40	@ 0x28
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	607a      	str	r2, [r7, #4]
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	460b      	mov	r3, r1
 8008cae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008cb0:	f7fe f94e 	bl	8006f50 <HAL_GetTick>
 8008cb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b20      	cmp	r3, #32
 8008cc4:	f040 8111 	bne.w	8008eea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	2319      	movs	r3, #25
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4988      	ldr	r1, [pc, #544]	@ (8008ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 fbe0 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e104      	b.n	8008eec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_I2C_IsDeviceReady+0x50>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e0fd      	b.n	8008eec <HAL_I2C_IsDeviceReady+0x24c>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d007      	beq.n	8008d16 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f042 0201 	orr.w	r2, r2, #1
 8008d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2224      	movs	r2, #36	@ 0x24
 8008d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4a70      	ldr	r2, [pc, #448]	@ (8008ef8 <HAL_I2C_IsDeviceReady+0x258>)
 8008d38:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d48:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fb9e 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00d      	beq.n	8008d7e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d70:	d103      	bne.n	8008d7a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d78:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e0b6      	b.n	8008eec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d7e:	897b      	ldrh	r3, [r7, #10]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008d8c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008d8e:	f7fe f8df 	bl	8006f50 <HAL_GetTick>
 8008d92:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	bf0c      	ite	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	2300      	movne	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008db8:	bf0c      	ite	eq
 8008dba:	2301      	moveq	r3, #1
 8008dbc:	2300      	movne	r3, #0
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008dc2:	e025      	b.n	8008e10 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008dc4:	f7fe f8c4 	bl	8006f50 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d302      	bcc.n	8008dda <HAL_I2C_IsDeviceReady+0x13a>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d103      	bne.n	8008de2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	22a0      	movs	r2, #160	@ 0xa0
 8008dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	f003 0302 	and.w	r3, r3, #2
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	bf0c      	ite	eq
 8008df0:	2301      	moveq	r3, #1
 8008df2:	2300      	movne	r3, #0
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e06:	bf0c      	ite	eq
 8008e08:	2301      	moveq	r3, #1
 8008e0a:	2300      	movne	r3, #0
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2ba0      	cmp	r3, #160	@ 0xa0
 8008e1a:	d005      	beq.n	8008e28 <HAL_I2C_IsDeviceReady+0x188>
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d102      	bne.n	8008e28 <HAL_I2C_IsDeviceReady+0x188>
 8008e22:	7dbb      	ldrb	r3, [r7, #22]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0cd      	beq.n	8008dc4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d129      	bne.n	8008e92 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e4c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e4e:	2300      	movs	r3, #0
 8008e50:	613b      	str	r3, [r7, #16]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	613b      	str	r3, [r7, #16]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	2319      	movs	r3, #25
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	4921      	ldr	r1, [pc, #132]	@ (8008ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 fb12 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e036      	b.n	8008eec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e02c      	b.n	8008eec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ea0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008eaa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	2319      	movs	r3, #25
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	490f      	ldr	r1, [pc, #60]	@ (8008ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 faee 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e012      	b.n	8008eec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	f4ff af32 	bcc.w	8008d3a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008eea:	2302      	movs	r3, #2
  }
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3720      	adds	r7, #32
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	00100002 	.word	0x00100002
 8008ef8:	ffff0000 	.word	0xffff0000

08008efc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b088      	sub	sp, #32
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	607a      	str	r2, [r7, #4]
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d006      	beq.n	8008f26 <I2C_MasterRequestWrite+0x2a>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d003      	beq.n	8008f26 <I2C_MasterRequestWrite+0x2a>
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008f24:	d108      	bne.n	8008f38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	e00b      	b.n	8008f50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	2b12      	cmp	r3, #18
 8008f3e:	d107      	bne.n	8008f50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 fa9b 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00d      	beq.n	8008f84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f76:	d103      	bne.n	8008f80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e035      	b.n	8008ff0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f8c:	d108      	bne.n	8008fa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f8e:	897b      	ldrh	r3, [r7, #10]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008f9c:	611a      	str	r2, [r3, #16]
 8008f9e:	e01b      	b.n	8008fd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008fa0:	897b      	ldrh	r3, [r7, #10]
 8008fa2:	11db      	asrs	r3, r3, #7
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f003 0306 	and.w	r3, r3, #6
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f063 030f 	orn	r3, r3, #15
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	490e      	ldr	r1, [pc, #56]	@ (8008ff8 <I2C_MasterRequestWrite+0xfc>)
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 fae4 	bl	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e010      	b.n	8008ff0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008fce:	897b      	ldrh	r3, [r7, #10]
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	4907      	ldr	r1, [pc, #28]	@ (8008ffc <I2C_MasterRequestWrite+0x100>)
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 fad4 	bl	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e000      	b.n	8008ff0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	00010008 	.word	0x00010008
 8008ffc:	00010002 	.word	0x00010002

08009000 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	460b      	mov	r3, r1
 800900e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009014:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009024:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b08      	cmp	r3, #8
 800902a:	d006      	beq.n	800903a <I2C_MasterRequestRead+0x3a>
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d003      	beq.n	800903a <I2C_MasterRequestRead+0x3a>
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009038:	d108      	bne.n	800904c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	e00b      	b.n	8009064 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009050:	2b11      	cmp	r3, #17
 8009052:	d107      	bne.n	8009064 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fa11 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00d      	beq.n	8009098 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800908a:	d103      	bne.n	8009094 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009092:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e079      	b.n	800918c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090a0:	d108      	bne.n	80090b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80090a2:	897b      	ldrh	r3, [r7, #10]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	f043 0301 	orr.w	r3, r3, #1
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	611a      	str	r2, [r3, #16]
 80090b2:	e05f      	b.n	8009174 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80090b4:	897b      	ldrh	r3, [r7, #10]
 80090b6:	11db      	asrs	r3, r3, #7
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	f003 0306 	and.w	r3, r3, #6
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	f063 030f 	orn	r3, r3, #15
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	4930      	ldr	r1, [pc, #192]	@ (8009194 <I2C_MasterRequestRead+0x194>)
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fa5a 	bl	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e054      	b.n	800918c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80090e2:	897b      	ldrh	r3, [r7, #10]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	4929      	ldr	r1, [pc, #164]	@ (8009198 <I2C_MasterRequestRead+0x198>)
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 fa4a 	bl	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e044      	b.n	800918c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009102:	2300      	movs	r3, #0
 8009104:	613b      	str	r3, [r7, #16]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	613b      	str	r3, [r7, #16]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	613b      	str	r3, [r7, #16]
 8009116:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009126:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 f9af 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00d      	beq.n	800915c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800914a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800914e:	d103      	bne.n	8009158 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009156:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e017      	b.n	800918c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800915c:	897b      	ldrh	r3, [r7, #10]
 800915e:	11db      	asrs	r3, r3, #7
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f003 0306 	and.w	r3, r3, #6
 8009166:	b2db      	uxtb	r3, r3
 8009168:	f063 030e 	orn	r3, r3, #14
 800916c:	b2da      	uxtb	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	4907      	ldr	r1, [pc, #28]	@ (8009198 <I2C_MasterRequestRead+0x198>)
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 fa06 	bl	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d001      	beq.n	800918a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	00010008 	.word	0x00010008
 8009198:	00010002 	.word	0x00010002

0800919c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	4608      	mov	r0, r1
 80091a6:	4611      	mov	r1, r2
 80091a8:	461a      	mov	r2, r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	817b      	strh	r3, [r7, #10]
 80091ae:	460b      	mov	r3, r1
 80091b0:	813b      	strh	r3, [r7, #8]
 80091b2:	4613      	mov	r3, r2
 80091b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 f960 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00d      	beq.n	80091fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091ec:	d103      	bne.n	80091f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e05f      	b.n	80092ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091fa:	897b      	ldrh	r3, [r7, #10]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009208:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	6a3a      	ldr	r2, [r7, #32]
 800920e:	492d      	ldr	r1, [pc, #180]	@ (80092c4 <I2C_RequestMemoryWrite+0x128>)
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f9bb 	bl	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e04c      	b.n	80092ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009220:	2300      	movs	r3, #0
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009238:	6a39      	ldr	r1, [r7, #32]
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 fa46 	bl	80096cc <I2C_WaitOnTXEFlagUntilTimeout>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00d      	beq.n	8009262 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924a:	2b04      	cmp	r3, #4
 800924c:	d107      	bne.n	800925e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800925c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e02b      	b.n	80092ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d105      	bne.n	8009274 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009268:	893b      	ldrh	r3, [r7, #8]
 800926a:	b2da      	uxtb	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	611a      	str	r2, [r3, #16]
 8009272:	e021      	b.n	80092b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009274:	893b      	ldrh	r3, [r7, #8]
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	b29b      	uxth	r3, r3
 800927a:	b2da      	uxtb	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009284:	6a39      	ldr	r1, [r7, #32]
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fa20 	bl	80096cc <I2C_WaitOnTXEFlagUntilTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00d      	beq.n	80092ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009296:	2b04      	cmp	r3, #4
 8009298:	d107      	bne.n	80092aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e005      	b.n	80092ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092ae:	893b      	ldrh	r3, [r7, #8]
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	00010002 	.word	0x00010002

080092c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af02      	add	r7, sp, #8
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	4608      	mov	r0, r1
 80092d2:	4611      	mov	r1, r2
 80092d4:	461a      	mov	r2, r3
 80092d6:	4603      	mov	r3, r0
 80092d8:	817b      	strh	r3, [r7, #10]
 80092da:	460b      	mov	r3, r1
 80092dc:	813b      	strh	r3, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80092f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009300:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	2200      	movs	r2, #0
 800930a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 f8c2 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00d      	beq.n	8009336 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009328:	d103      	bne.n	8009332 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009330:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e0aa      	b.n	800948c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009336:	897b      	ldrh	r3, [r7, #10]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	461a      	mov	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009344:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	6a3a      	ldr	r2, [r7, #32]
 800934a:	4952      	ldr	r1, [pc, #328]	@ (8009494 <I2C_RequestMemoryRead+0x1cc>)
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f91d 	bl	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e097      	b.n	800948c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800935c:	2300      	movs	r3, #0
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009374:	6a39      	ldr	r1, [r7, #32]
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 f9a8 	bl	80096cc <I2C_WaitOnTXEFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00d      	beq.n	800939e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009386:	2b04      	cmp	r3, #4
 8009388:	d107      	bne.n	800939a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009398:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e076      	b.n	800948c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d105      	bne.n	80093b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093a4:	893b      	ldrh	r3, [r7, #8]
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	611a      	str	r2, [r3, #16]
 80093ae:	e021      	b.n	80093f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80093b0:	893b      	ldrh	r3, [r7, #8]
 80093b2:	0a1b      	lsrs	r3, r3, #8
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093c0:	6a39      	ldr	r1, [r7, #32]
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 f982 	bl	80096cc <I2C_WaitOnTXEFlagUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00d      	beq.n	80093ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d107      	bne.n	80093e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e050      	b.n	800948c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093ea:	893b      	ldrh	r3, [r7, #8]
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093f6:	6a39      	ldr	r1, [r7, #32]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f967 	bl	80096cc <I2C_WaitOnTXEFlagUntilTimeout>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00d      	beq.n	8009420 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009408:	2b04      	cmp	r3, #4
 800940a:	d107      	bne.n	800941c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800941a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e035      	b.n	800948c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800942e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	2200      	movs	r2, #0
 8009438:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 f82b 	bl	8009498 <I2C_WaitOnFlagUntilTimeout>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00d      	beq.n	8009464 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009456:	d103      	bne.n	8009460 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800945e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e013      	b.n	800948c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009464:	897b      	ldrh	r3, [r7, #10]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f043 0301 	orr.w	r3, r3, #1
 800946c:	b2da      	uxtb	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	6a3a      	ldr	r2, [r7, #32]
 8009478:	4906      	ldr	r1, [pc, #24]	@ (8009494 <I2C_RequestMemoryRead+0x1cc>)
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 f886 	bl	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	00010002 	.word	0x00010002

08009498 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094a8:	e048      	b.n	800953c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b0:	d044      	beq.n	800953c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b2:	f7fd fd4d 	bl	8006f50 <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d302      	bcc.n	80094c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d139      	bne.n	800953c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	0c1b      	lsrs	r3, r3, #16
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d10d      	bne.n	80094ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	43da      	mvns	r2, r3
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	4013      	ands	r3, r2
 80094de:	b29b      	uxth	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bf0c      	ite	eq
 80094e4:	2301      	moveq	r3, #1
 80094e6:	2300      	movne	r3, #0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	461a      	mov	r2, r3
 80094ec:	e00c      	b.n	8009508 <I2C_WaitOnFlagUntilTimeout+0x70>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	43da      	mvns	r2, r3
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	4013      	ands	r3, r2
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bf0c      	ite	eq
 8009500:	2301      	moveq	r3, #1
 8009502:	2300      	movne	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	429a      	cmp	r2, r3
 800950c:	d116      	bne.n	800953c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2220      	movs	r2, #32
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009528:	f043 0220 	orr.w	r2, r3, #32
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e023      	b.n	8009584 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	0c1b      	lsrs	r3, r3, #16
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10d      	bne.n	8009562 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	43da      	mvns	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	4013      	ands	r3, r2
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	bf0c      	ite	eq
 8009558:	2301      	moveq	r3, #1
 800955a:	2300      	movne	r3, #0
 800955c:	b2db      	uxtb	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	e00c      	b.n	800957c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	43da      	mvns	r2, r3
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	4013      	ands	r3, r2
 800956e:	b29b      	uxth	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	bf0c      	ite	eq
 8009574:	2301      	moveq	r3, #1
 8009576:	2300      	movne	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	461a      	mov	r2, r3
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	429a      	cmp	r2, r3
 8009580:	d093      	beq.n	80094aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800959a:	e071      	b.n	8009680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095aa:	d123      	bne.n	80095f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80095c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e0:	f043 0204 	orr.w	r2, r3, #4
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e067      	b.n	80096c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fa:	d041      	beq.n	8009680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fc:	f7fd fca8 	bl	8006f50 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	429a      	cmp	r2, r3
 800960a:	d302      	bcc.n	8009612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d136      	bne.n	8009680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	0c1b      	lsrs	r3, r3, #16
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b01      	cmp	r3, #1
 800961a:	d10c      	bne.n	8009636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	43da      	mvns	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	4013      	ands	r3, r2
 8009628:	b29b      	uxth	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	bf14      	ite	ne
 800962e:	2301      	movne	r3, #1
 8009630:	2300      	moveq	r3, #0
 8009632:	b2db      	uxtb	r3, r3
 8009634:	e00b      	b.n	800964e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	43da      	mvns	r2, r3
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	4013      	ands	r3, r2
 8009642:	b29b      	uxth	r3, r3
 8009644:	2b00      	cmp	r3, #0
 8009646:	bf14      	ite	ne
 8009648:	2301      	movne	r3, #1
 800964a:	2300      	moveq	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d016      	beq.n	8009680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2220      	movs	r2, #32
 800965c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966c:	f043 0220 	orr.w	r2, r3, #32
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e021      	b.n	80096c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	0c1b      	lsrs	r3, r3, #16
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b01      	cmp	r3, #1
 8009688:	d10c      	bne.n	80096a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	43da      	mvns	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4013      	ands	r3, r2
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	e00b      	b.n	80096bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	43da      	mvns	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	4013      	ands	r3, r2
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	bf14      	ite	ne
 80096b6:	2301      	movne	r3, #1
 80096b8:	2300      	moveq	r3, #0
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f47f af6d 	bne.w	800959c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096d8:	e034      	b.n	8009744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f8e3 	bl	80098a6 <I2C_IsAcknowledgeFailed>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e034      	b.n	8009754 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f0:	d028      	beq.n	8009744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096f2:	f7fd fc2d 	bl	8006f50 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d302      	bcc.n	8009708 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d11d      	bne.n	8009744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009712:	2b80      	cmp	r3, #128	@ 0x80
 8009714:	d016      	beq.n	8009744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2220      	movs	r2, #32
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009730:	f043 0220 	orr.w	r2, r3, #32
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e007      	b.n	8009754 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800974e:	2b80      	cmp	r3, #128	@ 0x80
 8009750:	d1c3      	bne.n	80096da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009768:	e034      	b.n	80097d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 f89b 	bl	80098a6 <I2C_IsAcknowledgeFailed>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e034      	b.n	80097e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009780:	d028      	beq.n	80097d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009782:	f7fd fbe5 	bl	8006f50 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	429a      	cmp	r2, r3
 8009790:	d302      	bcc.n	8009798 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11d      	bne.n	80097d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	f003 0304 	and.w	r3, r3, #4
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d016      	beq.n	80097d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2220      	movs	r2, #32
 80097b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c0:	f043 0220 	orr.w	r2, r3, #32
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e007      	b.n	80097e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d1c3      	bne.n	800976a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097f8:	e049      	b.n	800988e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b10      	cmp	r3, #16
 8009806:	d119      	bne.n	800983c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f06f 0210 	mvn.w	r2, #16
 8009810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2220      	movs	r2, #32
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e030      	b.n	800989e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800983c:	f7fd fb88 	bl	8006f50 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	429a      	cmp	r2, r3
 800984a:	d302      	bcc.n	8009852 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d11d      	bne.n	800988e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985c:	2b40      	cmp	r3, #64	@ 0x40
 800985e:	d016      	beq.n	800988e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2220      	movs	r2, #32
 800986a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800987a:	f043 0220 	orr.w	r2, r3, #32
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e007      	b.n	800989e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009898:	2b40      	cmp	r3, #64	@ 0x40
 800989a:	d1ae      	bne.n	80097fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b083      	sub	sp, #12
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098bc:	d11b      	bne.n	80098f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80098c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e2:	f043 0204 	orr.w	r2, r3, #4
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e036      	b.n	8009984 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800991e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f245 5255 	movw	r2, #21845	@ 0x5555
 8009928:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6852      	ldr	r2, [r2, #4]
 8009932:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6892      	ldr	r2, [r2, #8]
 800993c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800993e:	f7fd fb07 	bl	8006f50 <HAL_GetTick>
 8009942:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009944:	e011      	b.n	800996a <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009946:	f7fd fb03 	bl	8006f50 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	f641 0201 	movw	r2, #6145	@ 0x1801
 8009954:	4293      	cmp	r3, r2
 8009956:	d908      	bls.n	800996a <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f003 0303 	and.w	r3, r3, #3
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	e00c      	b.n	8009984 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f003 0303 	and.w	r3, r3, #3
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e6      	bne.n	8009946 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8009980:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800999c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e267      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d075      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80099ca:	4b88      	ldr	r3, [pc, #544]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f003 030c 	and.w	r3, r3, #12
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d00c      	beq.n	80099f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099d6:	4b85      	ldr	r3, [pc, #532]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80099de:	2b08      	cmp	r3, #8
 80099e0:	d112      	bne.n	8009a08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099e2:	4b82      	ldr	r3, [pc, #520]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099ee:	d10b      	bne.n	8009a08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099f0:	4b7e      	ldr	r3, [pc, #504]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d05b      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x108>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d157      	bne.n	8009ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e242      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a10:	d106      	bne.n	8009a20 <HAL_RCC_OscConfig+0x74>
 8009a12:	4b76      	ldr	r3, [pc, #472]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a75      	ldr	r2, [pc, #468]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	e01d      	b.n	8009a5c <HAL_RCC_OscConfig+0xb0>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a28:	d10c      	bne.n	8009a44 <HAL_RCC_OscConfig+0x98>
 8009a2a:	4b70      	ldr	r3, [pc, #448]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a6f      	ldr	r2, [pc, #444]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	4b6d      	ldr	r3, [pc, #436]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a6c      	ldr	r2, [pc, #432]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	e00b      	b.n	8009a5c <HAL_RCC_OscConfig+0xb0>
 8009a44:	4b69      	ldr	r3, [pc, #420]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a68      	ldr	r2, [pc, #416]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	4b66      	ldr	r3, [pc, #408]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a65      	ldr	r2, [pc, #404]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d013      	beq.n	8009a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a64:	f7fd fa74 	bl	8006f50 <HAL_GetTick>
 8009a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a6c:	f7fd fa70 	bl	8006f50 <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b64      	cmp	r3, #100	@ 0x64
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e207      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0f0      	beq.n	8009a6c <HAL_RCC_OscConfig+0xc0>
 8009a8a:	e014      	b.n	8009ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a8c:	f7fd fa60 	bl	8006f50 <HAL_GetTick>
 8009a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a92:	e008      	b.n	8009aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a94:	f7fd fa5c 	bl	8006f50 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b64      	cmp	r3, #100	@ 0x64
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e1f3      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009aa6:	4b51      	ldr	r3, [pc, #324]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f0      	bne.n	8009a94 <HAL_RCC_OscConfig+0xe8>
 8009ab2:	e000      	b.n	8009ab6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d063      	beq.n	8009b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 030c 	and.w	r3, r3, #12
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00b      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ace:	4b47      	ldr	r3, [pc, #284]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009ad6:	2b08      	cmp	r3, #8
 8009ad8:	d11c      	bne.n	8009b14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ada:	4b44      	ldr	r3, [pc, #272]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d116      	bne.n	8009b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ae6:	4b41      	ldr	r3, [pc, #260]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d005      	beq.n	8009afe <HAL_RCC_OscConfig+0x152>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d001      	beq.n	8009afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e1c7      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009afe:	4b3b      	ldr	r3, [pc, #236]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	4937      	ldr	r1, [pc, #220]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b12:	e03a      	b.n	8009b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d020      	beq.n	8009b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b1c:	4b34      	ldr	r3, [pc, #208]	@ (8009bf0 <HAL_RCC_OscConfig+0x244>)
 8009b1e:	2201      	movs	r2, #1
 8009b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b22:	f7fd fa15 	bl	8006f50 <HAL_GetTick>
 8009b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b28:	e008      	b.n	8009b3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b2a:	f7fd fa11 	bl	8006f50 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d901      	bls.n	8009b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e1a8      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0302 	and.w	r3, r3, #2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0f0      	beq.n	8009b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b48:	4b28      	ldr	r3, [pc, #160]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	00db      	lsls	r3, r3, #3
 8009b56:	4925      	ldr	r1, [pc, #148]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	600b      	str	r3, [r1, #0]
 8009b5c:	e015      	b.n	8009b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b5e:	4b24      	ldr	r3, [pc, #144]	@ (8009bf0 <HAL_RCC_OscConfig+0x244>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b64:	f7fd f9f4 	bl	8006f50 <HAL_GetTick>
 8009b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b6a:	e008      	b.n	8009b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b6c:	f7fd f9f0 	bl	8006f50 <HAL_GetTick>
 8009b70:	4602      	mov	r2, r0
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d901      	bls.n	8009b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e187      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1f0      	bne.n	8009b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0308 	and.w	r3, r3, #8
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d036      	beq.n	8009c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d016      	beq.n	8009bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b9e:	4b15      	ldr	r3, [pc, #84]	@ (8009bf4 <HAL_RCC_OscConfig+0x248>)
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ba4:	f7fd f9d4 	bl	8006f50 <HAL_GetTick>
 8009ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009baa:	e008      	b.n	8009bbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bac:	f7fd f9d0 	bl	8006f50 <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d901      	bls.n	8009bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e167      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009bec <HAL_RCC_OscConfig+0x240>)
 8009bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0f0      	beq.n	8009bac <HAL_RCC_OscConfig+0x200>
 8009bca:	e01b      	b.n	8009c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bcc:	4b09      	ldr	r3, [pc, #36]	@ (8009bf4 <HAL_RCC_OscConfig+0x248>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009bd2:	f7fd f9bd 	bl	8006f50 <HAL_GetTick>
 8009bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009bd8:	e00e      	b.n	8009bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bda:	f7fd f9b9 	bl	8006f50 <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d907      	bls.n	8009bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e150      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
 8009bec:	40023800 	.word	0x40023800
 8009bf0:	42470000 	.word	0x42470000
 8009bf4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009bf8:	4b88      	ldr	r3, [pc, #544]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1ea      	bne.n	8009bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0304 	and.w	r3, r3, #4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 8097 	beq.w	8009d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c12:	2300      	movs	r3, #0
 8009c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c16:	4b81      	ldr	r3, [pc, #516]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10f      	bne.n	8009c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c22:	2300      	movs	r3, #0
 8009c24:	60bb      	str	r3, [r7, #8]
 8009c26:	4b7d      	ldr	r3, [pc, #500]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c2a:	4a7c      	ldr	r2, [pc, #496]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c32:	4b7a      	ldr	r3, [pc, #488]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c3a:	60bb      	str	r3, [r7, #8]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c42:	4b77      	ldr	r3, [pc, #476]	@ (8009e20 <HAL_RCC_OscConfig+0x474>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d118      	bne.n	8009c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c4e:	4b74      	ldr	r3, [pc, #464]	@ (8009e20 <HAL_RCC_OscConfig+0x474>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a73      	ldr	r2, [pc, #460]	@ (8009e20 <HAL_RCC_OscConfig+0x474>)
 8009c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c5a:	f7fd f979 	bl	8006f50 <HAL_GetTick>
 8009c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c60:	e008      	b.n	8009c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c62:	f7fd f975 	bl	8006f50 <HAL_GetTick>
 8009c66:	4602      	mov	r2, r0
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d901      	bls.n	8009c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e10c      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c74:	4b6a      	ldr	r3, [pc, #424]	@ (8009e20 <HAL_RCC_OscConfig+0x474>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0f0      	beq.n	8009c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d106      	bne.n	8009c96 <HAL_RCC_OscConfig+0x2ea>
 8009c88:	4b64      	ldr	r3, [pc, #400]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c8c:	4a63      	ldr	r2, [pc, #396]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009c8e:	f043 0301 	orr.w	r3, r3, #1
 8009c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c94:	e01c      	b.n	8009cd0 <HAL_RCC_OscConfig+0x324>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	2b05      	cmp	r3, #5
 8009c9c:	d10c      	bne.n	8009cb8 <HAL_RCC_OscConfig+0x30c>
 8009c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ca2:	4a5e      	ldr	r2, [pc, #376]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009ca4:	f043 0304 	orr.w	r3, r3, #4
 8009ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009caa:	4b5c      	ldr	r3, [pc, #368]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cae:	4a5b      	ldr	r2, [pc, #364]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009cb0:	f043 0301 	orr.w	r3, r3, #1
 8009cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cb6:	e00b      	b.n	8009cd0 <HAL_RCC_OscConfig+0x324>
 8009cb8:	4b58      	ldr	r3, [pc, #352]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cbc:	4a57      	ldr	r2, [pc, #348]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009cbe:	f023 0301 	bic.w	r3, r3, #1
 8009cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cc4:	4b55      	ldr	r3, [pc, #340]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cc8:	4a54      	ldr	r2, [pc, #336]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009cca:	f023 0304 	bic.w	r3, r3, #4
 8009cce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d015      	beq.n	8009d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cd8:	f7fd f93a 	bl	8006f50 <HAL_GetTick>
 8009cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cde:	e00a      	b.n	8009cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ce0:	f7fd f936 	bl	8006f50 <HAL_GetTick>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e0cb      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cf6:	4b49      	ldr	r3, [pc, #292]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cfa:	f003 0302 	and.w	r3, r3, #2
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0ee      	beq.n	8009ce0 <HAL_RCC_OscConfig+0x334>
 8009d02:	e014      	b.n	8009d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d04:	f7fd f924 	bl	8006f50 <HAL_GetTick>
 8009d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d0a:	e00a      	b.n	8009d22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d0c:	f7fd f920 	bl	8006f50 <HAL_GetTick>
 8009d10:	4602      	mov	r2, r0
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d901      	bls.n	8009d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e0b5      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d22:	4b3e      	ldr	r3, [pc, #248]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1ee      	bne.n	8009d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009d2e:	7dfb      	ldrb	r3, [r7, #23]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d105      	bne.n	8009d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d34:	4b39      	ldr	r3, [pc, #228]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d38:	4a38      	ldr	r2, [pc, #224]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 80a1 	beq.w	8009e8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d4a:	4b34      	ldr	r3, [pc, #208]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f003 030c 	and.w	r3, r3, #12
 8009d52:	2b08      	cmp	r3, #8
 8009d54:	d05c      	beq.n	8009e10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d141      	bne.n	8009de2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d5e:	4b31      	ldr	r3, [pc, #196]	@ (8009e24 <HAL_RCC_OscConfig+0x478>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d64:	f7fd f8f4 	bl	8006f50 <HAL_GetTick>
 8009d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d6a:	e008      	b.n	8009d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d6c:	f7fd f8f0 	bl	8006f50 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d901      	bls.n	8009d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e087      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d7e:	4b27      	ldr	r3, [pc, #156]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1f0      	bne.n	8009d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	69da      	ldr	r2, [r3, #28]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	431a      	orrs	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d98:	019b      	lsls	r3, r3, #6
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da0:	085b      	lsrs	r3, r3, #1
 8009da2:	3b01      	subs	r3, #1
 8009da4:	041b      	lsls	r3, r3, #16
 8009da6:	431a      	orrs	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dac:	061b      	lsls	r3, r3, #24
 8009dae:	491b      	ldr	r1, [pc, #108]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009db4:	4b1b      	ldr	r3, [pc, #108]	@ (8009e24 <HAL_RCC_OscConfig+0x478>)
 8009db6:	2201      	movs	r2, #1
 8009db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dba:	f7fd f8c9 	bl	8006f50 <HAL_GetTick>
 8009dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dc0:	e008      	b.n	8009dd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dc2:	f7fd f8c5 	bl	8006f50 <HAL_GetTick>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d901      	bls.n	8009dd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e05c      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dd4:	4b11      	ldr	r3, [pc, #68]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d0f0      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x416>
 8009de0:	e054      	b.n	8009e8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009de2:	4b10      	ldr	r3, [pc, #64]	@ (8009e24 <HAL_RCC_OscConfig+0x478>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009de8:	f7fd f8b2 	bl	8006f50 <HAL_GetTick>
 8009dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dee:	e008      	b.n	8009e02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009df0:	f7fd f8ae 	bl	8006f50 <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d901      	bls.n	8009e02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e045      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e02:	4b06      	ldr	r3, [pc, #24]	@ (8009e1c <HAL_RCC_OscConfig+0x470>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1f0      	bne.n	8009df0 <HAL_RCC_OscConfig+0x444>
 8009e0e:	e03d      	b.n	8009e8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d107      	bne.n	8009e28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e038      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
 8009e1c:	40023800 	.word	0x40023800
 8009e20:	40007000 	.word	0x40007000
 8009e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e28:	4b1b      	ldr	r3, [pc, #108]	@ (8009e98 <HAL_RCC_OscConfig+0x4ec>)
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d028      	beq.n	8009e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d121      	bne.n	8009e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d11a      	bne.n	8009e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009e58:	4013      	ands	r3, r2
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d111      	bne.n	8009e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6e:	085b      	lsrs	r3, r3, #1
 8009e70:	3b01      	subs	r3, #1
 8009e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d107      	bne.n	8009e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d001      	beq.n	8009e8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e000      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	40023800 	.word	0x40023800

08009e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e0cc      	b.n	800a04a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009eb0:	4b68      	ldr	r3, [pc, #416]	@ (800a054 <HAL_RCC_ClockConfig+0x1b8>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0307 	and.w	r3, r3, #7
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d90c      	bls.n	8009ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ebe:	4b65      	ldr	r3, [pc, #404]	@ (800a054 <HAL_RCC_ClockConfig+0x1b8>)
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ec6:	4b63      	ldr	r3, [pc, #396]	@ (800a054 <HAL_RCC_ClockConfig+0x1b8>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d001      	beq.n	8009ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e0b8      	b.n	800a04a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d020      	beq.n	8009f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d005      	beq.n	8009efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009ef0:	4b59      	ldr	r3, [pc, #356]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	4a58      	ldr	r2, [pc, #352]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009ef6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0308 	and.w	r3, r3, #8
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d005      	beq.n	8009f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f08:	4b53      	ldr	r3, [pc, #332]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	4a52      	ldr	r2, [pc, #328]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009f0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f14:	4b50      	ldr	r3, [pc, #320]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	494d      	ldr	r1, [pc, #308]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d044      	beq.n	8009fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d107      	bne.n	8009f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f3a:	4b47      	ldr	r3, [pc, #284]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d119      	bne.n	8009f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e07f      	b.n	800a04a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d003      	beq.n	8009f5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d107      	bne.n	8009f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f5a:	4b3f      	ldr	r3, [pc, #252]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e06f      	b.n	800a04a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f6a:	4b3b      	ldr	r3, [pc, #236]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0302 	and.w	r3, r3, #2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e067      	b.n	800a04a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f7a:	4b37      	ldr	r3, [pc, #220]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f023 0203 	bic.w	r2, r3, #3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4934      	ldr	r1, [pc, #208]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f8c:	f7fc ffe0 	bl	8006f50 <HAL_GetTick>
 8009f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f92:	e00a      	b.n	8009faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f94:	f7fc ffdc 	bl	8006f50 <HAL_GetTick>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e04f      	b.n	800a04a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009faa:	4b2b      	ldr	r3, [pc, #172]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	f003 020c 	and.w	r2, r3, #12
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d1eb      	bne.n	8009f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009fbc:	4b25      	ldr	r3, [pc, #148]	@ (800a054 <HAL_RCC_ClockConfig+0x1b8>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0307 	and.w	r3, r3, #7
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d20c      	bcs.n	8009fe4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fca:	4b22      	ldr	r3, [pc, #136]	@ (800a054 <HAL_RCC_ClockConfig+0x1b8>)
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fd2:	4b20      	ldr	r3, [pc, #128]	@ (800a054 <HAL_RCC_ClockConfig+0x1b8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0307 	and.w	r3, r3, #7
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d001      	beq.n	8009fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e032      	b.n	800a04a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d008      	beq.n	800a002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ff0:	4b19      	ldr	r3, [pc, #100]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	4916      	ldr	r1, [pc, #88]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0308 	and.w	r3, r3, #8
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d009      	beq.n	800a022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a00e:	4b12      	ldr	r3, [pc, #72]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	490e      	ldr	r1, [pc, #56]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a022:	f000 f821 	bl	800a068 <HAL_RCC_GetSysClockFreq>
 800a026:	4602      	mov	r2, r0
 800a028:	4b0b      	ldr	r3, [pc, #44]	@ (800a058 <HAL_RCC_ClockConfig+0x1bc>)
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	091b      	lsrs	r3, r3, #4
 800a02e:	f003 030f 	and.w	r3, r3, #15
 800a032:	490a      	ldr	r1, [pc, #40]	@ (800a05c <HAL_RCC_ClockConfig+0x1c0>)
 800a034:	5ccb      	ldrb	r3, [r1, r3]
 800a036:	fa22 f303 	lsr.w	r3, r2, r3
 800a03a:	4a09      	ldr	r2, [pc, #36]	@ (800a060 <HAL_RCC_ClockConfig+0x1c4>)
 800a03c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a03e:	4b09      	ldr	r3, [pc, #36]	@ (800a064 <HAL_RCC_ClockConfig+0x1c8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4618      	mov	r0, r3
 800a044:	f7fa f898 	bl	8004178 <HAL_InitTick>

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	40023c00 	.word	0x40023c00
 800a058:	40023800 	.word	0x40023800
 800a05c:	0801343c 	.word	0x0801343c
 800a060:	2000000c 	.word	0x2000000c
 800a064:	20000070 	.word	0x20000070

0800a068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a06c:	b090      	sub	sp, #64	@ 0x40
 800a06e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a078:	2300      	movs	r3, #0
 800a07a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a080:	4b59      	ldr	r3, [pc, #356]	@ (800a1e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f003 030c 	and.w	r3, r3, #12
 800a088:	2b08      	cmp	r3, #8
 800a08a:	d00d      	beq.n	800a0a8 <HAL_RCC_GetSysClockFreq+0x40>
 800a08c:	2b08      	cmp	r3, #8
 800a08e:	f200 80a1 	bhi.w	800a1d4 <HAL_RCC_GetSysClockFreq+0x16c>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <HAL_RCC_GetSysClockFreq+0x34>
 800a096:	2b04      	cmp	r3, #4
 800a098:	d003      	beq.n	800a0a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a09a:	e09b      	b.n	800a1d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a09c:	4b53      	ldr	r3, [pc, #332]	@ (800a1ec <HAL_RCC_GetSysClockFreq+0x184>)
 800a09e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a0a0:	e09b      	b.n	800a1da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a0a2:	4b53      	ldr	r3, [pc, #332]	@ (800a1f0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a0a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a0a6:	e098      	b.n	800a1da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a0a8:	4b4f      	ldr	r3, [pc, #316]	@ (800a1e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a0b2:	4b4d      	ldr	r3, [pc, #308]	@ (800a1e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d028      	beq.n	800a110 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0be:	4b4a      	ldr	r3, [pc, #296]	@ (800a1e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	099b      	lsrs	r3, r3, #6
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	623b      	str	r3, [r7, #32]
 800a0c8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4b47      	ldr	r3, [pc, #284]	@ (800a1f0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a0d4:	fb03 f201 	mul.w	r2, r3, r1
 800a0d8:	2300      	movs	r3, #0
 800a0da:	fb00 f303 	mul.w	r3, r0, r3
 800a0de:	4413      	add	r3, r2
 800a0e0:	4a43      	ldr	r2, [pc, #268]	@ (800a1f0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a0e2:	fba0 1202 	umull	r1, r2, r0, r2
 800a0e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0e8:	460a      	mov	r2, r1
 800a0ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a0ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0ee:	4413      	add	r3, r2
 800a0f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	61bb      	str	r3, [r7, #24]
 800a0f8:	61fa      	str	r2, [r7, #28]
 800a0fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a102:	f7f6 fd59 	bl	8000bb8 <__aeabi_uldivmod>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4613      	mov	r3, r2
 800a10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a10e:	e053      	b.n	800a1b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a110:	4b35      	ldr	r3, [pc, #212]	@ (800a1e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	099b      	lsrs	r3, r3, #6
 800a116:	2200      	movs	r2, #0
 800a118:	613b      	str	r3, [r7, #16]
 800a11a:	617a      	str	r2, [r7, #20]
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a122:	f04f 0b00 	mov.w	fp, #0
 800a126:	4652      	mov	r2, sl
 800a128:	465b      	mov	r3, fp
 800a12a:	f04f 0000 	mov.w	r0, #0
 800a12e:	f04f 0100 	mov.w	r1, #0
 800a132:	0159      	lsls	r1, r3, #5
 800a134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a138:	0150      	lsls	r0, r2, #5
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	ebb2 080a 	subs.w	r8, r2, sl
 800a142:	eb63 090b 	sbc.w	r9, r3, fp
 800a146:	f04f 0200 	mov.w	r2, #0
 800a14a:	f04f 0300 	mov.w	r3, #0
 800a14e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a152:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a156:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a15a:	ebb2 0408 	subs.w	r4, r2, r8
 800a15e:	eb63 0509 	sbc.w	r5, r3, r9
 800a162:	f04f 0200 	mov.w	r2, #0
 800a166:	f04f 0300 	mov.w	r3, #0
 800a16a:	00eb      	lsls	r3, r5, #3
 800a16c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a170:	00e2      	lsls	r2, r4, #3
 800a172:	4614      	mov	r4, r2
 800a174:	461d      	mov	r5, r3
 800a176:	eb14 030a 	adds.w	r3, r4, sl
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	eb45 030b 	adc.w	r3, r5, fp
 800a180:	607b      	str	r3, [r7, #4]
 800a182:	f04f 0200 	mov.w	r2, #0
 800a186:	f04f 0300 	mov.w	r3, #0
 800a18a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a18e:	4629      	mov	r1, r5
 800a190:	028b      	lsls	r3, r1, #10
 800a192:	4621      	mov	r1, r4
 800a194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a198:	4621      	mov	r1, r4
 800a19a:	028a      	lsls	r2, r1, #10
 800a19c:	4610      	mov	r0, r2
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	60bb      	str	r3, [r7, #8]
 800a1a6:	60fa      	str	r2, [r7, #12]
 800a1a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1ac:	f7f6 fd04 	bl	8000bb8 <__aeabi_uldivmod>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a1b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	0c1b      	lsrs	r3, r3, #16
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a1c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a1d2:	e002      	b.n	800a1da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1d4:	4b05      	ldr	r3, [pc, #20]	@ (800a1ec <HAL_RCC_GetSysClockFreq+0x184>)
 800a1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a1d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3740      	adds	r7, #64	@ 0x40
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1e6:	bf00      	nop
 800a1e8:	40023800 	.word	0x40023800
 800a1ec:	00f42400 	.word	0x00f42400
 800a1f0:	017d7840 	.word	0x017d7840

0800a1f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1f8:	4b03      	ldr	r3, [pc, #12]	@ (800a208 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	2000000c 	.word	0x2000000c

0800a20c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a210:	f7ff fff0 	bl	800a1f4 <HAL_RCC_GetHCLKFreq>
 800a214:	4602      	mov	r2, r0
 800a216:	4b05      	ldr	r3, [pc, #20]	@ (800a22c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	0a9b      	lsrs	r3, r3, #10
 800a21c:	f003 0307 	and.w	r3, r3, #7
 800a220:	4903      	ldr	r1, [pc, #12]	@ (800a230 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a222:	5ccb      	ldrb	r3, [r1, r3]
 800a224:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a228:	4618      	mov	r0, r3
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	40023800 	.word	0x40023800
 800a230:	0801344c 	.word	0x0801344c

0800a234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a238:	f7ff ffdc 	bl	800a1f4 <HAL_RCC_GetHCLKFreq>
 800a23c:	4602      	mov	r2, r0
 800a23e:	4b05      	ldr	r3, [pc, #20]	@ (800a254 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	0b5b      	lsrs	r3, r3, #13
 800a244:	f003 0307 	and.w	r3, r3, #7
 800a248:	4903      	ldr	r1, [pc, #12]	@ (800a258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a24a:	5ccb      	ldrb	r3, [r1, r3]
 800a24c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a250:	4618      	mov	r0, r3
 800a252:	bd80      	pop	{r7, pc}
 800a254:	40023800 	.word	0x40023800
 800a258:	0801344c 	.word	0x0801344c

0800a25c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	220f      	movs	r2, #15
 800a26a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a26c:	4b12      	ldr	r3, [pc, #72]	@ (800a2b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	f003 0203 	and.w	r2, r3, #3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a278:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a284:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a290:	4b09      	ldr	r3, [pc, #36]	@ (800a2b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	08db      	lsrs	r3, r3, #3
 800a296:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a29e:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <HAL_RCC_GetClockConfig+0x60>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 0207 	and.w	r2, r3, #7
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	601a      	str	r2, [r3, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	40023800 	.word	0x40023800
 800a2bc:	40023c00 	.word	0x40023c00

0800a2c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e041      	b.n	800a356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d106      	bne.n	800a2ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f839 	bl	800a35e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4610      	mov	r0, r2
 800a300:	f000 fb74 	bl	800a9ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a366:	bf00      	nop
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
	...

0800a374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b01      	cmp	r3, #1
 800a386:	d001      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e044      	b.n	800a416 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2202      	movs	r2, #2
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0201 	orr.w	r2, r2, #1
 800a3a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1e      	ldr	r2, [pc, #120]	@ (800a424 <HAL_TIM_Base_Start_IT+0xb0>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d018      	beq.n	800a3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3b6:	d013      	beq.n	800a3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a1a      	ldr	r2, [pc, #104]	@ (800a428 <HAL_TIM_Base_Start_IT+0xb4>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d00e      	beq.n	800a3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a19      	ldr	r2, [pc, #100]	@ (800a42c <HAL_TIM_Base_Start_IT+0xb8>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d009      	beq.n	800a3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a17      	ldr	r2, [pc, #92]	@ (800a430 <HAL_TIM_Base_Start_IT+0xbc>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d004      	beq.n	800a3e0 <HAL_TIM_Base_Start_IT+0x6c>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a16      	ldr	r2, [pc, #88]	@ (800a434 <HAL_TIM_Base_Start_IT+0xc0>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d111      	bne.n	800a404 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b06      	cmp	r3, #6
 800a3f0:	d010      	beq.n	800a414 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f042 0201 	orr.w	r2, r2, #1
 800a400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a402:	e007      	b.n	800a414 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f042 0201 	orr.w	r2, r2, #1
 800a412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	40010000 	.word	0x40010000
 800a428:	40000400 	.word	0x40000400
 800a42c:	40000800 	.word	0x40000800
 800a430:	40000c00 	.word	0x40000c00
 800a434:	40014000 	.word	0x40014000

0800a438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e041      	b.n	800a4ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d106      	bne.n	800a464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7f9 fd60 	bl	8003f24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2202      	movs	r2, #2
 800a468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	3304      	adds	r3, #4
 800a474:	4619      	mov	r1, r3
 800a476:	4610      	mov	r0, r2
 800a478:	f000 fab8 	bl	800a9ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d109      	bne.n	800a4fc <HAL_TIM_PWM_Start+0x24>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	bf14      	ite	ne
 800a4f4:	2301      	movne	r3, #1
 800a4f6:	2300      	moveq	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	e022      	b.n	800a542 <HAL_TIM_PWM_Start+0x6a>
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2b04      	cmp	r3, #4
 800a500:	d109      	bne.n	800a516 <HAL_TIM_PWM_Start+0x3e>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	bf14      	ite	ne
 800a50e:	2301      	movne	r3, #1
 800a510:	2300      	moveq	r3, #0
 800a512:	b2db      	uxtb	r3, r3
 800a514:	e015      	b.n	800a542 <HAL_TIM_PWM_Start+0x6a>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b08      	cmp	r3, #8
 800a51a:	d109      	bne.n	800a530 <HAL_TIM_PWM_Start+0x58>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b01      	cmp	r3, #1
 800a526:	bf14      	ite	ne
 800a528:	2301      	movne	r3, #1
 800a52a:	2300      	moveq	r3, #0
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	e008      	b.n	800a542 <HAL_TIM_PWM_Start+0x6a>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b01      	cmp	r3, #1
 800a53a:	bf14      	ite	ne
 800a53c:	2301      	movne	r3, #1
 800a53e:	2300      	moveq	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e068      	b.n	800a61c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <HAL_TIM_PWM_Start+0x82>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2202      	movs	r2, #2
 800a554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a558:	e013      	b.n	800a582 <HAL_TIM_PWM_Start+0xaa>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d104      	bne.n	800a56a <HAL_TIM_PWM_Start+0x92>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a568:	e00b      	b.n	800a582 <HAL_TIM_PWM_Start+0xaa>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b08      	cmp	r3, #8
 800a56e:	d104      	bne.n	800a57a <HAL_TIM_PWM_Start+0xa2>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a578:	e003      	b.n	800a582 <HAL_TIM_PWM_Start+0xaa>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2202      	movs	r2, #2
 800a57e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2201      	movs	r2, #1
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fc40 	bl	800ae10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a23      	ldr	r2, [pc, #140]	@ (800a624 <HAL_TIM_PWM_Start+0x14c>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d107      	bne.n	800a5aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a5a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a1d      	ldr	r2, [pc, #116]	@ (800a624 <HAL_TIM_PWM_Start+0x14c>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d018      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x10e>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5bc:	d013      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x10e>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a19      	ldr	r2, [pc, #100]	@ (800a628 <HAL_TIM_PWM_Start+0x150>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d00e      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x10e>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a17      	ldr	r2, [pc, #92]	@ (800a62c <HAL_TIM_PWM_Start+0x154>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d009      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x10e>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a16      	ldr	r2, [pc, #88]	@ (800a630 <HAL_TIM_PWM_Start+0x158>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d004      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x10e>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a14      	ldr	r2, [pc, #80]	@ (800a634 <HAL_TIM_PWM_Start+0x15c>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d111      	bne.n	800a60a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f003 0307 	and.w	r3, r3, #7
 800a5f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b06      	cmp	r3, #6
 800a5f6:	d010      	beq.n	800a61a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0201 	orr.w	r2, r2, #1
 800a606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a608:	e007      	b.n	800a61a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f042 0201 	orr.w	r2, r2, #1
 800a618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	40010000 	.word	0x40010000
 800a628:	40000400 	.word	0x40000400
 800a62c:	40000800 	.word	0x40000800
 800a630:	40000c00 	.word	0x40000c00
 800a634:	40014000 	.word	0x40014000

0800a638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d020      	beq.n	800a69c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f003 0302 	and.w	r3, r3, #2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d01b      	beq.n	800a69c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f06f 0202 	mvn.w	r2, #2
 800a66c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	f003 0303 	and.w	r3, r3, #3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d003      	beq.n	800a68a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f994 	bl	800a9b0 <HAL_TIM_IC_CaptureCallback>
 800a688:	e005      	b.n	800a696 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f986 	bl	800a99c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f997 	bl	800a9c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f003 0304 	and.w	r3, r3, #4
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d020      	beq.n	800a6e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01b      	beq.n	800a6e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0204 	mvn.w	r2, #4
 800a6b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2202      	movs	r2, #2
 800a6be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f96e 	bl	800a9b0 <HAL_TIM_IC_CaptureCallback>
 800a6d4:	e005      	b.n	800a6e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f960 	bl	800a99c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f971 	bl	800a9c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d020      	beq.n	800a734 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d01b      	beq.n	800a734 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f06f 0208 	mvn.w	r2, #8
 800a704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2204      	movs	r2, #4
 800a70a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	f003 0303 	and.w	r3, r3, #3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d003      	beq.n	800a722 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f948 	bl	800a9b0 <HAL_TIM_IC_CaptureCallback>
 800a720:	e005      	b.n	800a72e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f93a 	bl	800a99c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f94b 	bl	800a9c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f003 0310 	and.w	r3, r3, #16
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d020      	beq.n	800a780 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b00      	cmp	r3, #0
 800a746:	d01b      	beq.n	800a780 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f06f 0210 	mvn.w	r2, #16
 800a750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2208      	movs	r2, #8
 800a756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f922 	bl	800a9b0 <HAL_TIM_IC_CaptureCallback>
 800a76c:	e005      	b.n	800a77a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f914 	bl	800a99c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f925 	bl	800a9c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00c      	beq.n	800a7a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	d007      	beq.n	800a7a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f06f 0201 	mvn.w	r2, #1
 800a79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7f8 ffe4 	bl	800376c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00c      	beq.n	800a7c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d007      	beq.n	800a7c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a7c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fc14 	bl	800aff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00c      	beq.n	800a7ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d007      	beq.n	800a7ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f8f6 	bl	800a9d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f003 0320 	and.w	r3, r3, #32
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00c      	beq.n	800a810 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f003 0320 	and.w	r3, r3, #32
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f06f 0220 	mvn.w	r2, #32
 800a808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fbe6 	bl	800afdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a810:	bf00      	nop
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d101      	bne.n	800a836 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a832:	2302      	movs	r3, #2
 800a834:	e0ae      	b.n	800a994 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b0c      	cmp	r3, #12
 800a842:	f200 809f 	bhi.w	800a984 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a846:	a201      	add	r2, pc, #4	@ (adr r2, 800a84c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a881 	.word	0x0800a881
 800a850:	0800a985 	.word	0x0800a985
 800a854:	0800a985 	.word	0x0800a985
 800a858:	0800a985 	.word	0x0800a985
 800a85c:	0800a8c1 	.word	0x0800a8c1
 800a860:	0800a985 	.word	0x0800a985
 800a864:	0800a985 	.word	0x0800a985
 800a868:	0800a985 	.word	0x0800a985
 800a86c:	0800a903 	.word	0x0800a903
 800a870:	0800a985 	.word	0x0800a985
 800a874:	0800a985 	.word	0x0800a985
 800a878:	0800a985 	.word	0x0800a985
 800a87c:	0800a943 	.word	0x0800a943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68b9      	ldr	r1, [r7, #8]
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f936 	bl	800aaf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	699a      	ldr	r2, [r3, #24]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0208 	orr.w	r2, r2, #8
 800a89a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	699a      	ldr	r2, [r3, #24]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 0204 	bic.w	r2, r2, #4
 800a8aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6999      	ldr	r1, [r3, #24]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	691a      	ldr	r2, [r3, #16]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	619a      	str	r2, [r3, #24]
      break;
 800a8be:	e064      	b.n	800a98a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68b9      	ldr	r1, [r7, #8]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 f97c 	bl	800abc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	699a      	ldr	r2, [r3, #24]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	699a      	ldr	r2, [r3, #24]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6999      	ldr	r1, [r3, #24]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	021a      	lsls	r2, r3, #8
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	619a      	str	r2, [r3, #24]
      break;
 800a900:	e043      	b.n	800a98a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68b9      	ldr	r1, [r7, #8]
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 f9c7 	bl	800ac9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	69da      	ldr	r2, [r3, #28]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f042 0208 	orr.w	r2, r2, #8
 800a91c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	69da      	ldr	r2, [r3, #28]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f022 0204 	bic.w	r2, r2, #4
 800a92c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	69d9      	ldr	r1, [r3, #28]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	691a      	ldr	r2, [r3, #16]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	430a      	orrs	r2, r1
 800a93e:	61da      	str	r2, [r3, #28]
      break;
 800a940:	e023      	b.n	800a98a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68b9      	ldr	r1, [r7, #8]
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 fa11 	bl	800ad70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	69da      	ldr	r2, [r3, #28]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a95c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	69da      	ldr	r2, [r3, #28]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a96c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	69d9      	ldr	r1, [r3, #28]
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	021a      	lsls	r2, r3, #8
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	61da      	str	r2, [r3, #28]
      break;
 800a982:	e002      	b.n	800a98a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	75fb      	strb	r3, [r7, #23]
      break;
 800a988:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a992:	7dfb      	ldrb	r3, [r7, #23]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a37      	ldr	r2, [pc, #220]	@ (800aadc <TIM_Base_SetConfig+0xf0>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d00f      	beq.n	800aa24 <TIM_Base_SetConfig+0x38>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa0a:	d00b      	beq.n	800aa24 <TIM_Base_SetConfig+0x38>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a34      	ldr	r2, [pc, #208]	@ (800aae0 <TIM_Base_SetConfig+0xf4>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d007      	beq.n	800aa24 <TIM_Base_SetConfig+0x38>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a33      	ldr	r2, [pc, #204]	@ (800aae4 <TIM_Base_SetConfig+0xf8>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d003      	beq.n	800aa24 <TIM_Base_SetConfig+0x38>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a32      	ldr	r2, [pc, #200]	@ (800aae8 <TIM_Base_SetConfig+0xfc>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d108      	bne.n	800aa36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a28      	ldr	r2, [pc, #160]	@ (800aadc <TIM_Base_SetConfig+0xf0>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d01b      	beq.n	800aa76 <TIM_Base_SetConfig+0x8a>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa44:	d017      	beq.n	800aa76 <TIM_Base_SetConfig+0x8a>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a25      	ldr	r2, [pc, #148]	@ (800aae0 <TIM_Base_SetConfig+0xf4>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d013      	beq.n	800aa76 <TIM_Base_SetConfig+0x8a>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a24      	ldr	r2, [pc, #144]	@ (800aae4 <TIM_Base_SetConfig+0xf8>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00f      	beq.n	800aa76 <TIM_Base_SetConfig+0x8a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a23      	ldr	r2, [pc, #140]	@ (800aae8 <TIM_Base_SetConfig+0xfc>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00b      	beq.n	800aa76 <TIM_Base_SetConfig+0x8a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a22      	ldr	r2, [pc, #136]	@ (800aaec <TIM_Base_SetConfig+0x100>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d007      	beq.n	800aa76 <TIM_Base_SetConfig+0x8a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a21      	ldr	r2, [pc, #132]	@ (800aaf0 <TIM_Base_SetConfig+0x104>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d003      	beq.n	800aa76 <TIM_Base_SetConfig+0x8a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a20      	ldr	r2, [pc, #128]	@ (800aaf4 <TIM_Base_SetConfig+0x108>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d108      	bne.n	800aa88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	689a      	ldr	r2, [r3, #8]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a0c      	ldr	r2, [pc, #48]	@ (800aadc <TIM_Base_SetConfig+0xf0>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d103      	bne.n	800aab6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	691a      	ldr	r2, [r3, #16]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f043 0204 	orr.w	r2, r3, #4
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	601a      	str	r2, [r3, #0]
}
 800aace:	bf00      	nop
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40010000 	.word	0x40010000
 800aae0:	40000400 	.word	0x40000400
 800aae4:	40000800 	.word	0x40000800
 800aae8:	40000c00 	.word	0x40000c00
 800aaec:	40014000 	.word	0x40014000
 800aaf0:	40014400 	.word	0x40014400
 800aaf4:	40014800 	.word	0x40014800

0800aaf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b087      	sub	sp, #28
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	f023 0201 	bic.w	r2, r3, #1
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f023 0303 	bic.w	r3, r3, #3
 800ab2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f023 0302 	bic.w	r3, r3, #2
 800ab40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a1c      	ldr	r2, [pc, #112]	@ (800abc0 <TIM_OC1_SetConfig+0xc8>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d10c      	bne.n	800ab6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f023 0308 	bic.w	r3, r3, #8
 800ab5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f023 0304 	bic.w	r3, r3, #4
 800ab6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a13      	ldr	r2, [pc, #76]	@ (800abc0 <TIM_OC1_SetConfig+0xc8>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d111      	bne.n	800ab9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ab84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	621a      	str	r2, [r3, #32]
}
 800abb4:	bf00      	nop
 800abb6:	371c      	adds	r7, #28
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	40010000 	.word	0x40010000

0800abc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b087      	sub	sp, #28
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	f023 0210 	bic.w	r2, r3, #16
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	021b      	lsls	r3, r3, #8
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f023 0320 	bic.w	r3, r3, #32
 800ac0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	011b      	lsls	r3, r3, #4
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a1e      	ldr	r2, [pc, #120]	@ (800ac98 <TIM_OC2_SetConfig+0xd4>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d10d      	bne.n	800ac40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	011b      	lsls	r3, r3, #4
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a15      	ldr	r2, [pc, #84]	@ (800ac98 <TIM_OC2_SetConfig+0xd4>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d113      	bne.n	800ac70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	621a      	str	r2, [r3, #32]
}
 800ac8a:	bf00      	nop
 800ac8c:	371c      	adds	r7, #28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	40010000 	.word	0x40010000

0800ac9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a1b      	ldr	r3, [r3, #32]
 800acb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f023 0303 	bic.w	r3, r3, #3
 800acd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	4313      	orrs	r3, r2
 800acdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ace4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	021b      	lsls	r3, r3, #8
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	4313      	orrs	r3, r2
 800acf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a1d      	ldr	r2, [pc, #116]	@ (800ad6c <TIM_OC3_SetConfig+0xd0>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d10d      	bne.n	800ad16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a14      	ldr	r2, [pc, #80]	@ (800ad6c <TIM_OC3_SetConfig+0xd0>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d113      	bne.n	800ad46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	011b      	lsls	r3, r3, #4
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	011b      	lsls	r3, r3, #4
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	621a      	str	r2, [r3, #32]
}
 800ad60:	bf00      	nop
 800ad62:	371c      	adds	r7, #28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	40010000 	.word	0x40010000

0800ad70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ada6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800adba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	031b      	lsls	r3, r3, #12
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a10      	ldr	r2, [pc, #64]	@ (800ae0c <TIM_OC4_SetConfig+0x9c>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d109      	bne.n	800ade4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800add6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	019b      	lsls	r3, r3, #6
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	621a      	str	r2, [r3, #32]
}
 800adfe:	bf00      	nop
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	40010000 	.word	0x40010000

0800ae10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	f003 031f 	and.w	r3, r3, #31
 800ae22:	2201      	movs	r2, #1
 800ae24:	fa02 f303 	lsl.w	r3, r2, r3
 800ae28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6a1a      	ldr	r2, [r3, #32]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	43db      	mvns	r3, r3
 800ae32:	401a      	ands	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a1a      	ldr	r2, [r3, #32]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f003 031f 	and.w	r3, r3, #31
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	fa01 f303 	lsl.w	r3, r1, r3
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	621a      	str	r2, [r3, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
	...

0800ae5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d101      	bne.n	800ae74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae70:	2302      	movs	r3, #2
 800ae72:	e050      	b.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a1c      	ldr	r2, [pc, #112]	@ (800af24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d018      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aec0:	d013      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a18      	ldr	r2, [pc, #96]	@ (800af28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d00e      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a16      	ldr	r2, [pc, #88]	@ (800af2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d009      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a15      	ldr	r2, [pc, #84]	@ (800af30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d004      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a13      	ldr	r2, [pc, #76]	@ (800af34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d10c      	bne.n	800af04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	40010000 	.word	0x40010000
 800af28:	40000400 	.word	0x40000400
 800af2c:	40000800 	.word	0x40000800
 800af30:	40000c00 	.word	0x40000c00
 800af34:	40014000 	.word	0x40014000

0800af38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d101      	bne.n	800af54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af50:	2302      	movs	r3, #2
 800af52:	e03d      	b.n	800afd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	4313      	orrs	r3, r2
 800af68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	4313      	orrs	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4313      	orrs	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e042      	b.n	800b09c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7f9 f812 	bl	8004054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2224      	movs	r2, #36	@ 0x24
 800b034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68da      	ldr	r2, [r3, #12]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 ff23 	bl	800be94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b05c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	695a      	ldr	r2, [r3, #20]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b06c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68da      	ldr	r2, [r3, #12]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b07c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2220      	movs	r2, #32
 800b088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2220      	movs	r2, #32
 800b090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b20      	cmp	r3, #32
 800b0bc:	d112      	bne.n	800b0e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <HAL_UART_Receive_DMA+0x26>
 800b0c4:	88fb      	ldrh	r3, [r7, #6]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d101      	bne.n	800b0ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e00b      	b.n	800b0e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b0d4:	88fb      	ldrh	r3, [r7, #6]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	68b9      	ldr	r1, [r7, #8]
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f000 fc72 	bl	800b9c4 <UART_Start_Receive_DMA>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	e000      	b.n	800b0e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b0e4:	2302      	movs	r3, #2
  }
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b09a      	sub	sp, #104	@ 0x68
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	330c      	adds	r3, #12
 800b0fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b10c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	330c      	adds	r3, #12
 800b114:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b116:	657a      	str	r2, [r7, #84]	@ 0x54
 800b118:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b11c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b11e:	e841 2300 	strex	r3, r2, [r1]
 800b122:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1e5      	bne.n	800b0f6 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3314      	adds	r3, #20
 800b130:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	f023 0301 	bic.w	r3, r3, #1
 800b140:	663b      	str	r3, [r7, #96]	@ 0x60
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3314      	adds	r3, #20
 800b148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b14a:	643a      	str	r2, [r7, #64]	@ 0x40
 800b14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b150:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e5      	bne.n	800b12a <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b162:	2b01      	cmp	r3, #1
 800b164:	d119      	bne.n	800b19a <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	330c      	adds	r3, #12
 800b16c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	61fb      	str	r3, [r7, #28]
   return(result);
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	f023 0310 	bic.w	r3, r3, #16
 800b17c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	330c      	adds	r3, #12
 800b184:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b188:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b18c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e5      	bne.n	800b166 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	695b      	ldr	r3, [r3, #20]
 800b1a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a4:	2b40      	cmp	r3, #64	@ 0x40
 800b1a6:	d136      	bne.n	800b216 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3314      	adds	r3, #20
 800b1ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	e853 3f00 	ldrex	r3, [r3]
 800b1b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3314      	adds	r3, #20
 800b1c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1c8:	61ba      	str	r2, [r7, #24]
 800b1ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1cc:	6979      	ldr	r1, [r7, #20]
 800b1ce:	69ba      	ldr	r2, [r7, #24]
 800b1d0:	e841 2300 	strex	r3, r2, [r1]
 800b1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1e5      	bne.n	800b1a8 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d018      	beq.n	800b216 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fc f8c5 	bl	8007380 <HAL_DMA_Abort>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00c      	beq.n	800b216 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b200:	4618      	mov	r0, r3
 800b202:	f7fc fad9 	bl	80077b8 <HAL_DMA_GetError>
 800b206:	4603      	mov	r3, r0
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d104      	bne.n	800b216 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2210      	movs	r2, #16
 800b210:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800b212:	2303      	movs	r3, #3
 800b214:	e00a      	b.n	800b22c <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2220      	movs	r2, #32
 800b220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3768      	adds	r7, #104	@ 0x68
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b0ba      	sub	sp, #232	@ 0xe8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b260:	2300      	movs	r3, #0
 800b262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b26a:	f003 030f 	and.w	r3, r3, #15
 800b26e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10f      	bne.n	800b29a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b27e:	f003 0320 	and.w	r3, r3, #32
 800b282:	2b00      	cmp	r3, #0
 800b284:	d009      	beq.n	800b29a <HAL_UART_IRQHandler+0x66>
 800b286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b28a:	f003 0320 	and.w	r3, r3, #32
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 fd40 	bl	800bd18 <UART_Receive_IT>
      return;
 800b298:	e273      	b.n	800b782 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b29a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f000 80de 	beq.w	800b460 <HAL_UART_IRQHandler+0x22c>
 800b2a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d106      	bne.n	800b2be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b2b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 80d1 	beq.w	800b460 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00b      	beq.n	800b2e2 <HAL_UART_IRQHandler+0xae>
 800b2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d005      	beq.n	800b2e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2da:	f043 0201 	orr.w	r2, r3, #1
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2e6:	f003 0304 	and.w	r3, r3, #4
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00b      	beq.n	800b306 <HAL_UART_IRQHandler+0xd2>
 800b2ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d005      	beq.n	800b306 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2fe:	f043 0202 	orr.w	r2, r3, #2
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b30a:	f003 0302 	and.w	r3, r3, #2
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00b      	beq.n	800b32a <HAL_UART_IRQHandler+0xf6>
 800b312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d005      	beq.n	800b32a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b322:	f043 0204 	orr.w	r2, r3, #4
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b32e:	f003 0308 	and.w	r3, r3, #8
 800b332:	2b00      	cmp	r3, #0
 800b334:	d011      	beq.n	800b35a <HAL_UART_IRQHandler+0x126>
 800b336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b33a:	f003 0320 	and.w	r3, r3, #32
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d105      	bne.n	800b34e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d005      	beq.n	800b35a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b352:	f043 0208 	orr.w	r2, r3, #8
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 820a 	beq.w	800b778 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b368:	f003 0320 	and.w	r3, r3, #32
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d008      	beq.n	800b382 <HAL_UART_IRQHandler+0x14e>
 800b370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b374:	f003 0320 	and.w	r3, r3, #32
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fccb 	bl	800bd18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b38c:	2b40      	cmp	r3, #64	@ 0x40
 800b38e:	bf0c      	ite	eq
 800b390:	2301      	moveq	r3, #1
 800b392:	2300      	movne	r3, #0
 800b394:	b2db      	uxtb	r3, r3
 800b396:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b39e:	f003 0308 	and.w	r3, r3, #8
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d103      	bne.n	800b3ae <HAL_UART_IRQHandler+0x17a>
 800b3a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d04f      	beq.n	800b44e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fbd6 	bl	800bb60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3be:	2b40      	cmp	r3, #64	@ 0x40
 800b3c0:	d141      	bne.n	800b446 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3314      	adds	r3, #20
 800b3c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b3d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3314      	adds	r3, #20
 800b3ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b3ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b3f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b3fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1d9      	bne.n	800b3c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b412:	2b00      	cmp	r3, #0
 800b414:	d013      	beq.n	800b43e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b41a:	4a8a      	ldr	r2, [pc, #552]	@ (800b644 <HAL_UART_IRQHandler+0x410>)
 800b41c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b422:	4618      	mov	r0, r3
 800b424:	f7fc f81c 	bl	8007460 <HAL_DMA_Abort_IT>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d016      	beq.n	800b45c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b438:	4610      	mov	r0, r2
 800b43a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b43c:	e00e      	b.n	800b45c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7f7 fa7a 	bl	8002938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b444:	e00a      	b.n	800b45c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7f7 fa76 	bl	8002938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b44c:	e006      	b.n	800b45c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7f7 fa72 	bl	8002938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b45a:	e18d      	b.n	800b778 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b45c:	bf00      	nop
    return;
 800b45e:	e18b      	b.n	800b778 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b464:	2b01      	cmp	r3, #1
 800b466:	f040 8167 	bne.w	800b738 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b46e:	f003 0310 	and.w	r3, r3, #16
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 8160 	beq.w	800b738 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b47c:	f003 0310 	and.w	r3, r3, #16
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 8159 	beq.w	800b738 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b486:	2300      	movs	r3, #0
 800b488:	60bb      	str	r3, [r7, #8]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	60bb      	str	r3, [r7, #8]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	60bb      	str	r3, [r7, #8]
 800b49a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	695b      	ldr	r3, [r3, #20]
 800b4a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a6:	2b40      	cmp	r3, #64	@ 0x40
 800b4a8:	f040 80ce 	bne.w	800b648 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f000 80a9 	beq.w	800b614 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b4c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	f080 80a2 	bcs.w	800b614 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4e2:	f000 8088 	beq.w	800b5f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	330c      	adds	r3, #12
 800b4ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b4f4:	e853 3f00 	ldrex	r3, [r3]
 800b4f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b4fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b504:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	330c      	adds	r3, #12
 800b50e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b512:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b51e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b52a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1d9      	bne.n	800b4e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3314      	adds	r3, #20
 800b538:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b544:	f023 0301 	bic.w	r3, r3, #1
 800b548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3314      	adds	r3, #20
 800b552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b556:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b55a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b55e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b562:	e841 2300 	strex	r3, r2, [r1]
 800b566:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1e1      	bne.n	800b532 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3314      	adds	r3, #20
 800b574:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b576:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b578:	e853 3f00 	ldrex	r3, [r3]
 800b57c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b57e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b584:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3314      	adds	r3, #20
 800b58e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b592:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b594:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b596:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b598:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b59a:	e841 2300 	strex	r3, r2, [r1]
 800b59e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b5a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1e3      	bne.n	800b56e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2220      	movs	r2, #32
 800b5aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	330c      	adds	r3, #12
 800b5ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5be:	e853 3f00 	ldrex	r3, [r3]
 800b5c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5c6:	f023 0310 	bic.w	r3, r3, #16
 800b5ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	330c      	adds	r3, #12
 800b5d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b5d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b5da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5e0:	e841 2300 	strex	r3, r2, [r1]
 800b5e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1e3      	bne.n	800b5b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fb fec5 	bl	8007380 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b604:	b29b      	uxth	r3, r3
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	b29b      	uxth	r3, r3
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f8cf 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b612:	e0b3      	b.n	800b77c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b618:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b61c:	429a      	cmp	r2, r3
 800b61e:	f040 80ad 	bne.w	800b77c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b626:	69db      	ldr	r3, [r3, #28]
 800b628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b62c:	f040 80a6 	bne.w	800b77c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2202      	movs	r2, #2
 800b634:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f8b7 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
      return;
 800b642:	e09b      	b.n	800b77c <HAL_UART_IRQHandler+0x548>
 800b644:	0800bc27 	.word	0x0800bc27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b650:	b29b      	uxth	r3, r3
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 808e 	beq.w	800b780 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 8089 	beq.w	800b780 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	330c      	adds	r3, #12
 800b674:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b67e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	330c      	adds	r3, #12
 800b68e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b692:	647a      	str	r2, [r7, #68]	@ 0x44
 800b694:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b696:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b69a:	e841 2300 	strex	r3, r2, [r1]
 800b69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1e3      	bne.n	800b66e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3314      	adds	r3, #20
 800b6ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	e853 3f00 	ldrex	r3, [r3]
 800b6b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	f023 0301 	bic.w	r3, r3, #1
 800b6bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	3314      	adds	r3, #20
 800b6c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b6ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800b6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6d2:	e841 2300 	strex	r3, r2, [r1]
 800b6d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1e3      	bne.n	800b6a6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2220      	movs	r2, #32
 800b6e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	330c      	adds	r3, #12
 800b6f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	e853 3f00 	ldrex	r3, [r3]
 800b6fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f023 0310 	bic.w	r3, r3, #16
 800b702:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	330c      	adds	r3, #12
 800b70c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b710:	61fa      	str	r2, [r7, #28]
 800b712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	69b9      	ldr	r1, [r7, #24]
 800b716:	69fa      	ldr	r2, [r7, #28]
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	617b      	str	r3, [r7, #20]
   return(result);
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e3      	bne.n	800b6ec <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b72a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f83d 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b736:	e023      	b.n	800b780 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b73c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b740:	2b00      	cmp	r3, #0
 800b742:	d009      	beq.n	800b758 <HAL_UART_IRQHandler+0x524>
 800b744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d003      	beq.n	800b758 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fa79 	bl	800bc48 <UART_Transmit_IT>
    return;
 800b756:	e014      	b.n	800b782 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b75c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00e      	beq.n	800b782 <HAL_UART_IRQHandler+0x54e>
 800b764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d008      	beq.n	800b782 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fab9 	bl	800bce8 <UART_EndTransmit_IT>
    return;
 800b776:	e004      	b.n	800b782 <HAL_UART_IRQHandler+0x54e>
    return;
 800b778:	bf00      	nop
 800b77a:	e002      	b.n	800b782 <HAL_UART_IRQHandler+0x54e>
      return;
 800b77c:	bf00      	nop
 800b77e:	e000      	b.n	800b782 <HAL_UART_IRQHandler+0x54e>
      return;
 800b780:	bf00      	nop
  }
}
 800b782:	37e8      	adds	r7, #232	@ 0xe8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b09c      	sub	sp, #112	@ 0x70
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d172      	bne.n	800b8ca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b7e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	330c      	adds	r3, #12
 800b7f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7f4:	e853 3f00 	ldrex	r3, [r3]
 800b7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b800:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	330c      	adds	r3, #12
 800b808:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b80a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b80c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b810:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b812:	e841 2300 	strex	r3, r2, [r1]
 800b816:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1e5      	bne.n	800b7ea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b81e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3314      	adds	r3, #20
 800b824:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b828:	e853 3f00 	ldrex	r3, [r3]
 800b82c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b82e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b830:	f023 0301 	bic.w	r3, r3, #1
 800b834:	667b      	str	r3, [r7, #100]	@ 0x64
 800b836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3314      	adds	r3, #20
 800b83c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b83e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b840:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b842:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b846:	e841 2300 	strex	r3, r2, [r1]
 800b84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1e5      	bne.n	800b81e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3314      	adds	r3, #20
 800b858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	e853 3f00 	ldrex	r3, [r3]
 800b860:	623b      	str	r3, [r7, #32]
   return(result);
 800b862:	6a3b      	ldr	r3, [r7, #32]
 800b864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b868:	663b      	str	r3, [r7, #96]	@ 0x60
 800b86a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3314      	adds	r3, #20
 800b870:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b872:	633a      	str	r2, [r7, #48]	@ 0x30
 800b874:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b87a:	e841 2300 	strex	r3, r2, [r1]
 800b87e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1e5      	bne.n	800b852 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b888:	2220      	movs	r2, #32
 800b88a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b88e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b892:	2b01      	cmp	r3, #1
 800b894:	d119      	bne.n	800b8ca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	330c      	adds	r3, #12
 800b89c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f023 0310 	bic.w	r3, r3, #16
 800b8ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	330c      	adds	r3, #12
 800b8b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b8b6:	61fa      	str	r2, [r7, #28]
 800b8b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ba:	69b9      	ldr	r1, [r7, #24]
 800b8bc:	69fa      	ldr	r2, [r7, #28]
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	617b      	str	r3, [r7, #20]
   return(result);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e5      	bne.n	800b896 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d106      	bne.n	800b8e6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b8dc:	4619      	mov	r1, r3
 800b8de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8e0:	f7ff ff66 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8e4:	e002      	b.n	800b8ec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b8e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8e8:	f7f6 ffb8 	bl	800285c <HAL_UART_RxCpltCallback>
}
 800b8ec:	bf00      	nop
 800b8ee:	3770      	adds	r7, #112	@ 0x70
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b900:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2201      	movs	r2, #1
 800b906:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d108      	bne.n	800b922 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b914:	085b      	lsrs	r3, r3, #1
 800b916:	b29b      	uxth	r3, r3
 800b918:	4619      	mov	r1, r3
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f7ff ff48 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b920:	e002      	b.n	800b928 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f7ff ff3a 	bl	800b79c <HAL_UART_RxHalfCpltCallback>
}
 800b928:	bf00      	nop
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b938:	2300      	movs	r3, #0
 800b93a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b940:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	695b      	ldr	r3, [r3, #20]
 800b948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b94c:	2b80      	cmp	r3, #128	@ 0x80
 800b94e:	bf0c      	ite	eq
 800b950:	2301      	moveq	r3, #1
 800b952:	2300      	movne	r3, #0
 800b954:	b2db      	uxtb	r3, r3
 800b956:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b21      	cmp	r3, #33	@ 0x21
 800b962:	d108      	bne.n	800b976 <UART_DMAError+0x46>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d005      	beq.n	800b976 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2200      	movs	r2, #0
 800b96e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b970:	68b8      	ldr	r0, [r7, #8]
 800b972:	f000 f8cd 	bl	800bb10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	695b      	ldr	r3, [r3, #20]
 800b97c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b980:	2b40      	cmp	r3, #64	@ 0x40
 800b982:	bf0c      	ite	eq
 800b984:	2301      	moveq	r3, #1
 800b986:	2300      	movne	r3, #0
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b992:	b2db      	uxtb	r3, r3
 800b994:	2b22      	cmp	r3, #34	@ 0x22
 800b996:	d108      	bne.n	800b9aa <UART_DMAError+0x7a>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d005      	beq.n	800b9aa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b9a4:	68b8      	ldr	r0, [r7, #8]
 800b9a6:	f000 f8db 	bl	800bb60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ae:	f043 0210 	orr.w	r2, r3, #16
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9b6:	68b8      	ldr	r0, [r7, #8]
 800b9b8:	f7f6 ffbe 	bl	8002938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9bc:	bf00      	nop
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b098      	sub	sp, #96	@ 0x60
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	88fa      	ldrh	r2, [r7, #6]
 800b9dc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2222      	movs	r2, #34	@ 0x22
 800b9e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9f0:	4a44      	ldr	r2, [pc, #272]	@ (800bb04 <UART_Start_Receive_DMA+0x140>)
 800b9f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9f8:	4a43      	ldr	r2, [pc, #268]	@ (800bb08 <UART_Start_Receive_DMA+0x144>)
 800b9fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba00:	4a42      	ldr	r2, [pc, #264]	@ (800bb0c <UART_Start_Receive_DMA+0x148>)
 800ba02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba08:	2200      	movs	r2, #0
 800ba0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ba0c:	f107 0308 	add.w	r3, r7, #8
 800ba10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	88fb      	ldrh	r3, [r7, #6]
 800ba24:	f7fb fc54 	bl	80072d0 <HAL_DMA_Start_IT>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d008      	beq.n	800ba40 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2210      	movs	r2, #16
 800ba32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e05d      	b.n	800bafc <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ba40:	2300      	movs	r3, #0
 800ba42:	613b      	str	r3, [r7, #16]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	613b      	str	r3, [r7, #16]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	613b      	str	r3, [r7, #16]
 800ba54:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d019      	beq.n	800ba92 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	330c      	adds	r3, #12
 800ba64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba68:	e853 3f00 	ldrex	r3, [r3]
 800ba6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba74:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	330c      	adds	r3, #12
 800ba7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ba80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ba84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1e5      	bne.n	800ba5e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3314      	adds	r3, #20
 800ba98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9c:	e853 3f00 	ldrex	r3, [r3]
 800baa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800baa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa4:	f043 0301 	orr.w	r3, r3, #1
 800baa8:	657b      	str	r3, [r7, #84]	@ 0x54
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3314      	adds	r3, #20
 800bab0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bab2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800baba:	e841 2300 	strex	r3, r2, [r1]
 800babe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1e5      	bne.n	800ba92 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3314      	adds	r3, #20
 800bacc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	e853 3f00 	ldrex	r3, [r3]
 800bad4:	617b      	str	r3, [r7, #20]
   return(result);
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800badc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3314      	adds	r3, #20
 800bae4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bae6:	627a      	str	r2, [r7, #36]	@ 0x24
 800bae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baea:	6a39      	ldr	r1, [r7, #32]
 800baec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baee:	e841 2300 	strex	r3, r2, [r1]
 800baf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e5      	bne.n	800bac6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3760      	adds	r7, #96	@ 0x60
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	0800b7c9 	.word	0x0800b7c9
 800bb08:	0800b8f5 	.word	0x0800b8f5
 800bb0c:	0800b931 	.word	0x0800b931

0800bb10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b089      	sub	sp, #36	@ 0x24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	330c      	adds	r3, #12
 800bb1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	e853 3f00 	ldrex	r3, [r3]
 800bb26:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bb2e:	61fb      	str	r3, [r7, #28]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	330c      	adds	r3, #12
 800bb36:	69fa      	ldr	r2, [r7, #28]
 800bb38:	61ba      	str	r2, [r7, #24]
 800bb3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	6979      	ldr	r1, [r7, #20]
 800bb3e:	69ba      	ldr	r2, [r7, #24]
 800bb40:	e841 2300 	strex	r3, r2, [r1]
 800bb44:	613b      	str	r3, [r7, #16]
   return(result);
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1e5      	bne.n	800bb18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bb54:	bf00      	nop
 800bb56:	3724      	adds	r7, #36	@ 0x24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b095      	sub	sp, #84	@ 0x54
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	330c      	adds	r3, #12
 800bb6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb72:	e853 3f00 	ldrex	r3, [r3]
 800bb76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	330c      	adds	r3, #12
 800bb86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb88:	643a      	str	r2, [r7, #64]	@ 0x40
 800bb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb90:	e841 2300 	strex	r3, r2, [r1]
 800bb94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1e5      	bne.n	800bb68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3314      	adds	r3, #20
 800bba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	e853 3f00 	ldrex	r3, [r3]
 800bbaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	f023 0301 	bic.w	r3, r3, #1
 800bbb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3314      	adds	r3, #20
 800bbba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbc4:	e841 2300 	strex	r3, r2, [r1]
 800bbc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1e5      	bne.n	800bb9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d119      	bne.n	800bc0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	330c      	adds	r3, #12
 800bbde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	e853 3f00 	ldrex	r3, [r3]
 800bbe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	f023 0310 	bic.w	r3, r3, #16
 800bbee:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	330c      	adds	r3, #12
 800bbf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbf8:	61ba      	str	r2, [r7, #24]
 800bbfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfc:	6979      	ldr	r1, [r7, #20]
 800bbfe:	69ba      	ldr	r2, [r7, #24]
 800bc00:	e841 2300 	strex	r3, r2, [r1]
 800bc04:	613b      	str	r3, [r7, #16]
   return(result);
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1e5      	bne.n	800bbd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bc1a:	bf00      	nop
 800bc1c:	3754      	adds	r7, #84	@ 0x54
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b084      	sub	sp, #16
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f7f6 fe7c 	bl	8002938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc40:	bf00      	nop
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b21      	cmp	r3, #33	@ 0x21
 800bc5a:	d13e      	bne.n	800bcda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc64:	d114      	bne.n	800bc90 <UART_Transmit_IT+0x48>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d110      	bne.n	800bc90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a1b      	ldr	r3, [r3, #32]
 800bc88:	1c9a      	adds	r2, r3, #2
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	621a      	str	r2, [r3, #32]
 800bc8e:	e008      	b.n	800bca2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a1b      	ldr	r3, [r3, #32]
 800bc94:	1c59      	adds	r1, r3, #1
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	6211      	str	r1, [r2, #32]
 800bc9a:	781a      	ldrb	r2, [r3, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	4619      	mov	r1, r3
 800bcb0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10f      	bne.n	800bcd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68da      	ldr	r2, [r3, #12]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bcc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68da      	ldr	r2, [r3, #12]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bcd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	e000      	b.n	800bcdc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bcda:	2302      	movs	r3, #2
  }
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68da      	ldr	r2, [r3, #12]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bcfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2220      	movs	r2, #32
 800bd04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f7ff fd3d 	bl	800b788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08c      	sub	sp, #48	@ 0x30
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800bd20:	2300      	movs	r3, #0
 800bd22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	2b22      	cmp	r3, #34	@ 0x22
 800bd32:	f040 80aa 	bne.w	800be8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd3e:	d115      	bne.n	800bd6c <UART_Receive_IT+0x54>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d111      	bne.n	800bd6c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd64:	1c9a      	adds	r2, r3, #2
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd6a:	e024      	b.n	800bdb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd7a:	d007      	beq.n	800bd8c <UART_Receive_IT+0x74>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d10a      	bne.n	800bd9a <UART_Receive_IT+0x82>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d106      	bne.n	800bd9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd96:	701a      	strb	r2, [r3, #0]
 800bd98:	e008      	b.n	800bdac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdaa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb0:	1c5a      	adds	r2, r3, #1
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d15d      	bne.n	800be86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68da      	ldr	r2, [r3, #12]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f022 0220 	bic.w	r2, r2, #32
 800bdd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68da      	ldr	r2, [r3, #12]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bde8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	695a      	ldr	r2, [r3, #20]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f022 0201 	bic.w	r2, r2, #1
 800bdf8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d135      	bne.n	800be7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	330c      	adds	r3, #12
 800be1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	e853 3f00 	ldrex	r3, [r3]
 800be24:	613b      	str	r3, [r7, #16]
   return(result);
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f023 0310 	bic.w	r3, r3, #16
 800be2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	330c      	adds	r3, #12
 800be34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be36:	623a      	str	r2, [r7, #32]
 800be38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3a:	69f9      	ldr	r1, [r7, #28]
 800be3c:	6a3a      	ldr	r2, [r7, #32]
 800be3e:	e841 2300 	strex	r3, r2, [r1]
 800be42:	61bb      	str	r3, [r7, #24]
   return(result);
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e5      	bne.n	800be16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 0310 	and.w	r3, r3, #16
 800be54:	2b10      	cmp	r3, #16
 800be56:	d10a      	bne.n	800be6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be58:	2300      	movs	r3, #0
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	60fb      	str	r3, [r7, #12]
 800be6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7ff fc9b 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
 800be7a:	e002      	b.n	800be82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7f6 fced 	bl	800285c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	e002      	b.n	800be8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	e000      	b.n	800be8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800be8a:	2302      	movs	r3, #2
  }
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3730      	adds	r7, #48	@ 0x30
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be98:	b0c0      	sub	sp, #256	@ 0x100
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800beac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800beb0:	68d9      	ldr	r1, [r3, #12]
 800beb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	ea40 0301 	orr.w	r3, r0, r1
 800bebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bec2:	689a      	ldr	r2, [r3, #8]
 800bec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	431a      	orrs	r2, r3
 800becc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	431a      	orrs	r2, r3
 800bed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	4313      	orrs	r3, r2
 800bedc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800beec:	f021 010c 	bic.w	r1, r1, #12
 800bef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800befa:	430b      	orrs	r3, r1
 800befc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800befe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bf0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf0e:	6999      	ldr	r1, [r3, #24]
 800bf10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	ea40 0301 	orr.w	r3, r0, r1
 800bf1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bf1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	4b8f      	ldr	r3, [pc, #572]	@ (800c160 <UART_SetConfig+0x2cc>)
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d005      	beq.n	800bf34 <UART_SetConfig+0xa0>
 800bf28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	4b8d      	ldr	r3, [pc, #564]	@ (800c164 <UART_SetConfig+0x2d0>)
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d104      	bne.n	800bf3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bf34:	f7fe f97e 	bl	800a234 <HAL_RCC_GetPCLK2Freq>
 800bf38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bf3c:	e003      	b.n	800bf46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bf3e:	f7fe f965 	bl	800a20c <HAL_RCC_GetPCLK1Freq>
 800bf42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf4a:	69db      	ldr	r3, [r3, #28]
 800bf4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf50:	f040 810c 	bne.w	800c16c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bf54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bf5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bf62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bf66:	4622      	mov	r2, r4
 800bf68:	462b      	mov	r3, r5
 800bf6a:	1891      	adds	r1, r2, r2
 800bf6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bf6e:	415b      	adcs	r3, r3
 800bf70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bf76:	4621      	mov	r1, r4
 800bf78:	eb12 0801 	adds.w	r8, r2, r1
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	eb43 0901 	adc.w	r9, r3, r1
 800bf82:	f04f 0200 	mov.w	r2, #0
 800bf86:	f04f 0300 	mov.w	r3, #0
 800bf8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf96:	4690      	mov	r8, r2
 800bf98:	4699      	mov	r9, r3
 800bf9a:	4623      	mov	r3, r4
 800bf9c:	eb18 0303 	adds.w	r3, r8, r3
 800bfa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bfa4:	462b      	mov	r3, r5
 800bfa6:	eb49 0303 	adc.w	r3, r9, r3
 800bfaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bfae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bfbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	18db      	adds	r3, r3, r3
 800bfc6:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfc8:	4613      	mov	r3, r2
 800bfca:	eb42 0303 	adc.w	r3, r2, r3
 800bfce:	657b      	str	r3, [r7, #84]	@ 0x54
 800bfd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bfd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bfd8:	f7f4 fdee 	bl	8000bb8 <__aeabi_uldivmod>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	4b61      	ldr	r3, [pc, #388]	@ (800c168 <UART_SetConfig+0x2d4>)
 800bfe2:	fba3 2302 	umull	r2, r3, r3, r2
 800bfe6:	095b      	lsrs	r3, r3, #5
 800bfe8:	011c      	lsls	r4, r3, #4
 800bfea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bfee:	2200      	movs	r2, #0
 800bff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bff4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bffc:	4642      	mov	r2, r8
 800bffe:	464b      	mov	r3, r9
 800c000:	1891      	adds	r1, r2, r2
 800c002:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c004:	415b      	adcs	r3, r3
 800c006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c00c:	4641      	mov	r1, r8
 800c00e:	eb12 0a01 	adds.w	sl, r2, r1
 800c012:	4649      	mov	r1, r9
 800c014:	eb43 0b01 	adc.w	fp, r3, r1
 800c018:	f04f 0200 	mov.w	r2, #0
 800c01c:	f04f 0300 	mov.w	r3, #0
 800c020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c02c:	4692      	mov	sl, r2
 800c02e:	469b      	mov	fp, r3
 800c030:	4643      	mov	r3, r8
 800c032:	eb1a 0303 	adds.w	r3, sl, r3
 800c036:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c03a:	464b      	mov	r3, r9
 800c03c:	eb4b 0303 	adc.w	r3, fp, r3
 800c040:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c050:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c058:	460b      	mov	r3, r1
 800c05a:	18db      	adds	r3, r3, r3
 800c05c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c05e:	4613      	mov	r3, r2
 800c060:	eb42 0303 	adc.w	r3, r2, r3
 800c064:	647b      	str	r3, [r7, #68]	@ 0x44
 800c066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c06a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c06e:	f7f4 fda3 	bl	8000bb8 <__aeabi_uldivmod>
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	4611      	mov	r1, r2
 800c078:	4b3b      	ldr	r3, [pc, #236]	@ (800c168 <UART_SetConfig+0x2d4>)
 800c07a:	fba3 2301 	umull	r2, r3, r3, r1
 800c07e:	095b      	lsrs	r3, r3, #5
 800c080:	2264      	movs	r2, #100	@ 0x64
 800c082:	fb02 f303 	mul.w	r3, r2, r3
 800c086:	1acb      	subs	r3, r1, r3
 800c088:	00db      	lsls	r3, r3, #3
 800c08a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c08e:	4b36      	ldr	r3, [pc, #216]	@ (800c168 <UART_SetConfig+0x2d4>)
 800c090:	fba3 2302 	umull	r2, r3, r3, r2
 800c094:	095b      	lsrs	r3, r3, #5
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c09c:	441c      	add	r4, r3
 800c09e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c0a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c0ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	464b      	mov	r3, r9
 800c0b4:	1891      	adds	r1, r2, r2
 800c0b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c0b8:	415b      	adcs	r3, r3
 800c0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c0c0:	4641      	mov	r1, r8
 800c0c2:	1851      	adds	r1, r2, r1
 800c0c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	414b      	adcs	r3, r1
 800c0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0cc:	f04f 0200 	mov.w	r2, #0
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c0d8:	4659      	mov	r1, fp
 800c0da:	00cb      	lsls	r3, r1, #3
 800c0dc:	4651      	mov	r1, sl
 800c0de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0e2:	4651      	mov	r1, sl
 800c0e4:	00ca      	lsls	r2, r1, #3
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	189b      	adds	r3, r3, r2
 800c0f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c0f4:	464b      	mov	r3, r9
 800c0f6:	460a      	mov	r2, r1
 800c0f8:	eb42 0303 	adc.w	r3, r2, r3
 800c0fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c10c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c114:	460b      	mov	r3, r1
 800c116:	18db      	adds	r3, r3, r3
 800c118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c11a:	4613      	mov	r3, r2
 800c11c:	eb42 0303 	adc.w	r3, r2, r3
 800c120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c12a:	f7f4 fd45 	bl	8000bb8 <__aeabi_uldivmod>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4b0d      	ldr	r3, [pc, #52]	@ (800c168 <UART_SetConfig+0x2d4>)
 800c134:	fba3 1302 	umull	r1, r3, r3, r2
 800c138:	095b      	lsrs	r3, r3, #5
 800c13a:	2164      	movs	r1, #100	@ 0x64
 800c13c:	fb01 f303 	mul.w	r3, r1, r3
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	3332      	adds	r3, #50	@ 0x32
 800c146:	4a08      	ldr	r2, [pc, #32]	@ (800c168 <UART_SetConfig+0x2d4>)
 800c148:	fba2 2303 	umull	r2, r3, r2, r3
 800c14c:	095b      	lsrs	r3, r3, #5
 800c14e:	f003 0207 	and.w	r2, r3, #7
 800c152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4422      	add	r2, r4
 800c15a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c15c:	e106      	b.n	800c36c <UART_SetConfig+0x4d8>
 800c15e:	bf00      	nop
 800c160:	40011000 	.word	0x40011000
 800c164:	40011400 	.word	0x40011400
 800c168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c16c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c170:	2200      	movs	r2, #0
 800c172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c176:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c17a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c17e:	4642      	mov	r2, r8
 800c180:	464b      	mov	r3, r9
 800c182:	1891      	adds	r1, r2, r2
 800c184:	6239      	str	r1, [r7, #32]
 800c186:	415b      	adcs	r3, r3
 800c188:	627b      	str	r3, [r7, #36]	@ 0x24
 800c18a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c18e:	4641      	mov	r1, r8
 800c190:	1854      	adds	r4, r2, r1
 800c192:	4649      	mov	r1, r9
 800c194:	eb43 0501 	adc.w	r5, r3, r1
 800c198:	f04f 0200 	mov.w	r2, #0
 800c19c:	f04f 0300 	mov.w	r3, #0
 800c1a0:	00eb      	lsls	r3, r5, #3
 800c1a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c1a6:	00e2      	lsls	r2, r4, #3
 800c1a8:	4614      	mov	r4, r2
 800c1aa:	461d      	mov	r5, r3
 800c1ac:	4643      	mov	r3, r8
 800c1ae:	18e3      	adds	r3, r4, r3
 800c1b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c1b4:	464b      	mov	r3, r9
 800c1b6:	eb45 0303 	adc.w	r3, r5, r3
 800c1ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c1ce:	f04f 0200 	mov.w	r2, #0
 800c1d2:	f04f 0300 	mov.w	r3, #0
 800c1d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c1da:	4629      	mov	r1, r5
 800c1dc:	008b      	lsls	r3, r1, #2
 800c1de:	4621      	mov	r1, r4
 800c1e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	008a      	lsls	r2, r1, #2
 800c1e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c1ec:	f7f4 fce4 	bl	8000bb8 <__aeabi_uldivmod>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4b60      	ldr	r3, [pc, #384]	@ (800c378 <UART_SetConfig+0x4e4>)
 800c1f6:	fba3 2302 	umull	r2, r3, r3, r2
 800c1fa:	095b      	lsrs	r3, r3, #5
 800c1fc:	011c      	lsls	r4, r3, #4
 800c1fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c202:	2200      	movs	r2, #0
 800c204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c208:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c20c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c210:	4642      	mov	r2, r8
 800c212:	464b      	mov	r3, r9
 800c214:	1891      	adds	r1, r2, r2
 800c216:	61b9      	str	r1, [r7, #24]
 800c218:	415b      	adcs	r3, r3
 800c21a:	61fb      	str	r3, [r7, #28]
 800c21c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c220:	4641      	mov	r1, r8
 800c222:	1851      	adds	r1, r2, r1
 800c224:	6139      	str	r1, [r7, #16]
 800c226:	4649      	mov	r1, r9
 800c228:	414b      	adcs	r3, r1
 800c22a:	617b      	str	r3, [r7, #20]
 800c22c:	f04f 0200 	mov.w	r2, #0
 800c230:	f04f 0300 	mov.w	r3, #0
 800c234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c238:	4659      	mov	r1, fp
 800c23a:	00cb      	lsls	r3, r1, #3
 800c23c:	4651      	mov	r1, sl
 800c23e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c242:	4651      	mov	r1, sl
 800c244:	00ca      	lsls	r2, r1, #3
 800c246:	4610      	mov	r0, r2
 800c248:	4619      	mov	r1, r3
 800c24a:	4603      	mov	r3, r0
 800c24c:	4642      	mov	r2, r8
 800c24e:	189b      	adds	r3, r3, r2
 800c250:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c254:	464b      	mov	r3, r9
 800c256:	460a      	mov	r2, r1
 800c258:	eb42 0303 	adc.w	r3, r2, r3
 800c25c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c26a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c26c:	f04f 0200 	mov.w	r2, #0
 800c270:	f04f 0300 	mov.w	r3, #0
 800c274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c278:	4649      	mov	r1, r9
 800c27a:	008b      	lsls	r3, r1, #2
 800c27c:	4641      	mov	r1, r8
 800c27e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c282:	4641      	mov	r1, r8
 800c284:	008a      	lsls	r2, r1, #2
 800c286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c28a:	f7f4 fc95 	bl	8000bb8 <__aeabi_uldivmod>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	4611      	mov	r1, r2
 800c294:	4b38      	ldr	r3, [pc, #224]	@ (800c378 <UART_SetConfig+0x4e4>)
 800c296:	fba3 2301 	umull	r2, r3, r3, r1
 800c29a:	095b      	lsrs	r3, r3, #5
 800c29c:	2264      	movs	r2, #100	@ 0x64
 800c29e:	fb02 f303 	mul.w	r3, r2, r3
 800c2a2:	1acb      	subs	r3, r1, r3
 800c2a4:	011b      	lsls	r3, r3, #4
 800c2a6:	3332      	adds	r3, #50	@ 0x32
 800c2a8:	4a33      	ldr	r2, [pc, #204]	@ (800c378 <UART_SetConfig+0x4e4>)
 800c2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ae:	095b      	lsrs	r3, r3, #5
 800c2b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c2b4:	441c      	add	r4, r3
 800c2b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	673b      	str	r3, [r7, #112]	@ 0x70
 800c2be:	677a      	str	r2, [r7, #116]	@ 0x74
 800c2c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c2c4:	4642      	mov	r2, r8
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	1891      	adds	r1, r2, r2
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	415b      	adcs	r3, r3
 800c2ce:	60fb      	str	r3, [r7, #12]
 800c2d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2d4:	4641      	mov	r1, r8
 800c2d6:	1851      	adds	r1, r2, r1
 800c2d8:	6039      	str	r1, [r7, #0]
 800c2da:	4649      	mov	r1, r9
 800c2dc:	414b      	adcs	r3, r1
 800c2de:	607b      	str	r3, [r7, #4]
 800c2e0:	f04f 0200 	mov.w	r2, #0
 800c2e4:	f04f 0300 	mov.w	r3, #0
 800c2e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c2ec:	4659      	mov	r1, fp
 800c2ee:	00cb      	lsls	r3, r1, #3
 800c2f0:	4651      	mov	r1, sl
 800c2f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2f6:	4651      	mov	r1, sl
 800c2f8:	00ca      	lsls	r2, r1, #3
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4603      	mov	r3, r0
 800c300:	4642      	mov	r2, r8
 800c302:	189b      	adds	r3, r3, r2
 800c304:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c306:	464b      	mov	r3, r9
 800c308:	460a      	mov	r2, r1
 800c30a:	eb42 0303 	adc.w	r3, r2, r3
 800c30e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	663b      	str	r3, [r7, #96]	@ 0x60
 800c31a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c31c:	f04f 0200 	mov.w	r2, #0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c328:	4649      	mov	r1, r9
 800c32a:	008b      	lsls	r3, r1, #2
 800c32c:	4641      	mov	r1, r8
 800c32e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c332:	4641      	mov	r1, r8
 800c334:	008a      	lsls	r2, r1, #2
 800c336:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c33a:	f7f4 fc3d 	bl	8000bb8 <__aeabi_uldivmod>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4b0d      	ldr	r3, [pc, #52]	@ (800c378 <UART_SetConfig+0x4e4>)
 800c344:	fba3 1302 	umull	r1, r3, r3, r2
 800c348:	095b      	lsrs	r3, r3, #5
 800c34a:	2164      	movs	r1, #100	@ 0x64
 800c34c:	fb01 f303 	mul.w	r3, r1, r3
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	011b      	lsls	r3, r3, #4
 800c354:	3332      	adds	r3, #50	@ 0x32
 800c356:	4a08      	ldr	r2, [pc, #32]	@ (800c378 <UART_SetConfig+0x4e4>)
 800c358:	fba2 2303 	umull	r2, r3, r2, r3
 800c35c:	095b      	lsrs	r3, r3, #5
 800c35e:	f003 020f 	and.w	r2, r3, #15
 800c362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4422      	add	r2, r4
 800c36a:	609a      	str	r2, [r3, #8]
}
 800c36c:	bf00      	nop
 800c36e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c372:	46bd      	mov	sp, r7
 800c374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c378:	51eb851f 	.word	0x51eb851f

0800c37c <__NVIC_SetPriority>:
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	6039      	str	r1, [r7, #0]
 800c386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	db0a      	blt.n	800c3a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	b2da      	uxtb	r2, r3
 800c394:	490c      	ldr	r1, [pc, #48]	@ (800c3c8 <__NVIC_SetPriority+0x4c>)
 800c396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c39a:	0112      	lsls	r2, r2, #4
 800c39c:	b2d2      	uxtb	r2, r2
 800c39e:	440b      	add	r3, r1
 800c3a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c3a4:	e00a      	b.n	800c3bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	4908      	ldr	r1, [pc, #32]	@ (800c3cc <__NVIC_SetPriority+0x50>)
 800c3ac:	79fb      	ldrb	r3, [r7, #7]
 800c3ae:	f003 030f 	and.w	r3, r3, #15
 800c3b2:	3b04      	subs	r3, #4
 800c3b4:	0112      	lsls	r2, r2, #4
 800c3b6:	b2d2      	uxtb	r2, r2
 800c3b8:	440b      	add	r3, r1
 800c3ba:	761a      	strb	r2, [r3, #24]
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	e000e100 	.word	0xe000e100
 800c3cc:	e000ed00 	.word	0xe000ed00

0800c3d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c3d4:	4b05      	ldr	r3, [pc, #20]	@ (800c3ec <SysTick_Handler+0x1c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c3d8:	f002 f880 	bl	800e4dc <xTaskGetSchedulerState>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d001      	beq.n	800c3e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c3e2:	f002 ff79 	bl	800f2d8 <xPortSysTickHandler>
  }
}
 800c3e6:	bf00      	nop
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	e000e010 	.word	0xe000e010

0800c3f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	f06f 0004 	mvn.w	r0, #4
 800c3fa:	f7ff ffbf 	bl	800c37c <__NVIC_SetPriority>
#endif
}
 800c3fe:	bf00      	nop
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c40a:	f3ef 8305 	mrs	r3, IPSR
 800c40e:	603b      	str	r3, [r7, #0]
  return(result);
 800c410:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c416:	f06f 0305 	mvn.w	r3, #5
 800c41a:	607b      	str	r3, [r7, #4]
 800c41c:	e00c      	b.n	800c438 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c41e:	4b0a      	ldr	r3, [pc, #40]	@ (800c448 <osKernelInitialize+0x44>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d105      	bne.n	800c432 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c426:	4b08      	ldr	r3, [pc, #32]	@ (800c448 <osKernelInitialize+0x44>)
 800c428:	2201      	movs	r2, #1
 800c42a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	607b      	str	r3, [r7, #4]
 800c430:	e002      	b.n	800c438 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c432:	f04f 33ff 	mov.w	r3, #4294967295
 800c436:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c438:	687b      	ldr	r3, [r7, #4]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	20001440 	.word	0x20001440

0800c44c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c452:	f3ef 8305 	mrs	r3, IPSR
 800c456:	603b      	str	r3, [r7, #0]
  return(result);
 800c458:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d003      	beq.n	800c466 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c45e:	f06f 0305 	mvn.w	r3, #5
 800c462:	607b      	str	r3, [r7, #4]
 800c464:	e010      	b.n	800c488 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c466:	4b0b      	ldr	r3, [pc, #44]	@ (800c494 <osKernelStart+0x48>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d109      	bne.n	800c482 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c46e:	f7ff ffbf 	bl	800c3f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c472:	4b08      	ldr	r3, [pc, #32]	@ (800c494 <osKernelStart+0x48>)
 800c474:	2202      	movs	r2, #2
 800c476:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c478:	f001 fbbc 	bl	800dbf4 <vTaskStartScheduler>
      stat = osOK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	607b      	str	r3, [r7, #4]
 800c480:	e002      	b.n	800c488 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c482:	f04f 33ff 	mov.w	r3, #4294967295
 800c486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c488:	687b      	ldr	r3, [r7, #4]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	20001440 	.word	0x20001440

0800c498 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08e      	sub	sp, #56	@ 0x38
 800c49c:	af04      	add	r7, sp, #16
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4a8:	f3ef 8305 	mrs	r3, IPSR
 800c4ac:	617b      	str	r3, [r7, #20]
  return(result);
 800c4ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d17e      	bne.n	800c5b2 <osThreadNew+0x11a>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d07b      	beq.n	800c5b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c4ba:	2380      	movs	r3, #128	@ 0x80
 800c4bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c4be:	2318      	movs	r3, #24
 800c4c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d045      	beq.n	800c55e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d002      	beq.n	800c4e0 <osThreadNew+0x48>
        name = attr->name;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d008      	beq.n	800c506 <osThreadNew+0x6e>
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	2b38      	cmp	r3, #56	@ 0x38
 800c4f8:	d805      	bhi.n	800c506 <osThreadNew+0x6e>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <osThreadNew+0x72>
        return (NULL);
 800c506:	2300      	movs	r3, #0
 800c508:	e054      	b.n	800c5b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d003      	beq.n	800c51a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	695b      	ldr	r3, [r3, #20]
 800c516:	089b      	lsrs	r3, r3, #2
 800c518:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00e      	beq.n	800c540 <osThreadNew+0xa8>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	2ba7      	cmp	r3, #167	@ 0xa7
 800c528:	d90a      	bls.n	800c540 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d006      	beq.n	800c540 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d002      	beq.n	800c540 <osThreadNew+0xa8>
        mem = 1;
 800c53a:	2301      	movs	r3, #1
 800c53c:	61bb      	str	r3, [r7, #24]
 800c53e:	e010      	b.n	800c562 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10c      	bne.n	800c562 <osThreadNew+0xca>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d108      	bne.n	800c562 <osThreadNew+0xca>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	691b      	ldr	r3, [r3, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d104      	bne.n	800c562 <osThreadNew+0xca>
          mem = 0;
 800c558:	2300      	movs	r3, #0
 800c55a:	61bb      	str	r3, [r7, #24]
 800c55c:	e001      	b.n	800c562 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d110      	bne.n	800c58a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c570:	9202      	str	r2, [sp, #8]
 800c572:	9301      	str	r3, [sp, #4]
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	6a3a      	ldr	r2, [r7, #32]
 800c57c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f001 f944 	bl	800d80c <xTaskCreateStatic>
 800c584:	4603      	mov	r3, r0
 800c586:	613b      	str	r3, [r7, #16]
 800c588:	e013      	b.n	800c5b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d110      	bne.n	800c5b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c590:	6a3b      	ldr	r3, [r7, #32]
 800c592:	b29a      	uxth	r2, r3
 800c594:	f107 0310 	add.w	r3, r7, #16
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f001 f992 	bl	800d8cc <xTaskCreate>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d001      	beq.n	800c5b2 <osThreadNew+0x11a>
            hTask = NULL;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c5b2:	693b      	ldr	r3, [r7, #16]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3728      	adds	r7, #40	@ 0x28
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5c4:	f3ef 8305 	mrs	r3, IPSR
 800c5c8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d003      	beq.n	800c5d8 <osDelay+0x1c>
    stat = osErrorISR;
 800c5d0:	f06f 0305 	mvn.w	r3, #5
 800c5d4:	60fb      	str	r3, [r7, #12]
 800c5d6:	e007      	b.n	800c5e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 fad0 	bl	800db88 <vTaskDelay>
    }
  }

  return (stat);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b088      	sub	sp, #32
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5fe:	f3ef 8305 	mrs	r3, IPSR
 800c602:	60bb      	str	r3, [r7, #8]
  return(result);
 800c604:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c606:	2b00      	cmp	r3, #0
 800c608:	d174      	bne.n	800c6f4 <osMutexNew+0x102>
    if (attr != NULL) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d003      	beq.n	800c618 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	61bb      	str	r3, [r7, #24]
 800c616:	e001      	b.n	800c61c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c618:	2300      	movs	r3, #0
 800c61a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b00      	cmp	r3, #0
 800c624:	d002      	beq.n	800c62c <osMutexNew+0x3a>
      rmtx = 1U;
 800c626:	2301      	movs	r3, #1
 800c628:	617b      	str	r3, [r7, #20]
 800c62a:	e001      	b.n	800c630 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c62c:	2300      	movs	r3, #0
 800c62e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	f003 0308 	and.w	r3, r3, #8
 800c636:	2b00      	cmp	r3, #0
 800c638:	d15c      	bne.n	800c6f4 <osMutexNew+0x102>
      mem = -1;
 800c63a:	f04f 33ff 	mov.w	r3, #4294967295
 800c63e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d015      	beq.n	800c672 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d006      	beq.n	800c65c <osMutexNew+0x6a>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	2b4f      	cmp	r3, #79	@ 0x4f
 800c654:	d902      	bls.n	800c65c <osMutexNew+0x6a>
          mem = 1;
 800c656:	2301      	movs	r3, #1
 800c658:	613b      	str	r3, [r7, #16]
 800c65a:	e00c      	b.n	800c676 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d108      	bne.n	800c676 <osMutexNew+0x84>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d104      	bne.n	800c676 <osMutexNew+0x84>
            mem = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	613b      	str	r3, [r7, #16]
 800c670:	e001      	b.n	800c676 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d112      	bne.n	800c6a2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d007      	beq.n	800c692 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	4619      	mov	r1, r3
 800c688:	2004      	movs	r0, #4
 800c68a:	f000 fb20 	bl	800ccce <xQueueCreateMutexStatic>
 800c68e:	61f8      	str	r0, [r7, #28]
 800c690:	e016      	b.n	800c6c0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	4619      	mov	r1, r3
 800c698:	2001      	movs	r0, #1
 800c69a:	f000 fb18 	bl	800ccce <xQueueCreateMutexStatic>
 800c69e:	61f8      	str	r0, [r7, #28]
 800c6a0:	e00e      	b.n	800c6c0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10b      	bne.n	800c6c0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d004      	beq.n	800c6b8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c6ae:	2004      	movs	r0, #4
 800c6b0:	f000 faf5 	bl	800cc9e <xQueueCreateMutex>
 800c6b4:	61f8      	str	r0, [r7, #28]
 800c6b6:	e003      	b.n	800c6c0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c6b8:	2001      	movs	r0, #1
 800c6ba:	f000 faf0 	bl	800cc9e <xQueueCreateMutex>
 800c6be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00c      	beq.n	800c6e0 <osMutexNew+0xee>
        if (attr != NULL) {
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d003      	beq.n	800c6d4 <osMutexNew+0xe2>
          name = attr->name;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	60fb      	str	r3, [r7, #12]
 800c6d2:	e001      	b.n	800c6d8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c6d8:	68f9      	ldr	r1, [r7, #12]
 800c6da:	69f8      	ldr	r0, [r7, #28]
 800c6dc:	f001 f838 	bl	800d750 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d006      	beq.n	800c6f4 <osMutexNew+0x102>
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	f043 0301 	orr.w	r3, r3, #1
 800c6f2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c6f4:	69fb      	ldr	r3, [r7, #28]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3720      	adds	r7, #32
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b086      	sub	sp, #24
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f023 0301 	bic.w	r3, r3, #1
 800c70e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c718:	2300      	movs	r3, #0
 800c71a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c71c:	f3ef 8305 	mrs	r3, IPSR
 800c720:	60bb      	str	r3, [r7, #8]
  return(result);
 800c722:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c728:	f06f 0305 	mvn.w	r3, #5
 800c72c:	617b      	str	r3, [r7, #20]
 800c72e:	e02c      	b.n	800c78a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d103      	bne.n	800c73e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c736:	f06f 0303 	mvn.w	r3, #3
 800c73a:	617b      	str	r3, [r7, #20]
 800c73c:	e025      	b.n	800c78a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d011      	beq.n	800c768 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6938      	ldr	r0, [r7, #16]
 800c748:	f000 fb11 	bl	800cd6e <xQueueTakeMutexRecursive>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d01b      	beq.n	800c78a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d003      	beq.n	800c760 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c758:	f06f 0301 	mvn.w	r3, #1
 800c75c:	617b      	str	r3, [r7, #20]
 800c75e:	e014      	b.n	800c78a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c760:	f06f 0302 	mvn.w	r3, #2
 800c764:	617b      	str	r3, [r7, #20]
 800c766:	e010      	b.n	800c78a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c768:	6839      	ldr	r1, [r7, #0]
 800c76a:	6938      	ldr	r0, [r7, #16]
 800c76c:	f000 fdb8 	bl	800d2e0 <xQueueSemaphoreTake>
 800c770:	4603      	mov	r3, r0
 800c772:	2b01      	cmp	r3, #1
 800c774:	d009      	beq.n	800c78a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c77c:	f06f 0301 	mvn.w	r3, #1
 800c780:	617b      	str	r3, [r7, #20]
 800c782:	e002      	b.n	800c78a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c784:	f06f 0302 	mvn.w	r3, #2
 800c788:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c78a:	697b      	ldr	r3, [r7, #20]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f023 0301 	bic.w	r3, r3, #1
 800c7a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f003 0301 	and.w	r3, r3, #1
 800c7aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7b0:	f3ef 8305 	mrs	r3, IPSR
 800c7b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c7b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c7bc:	f06f 0305 	mvn.w	r3, #5
 800c7c0:	617b      	str	r3, [r7, #20]
 800c7c2:	e01f      	b.n	800c804 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d103      	bne.n	800c7d2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c7ca:	f06f 0303 	mvn.w	r3, #3
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	e018      	b.n	800c804 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d009      	beq.n	800c7ec <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c7d8:	6938      	ldr	r0, [r7, #16]
 800c7da:	f000 fa93 	bl	800cd04 <xQueueGiveMutexRecursive>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d00f      	beq.n	800c804 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c7e4:	f06f 0302 	mvn.w	r3, #2
 800c7e8:	617b      	str	r3, [r7, #20]
 800c7ea:	e00b      	b.n	800c804 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	6938      	ldr	r0, [r7, #16]
 800c7f4:	f000 faf2 	bl	800cddc <xQueueGenericSend>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d002      	beq.n	800c804 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c7fe:	f06f 0302 	mvn.w	r3, #2
 800c802:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c804:	697b      	ldr	r3, [r7, #20]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
	...

0800c810 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4a07      	ldr	r2, [pc, #28]	@ (800c83c <vApplicationGetIdleTaskMemory+0x2c>)
 800c820:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	4a06      	ldr	r2, [pc, #24]	@ (800c840 <vApplicationGetIdleTaskMemory+0x30>)
 800c826:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2280      	movs	r2, #128	@ 0x80
 800c82c:	601a      	str	r2, [r3, #0]
}
 800c82e:	bf00      	nop
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	20001444 	.word	0x20001444
 800c840:	200014ec 	.word	0x200014ec

0800c844 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	4a07      	ldr	r2, [pc, #28]	@ (800c870 <vApplicationGetTimerTaskMemory+0x2c>)
 800c854:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	4a06      	ldr	r2, [pc, #24]	@ (800c874 <vApplicationGetTimerTaskMemory+0x30>)
 800c85a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c862:	601a      	str	r2, [r3, #0]
}
 800c864:	bf00      	nop
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr
 800c870:	200016ec 	.word	0x200016ec
 800c874:	20001794 	.word	0x20001794

0800c878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f103 0208 	add.w	r2, r3, #8
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f04f 32ff 	mov.w	r2, #4294967295
 800c890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f103 0208 	add.w	r2, r3, #8
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f103 0208 	add.w	r2, r3, #8
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c8ac:	bf00      	nop
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c8c6:	bf00      	nop
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b085      	sub	sp, #20
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	689a      	ldr	r2, [r3, #8]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	683a      	ldr	r2, [r7, #0]
 800c8f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	601a      	str	r2, [r3, #0]
}
 800c90e:	bf00      	nop
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c91a:	b480      	push	{r7}
 800c91c:	b085      	sub	sp, #20
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c930:	d103      	bne.n	800c93a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	e00c      	b.n	800c954 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	3308      	adds	r3, #8
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	e002      	b.n	800c948 <vListInsert+0x2e>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	60fb      	str	r3, [r7, #12]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	429a      	cmp	r2, r3
 800c952:	d2f6      	bcs.n	800c942 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	683a      	ldr	r2, [r7, #0]
 800c96e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	601a      	str	r2, [r3, #0]
}
 800c980:	bf00      	nop
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	6892      	ldr	r2, [r2, #8]
 800c9a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	6852      	ldr	r2, [r2, #4]
 800c9ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d103      	bne.n	800c9c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	689a      	ldr	r2, [r3, #8]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	1e5a      	subs	r2, r3, #1
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10b      	bne.n	800ca0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ca06:	bf00      	nop
 800ca08:	bf00      	nop
 800ca0a:	e7fd      	b.n	800ca08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ca0c:	f002 fbd4 	bl	800f1b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca18:	68f9      	ldr	r1, [r7, #12]
 800ca1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ca1c:	fb01 f303 	mul.w	r3, r1, r3
 800ca20:	441a      	add	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	68f9      	ldr	r1, [r7, #12]
 800ca40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ca42:	fb01 f303 	mul.w	r3, r1, r3
 800ca46:	441a      	add	r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	22ff      	movs	r2, #255	@ 0xff
 800ca50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	22ff      	movs	r2, #255	@ 0xff
 800ca58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d114      	bne.n	800ca8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d01a      	beq.n	800caa0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	3310      	adds	r3, #16
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f001 fb5e 	bl	800e130 <xTaskRemoveFromEventList>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d012      	beq.n	800caa0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ca7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cab0 <xQueueGenericReset+0xd0>)
 800ca7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	e009      	b.n	800caa0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3310      	adds	r3, #16
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7ff fef1 	bl	800c878 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3324      	adds	r3, #36	@ 0x24
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7ff feec 	bl	800c878 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800caa0:	f002 fbbc 	bl	800f21c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800caa4:	2301      	movs	r3, #1
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	e000ed04 	.word	0xe000ed04

0800cab4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b08e      	sub	sp, #56	@ 0x38
 800cab8:	af02      	add	r7, sp, #8
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10b      	bne.n	800cae0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cada:	bf00      	nop
 800cadc:	bf00      	nop
 800cade:	e7fd      	b.n	800cadc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10b      	bne.n	800cafe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800caf8:	bf00      	nop
 800cafa:	bf00      	nop
 800cafc:	e7fd      	b.n	800cafa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d002      	beq.n	800cb0a <xQueueGenericCreateStatic+0x56>
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <xQueueGenericCreateStatic+0x5a>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e000      	b.n	800cb10 <xQueueGenericCreateStatic+0x5c>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10b      	bne.n	800cb2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb18:	f383 8811 	msr	BASEPRI, r3
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	623b      	str	r3, [r7, #32]
}
 800cb26:	bf00      	nop
 800cb28:	bf00      	nop
 800cb2a:	e7fd      	b.n	800cb28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d102      	bne.n	800cb38 <xQueueGenericCreateStatic+0x84>
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d101      	bne.n	800cb3c <xQueueGenericCreateStatic+0x88>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e000      	b.n	800cb3e <xQueueGenericCreateStatic+0x8a>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10b      	bne.n	800cb5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	61fb      	str	r3, [r7, #28]
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop
 800cb58:	e7fd      	b.n	800cb56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cb5a:	2350      	movs	r3, #80	@ 0x50
 800cb5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2b50      	cmp	r3, #80	@ 0x50
 800cb62:	d00b      	beq.n	800cb7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	61bb      	str	r3, [r7, #24]
}
 800cb76:	bf00      	nop
 800cb78:	bf00      	nop
 800cb7a:	e7fd      	b.n	800cb78 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cb7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00d      	beq.n	800cba4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	68b9      	ldr	r1, [r7, #8]
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 f840 	bl	800cc24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3730      	adds	r7, #48	@ 0x30
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b08a      	sub	sp, #40	@ 0x28
 800cbb2:	af02      	add	r7, sp, #8
 800cbb4:	60f8      	str	r0, [r7, #12]
 800cbb6:	60b9      	str	r1, [r7, #8]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10b      	bne.n	800cbda <xQueueGenericCreate+0x2c>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	613b      	str	r3, [r7, #16]
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop
 800cbd8:	e7fd      	b.n	800cbd6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	fb02 f303 	mul.w	r3, r2, r3
 800cbe2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	3350      	adds	r3, #80	@ 0x50
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f002 fc07 	bl	800f3fc <pvPortMalloc>
 800cbee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d011      	beq.n	800cc1a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	3350      	adds	r3, #80	@ 0x50
 800cbfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc08:	79fa      	ldrb	r2, [r7, #7]
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	697a      	ldr	r2, [r7, #20]
 800cc12:	68b9      	ldr	r1, [r7, #8]
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 f805 	bl	800cc24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc1a:	69bb      	ldr	r3, [r7, #24]
	}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3720      	adds	r7, #32
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
 800cc30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d103      	bne.n	800cc40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	e002      	b.n	800cc46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc52:	2101      	movs	r1, #1
 800cc54:	69b8      	ldr	r0, [r7, #24]
 800cc56:	f7ff fec3 	bl	800c9e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	78fa      	ldrb	r2, [r7, #3]
 800cc5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cc62:	bf00      	nop
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b082      	sub	sp, #8
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00e      	beq.n	800cc96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2100      	movs	r1, #0
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 f8a3 	bl	800cddc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cc96:	bf00      	nop
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b086      	sub	sp, #24
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	4603      	mov	r3, r0
 800cca6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	617b      	str	r3, [r7, #20]
 800ccac:	2300      	movs	r3, #0
 800ccae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ccb0:	79fb      	ldrb	r3, [r7, #7]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	6939      	ldr	r1, [r7, #16]
 800ccb6:	6978      	ldr	r0, [r7, #20]
 800ccb8:	f7ff ff79 	bl	800cbae <xQueueGenericCreate>
 800ccbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f7ff ffd3 	bl	800cc6a <prvInitialiseMutex>

		return xNewQueue;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
	}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b088      	sub	sp, #32
 800ccd2:	af02      	add	r7, sp, #8
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	6039      	str	r1, [r7, #0]
 800ccd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	2300      	movs	r3, #0
 800cce0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2200      	movs	r2, #0
 800ccea:	6939      	ldr	r1, [r7, #16]
 800ccec:	6978      	ldr	r0, [r7, #20]
 800ccee:	f7ff fee1 	bl	800cab4 <xQueueGenericCreateStatic>
 800ccf2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f7ff ffb8 	bl	800cc6a <prvInitialiseMutex>

		return xNewQueue;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
	}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3718      	adds	r7, #24
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cd04:	b590      	push	{r4, r7, lr}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10b      	bne.n	800cd2e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	60fb      	str	r3, [r7, #12]
}
 800cd28:	bf00      	nop
 800cd2a:	bf00      	nop
 800cd2c:	e7fd      	b.n	800cd2a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	689c      	ldr	r4, [r3, #8]
 800cd32:	f001 fbc3 	bl	800e4bc <xTaskGetCurrentTaskHandle>
 800cd36:	4603      	mov	r3, r0
 800cd38:	429c      	cmp	r4, r3
 800cd3a:	d111      	bne.n	800cd60 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	1e5a      	subs	r2, r3, #1
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cd4e:	2300      	movs	r3, #0
 800cd50:	2200      	movs	r2, #0
 800cd52:	2100      	movs	r1, #0
 800cd54:	6938      	ldr	r0, [r7, #16]
 800cd56:	f000 f841 	bl	800cddc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	617b      	str	r3, [r7, #20]
 800cd5e:	e001      	b.n	800cd64 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cd60:	2300      	movs	r3, #0
 800cd62:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cd64:	697b      	ldr	r3, [r7, #20]
	}
 800cd66:	4618      	mov	r0, r3
 800cd68:	371c      	adds	r7, #28
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd90      	pop	{r4, r7, pc}

0800cd6e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cd6e:	b590      	push	{r4, r7, lr}
 800cd70:	b087      	sub	sp, #28
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10b      	bne.n	800cd9a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800cd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	60fb      	str	r3, [r7, #12]
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop
 800cd98:	e7fd      	b.n	800cd96 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	689c      	ldr	r4, [r3, #8]
 800cd9e:	f001 fb8d 	bl	800e4bc <xTaskGetCurrentTaskHandle>
 800cda2:	4603      	mov	r3, r0
 800cda4:	429c      	cmp	r4, r3
 800cda6:	d107      	bne.n	800cdb8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	1c5a      	adds	r2, r3, #1
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	617b      	str	r3, [r7, #20]
 800cdb6:	e00c      	b.n	800cdd2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	6938      	ldr	r0, [r7, #16]
 800cdbc:	f000 fa90 	bl	800d2e0 <xQueueSemaphoreTake>
 800cdc0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d004      	beq.n	800cdd2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cdd2:	697b      	ldr	r3, [r7, #20]
	}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	371c      	adds	r7, #28
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd90      	pop	{r4, r7, pc}

0800cddc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b08e      	sub	sp, #56	@ 0x38
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
 800cde8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cdea:	2300      	movs	r3, #0
 800cdec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10b      	bne.n	800ce10 <xQueueGenericSend+0x34>
	__asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ce0a:	bf00      	nop
 800ce0c:	bf00      	nop
 800ce0e:	e7fd      	b.n	800ce0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d103      	bne.n	800ce1e <xQueueGenericSend+0x42>
 800ce16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d101      	bne.n	800ce22 <xQueueGenericSend+0x46>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e000      	b.n	800ce24 <xQueueGenericSend+0x48>
 800ce22:	2300      	movs	r3, #0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10b      	bne.n	800ce40 <xQueueGenericSend+0x64>
	__asm volatile
 800ce28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2c:	f383 8811 	msr	BASEPRI, r3
 800ce30:	f3bf 8f6f 	isb	sy
 800ce34:	f3bf 8f4f 	dsb	sy
 800ce38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ce3a:	bf00      	nop
 800ce3c:	bf00      	nop
 800ce3e:	e7fd      	b.n	800ce3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	d103      	bne.n	800ce4e <xQueueGenericSend+0x72>
 800ce46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d101      	bne.n	800ce52 <xQueueGenericSend+0x76>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e000      	b.n	800ce54 <xQueueGenericSend+0x78>
 800ce52:	2300      	movs	r3, #0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10b      	bne.n	800ce70 <xQueueGenericSend+0x94>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	623b      	str	r3, [r7, #32]
}
 800ce6a:	bf00      	nop
 800ce6c:	bf00      	nop
 800ce6e:	e7fd      	b.n	800ce6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce70:	f001 fb34 	bl	800e4dc <xTaskGetSchedulerState>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d102      	bne.n	800ce80 <xQueueGenericSend+0xa4>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d101      	bne.n	800ce84 <xQueueGenericSend+0xa8>
 800ce80:	2301      	movs	r3, #1
 800ce82:	e000      	b.n	800ce86 <xQueueGenericSend+0xaa>
 800ce84:	2300      	movs	r3, #0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10b      	bne.n	800cea2 <xQueueGenericSend+0xc6>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	61fb      	str	r3, [r7, #28]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cea2:	f002 f989 	bl	800f1b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ceaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d302      	bcc.n	800ceb8 <xQueueGenericSend+0xdc>
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d129      	bne.n	800cf0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	68b9      	ldr	r1, [r7, #8]
 800cebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cebe:	f000 fb37 	bl	800d530 <prvCopyDataToQueue>
 800cec2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d010      	beq.n	800ceee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cece:	3324      	adds	r3, #36	@ 0x24
 800ced0:	4618      	mov	r0, r3
 800ced2:	f001 f92d 	bl	800e130 <xTaskRemoveFromEventList>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d013      	beq.n	800cf04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cedc:	4b3f      	ldr	r3, [pc, #252]	@ (800cfdc <xQueueGenericSend+0x200>)
 800cede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	e00a      	b.n	800cf04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ceee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d007      	beq.n	800cf04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cef4:	4b39      	ldr	r3, [pc, #228]	@ (800cfdc <xQueueGenericSend+0x200>)
 800cef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	f3bf 8f4f 	dsb	sy
 800cf00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cf04:	f002 f98a 	bl	800f21c <vPortExitCritical>
				return pdPASS;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e063      	b.n	800cfd4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d103      	bne.n	800cf1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf12:	f002 f983 	bl	800f21c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cf16:	2300      	movs	r3, #0
 800cf18:	e05c      	b.n	800cfd4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d106      	bne.n	800cf2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf20:	f107 0314 	add.w	r3, r7, #20
 800cf24:	4618      	mov	r0, r3
 800cf26:	f001 f967 	bl	800e1f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf2e:	f002 f975 	bl	800f21c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf32:	f000 fecf 	bl	800dcd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf36:	f002 f93f 	bl	800f1b8 <vPortEnterCritical>
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf40:	b25b      	sxtb	r3, r3
 800cf42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf46:	d103      	bne.n	800cf50 <xQueueGenericSend+0x174>
 800cf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf56:	b25b      	sxtb	r3, r3
 800cf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf5c:	d103      	bne.n	800cf66 <xQueueGenericSend+0x18a>
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf66:	f002 f959 	bl	800f21c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf6a:	1d3a      	adds	r2, r7, #4
 800cf6c:	f107 0314 	add.w	r3, r7, #20
 800cf70:	4611      	mov	r1, r2
 800cf72:	4618      	mov	r0, r3
 800cf74:	f001 f956 	bl	800e224 <xTaskCheckForTimeOut>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d124      	bne.n	800cfc8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf80:	f000 fbce 	bl	800d720 <prvIsQueueFull>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d018      	beq.n	800cfbc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8c:	3310      	adds	r3, #16
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f001 f87a 	bl	800e08c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf9a:	f000 fb59 	bl	800d650 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf9e:	f000 fea7 	bl	800dcf0 <xTaskResumeAll>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f47f af7c 	bne.w	800cea2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cfaa:	4b0c      	ldr	r3, [pc, #48]	@ (800cfdc <xQueueGenericSend+0x200>)
 800cfac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfb0:	601a      	str	r2, [r3, #0]
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	e772      	b.n	800cea2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cfbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfbe:	f000 fb47 	bl	800d650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfc2:	f000 fe95 	bl	800dcf0 <xTaskResumeAll>
 800cfc6:	e76c      	b.n	800cea2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cfc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfca:	f000 fb41 	bl	800d650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfce:	f000 fe8f 	bl	800dcf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cfd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3738      	adds	r7, #56	@ 0x38
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	e000ed04 	.word	0xe000ed04

0800cfe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b090      	sub	sp, #64	@ 0x40
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
 800cfec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10b      	bne.n	800d010 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d00a:	bf00      	nop
 800d00c:	bf00      	nop
 800d00e:	e7fd      	b.n	800d00c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d103      	bne.n	800d01e <xQueueGenericSendFromISR+0x3e>
 800d016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <xQueueGenericSendFromISR+0x42>
 800d01e:	2301      	movs	r3, #1
 800d020:	e000      	b.n	800d024 <xQueueGenericSendFromISR+0x44>
 800d022:	2300      	movs	r3, #0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10b      	bne.n	800d040 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d03a:	bf00      	nop
 800d03c:	bf00      	nop
 800d03e:	e7fd      	b.n	800d03c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2b02      	cmp	r3, #2
 800d044:	d103      	bne.n	800d04e <xQueueGenericSendFromISR+0x6e>
 800d046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d101      	bne.n	800d052 <xQueueGenericSendFromISR+0x72>
 800d04e:	2301      	movs	r3, #1
 800d050:	e000      	b.n	800d054 <xQueueGenericSendFromISR+0x74>
 800d052:	2300      	movs	r3, #0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10b      	bne.n	800d070 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05c:	f383 8811 	msr	BASEPRI, r3
 800d060:	f3bf 8f6f 	isb	sy
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	623b      	str	r3, [r7, #32]
}
 800d06a:	bf00      	nop
 800d06c:	bf00      	nop
 800d06e:	e7fd      	b.n	800d06c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d070:	f002 f982 	bl	800f378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d074:	f3ef 8211 	mrs	r2, BASEPRI
 800d078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	61fa      	str	r2, [r7, #28]
 800d08a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d08c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d08e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d098:	429a      	cmp	r2, r3
 800d09a:	d302      	bcc.n	800d0a2 <xQueueGenericSendFromISR+0xc2>
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d12f      	bne.n	800d102 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d0a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0b2:	683a      	ldr	r2, [r7, #0]
 800d0b4:	68b9      	ldr	r1, [r7, #8]
 800d0b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d0b8:	f000 fa3a 	bl	800d530 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c4:	d112      	bne.n	800d0ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d016      	beq.n	800d0fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d0:	3324      	adds	r3, #36	@ 0x24
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f001 f82c 	bl	800e130 <xTaskRemoveFromEventList>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00e      	beq.n	800d0fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00b      	beq.n	800d0fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	601a      	str	r2, [r3, #0]
 800d0ea:	e007      	b.n	800d0fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	b25a      	sxtb	r2, r3
 800d0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d100:	e001      	b.n	800d106 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d102:	2300      	movs	r3, #0
 800d104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d108:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d110:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d114:	4618      	mov	r0, r3
 800d116:	3740      	adds	r7, #64	@ 0x40
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b08c      	sub	sp, #48	@ 0x30
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d128:	2300      	movs	r3, #0
 800d12a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10b      	bne.n	800d14e <xQueueReceive+0x32>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	623b      	str	r3, [r7, #32]
}
 800d148:	bf00      	nop
 800d14a:	bf00      	nop
 800d14c:	e7fd      	b.n	800d14a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d103      	bne.n	800d15c <xQueueReceive+0x40>
 800d154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d101      	bne.n	800d160 <xQueueReceive+0x44>
 800d15c:	2301      	movs	r3, #1
 800d15e:	e000      	b.n	800d162 <xQueueReceive+0x46>
 800d160:	2300      	movs	r3, #0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d10b      	bne.n	800d17e <xQueueReceive+0x62>
	__asm volatile
 800d166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	61fb      	str	r3, [r7, #28]
}
 800d178:	bf00      	nop
 800d17a:	bf00      	nop
 800d17c:	e7fd      	b.n	800d17a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d17e:	f001 f9ad 	bl	800e4dc <xTaskGetSchedulerState>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d102      	bne.n	800d18e <xQueueReceive+0x72>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <xQueueReceive+0x76>
 800d18e:	2301      	movs	r3, #1
 800d190:	e000      	b.n	800d194 <xQueueReceive+0x78>
 800d192:	2300      	movs	r3, #0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d10b      	bne.n	800d1b0 <xQueueReceive+0x94>
	__asm volatile
 800d198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	61bb      	str	r3, [r7, #24]
}
 800d1aa:	bf00      	nop
 800d1ac:	bf00      	nop
 800d1ae:	e7fd      	b.n	800d1ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1b0:	f002 f802 	bl	800f1b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d01f      	beq.n	800d200 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1c0:	68b9      	ldr	r1, [r7, #8]
 800d1c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1c4:	f000 fa1e 	bl	800d604 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ca:	1e5a      	subs	r2, r3, #1
 800d1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00f      	beq.n	800d1f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1da:	3310      	adds	r3, #16
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 ffa7 	bl	800e130 <xTaskRemoveFromEventList>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d007      	beq.n	800d1f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d1e8:	4b3c      	ldr	r3, [pc, #240]	@ (800d2dc <xQueueReceive+0x1c0>)
 800d1ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1f8:	f002 f810 	bl	800f21c <vPortExitCritical>
				return pdPASS;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e069      	b.n	800d2d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d103      	bne.n	800d20e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d206:	f002 f809 	bl	800f21c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d20a:	2300      	movs	r3, #0
 800d20c:	e062      	b.n	800d2d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d106      	bne.n	800d222 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d214:	f107 0310 	add.w	r3, r7, #16
 800d218:	4618      	mov	r0, r3
 800d21a:	f000 ffed 	bl	800e1f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d21e:	2301      	movs	r3, #1
 800d220:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d222:	f001 fffb 	bl	800f21c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d226:	f000 fd55 	bl	800dcd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d22a:	f001 ffc5 	bl	800f1b8 <vPortEnterCritical>
 800d22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d230:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d234:	b25b      	sxtb	r3, r3
 800d236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d23a:	d103      	bne.n	800d244 <xQueueReceive+0x128>
 800d23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23e:	2200      	movs	r2, #0
 800d240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d246:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d24a:	b25b      	sxtb	r3, r3
 800d24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d250:	d103      	bne.n	800d25a <xQueueReceive+0x13e>
 800d252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d25a:	f001 ffdf 	bl	800f21c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d25e:	1d3a      	adds	r2, r7, #4
 800d260:	f107 0310 	add.w	r3, r7, #16
 800d264:	4611      	mov	r1, r2
 800d266:	4618      	mov	r0, r3
 800d268:	f000 ffdc 	bl	800e224 <xTaskCheckForTimeOut>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d123      	bne.n	800d2ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d274:	f000 fa3e 	bl	800d6f4 <prvIsQueueEmpty>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d017      	beq.n	800d2ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d280:	3324      	adds	r3, #36	@ 0x24
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	4611      	mov	r1, r2
 800d286:	4618      	mov	r0, r3
 800d288:	f000 ff00 	bl	800e08c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d28c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d28e:	f000 f9df 	bl	800d650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d292:	f000 fd2d 	bl	800dcf0 <xTaskResumeAll>
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d189      	bne.n	800d1b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d29c:	4b0f      	ldr	r3, [pc, #60]	@ (800d2dc <xQueueReceive+0x1c0>)
 800d29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	e780      	b.n	800d1b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d2ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2b0:	f000 f9ce 	bl	800d650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2b4:	f000 fd1c 	bl	800dcf0 <xTaskResumeAll>
 800d2b8:	e77a      	b.n	800d1b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d2ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2bc:	f000 f9c8 	bl	800d650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2c0:	f000 fd16 	bl	800dcf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2c6:	f000 fa15 	bl	800d6f4 <prvIsQueueEmpty>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f43f af6f 	beq.w	800d1b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d2d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3730      	adds	r7, #48	@ 0x30
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	e000ed04 	.word	0xe000ed04

0800d2e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b08e      	sub	sp, #56	@ 0x38
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d10b      	bne.n	800d314 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d300:	f383 8811 	msr	BASEPRI, r3
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	623b      	str	r3, [r7, #32]
}
 800d30e:	bf00      	nop
 800d310:	bf00      	nop
 800d312:	e7fd      	b.n	800d310 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00b      	beq.n	800d334 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	61fb      	str	r3, [r7, #28]
}
 800d32e:	bf00      	nop
 800d330:	bf00      	nop
 800d332:	e7fd      	b.n	800d330 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d334:	f001 f8d2 	bl	800e4dc <xTaskGetSchedulerState>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d102      	bne.n	800d344 <xQueueSemaphoreTake+0x64>
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d101      	bne.n	800d348 <xQueueSemaphoreTake+0x68>
 800d344:	2301      	movs	r3, #1
 800d346:	e000      	b.n	800d34a <xQueueSemaphoreTake+0x6a>
 800d348:	2300      	movs	r3, #0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10b      	bne.n	800d366 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	61bb      	str	r3, [r7, #24]
}
 800d360:	bf00      	nop
 800d362:	bf00      	nop
 800d364:	e7fd      	b.n	800d362 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d366:	f001 ff27 	bl	800f1b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d36e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d372:	2b00      	cmp	r3, #0
 800d374:	d024      	beq.n	800d3c0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d378:	1e5a      	subs	r2, r3, #1
 800d37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d104      	bne.n	800d390 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d386:	f001 fa23 	bl	800e7d0 <pvTaskIncrementMutexHeldCount>
 800d38a:	4602      	mov	r2, r0
 800d38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00f      	beq.n	800d3b8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39a:	3310      	adds	r3, #16
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 fec7 	bl	800e130 <xTaskRemoveFromEventList>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d007      	beq.n	800d3b8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d3a8:	4b54      	ldr	r3, [pc, #336]	@ (800d4fc <xQueueSemaphoreTake+0x21c>)
 800d3aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3ae:	601a      	str	r2, [r3, #0]
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d3b8:	f001 ff30 	bl	800f21c <vPortExitCritical>
				return pdPASS;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e098      	b.n	800d4f2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d112      	bne.n	800d3ec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00b      	beq.n	800d3e4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d0:	f383 8811 	msr	BASEPRI, r3
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	617b      	str	r3, [r7, #20]
}
 800d3de:	bf00      	nop
 800d3e0:	bf00      	nop
 800d3e2:	e7fd      	b.n	800d3e0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d3e4:	f001 ff1a 	bl	800f21c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	e082      	b.n	800d4f2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3f2:	f107 030c 	add.w	r3, r7, #12
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 fefe 	bl	800e1f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d400:	f001 ff0c 	bl	800f21c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d404:	f000 fc66 	bl	800dcd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d408:	f001 fed6 	bl	800f1b8 <vPortEnterCritical>
 800d40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d412:	b25b      	sxtb	r3, r3
 800d414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d418:	d103      	bne.n	800d422 <xQueueSemaphoreTake+0x142>
 800d41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d424:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d428:	b25b      	sxtb	r3, r3
 800d42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42e:	d103      	bne.n	800d438 <xQueueSemaphoreTake+0x158>
 800d430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d432:	2200      	movs	r2, #0
 800d434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d438:	f001 fef0 	bl	800f21c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d43c:	463a      	mov	r2, r7
 800d43e:	f107 030c 	add.w	r3, r7, #12
 800d442:	4611      	mov	r1, r2
 800d444:	4618      	mov	r0, r3
 800d446:	f000 feed 	bl	800e224 <xTaskCheckForTimeOut>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d132      	bne.n	800d4b6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d450:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d452:	f000 f94f 	bl	800d6f4 <prvIsQueueEmpty>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d026      	beq.n	800d4aa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d109      	bne.n	800d478 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d464:	f001 fea8 	bl	800f1b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f001 f853 	bl	800e518 <xTaskPriorityInherit>
 800d472:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d474:	f001 fed2 	bl	800f21c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d47a:	3324      	adds	r3, #36	@ 0x24
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	4611      	mov	r1, r2
 800d480:	4618      	mov	r0, r3
 800d482:	f000 fe03 	bl	800e08c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d486:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d488:	f000 f8e2 	bl	800d650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d48c:	f000 fc30 	bl	800dcf0 <xTaskResumeAll>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	f47f af67 	bne.w	800d366 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d498:	4b18      	ldr	r3, [pc, #96]	@ (800d4fc <xQueueSemaphoreTake+0x21c>)
 800d49a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d49e:	601a      	str	r2, [r3, #0]
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	e75d      	b.n	800d366 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d4aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4ac:	f000 f8d0 	bl	800d650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4b0:	f000 fc1e 	bl	800dcf0 <xTaskResumeAll>
 800d4b4:	e757      	b.n	800d366 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d4b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4b8:	f000 f8ca 	bl	800d650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4bc:	f000 fc18 	bl	800dcf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4c2:	f000 f917 	bl	800d6f4 <prvIsQueueEmpty>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f43f af4c 	beq.w	800d366 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00d      	beq.n	800d4f0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d4d4:	f001 fe70 	bl	800f1b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d4d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4da:	f000 f811 	bl	800d500 <prvGetDisinheritPriorityAfterTimeout>
 800d4de:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f001 f8ee 	bl	800e6c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d4ec:	f001 fe96 	bl	800f21c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3738      	adds	r7, #56	@ 0x38
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	e000ed04 	.word	0xe000ed04

0800d500 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d006      	beq.n	800d51e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d51a:	60fb      	str	r3, [r7, #12]
 800d51c:	e001      	b.n	800d522 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d51e:	2300      	movs	r3, #0
 800d520:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d522:	68fb      	ldr	r3, [r7, #12]
	}
 800d524:	4618      	mov	r0, r3
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d53c:	2300      	movs	r3, #0
 800d53e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d544:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10d      	bne.n	800d56a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d14d      	bne.n	800d5f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f001 f844 	bl	800e5e8 <xTaskPriorityDisinherit>
 800d560:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	609a      	str	r2, [r3, #8]
 800d568:	e043      	b.n	800d5f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d119      	bne.n	800d5a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6858      	ldr	r0, [r3, #4]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d578:	461a      	mov	r2, r3
 800d57a:	68b9      	ldr	r1, [r7, #8]
 800d57c:	f002 ffad 	bl	80104da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d588:	441a      	add	r2, r3
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	429a      	cmp	r2, r3
 800d598:	d32b      	bcc.n	800d5f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	605a      	str	r2, [r3, #4]
 800d5a2:	e026      	b.n	800d5f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	68d8      	ldr	r0, [r3, #12]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	68b9      	ldr	r1, [r7, #8]
 800d5b0:	f002 ff93 	bl	80104da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	68da      	ldr	r2, [r3, #12]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5bc:	425b      	negs	r3, r3
 800d5be:	441a      	add	r2, r3
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	68da      	ldr	r2, [r3, #12]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d207      	bcs.n	800d5e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	689a      	ldr	r2, [r3, #8]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5d8:	425b      	negs	r3, r3
 800d5da:	441a      	add	r2, r3
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d105      	bne.n	800d5f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d5fa:	697b      	ldr	r3, [r7, #20]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3718      	adds	r7, #24
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d612:	2b00      	cmp	r3, #0
 800d614:	d018      	beq.n	800d648 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	68da      	ldr	r2, [r3, #12]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d61e:	441a      	add	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68da      	ldr	r2, [r3, #12]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d303      	bcc.n	800d638 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	68d9      	ldr	r1, [r3, #12]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d640:	461a      	mov	r2, r3
 800d642:	6838      	ldr	r0, [r7, #0]
 800d644:	f002 ff49 	bl	80104da <memcpy>
	}
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d658:	f001 fdae 	bl	800f1b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d662:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d664:	e011      	b.n	800d68a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d012      	beq.n	800d694 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	3324      	adds	r3, #36	@ 0x24
 800d672:	4618      	mov	r0, r3
 800d674:	f000 fd5c 	bl	800e130 <xTaskRemoveFromEventList>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d001      	beq.n	800d682 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d67e:	f000 fe35 	bl	800e2ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d682:	7bfb      	ldrb	r3, [r7, #15]
 800d684:	3b01      	subs	r3, #1
 800d686:	b2db      	uxtb	r3, r3
 800d688:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	dce9      	bgt.n	800d666 <prvUnlockQueue+0x16>
 800d692:	e000      	b.n	800d696 <prvUnlockQueue+0x46>
					break;
 800d694:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	22ff      	movs	r2, #255	@ 0xff
 800d69a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d69e:	f001 fdbd 	bl	800f21c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6a2:	f001 fd89 	bl	800f1b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6ae:	e011      	b.n	800d6d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d012      	beq.n	800d6de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	3310      	adds	r3, #16
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 fd37 	bl	800e130 <xTaskRemoveFromEventList>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d001      	beq.n	800d6cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6c8:	f000 fe10 	bl	800e2ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6cc:	7bbb      	ldrb	r3, [r7, #14]
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	dce9      	bgt.n	800d6b0 <prvUnlockQueue+0x60>
 800d6dc:	e000      	b.n	800d6e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d6de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	22ff      	movs	r2, #255	@ 0xff
 800d6e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d6e8:	f001 fd98 	bl	800f21c <vPortExitCritical>
}
 800d6ec:	bf00      	nop
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6fc:	f001 fd5c 	bl	800f1b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d704:	2b00      	cmp	r3, #0
 800d706:	d102      	bne.n	800d70e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d708:	2301      	movs	r3, #1
 800d70a:	60fb      	str	r3, [r7, #12]
 800d70c:	e001      	b.n	800d712 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d70e:	2300      	movs	r3, #0
 800d710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d712:	f001 fd83 	bl	800f21c <vPortExitCritical>

	return xReturn;
 800d716:	68fb      	ldr	r3, [r7, #12]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d728:	f001 fd46 	bl	800f1b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d734:	429a      	cmp	r2, r3
 800d736:	d102      	bne.n	800d73e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d738:	2301      	movs	r3, #1
 800d73a:	60fb      	str	r3, [r7, #12]
 800d73c:	e001      	b.n	800d742 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d73e:	2300      	movs	r3, #0
 800d740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d742:	f001 fd6b 	bl	800f21c <vPortExitCritical>

	return xReturn;
 800d746:	68fb      	ldr	r3, [r7, #12]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]
 800d75e:	e014      	b.n	800d78a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d760:	4a0f      	ldr	r2, [pc, #60]	@ (800d7a0 <vQueueAddToRegistry+0x50>)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d10b      	bne.n	800d784 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d76c:	490c      	ldr	r1, [pc, #48]	@ (800d7a0 <vQueueAddToRegistry+0x50>)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	683a      	ldr	r2, [r7, #0]
 800d772:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d776:	4a0a      	ldr	r2, [pc, #40]	@ (800d7a0 <vQueueAddToRegistry+0x50>)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	00db      	lsls	r3, r3, #3
 800d77c:	4413      	add	r3, r2
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d782:	e006      	b.n	800d792 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	3301      	adds	r3, #1
 800d788:	60fb      	str	r3, [r7, #12]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2b07      	cmp	r3, #7
 800d78e:	d9e7      	bls.n	800d760 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d790:	bf00      	nop
 800d792:	bf00      	nop
 800d794:	3714      	adds	r7, #20
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	20001b94 	.word	0x20001b94

0800d7a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d7b4:	f001 fd00 	bl	800f1b8 <vPortEnterCritical>
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7be:	b25b      	sxtb	r3, r3
 800d7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c4:	d103      	bne.n	800d7ce <vQueueWaitForMessageRestricted+0x2a>
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7d4:	b25b      	sxtb	r3, r3
 800d7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7da:	d103      	bne.n	800d7e4 <vQueueWaitForMessageRestricted+0x40>
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7e4:	f001 fd1a 	bl	800f21c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d106      	bne.n	800d7fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	3324      	adds	r3, #36	@ 0x24
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	68b9      	ldr	r1, [r7, #8]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f000 fc6d 	bl	800e0d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d7fe:	6978      	ldr	r0, [r7, #20]
 800d800:	f7ff ff26 	bl	800d650 <prvUnlockQueue>
	}
 800d804:	bf00      	nop
 800d806:	3718      	adds	r7, #24
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08e      	sub	sp, #56	@ 0x38
 800d810:	af04      	add	r7, sp, #16
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
 800d818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10b      	bne.n	800d838 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	623b      	str	r3, [r7, #32]
}
 800d832:	bf00      	nop
 800d834:	bf00      	nop
 800d836:	e7fd      	b.n	800d834 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10b      	bne.n	800d856 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	61fb      	str	r3, [r7, #28]
}
 800d850:	bf00      	nop
 800d852:	bf00      	nop
 800d854:	e7fd      	b.n	800d852 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d856:	23a8      	movs	r3, #168	@ 0xa8
 800d858:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	2ba8      	cmp	r3, #168	@ 0xa8
 800d85e:	d00b      	beq.n	800d878 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	61bb      	str	r3, [r7, #24]
}
 800d872:	bf00      	nop
 800d874:	bf00      	nop
 800d876:	e7fd      	b.n	800d874 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d878:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d01e      	beq.n	800d8be <xTaskCreateStatic+0xb2>
 800d880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d882:	2b00      	cmp	r3, #0
 800d884:	d01b      	beq.n	800d8be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d888:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d88c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d88e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d892:	2202      	movs	r2, #2
 800d894:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d898:	2300      	movs	r3, #0
 800d89a:	9303      	str	r3, [sp, #12]
 800d89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89e:	9302      	str	r3, [sp, #8]
 800d8a0:	f107 0314 	add.w	r3, r7, #20
 800d8a4:	9301      	str	r3, [sp, #4]
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a8:	9300      	str	r3, [sp, #0]
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	68b9      	ldr	r1, [r7, #8]
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f000 f851 	bl	800d958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d8b8:	f000 f8f6 	bl	800daa8 <prvAddNewTaskToReadyList>
 800d8bc:	e001      	b.n	800d8c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8c2:	697b      	ldr	r3, [r7, #20]
	}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3728      	adds	r7, #40	@ 0x28
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08c      	sub	sp, #48	@ 0x30
 800d8d0:	af04      	add	r7, sp, #16
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	603b      	str	r3, [r7, #0]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8dc:	88fb      	ldrh	r3, [r7, #6]
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f001 fd8b 	bl	800f3fc <pvPortMalloc>
 800d8e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00e      	beq.n	800d90c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8ee:	20a8      	movs	r0, #168	@ 0xa8
 800d8f0:	f001 fd84 	bl	800f3fc <pvPortMalloc>
 800d8f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d003      	beq.n	800d904 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	631a      	str	r2, [r3, #48]	@ 0x30
 800d902:	e005      	b.n	800d910 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d904:	6978      	ldr	r0, [r7, #20]
 800d906:	f001 fe47 	bl	800f598 <vPortFree>
 800d90a:	e001      	b.n	800d910 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d90c:	2300      	movs	r3, #0
 800d90e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d017      	beq.n	800d946 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d91e:	88fa      	ldrh	r2, [r7, #6]
 800d920:	2300      	movs	r3, #0
 800d922:	9303      	str	r3, [sp, #12]
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	9302      	str	r3, [sp, #8]
 800d928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92a:	9301      	str	r3, [sp, #4]
 800d92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	68b9      	ldr	r1, [r7, #8]
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f000 f80f 	bl	800d958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d93a:	69f8      	ldr	r0, [r7, #28]
 800d93c:	f000 f8b4 	bl	800daa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d940:	2301      	movs	r3, #1
 800d942:	61bb      	str	r3, [r7, #24]
 800d944:	e002      	b.n	800d94c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d946:	f04f 33ff 	mov.w	r3, #4294967295
 800d94a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d94c:	69bb      	ldr	r3, [r7, #24]
	}
 800d94e:	4618      	mov	r0, r3
 800d950:	3720      	adds	r7, #32
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
	...

0800d958 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b088      	sub	sp, #32
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
 800d964:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d968:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	461a      	mov	r2, r3
 800d970:	21a5      	movs	r1, #165	@ 0xa5
 800d972:	f002 fcc2 	bl	80102fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d980:	3b01      	subs	r3, #1
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	f023 0307 	bic.w	r3, r3, #7
 800d98e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	f003 0307 	and.w	r3, r3, #7
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00b      	beq.n	800d9b2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d99e:	f383 8811 	msr	BASEPRI, r3
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	f3bf 8f4f 	dsb	sy
 800d9aa:	617b      	str	r3, [r7, #20]
}
 800d9ac:	bf00      	nop
 800d9ae:	bf00      	nop
 800d9b0:	e7fd      	b.n	800d9ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d01f      	beq.n	800d9f8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	61fb      	str	r3, [r7, #28]
 800d9bc:	e012      	b.n	800d9e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	7819      	ldrb	r1, [r3, #0]
 800d9c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	3334      	adds	r3, #52	@ 0x34
 800d9ce:	460a      	mov	r2, r1
 800d9d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d9d2:	68ba      	ldr	r2, [r7, #8]
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d006      	beq.n	800d9ec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	61fb      	str	r3, [r7, #28]
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	2b0f      	cmp	r3, #15
 800d9e8:	d9e9      	bls.n	800d9be <prvInitialiseNewTask+0x66>
 800d9ea:	e000      	b.n	800d9ee <prvInitialiseNewTask+0x96>
			{
				break;
 800d9ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d9f6:	e003      	b.n	800da00 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da02:	2b37      	cmp	r3, #55	@ 0x37
 800da04:	d901      	bls.n	800da0a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da06:	2337      	movs	r3, #55	@ 0x37
 800da08:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da14:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da18:	2200      	movs	r2, #0
 800da1a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1e:	3304      	adds	r3, #4
 800da20:	4618      	mov	r0, r3
 800da22:	f7fe ff49 	bl	800c8b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da28:	3318      	adds	r3, #24
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fe ff44 	bl	800c8b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da44:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da48:	2200      	movs	r2, #0
 800da4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da50:	2200      	movs	r2, #0
 800da52:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da58:	3354      	adds	r3, #84	@ 0x54
 800da5a:	224c      	movs	r2, #76	@ 0x4c
 800da5c:	2100      	movs	r1, #0
 800da5e:	4618      	mov	r0, r3
 800da60:	f002 fc4b 	bl	80102fa <memset>
 800da64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da66:	4a0d      	ldr	r2, [pc, #52]	@ (800da9c <prvInitialiseNewTask+0x144>)
 800da68:	659a      	str	r2, [r3, #88]	@ 0x58
 800da6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da6c:	4a0c      	ldr	r2, [pc, #48]	@ (800daa0 <prvInitialiseNewTask+0x148>)
 800da6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800da70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da72:	4a0c      	ldr	r2, [pc, #48]	@ (800daa4 <prvInitialiseNewTask+0x14c>)
 800da74:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	68f9      	ldr	r1, [r7, #12]
 800da7a:	69b8      	ldr	r0, [r7, #24]
 800da7c:	f001 fa6a 	bl	800ef54 <pxPortInitialiseStack>
 800da80:	4602      	mov	r2, r0
 800da82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da92:	bf00      	nop
 800da94:	3720      	adds	r7, #32
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	20005e28 	.word	0x20005e28
 800daa0:	20005e90 	.word	0x20005e90
 800daa4:	20005ef8 	.word	0x20005ef8

0800daa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dab0:	f001 fb82 	bl	800f1b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dab4:	4b2d      	ldr	r3, [pc, #180]	@ (800db6c <prvAddNewTaskToReadyList+0xc4>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	3301      	adds	r3, #1
 800daba:	4a2c      	ldr	r2, [pc, #176]	@ (800db6c <prvAddNewTaskToReadyList+0xc4>)
 800dabc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dabe:	4b2c      	ldr	r3, [pc, #176]	@ (800db70 <prvAddNewTaskToReadyList+0xc8>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d109      	bne.n	800dada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dac6:	4a2a      	ldr	r2, [pc, #168]	@ (800db70 <prvAddNewTaskToReadyList+0xc8>)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dacc:	4b27      	ldr	r3, [pc, #156]	@ (800db6c <prvAddNewTaskToReadyList+0xc4>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d110      	bne.n	800daf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dad4:	f000 fc2e 	bl	800e334 <prvInitialiseTaskLists>
 800dad8:	e00d      	b.n	800daf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dada:	4b26      	ldr	r3, [pc, #152]	@ (800db74 <prvAddNewTaskToReadyList+0xcc>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d109      	bne.n	800daf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dae2:	4b23      	ldr	r3, [pc, #140]	@ (800db70 <prvAddNewTaskToReadyList+0xc8>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daec:	429a      	cmp	r2, r3
 800daee:	d802      	bhi.n	800daf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800daf0:	4a1f      	ldr	r2, [pc, #124]	@ (800db70 <prvAddNewTaskToReadyList+0xc8>)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800daf6:	4b20      	ldr	r3, [pc, #128]	@ (800db78 <prvAddNewTaskToReadyList+0xd0>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	3301      	adds	r3, #1
 800dafc:	4a1e      	ldr	r2, [pc, #120]	@ (800db78 <prvAddNewTaskToReadyList+0xd0>)
 800dafe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db00:	4b1d      	ldr	r3, [pc, #116]	@ (800db78 <prvAddNewTaskToReadyList+0xd0>)
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db0c:	4b1b      	ldr	r3, [pc, #108]	@ (800db7c <prvAddNewTaskToReadyList+0xd4>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d903      	bls.n	800db1c <prvAddNewTaskToReadyList+0x74>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db18:	4a18      	ldr	r2, [pc, #96]	@ (800db7c <prvAddNewTaskToReadyList+0xd4>)
 800db1a:	6013      	str	r3, [r2, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db20:	4613      	mov	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4a15      	ldr	r2, [pc, #84]	@ (800db80 <prvAddNewTaskToReadyList+0xd8>)
 800db2a:	441a      	add	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	3304      	adds	r3, #4
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7fe fecd 	bl	800c8d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db38:	f001 fb70 	bl	800f21c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db3c:	4b0d      	ldr	r3, [pc, #52]	@ (800db74 <prvAddNewTaskToReadyList+0xcc>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00e      	beq.n	800db62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db44:	4b0a      	ldr	r3, [pc, #40]	@ (800db70 <prvAddNewTaskToReadyList+0xc8>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db4e:	429a      	cmp	r2, r3
 800db50:	d207      	bcs.n	800db62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db52:	4b0c      	ldr	r3, [pc, #48]	@ (800db84 <prvAddNewTaskToReadyList+0xdc>)
 800db54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db62:	bf00      	nop
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	200020a8 	.word	0x200020a8
 800db70:	20001bd4 	.word	0x20001bd4
 800db74:	200020b4 	.word	0x200020b4
 800db78:	200020c4 	.word	0x200020c4
 800db7c:	200020b0 	.word	0x200020b0
 800db80:	20001bd8 	.word	0x20001bd8
 800db84:	e000ed04 	.word	0xe000ed04

0800db88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d018      	beq.n	800dbcc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db9a:	4b14      	ldr	r3, [pc, #80]	@ (800dbec <vTaskDelay+0x64>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00b      	beq.n	800dbba <vTaskDelay+0x32>
	__asm volatile
 800dba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dba6:	f383 8811 	msr	BASEPRI, r3
 800dbaa:	f3bf 8f6f 	isb	sy
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	60bb      	str	r3, [r7, #8]
}
 800dbb4:	bf00      	nop
 800dbb6:	bf00      	nop
 800dbb8:	e7fd      	b.n	800dbb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dbba:	f000 f88b 	bl	800dcd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fe19 	bl	800e7f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dbc6:	f000 f893 	bl	800dcf0 <xTaskResumeAll>
 800dbca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d107      	bne.n	800dbe2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dbd2:	4b07      	ldr	r3, [pc, #28]	@ (800dbf0 <vTaskDelay+0x68>)
 800dbd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbd8:	601a      	str	r2, [r3, #0]
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbe2:	bf00      	nop
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	200020d0 	.word	0x200020d0
 800dbf0:	e000ed04 	.word	0xe000ed04

0800dbf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b08a      	sub	sp, #40	@ 0x28
 800dbf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc02:	463a      	mov	r2, r7
 800dc04:	1d39      	adds	r1, r7, #4
 800dc06:	f107 0308 	add.w	r3, r7, #8
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe fe00 	bl	800c810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	9202      	str	r2, [sp, #8]
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	2300      	movs	r3, #0
 800dc20:	460a      	mov	r2, r1
 800dc22:	4924      	ldr	r1, [pc, #144]	@ (800dcb4 <vTaskStartScheduler+0xc0>)
 800dc24:	4824      	ldr	r0, [pc, #144]	@ (800dcb8 <vTaskStartScheduler+0xc4>)
 800dc26:	f7ff fdf1 	bl	800d80c <xTaskCreateStatic>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	4a23      	ldr	r2, [pc, #140]	@ (800dcbc <vTaskStartScheduler+0xc8>)
 800dc2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc30:	4b22      	ldr	r3, [pc, #136]	@ (800dcbc <vTaskStartScheduler+0xc8>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	617b      	str	r3, [r7, #20]
 800dc3c:	e001      	b.n	800dc42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d102      	bne.n	800dc4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dc48:	f000 fe2a 	bl	800e8a0 <xTimerCreateTimerTask>
 800dc4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d11b      	bne.n	800dc8c <vTaskStartScheduler+0x98>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	613b      	str	r3, [r7, #16]
}
 800dc66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc68:	4b15      	ldr	r3, [pc, #84]	@ (800dcc0 <vTaskStartScheduler+0xcc>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3354      	adds	r3, #84	@ 0x54
 800dc6e:	4a15      	ldr	r2, [pc, #84]	@ (800dcc4 <vTaskStartScheduler+0xd0>)
 800dc70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc72:	4b15      	ldr	r3, [pc, #84]	@ (800dcc8 <vTaskStartScheduler+0xd4>)
 800dc74:	f04f 32ff 	mov.w	r2, #4294967295
 800dc78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc7a:	4b14      	ldr	r3, [pc, #80]	@ (800dccc <vTaskStartScheduler+0xd8>)
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc80:	4b13      	ldr	r3, [pc, #76]	@ (800dcd0 <vTaskStartScheduler+0xdc>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc86:	f001 f9f3 	bl	800f070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc8a:	e00f      	b.n	800dcac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc92:	d10b      	bne.n	800dcac <vTaskStartScheduler+0xb8>
	__asm volatile
 800dc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	60fb      	str	r3, [r7, #12]
}
 800dca6:	bf00      	nop
 800dca8:	bf00      	nop
 800dcaa:	e7fd      	b.n	800dca8 <vTaskStartScheduler+0xb4>
}
 800dcac:	bf00      	nop
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	08012bc8 	.word	0x08012bc8
 800dcb8:	0800e305 	.word	0x0800e305
 800dcbc:	200020cc 	.word	0x200020cc
 800dcc0:	20001bd4 	.word	0x20001bd4
 800dcc4:	20000088 	.word	0x20000088
 800dcc8:	200020c8 	.word	0x200020c8
 800dccc:	200020b4 	.word	0x200020b4
 800dcd0:	200020ac 	.word	0x200020ac

0800dcd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dcd8:	4b04      	ldr	r3, [pc, #16]	@ (800dcec <vTaskSuspendAll+0x18>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	4a03      	ldr	r2, [pc, #12]	@ (800dcec <vTaskSuspendAll+0x18>)
 800dce0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dce2:	bf00      	nop
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr
 800dcec:	200020d0 	.word	0x200020d0

0800dcf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dcfe:	4b42      	ldr	r3, [pc, #264]	@ (800de08 <xTaskResumeAll+0x118>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10b      	bne.n	800dd1e <xTaskResumeAll+0x2e>
	__asm volatile
 800dd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd0a:	f383 8811 	msr	BASEPRI, r3
 800dd0e:	f3bf 8f6f 	isb	sy
 800dd12:	f3bf 8f4f 	dsb	sy
 800dd16:	603b      	str	r3, [r7, #0]
}
 800dd18:	bf00      	nop
 800dd1a:	bf00      	nop
 800dd1c:	e7fd      	b.n	800dd1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd1e:	f001 fa4b 	bl	800f1b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd22:	4b39      	ldr	r3, [pc, #228]	@ (800de08 <xTaskResumeAll+0x118>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	4a37      	ldr	r2, [pc, #220]	@ (800de08 <xTaskResumeAll+0x118>)
 800dd2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd2c:	4b36      	ldr	r3, [pc, #216]	@ (800de08 <xTaskResumeAll+0x118>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d162      	bne.n	800ddfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd34:	4b35      	ldr	r3, [pc, #212]	@ (800de0c <xTaskResumeAll+0x11c>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d05e      	beq.n	800ddfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd3c:	e02f      	b.n	800dd9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd3e:	4b34      	ldr	r3, [pc, #208]	@ (800de10 <xTaskResumeAll+0x120>)
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	3318      	adds	r3, #24
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fe fe1e 	bl	800c98c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	3304      	adds	r3, #4
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7fe fe19 	bl	800c98c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd5e:	4b2d      	ldr	r3, [pc, #180]	@ (800de14 <xTaskResumeAll+0x124>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d903      	bls.n	800dd6e <xTaskResumeAll+0x7e>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd6a:	4a2a      	ldr	r2, [pc, #168]	@ (800de14 <xTaskResumeAll+0x124>)
 800dd6c:	6013      	str	r3, [r2, #0]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd72:	4613      	mov	r3, r2
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	4413      	add	r3, r2
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	4a27      	ldr	r2, [pc, #156]	@ (800de18 <xTaskResumeAll+0x128>)
 800dd7c:	441a      	add	r2, r3
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	3304      	adds	r3, #4
 800dd82:	4619      	mov	r1, r3
 800dd84:	4610      	mov	r0, r2
 800dd86:	f7fe fda4 	bl	800c8d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd8e:	4b23      	ldr	r3, [pc, #140]	@ (800de1c <xTaskResumeAll+0x12c>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d302      	bcc.n	800dd9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dd98:	4b21      	ldr	r3, [pc, #132]	@ (800de20 <xTaskResumeAll+0x130>)
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd9e:	4b1c      	ldr	r3, [pc, #112]	@ (800de10 <xTaskResumeAll+0x120>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1cb      	bne.n	800dd3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d001      	beq.n	800ddb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ddac:	f000 fb66 	bl	800e47c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ddb0:	4b1c      	ldr	r3, [pc, #112]	@ (800de24 <xTaskResumeAll+0x134>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d010      	beq.n	800ddde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ddbc:	f000 f846 	bl	800de4c <xTaskIncrementTick>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d002      	beq.n	800ddcc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ddc6:	4b16      	ldr	r3, [pc, #88]	@ (800de20 <xTaskResumeAll+0x130>)
 800ddc8:	2201      	movs	r2, #1
 800ddca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1f1      	bne.n	800ddbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ddd8:	4b12      	ldr	r3, [pc, #72]	@ (800de24 <xTaskResumeAll+0x134>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ddde:	4b10      	ldr	r3, [pc, #64]	@ (800de20 <xTaskResumeAll+0x130>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d009      	beq.n	800ddfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dde6:	2301      	movs	r3, #1
 800dde8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ddea:	4b0f      	ldr	r3, [pc, #60]	@ (800de28 <xTaskResumeAll+0x138>)
 800ddec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddfa:	f001 fa0f 	bl	800f21c <vPortExitCritical>

	return xAlreadyYielded;
 800ddfe:	68bb      	ldr	r3, [r7, #8]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	200020d0 	.word	0x200020d0
 800de0c:	200020a8 	.word	0x200020a8
 800de10:	20002068 	.word	0x20002068
 800de14:	200020b0 	.word	0x200020b0
 800de18:	20001bd8 	.word	0x20001bd8
 800de1c:	20001bd4 	.word	0x20001bd4
 800de20:	200020bc 	.word	0x200020bc
 800de24:	200020b8 	.word	0x200020b8
 800de28:	e000ed04 	.word	0xe000ed04

0800de2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de32:	4b05      	ldr	r3, [pc, #20]	@ (800de48 <xTaskGetTickCount+0x1c>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de38:	687b      	ldr	r3, [r7, #4]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	200020ac 	.word	0x200020ac

0800de4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de56:	4b4f      	ldr	r3, [pc, #316]	@ (800df94 <xTaskIncrementTick+0x148>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f040 8090 	bne.w	800df80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de60:	4b4d      	ldr	r3, [pc, #308]	@ (800df98 <xTaskIncrementTick+0x14c>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	3301      	adds	r3, #1
 800de66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de68:	4a4b      	ldr	r2, [pc, #300]	@ (800df98 <xTaskIncrementTick+0x14c>)
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d121      	bne.n	800deb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800de74:	4b49      	ldr	r3, [pc, #292]	@ (800df9c <xTaskIncrementTick+0x150>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00b      	beq.n	800de96 <xTaskIncrementTick+0x4a>
	__asm volatile
 800de7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	603b      	str	r3, [r7, #0]
}
 800de90:	bf00      	nop
 800de92:	bf00      	nop
 800de94:	e7fd      	b.n	800de92 <xTaskIncrementTick+0x46>
 800de96:	4b41      	ldr	r3, [pc, #260]	@ (800df9c <xTaskIncrementTick+0x150>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	60fb      	str	r3, [r7, #12]
 800de9c:	4b40      	ldr	r3, [pc, #256]	@ (800dfa0 <xTaskIncrementTick+0x154>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a3e      	ldr	r2, [pc, #248]	@ (800df9c <xTaskIncrementTick+0x150>)
 800dea2:	6013      	str	r3, [r2, #0]
 800dea4:	4a3e      	ldr	r2, [pc, #248]	@ (800dfa0 <xTaskIncrementTick+0x154>)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	6013      	str	r3, [r2, #0]
 800deaa:	4b3e      	ldr	r3, [pc, #248]	@ (800dfa4 <xTaskIncrementTick+0x158>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	3301      	adds	r3, #1
 800deb0:	4a3c      	ldr	r2, [pc, #240]	@ (800dfa4 <xTaskIncrementTick+0x158>)
 800deb2:	6013      	str	r3, [r2, #0]
 800deb4:	f000 fae2 	bl	800e47c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800deb8:	4b3b      	ldr	r3, [pc, #236]	@ (800dfa8 <xTaskIncrementTick+0x15c>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d349      	bcc.n	800df56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dec2:	4b36      	ldr	r3, [pc, #216]	@ (800df9c <xTaskIncrementTick+0x150>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d104      	bne.n	800ded6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800decc:	4b36      	ldr	r3, [pc, #216]	@ (800dfa8 <xTaskIncrementTick+0x15c>)
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	601a      	str	r2, [r3, #0]
					break;
 800ded4:	e03f      	b.n	800df56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ded6:	4b31      	ldr	r3, [pc, #196]	@ (800df9c <xTaskIncrementTick+0x150>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dee6:	693a      	ldr	r2, [r7, #16]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	429a      	cmp	r2, r3
 800deec:	d203      	bcs.n	800def6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800deee:	4a2e      	ldr	r2, [pc, #184]	@ (800dfa8 <xTaskIncrementTick+0x15c>)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800def4:	e02f      	b.n	800df56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	3304      	adds	r3, #4
 800defa:	4618      	mov	r0, r3
 800defc:	f7fe fd46 	bl	800c98c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	3318      	adds	r3, #24
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fe fd3d 	bl	800c98c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df16:	4b25      	ldr	r3, [pc, #148]	@ (800dfac <xTaskIncrementTick+0x160>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d903      	bls.n	800df26 <xTaskIncrementTick+0xda>
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df22:	4a22      	ldr	r2, [pc, #136]	@ (800dfac <xTaskIncrementTick+0x160>)
 800df24:	6013      	str	r3, [r2, #0]
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4a1f      	ldr	r2, [pc, #124]	@ (800dfb0 <xTaskIncrementTick+0x164>)
 800df34:	441a      	add	r2, r3
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	3304      	adds	r3, #4
 800df3a:	4619      	mov	r1, r3
 800df3c:	4610      	mov	r0, r2
 800df3e:	f7fe fcc8 	bl	800c8d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df46:	4b1b      	ldr	r3, [pc, #108]	@ (800dfb4 <xTaskIncrementTick+0x168>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d3b8      	bcc.n	800dec2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800df50:	2301      	movs	r3, #1
 800df52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df54:	e7b5      	b.n	800dec2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df56:	4b17      	ldr	r3, [pc, #92]	@ (800dfb4 <xTaskIncrementTick+0x168>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df5c:	4914      	ldr	r1, [pc, #80]	@ (800dfb0 <xTaskIncrementTick+0x164>)
 800df5e:	4613      	mov	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4413      	add	r3, r2
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	440b      	add	r3, r1
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d901      	bls.n	800df72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800df6e:	2301      	movs	r3, #1
 800df70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800df72:	4b11      	ldr	r3, [pc, #68]	@ (800dfb8 <xTaskIncrementTick+0x16c>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d007      	beq.n	800df8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800df7a:	2301      	movs	r3, #1
 800df7c:	617b      	str	r3, [r7, #20]
 800df7e:	e004      	b.n	800df8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800df80:	4b0e      	ldr	r3, [pc, #56]	@ (800dfbc <xTaskIncrementTick+0x170>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3301      	adds	r3, #1
 800df86:	4a0d      	ldr	r2, [pc, #52]	@ (800dfbc <xTaskIncrementTick+0x170>)
 800df88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800df8a:	697b      	ldr	r3, [r7, #20]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3718      	adds	r7, #24
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	200020d0 	.word	0x200020d0
 800df98:	200020ac 	.word	0x200020ac
 800df9c:	20002060 	.word	0x20002060
 800dfa0:	20002064 	.word	0x20002064
 800dfa4:	200020c0 	.word	0x200020c0
 800dfa8:	200020c8 	.word	0x200020c8
 800dfac:	200020b0 	.word	0x200020b0
 800dfb0:	20001bd8 	.word	0x20001bd8
 800dfb4:	20001bd4 	.word	0x20001bd4
 800dfb8:	200020bc 	.word	0x200020bc
 800dfbc:	200020b8 	.word	0x200020b8

0800dfc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dfc6:	4b2b      	ldr	r3, [pc, #172]	@ (800e074 <vTaskSwitchContext+0xb4>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dfce:	4b2a      	ldr	r3, [pc, #168]	@ (800e078 <vTaskSwitchContext+0xb8>)
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dfd4:	e047      	b.n	800e066 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800dfd6:	4b28      	ldr	r3, [pc, #160]	@ (800e078 <vTaskSwitchContext+0xb8>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfdc:	4b27      	ldr	r3, [pc, #156]	@ (800e07c <vTaskSwitchContext+0xbc>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	60fb      	str	r3, [r7, #12]
 800dfe2:	e011      	b.n	800e008 <vTaskSwitchContext+0x48>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10b      	bne.n	800e002 <vTaskSwitchContext+0x42>
	__asm volatile
 800dfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	607b      	str	r3, [r7, #4]
}
 800dffc:	bf00      	nop
 800dffe:	bf00      	nop
 800e000:	e7fd      	b.n	800dffe <vTaskSwitchContext+0x3e>
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3b01      	subs	r3, #1
 800e006:	60fb      	str	r3, [r7, #12]
 800e008:	491d      	ldr	r1, [pc, #116]	@ (800e080 <vTaskSwitchContext+0xc0>)
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	4613      	mov	r3, r2
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	4413      	add	r3, r2
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	440b      	add	r3, r1
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d0e3      	beq.n	800dfe4 <vTaskSwitchContext+0x24>
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4a16      	ldr	r2, [pc, #88]	@ (800e080 <vTaskSwitchContext+0xc0>)
 800e028:	4413      	add	r3, r2
 800e02a:	60bb      	str	r3, [r7, #8]
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	685a      	ldr	r2, [r3, #4]
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	605a      	str	r2, [r3, #4]
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	685a      	ldr	r2, [r3, #4]
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	3308      	adds	r3, #8
 800e03e:	429a      	cmp	r2, r3
 800e040:	d104      	bne.n	800e04c <vTaskSwitchContext+0x8c>
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	685a      	ldr	r2, [r3, #4]
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	605a      	str	r2, [r3, #4]
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	4a0c      	ldr	r2, [pc, #48]	@ (800e084 <vTaskSwitchContext+0xc4>)
 800e054:	6013      	str	r3, [r2, #0]
 800e056:	4a09      	ldr	r2, [pc, #36]	@ (800e07c <vTaskSwitchContext+0xbc>)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e05c:	4b09      	ldr	r3, [pc, #36]	@ (800e084 <vTaskSwitchContext+0xc4>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3354      	adds	r3, #84	@ 0x54
 800e062:	4a09      	ldr	r2, [pc, #36]	@ (800e088 <vTaskSwitchContext+0xc8>)
 800e064:	6013      	str	r3, [r2, #0]
}
 800e066:	bf00      	nop
 800e068:	3714      	adds	r7, #20
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop
 800e074:	200020d0 	.word	0x200020d0
 800e078:	200020bc 	.word	0x200020bc
 800e07c:	200020b0 	.word	0x200020b0
 800e080:	20001bd8 	.word	0x20001bd8
 800e084:	20001bd4 	.word	0x20001bd4
 800e088:	20000088 	.word	0x20000088

0800e08c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10b      	bne.n	800e0b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a0:	f383 8811 	msr	BASEPRI, r3
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	60fb      	str	r3, [r7, #12]
}
 800e0ae:	bf00      	nop
 800e0b0:	bf00      	nop
 800e0b2:	e7fd      	b.n	800e0b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0b4:	4b07      	ldr	r3, [pc, #28]	@ (800e0d4 <vTaskPlaceOnEventList+0x48>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	3318      	adds	r3, #24
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7fe fc2c 	bl	800c91a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e0c2:	2101      	movs	r1, #1
 800e0c4:	6838      	ldr	r0, [r7, #0]
 800e0c6:	f000 fb97 	bl	800e7f8 <prvAddCurrentTaskToDelayedList>
}
 800e0ca:	bf00      	nop
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20001bd4 	.word	0x20001bd4

0800e0d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10b      	bne.n	800e102 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	617b      	str	r3, [r7, #20]
}
 800e0fc:	bf00      	nop
 800e0fe:	bf00      	nop
 800e100:	e7fd      	b.n	800e0fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e102:	4b0a      	ldr	r3, [pc, #40]	@ (800e12c <vTaskPlaceOnEventListRestricted+0x54>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	3318      	adds	r3, #24
 800e108:	4619      	mov	r1, r3
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f7fe fbe1 	bl	800c8d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d002      	beq.n	800e11c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e116:	f04f 33ff 	mov.w	r3, #4294967295
 800e11a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e11c:	6879      	ldr	r1, [r7, #4]
 800e11e:	68b8      	ldr	r0, [r7, #8]
 800e120:	f000 fb6a 	bl	800e7f8 <prvAddCurrentTaskToDelayedList>
	}
 800e124:	bf00      	nop
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	20001bd4 	.word	0x20001bd4

0800e130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d10b      	bne.n	800e15e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	60fb      	str	r3, [r7, #12]
}
 800e158:	bf00      	nop
 800e15a:	bf00      	nop
 800e15c:	e7fd      	b.n	800e15a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	3318      	adds	r3, #24
 800e162:	4618      	mov	r0, r3
 800e164:	f7fe fc12 	bl	800c98c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e168:	4b1d      	ldr	r3, [pc, #116]	@ (800e1e0 <xTaskRemoveFromEventList+0xb0>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d11d      	bne.n	800e1ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	3304      	adds	r3, #4
 800e174:	4618      	mov	r0, r3
 800e176:	f7fe fc09 	bl	800c98c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e17e:	4b19      	ldr	r3, [pc, #100]	@ (800e1e4 <xTaskRemoveFromEventList+0xb4>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	429a      	cmp	r2, r3
 800e184:	d903      	bls.n	800e18e <xTaskRemoveFromEventList+0x5e>
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e18a:	4a16      	ldr	r2, [pc, #88]	@ (800e1e4 <xTaskRemoveFromEventList+0xb4>)
 800e18c:	6013      	str	r3, [r2, #0]
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e192:	4613      	mov	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	4a13      	ldr	r2, [pc, #76]	@ (800e1e8 <xTaskRemoveFromEventList+0xb8>)
 800e19c:	441a      	add	r2, r3
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	3304      	adds	r3, #4
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	f7fe fb94 	bl	800c8d2 <vListInsertEnd>
 800e1aa:	e005      	b.n	800e1b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	3318      	adds	r3, #24
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	480e      	ldr	r0, [pc, #56]	@ (800e1ec <xTaskRemoveFromEventList+0xbc>)
 800e1b4:	f7fe fb8d 	bl	800c8d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e1f0 <xTaskRemoveFromEventList+0xc0>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d905      	bls.n	800e1d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e1ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e1f4 <xTaskRemoveFromEventList+0xc4>)
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	601a      	str	r2, [r3, #0]
 800e1d0:	e001      	b.n	800e1d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e1d6:	697b      	ldr	r3, [r7, #20]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3718      	adds	r7, #24
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	200020d0 	.word	0x200020d0
 800e1e4:	200020b0 	.word	0x200020b0
 800e1e8:	20001bd8 	.word	0x20001bd8
 800e1ec:	20002068 	.word	0x20002068
 800e1f0:	20001bd4 	.word	0x20001bd4
 800e1f4:	200020bc 	.word	0x200020bc

0800e1f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e200:	4b06      	ldr	r3, [pc, #24]	@ (800e21c <vTaskInternalSetTimeOutState+0x24>)
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e208:	4b05      	ldr	r3, [pc, #20]	@ (800e220 <vTaskInternalSetTimeOutState+0x28>)
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	605a      	str	r2, [r3, #4]
}
 800e210:	bf00      	nop
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	200020c0 	.word	0x200020c0
 800e220:	200020ac 	.word	0x200020ac

0800e224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10b      	bne.n	800e24c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	613b      	str	r3, [r7, #16]
}
 800e246:	bf00      	nop
 800e248:	bf00      	nop
 800e24a:	e7fd      	b.n	800e248 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10b      	bne.n	800e26a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	60fb      	str	r3, [r7, #12]
}
 800e264:	bf00      	nop
 800e266:	bf00      	nop
 800e268:	e7fd      	b.n	800e266 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e26a:	f000 ffa5 	bl	800f1b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e26e:	4b1d      	ldr	r3, [pc, #116]	@ (800e2e4 <xTaskCheckForTimeOut+0xc0>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	69ba      	ldr	r2, [r7, #24]
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e286:	d102      	bne.n	800e28e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e288:	2300      	movs	r3, #0
 800e28a:	61fb      	str	r3, [r7, #28]
 800e28c:	e023      	b.n	800e2d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	4b15      	ldr	r3, [pc, #84]	@ (800e2e8 <xTaskCheckForTimeOut+0xc4>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	429a      	cmp	r2, r3
 800e298:	d007      	beq.n	800e2aa <xTaskCheckForTimeOut+0x86>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	69ba      	ldr	r2, [r7, #24]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d302      	bcc.n	800e2aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	61fb      	str	r3, [r7, #28]
 800e2a8:	e015      	b.n	800e2d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	697a      	ldr	r2, [r7, #20]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d20b      	bcs.n	800e2cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	1ad2      	subs	r2, r2, r3
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff ff99 	bl	800e1f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	61fb      	str	r3, [r7, #28]
 800e2ca:	e004      	b.n	800e2d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e2d6:	f000 ffa1 	bl	800f21c <vPortExitCritical>

	return xReturn;
 800e2da:	69fb      	ldr	r3, [r7, #28]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3720      	adds	r7, #32
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	200020ac 	.word	0x200020ac
 800e2e8:	200020c0 	.word	0x200020c0

0800e2ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e2f0:	4b03      	ldr	r3, [pc, #12]	@ (800e300 <vTaskMissedYield+0x14>)
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	601a      	str	r2, [r3, #0]
}
 800e2f6:	bf00      	nop
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	200020bc 	.word	0x200020bc

0800e304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e30c:	f000 f852 	bl	800e3b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e310:	4b06      	ldr	r3, [pc, #24]	@ (800e32c <prvIdleTask+0x28>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d9f9      	bls.n	800e30c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e318:	4b05      	ldr	r3, [pc, #20]	@ (800e330 <prvIdleTask+0x2c>)
 800e31a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e31e:	601a      	str	r2, [r3, #0]
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e328:	e7f0      	b.n	800e30c <prvIdleTask+0x8>
 800e32a:	bf00      	nop
 800e32c:	20001bd8 	.word	0x20001bd8
 800e330:	e000ed04 	.word	0xe000ed04

0800e334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e33a:	2300      	movs	r3, #0
 800e33c:	607b      	str	r3, [r7, #4]
 800e33e:	e00c      	b.n	800e35a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	4613      	mov	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4413      	add	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4a12      	ldr	r2, [pc, #72]	@ (800e394 <prvInitialiseTaskLists+0x60>)
 800e34c:	4413      	add	r3, r2
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fe fa92 	bl	800c878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3301      	adds	r3, #1
 800e358:	607b      	str	r3, [r7, #4]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b37      	cmp	r3, #55	@ 0x37
 800e35e:	d9ef      	bls.n	800e340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e360:	480d      	ldr	r0, [pc, #52]	@ (800e398 <prvInitialiseTaskLists+0x64>)
 800e362:	f7fe fa89 	bl	800c878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e366:	480d      	ldr	r0, [pc, #52]	@ (800e39c <prvInitialiseTaskLists+0x68>)
 800e368:	f7fe fa86 	bl	800c878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e36c:	480c      	ldr	r0, [pc, #48]	@ (800e3a0 <prvInitialiseTaskLists+0x6c>)
 800e36e:	f7fe fa83 	bl	800c878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e372:	480c      	ldr	r0, [pc, #48]	@ (800e3a4 <prvInitialiseTaskLists+0x70>)
 800e374:	f7fe fa80 	bl	800c878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e378:	480b      	ldr	r0, [pc, #44]	@ (800e3a8 <prvInitialiseTaskLists+0x74>)
 800e37a:	f7fe fa7d 	bl	800c878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e37e:	4b0b      	ldr	r3, [pc, #44]	@ (800e3ac <prvInitialiseTaskLists+0x78>)
 800e380:	4a05      	ldr	r2, [pc, #20]	@ (800e398 <prvInitialiseTaskLists+0x64>)
 800e382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e384:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b0 <prvInitialiseTaskLists+0x7c>)
 800e386:	4a05      	ldr	r2, [pc, #20]	@ (800e39c <prvInitialiseTaskLists+0x68>)
 800e388:	601a      	str	r2, [r3, #0]
}
 800e38a:	bf00      	nop
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	20001bd8 	.word	0x20001bd8
 800e398:	20002038 	.word	0x20002038
 800e39c:	2000204c 	.word	0x2000204c
 800e3a0:	20002068 	.word	0x20002068
 800e3a4:	2000207c 	.word	0x2000207c
 800e3a8:	20002094 	.word	0x20002094
 800e3ac:	20002060 	.word	0x20002060
 800e3b0:	20002064 	.word	0x20002064

0800e3b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3ba:	e019      	b.n	800e3f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e3bc:	f000 fefc 	bl	800f1b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3c0:	4b10      	ldr	r3, [pc, #64]	@ (800e404 <prvCheckTasksWaitingTermination+0x50>)
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fe fadd 	bl	800c98c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e408 <prvCheckTasksWaitingTermination+0x54>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	4a0b      	ldr	r2, [pc, #44]	@ (800e408 <prvCheckTasksWaitingTermination+0x54>)
 800e3da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e3dc:	4b0b      	ldr	r3, [pc, #44]	@ (800e40c <prvCheckTasksWaitingTermination+0x58>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	3b01      	subs	r3, #1
 800e3e2:	4a0a      	ldr	r2, [pc, #40]	@ (800e40c <prvCheckTasksWaitingTermination+0x58>)
 800e3e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3e6:	f000 ff19 	bl	800f21c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f810 	bl	800e410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3f0:	4b06      	ldr	r3, [pc, #24]	@ (800e40c <prvCheckTasksWaitingTermination+0x58>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1e1      	bne.n	800e3bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3f8:	bf00      	nop
 800e3fa:	bf00      	nop
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	2000207c 	.word	0x2000207c
 800e408:	200020a8 	.word	0x200020a8
 800e40c:	20002090 	.word	0x20002090

0800e410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3354      	adds	r3, #84	@ 0x54
 800e41c:	4618      	mov	r0, r3
 800e41e:	f001 ff9b 	bl	8010358 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d108      	bne.n	800e43e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e430:	4618      	mov	r0, r3
 800e432:	f001 f8b1 	bl	800f598 <vPortFree>
				vPortFree( pxTCB );
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f001 f8ae 	bl	800f598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e43c:	e019      	b.n	800e472 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e444:	2b01      	cmp	r3, #1
 800e446:	d103      	bne.n	800e450 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f001 f8a5 	bl	800f598 <vPortFree>
	}
 800e44e:	e010      	b.n	800e472 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e456:	2b02      	cmp	r3, #2
 800e458:	d00b      	beq.n	800e472 <prvDeleteTCB+0x62>
	__asm volatile
 800e45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e45e:	f383 8811 	msr	BASEPRI, r3
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	f3bf 8f4f 	dsb	sy
 800e46a:	60fb      	str	r3, [r7, #12]
}
 800e46c:	bf00      	nop
 800e46e:	bf00      	nop
 800e470:	e7fd      	b.n	800e46e <prvDeleteTCB+0x5e>
	}
 800e472:	bf00      	nop
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
	...

0800e47c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e482:	4b0c      	ldr	r3, [pc, #48]	@ (800e4b4 <prvResetNextTaskUnblockTime+0x38>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d104      	bne.n	800e496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e48c:	4b0a      	ldr	r3, [pc, #40]	@ (800e4b8 <prvResetNextTaskUnblockTime+0x3c>)
 800e48e:	f04f 32ff 	mov.w	r2, #4294967295
 800e492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e494:	e008      	b.n	800e4a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e496:	4b07      	ldr	r3, [pc, #28]	@ (800e4b4 <prvResetNextTaskUnblockTime+0x38>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	4a04      	ldr	r2, [pc, #16]	@ (800e4b8 <prvResetNextTaskUnblockTime+0x3c>)
 800e4a6:	6013      	str	r3, [r2, #0]
}
 800e4a8:	bf00      	nop
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr
 800e4b4:	20002060 	.word	0x20002060
 800e4b8:	200020c8 	.word	0x200020c8

0800e4bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e4c2:	4b05      	ldr	r3, [pc, #20]	@ (800e4d8 <xTaskGetCurrentTaskHandle+0x1c>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e4c8:	687b      	ldr	r3, [r7, #4]
	}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	20001bd4 	.word	0x20001bd4

0800e4dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e4e2:	4b0b      	ldr	r3, [pc, #44]	@ (800e510 <xTaskGetSchedulerState+0x34>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d102      	bne.n	800e4f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	607b      	str	r3, [r7, #4]
 800e4ee:	e008      	b.n	800e502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4f0:	4b08      	ldr	r3, [pc, #32]	@ (800e514 <xTaskGetSchedulerState+0x38>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d102      	bne.n	800e4fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e4f8:	2302      	movs	r3, #2
 800e4fa:	607b      	str	r3, [r7, #4]
 800e4fc:	e001      	b.n	800e502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e4fe:	2300      	movs	r3, #0
 800e500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e502:	687b      	ldr	r3, [r7, #4]
	}
 800e504:	4618      	mov	r0, r3
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	200020b4 	.word	0x200020b4
 800e514:	200020d0 	.word	0x200020d0

0800e518 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e524:	2300      	movs	r3, #0
 800e526:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d051      	beq.n	800e5d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e532:	4b2a      	ldr	r3, [pc, #168]	@ (800e5dc <xTaskPriorityInherit+0xc4>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e538:	429a      	cmp	r2, r3
 800e53a:	d241      	bcs.n	800e5c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	2b00      	cmp	r3, #0
 800e542:	db06      	blt.n	800e552 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e544:	4b25      	ldr	r3, [pc, #148]	@ (800e5dc <xTaskPriorityInherit+0xc4>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e54a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	6959      	ldr	r1, [r3, #20]
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e55a:	4613      	mov	r3, r2
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	4413      	add	r3, r2
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	4a1f      	ldr	r2, [pc, #124]	@ (800e5e0 <xTaskPriorityInherit+0xc8>)
 800e564:	4413      	add	r3, r2
 800e566:	4299      	cmp	r1, r3
 800e568:	d122      	bne.n	800e5b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	3304      	adds	r3, #4
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe fa0c 	bl	800c98c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e574:	4b19      	ldr	r3, [pc, #100]	@ (800e5dc <xTaskPriorityInherit+0xc4>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e582:	4b18      	ldr	r3, [pc, #96]	@ (800e5e4 <xTaskPriorityInherit+0xcc>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	429a      	cmp	r2, r3
 800e588:	d903      	bls.n	800e592 <xTaskPriorityInherit+0x7a>
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e58e:	4a15      	ldr	r2, [pc, #84]	@ (800e5e4 <xTaskPriorityInherit+0xcc>)
 800e590:	6013      	str	r3, [r2, #0]
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e596:	4613      	mov	r3, r2
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	4413      	add	r3, r2
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	4a10      	ldr	r2, [pc, #64]	@ (800e5e0 <xTaskPriorityInherit+0xc8>)
 800e5a0:	441a      	add	r2, r3
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	f7fe f992 	bl	800c8d2 <vListInsertEnd>
 800e5ae:	e004      	b.n	800e5ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e5dc <xTaskPriorityInherit+0xc4>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	60fb      	str	r3, [r7, #12]
 800e5be:	e008      	b.n	800e5d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5c4:	4b05      	ldr	r3, [pc, #20]	@ (800e5dc <xTaskPriorityInherit+0xc4>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d201      	bcs.n	800e5d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
	}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	20001bd4 	.word	0x20001bd4
 800e5e0:	20001bd8 	.word	0x20001bd8
 800e5e4:	200020b0 	.word	0x200020b0

0800e5e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d058      	beq.n	800e6b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e5fe:	4b2f      	ldr	r3, [pc, #188]	@ (800e6bc <xTaskPriorityDisinherit+0xd4>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	693a      	ldr	r2, [r7, #16]
 800e604:	429a      	cmp	r2, r3
 800e606:	d00b      	beq.n	800e620 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60c:	f383 8811 	msr	BASEPRI, r3
 800e610:	f3bf 8f6f 	isb	sy
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	60fb      	str	r3, [r7, #12]
}
 800e61a:	bf00      	nop
 800e61c:	bf00      	nop
 800e61e:	e7fd      	b.n	800e61c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10b      	bne.n	800e640 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	60bb      	str	r3, [r7, #8]
}
 800e63a:	bf00      	nop
 800e63c:	bf00      	nop
 800e63e:	e7fd      	b.n	800e63c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e644:	1e5a      	subs	r2, r3, #1
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e652:	429a      	cmp	r2, r3
 800e654:	d02c      	beq.n	800e6b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d128      	bne.n	800e6b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	3304      	adds	r3, #4
 800e662:	4618      	mov	r0, r3
 800e664:	f7fe f992 	bl	800c98c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e674:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e680:	4b0f      	ldr	r3, [pc, #60]	@ (800e6c0 <xTaskPriorityDisinherit+0xd8>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	429a      	cmp	r2, r3
 800e686:	d903      	bls.n	800e690 <xTaskPriorityDisinherit+0xa8>
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e68c:	4a0c      	ldr	r2, [pc, #48]	@ (800e6c0 <xTaskPriorityDisinherit+0xd8>)
 800e68e:	6013      	str	r3, [r2, #0]
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e694:	4613      	mov	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4413      	add	r3, r2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4a09      	ldr	r2, [pc, #36]	@ (800e6c4 <xTaskPriorityDisinherit+0xdc>)
 800e69e:	441a      	add	r2, r3
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	4610      	mov	r0, r2
 800e6a8:	f7fe f913 	bl	800c8d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6b0:	697b      	ldr	r3, [r7, #20]
	}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3718      	adds	r7, #24
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20001bd4 	.word	0x20001bd4
 800e6c0:	200020b0 	.word	0x200020b0
 800e6c4:	20001bd8 	.word	0x20001bd8

0800e6c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b088      	sub	sp, #32
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d06c      	beq.n	800e7ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d10b      	bne.n	800e700 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	60fb      	str	r3, [r7, #12]
}
 800e6fa:	bf00      	nop
 800e6fc:	bf00      	nop
 800e6fe:	e7fd      	b.n	800e6fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e704:	683a      	ldr	r2, [r7, #0]
 800e706:	429a      	cmp	r2, r3
 800e708:	d902      	bls.n	800e710 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	61fb      	str	r3, [r7, #28]
 800e70e:	e002      	b.n	800e716 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e714:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e71a:	69fa      	ldr	r2, [r7, #28]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d04c      	beq.n	800e7ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e724:	697a      	ldr	r2, [r7, #20]
 800e726:	429a      	cmp	r2, r3
 800e728:	d147      	bne.n	800e7ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e72a:	4b26      	ldr	r3, [pc, #152]	@ (800e7c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	69ba      	ldr	r2, [r7, #24]
 800e730:	429a      	cmp	r2, r3
 800e732:	d10b      	bne.n	800e74c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e738:	f383 8811 	msr	BASEPRI, r3
 800e73c:	f3bf 8f6f 	isb	sy
 800e740:	f3bf 8f4f 	dsb	sy
 800e744:	60bb      	str	r3, [r7, #8]
}
 800e746:	bf00      	nop
 800e748:	bf00      	nop
 800e74a:	e7fd      	b.n	800e748 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e750:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	69fa      	ldr	r2, [r7, #28]
 800e756:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	699b      	ldr	r3, [r3, #24]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	db04      	blt.n	800e76a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	6959      	ldr	r1, [r3, #20]
 800e76e:	693a      	ldr	r2, [r7, #16]
 800e770:	4613      	mov	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	4413      	add	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4a13      	ldr	r2, [pc, #76]	@ (800e7c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e77a:	4413      	add	r3, r2
 800e77c:	4299      	cmp	r1, r3
 800e77e:	d11c      	bne.n	800e7ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	3304      	adds	r3, #4
 800e784:	4618      	mov	r0, r3
 800e786:	f7fe f901 	bl	800c98c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e78e:	4b0f      	ldr	r3, [pc, #60]	@ (800e7cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	429a      	cmp	r2, r3
 800e794:	d903      	bls.n	800e79e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e79a:	4a0c      	ldr	r2, [pc, #48]	@ (800e7cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e79c:	6013      	str	r3, [r2, #0]
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	4413      	add	r3, r2
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	4a07      	ldr	r2, [pc, #28]	@ (800e7c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7ac:	441a      	add	r2, r3
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	3304      	adds	r3, #4
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	4610      	mov	r0, r2
 800e7b6:	f7fe f88c 	bl	800c8d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7ba:	bf00      	nop
 800e7bc:	3720      	adds	r7, #32
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20001bd4 	.word	0x20001bd4
 800e7c8:	20001bd8 	.word	0x20001bd8
 800e7cc:	200020b0 	.word	0x200020b0

0800e7d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e7d0:	b480      	push	{r7}
 800e7d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e7d4:	4b07      	ldr	r3, [pc, #28]	@ (800e7f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d004      	beq.n	800e7e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e7dc:	4b05      	ldr	r3, [pc, #20]	@ (800e7f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e7e2:	3201      	adds	r2, #1
 800e7e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e7e6:	4b03      	ldr	r3, [pc, #12]	@ (800e7f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
	}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr
 800e7f4:	20001bd4 	.word	0x20001bd4

0800e7f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e802:	4b21      	ldr	r3, [pc, #132]	@ (800e888 <prvAddCurrentTaskToDelayedList+0x90>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e808:	4b20      	ldr	r3, [pc, #128]	@ (800e88c <prvAddCurrentTaskToDelayedList+0x94>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fe f8bc 	bl	800c98c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e81a:	d10a      	bne.n	800e832 <prvAddCurrentTaskToDelayedList+0x3a>
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d007      	beq.n	800e832 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e822:	4b1a      	ldr	r3, [pc, #104]	@ (800e88c <prvAddCurrentTaskToDelayedList+0x94>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	3304      	adds	r3, #4
 800e828:	4619      	mov	r1, r3
 800e82a:	4819      	ldr	r0, [pc, #100]	@ (800e890 <prvAddCurrentTaskToDelayedList+0x98>)
 800e82c:	f7fe f851 	bl	800c8d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e830:	e026      	b.n	800e880 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4413      	add	r3, r2
 800e838:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e83a:	4b14      	ldr	r3, [pc, #80]	@ (800e88c <prvAddCurrentTaskToDelayedList+0x94>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	429a      	cmp	r2, r3
 800e848:	d209      	bcs.n	800e85e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e84a:	4b12      	ldr	r3, [pc, #72]	@ (800e894 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	4b0f      	ldr	r3, [pc, #60]	@ (800e88c <prvAddCurrentTaskToDelayedList+0x94>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	3304      	adds	r3, #4
 800e854:	4619      	mov	r1, r3
 800e856:	4610      	mov	r0, r2
 800e858:	f7fe f85f 	bl	800c91a <vListInsert>
}
 800e85c:	e010      	b.n	800e880 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e85e:	4b0e      	ldr	r3, [pc, #56]	@ (800e898 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	4b0a      	ldr	r3, [pc, #40]	@ (800e88c <prvAddCurrentTaskToDelayedList+0x94>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	3304      	adds	r3, #4
 800e868:	4619      	mov	r1, r3
 800e86a:	4610      	mov	r0, r2
 800e86c:	f7fe f855 	bl	800c91a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e870:	4b0a      	ldr	r3, [pc, #40]	@ (800e89c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	429a      	cmp	r2, r3
 800e878:	d202      	bcs.n	800e880 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e87a:	4a08      	ldr	r2, [pc, #32]	@ (800e89c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	6013      	str	r3, [r2, #0]
}
 800e880:	bf00      	nop
 800e882:	3710      	adds	r7, #16
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	200020ac 	.word	0x200020ac
 800e88c:	20001bd4 	.word	0x20001bd4
 800e890:	20002094 	.word	0x20002094
 800e894:	20002064 	.word	0x20002064
 800e898:	20002060 	.word	0x20002060
 800e89c:	200020c8 	.word	0x200020c8

0800e8a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b08a      	sub	sp, #40	@ 0x28
 800e8a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e8aa:	f000 fb13 	bl	800eed4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e8ae:	4b1d      	ldr	r3, [pc, #116]	@ (800e924 <xTimerCreateTimerTask+0x84>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d021      	beq.n	800e8fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e8be:	1d3a      	adds	r2, r7, #4
 800e8c0:	f107 0108 	add.w	r1, r7, #8
 800e8c4:	f107 030c 	add.w	r3, r7, #12
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fd ffbb 	bl	800c844 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	9202      	str	r2, [sp, #8]
 800e8d6:	9301      	str	r3, [sp, #4]
 800e8d8:	2302      	movs	r3, #2
 800e8da:	9300      	str	r3, [sp, #0]
 800e8dc:	2300      	movs	r3, #0
 800e8de:	460a      	mov	r2, r1
 800e8e0:	4911      	ldr	r1, [pc, #68]	@ (800e928 <xTimerCreateTimerTask+0x88>)
 800e8e2:	4812      	ldr	r0, [pc, #72]	@ (800e92c <xTimerCreateTimerTask+0x8c>)
 800e8e4:	f7fe ff92 	bl	800d80c <xTaskCreateStatic>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	4a11      	ldr	r2, [pc, #68]	@ (800e930 <xTimerCreateTimerTask+0x90>)
 800e8ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e8ee:	4b10      	ldr	r3, [pc, #64]	@ (800e930 <xTimerCreateTimerTask+0x90>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d001      	beq.n	800e8fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10b      	bne.n	800e918 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	613b      	str	r3, [r7, #16]
}
 800e912:	bf00      	nop
 800e914:	bf00      	nop
 800e916:	e7fd      	b.n	800e914 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e918:	697b      	ldr	r3, [r7, #20]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3718      	adds	r7, #24
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	20002104 	.word	0x20002104
 800e928:	08012bd0 	.word	0x08012bd0
 800e92c:	0800ea6d 	.word	0x0800ea6d
 800e930:	20002108 	.word	0x20002108

0800e934 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08a      	sub	sp, #40	@ 0x28
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
 800e940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e942:	2300      	movs	r3, #0
 800e944:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d10b      	bne.n	800e964 <xTimerGenericCommand+0x30>
	__asm volatile
 800e94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e950:	f383 8811 	msr	BASEPRI, r3
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	623b      	str	r3, [r7, #32]
}
 800e95e:	bf00      	nop
 800e960:	bf00      	nop
 800e962:	e7fd      	b.n	800e960 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e964:	4b19      	ldr	r3, [pc, #100]	@ (800e9cc <xTimerGenericCommand+0x98>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d02a      	beq.n	800e9c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	2b05      	cmp	r3, #5
 800e97c:	dc18      	bgt.n	800e9b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e97e:	f7ff fdad 	bl	800e4dc <xTaskGetSchedulerState>
 800e982:	4603      	mov	r3, r0
 800e984:	2b02      	cmp	r3, #2
 800e986:	d109      	bne.n	800e99c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e988:	4b10      	ldr	r3, [pc, #64]	@ (800e9cc <xTimerGenericCommand+0x98>)
 800e98a:	6818      	ldr	r0, [r3, #0]
 800e98c:	f107 0110 	add.w	r1, r7, #16
 800e990:	2300      	movs	r3, #0
 800e992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e994:	f7fe fa22 	bl	800cddc <xQueueGenericSend>
 800e998:	6278      	str	r0, [r7, #36]	@ 0x24
 800e99a:	e012      	b.n	800e9c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e99c:	4b0b      	ldr	r3, [pc, #44]	@ (800e9cc <xTimerGenericCommand+0x98>)
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	f107 0110 	add.w	r1, r7, #16
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f7fe fa18 	bl	800cddc <xQueueGenericSend>
 800e9ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800e9ae:	e008      	b.n	800e9c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e9b0:	4b06      	ldr	r3, [pc, #24]	@ (800e9cc <xTimerGenericCommand+0x98>)
 800e9b2:	6818      	ldr	r0, [r3, #0]
 800e9b4:	f107 0110 	add.w	r1, r7, #16
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	f7fe fb10 	bl	800cfe0 <xQueueGenericSendFromISR>
 800e9c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3728      	adds	r7, #40	@ 0x28
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	20002104 	.word	0x20002104

0800e9d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b088      	sub	sp, #32
 800e9d4:	af02      	add	r7, sp, #8
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9da:	4b23      	ldr	r3, [pc, #140]	@ (800ea68 <prvProcessExpiredTimer+0x98>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fd ffcf 	bl	800c98c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9f4:	f003 0304 	and.w	r3, r3, #4
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d023      	beq.n	800ea44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	699a      	ldr	r2, [r3, #24]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	18d1      	adds	r1, r2, r3
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	6978      	ldr	r0, [r7, #20]
 800ea0a:	f000 f8d5 	bl	800ebb8 <prvInsertTimerInActiveList>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d020      	beq.n	800ea56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea14:	2300      	movs	r3, #0
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	2300      	movs	r3, #0
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	6978      	ldr	r0, [r7, #20]
 800ea20:	f7ff ff88 	bl	800e934 <xTimerGenericCommand>
 800ea24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d114      	bne.n	800ea56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ea2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea30:	f383 8811 	msr	BASEPRI, r3
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	f3bf 8f4f 	dsb	sy
 800ea3c:	60fb      	str	r3, [r7, #12]
}
 800ea3e:	bf00      	nop
 800ea40:	bf00      	nop
 800ea42:	e7fd      	b.n	800ea40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea4a:	f023 0301 	bic.w	r3, r3, #1
 800ea4e:	b2da      	uxtb	r2, r3
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	6a1b      	ldr	r3, [r3, #32]
 800ea5a:	6978      	ldr	r0, [r7, #20]
 800ea5c:	4798      	blx	r3
}
 800ea5e:	bf00      	nop
 800ea60:	3718      	adds	r7, #24
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	200020fc 	.word	0x200020fc

0800ea6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea74:	f107 0308 	add.w	r3, r7, #8
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f000 f859 	bl	800eb30 <prvGetNextExpireTime>
 800ea7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	4619      	mov	r1, r3
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f000 f805 	bl	800ea94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ea8a:	f000 f8d7 	bl	800ec3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea8e:	bf00      	nop
 800ea90:	e7f0      	b.n	800ea74 <prvTimerTask+0x8>
	...

0800ea94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ea9e:	f7ff f919 	bl	800dcd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eaa2:	f107 0308 	add.w	r3, r7, #8
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 f866 	bl	800eb78 <prvSampleTimeNow>
 800eaac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d130      	bne.n	800eb16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d10a      	bne.n	800ead0 <prvProcessTimerOrBlockTask+0x3c>
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d806      	bhi.n	800ead0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eac2:	f7ff f915 	bl	800dcf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eac6:	68f9      	ldr	r1, [r7, #12]
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f7ff ff81 	bl	800e9d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eace:	e024      	b.n	800eb1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d008      	beq.n	800eae8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ead6:	4b13      	ldr	r3, [pc, #76]	@ (800eb24 <prvProcessTimerOrBlockTask+0x90>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <prvProcessTimerOrBlockTask+0x50>
 800eae0:	2301      	movs	r3, #1
 800eae2:	e000      	b.n	800eae6 <prvProcessTimerOrBlockTask+0x52>
 800eae4:	2300      	movs	r3, #0
 800eae6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eae8:	4b0f      	ldr	r3, [pc, #60]	@ (800eb28 <prvProcessTimerOrBlockTask+0x94>)
 800eaea:	6818      	ldr	r0, [r3, #0]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	f7fe fe55 	bl	800d7a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eafa:	f7ff f8f9 	bl	800dcf0 <xTaskResumeAll>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10a      	bne.n	800eb1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb04:	4b09      	ldr	r3, [pc, #36]	@ (800eb2c <prvProcessTimerOrBlockTask+0x98>)
 800eb06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb0a:	601a      	str	r2, [r3, #0]
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	f3bf 8f6f 	isb	sy
}
 800eb14:	e001      	b.n	800eb1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb16:	f7ff f8eb 	bl	800dcf0 <xTaskResumeAll>
}
 800eb1a:	bf00      	nop
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	20002100 	.word	0x20002100
 800eb28:	20002104 	.word	0x20002104
 800eb2c:	e000ed04 	.word	0xe000ed04

0800eb30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb30:	b480      	push	{r7}
 800eb32:	b085      	sub	sp, #20
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb38:	4b0e      	ldr	r3, [pc, #56]	@ (800eb74 <prvGetNextExpireTime+0x44>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d101      	bne.n	800eb46 <prvGetNextExpireTime+0x16>
 800eb42:	2201      	movs	r2, #1
 800eb44:	e000      	b.n	800eb48 <prvGetNextExpireTime+0x18>
 800eb46:	2200      	movs	r2, #0
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d105      	bne.n	800eb60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb54:	4b07      	ldr	r3, [pc, #28]	@ (800eb74 <prvGetNextExpireTime+0x44>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	60fb      	str	r3, [r7, #12]
 800eb5e:	e001      	b.n	800eb64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb60:	2300      	movs	r3, #0
 800eb62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb64:	68fb      	ldr	r3, [r7, #12]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	200020fc 	.word	0x200020fc

0800eb78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eb80:	f7ff f954 	bl	800de2c <xTaskGetTickCount>
 800eb84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eb86:	4b0b      	ldr	r3, [pc, #44]	@ (800ebb4 <prvSampleTimeNow+0x3c>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	68fa      	ldr	r2, [r7, #12]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d205      	bcs.n	800eb9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eb90:	f000 f93a 	bl	800ee08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	e002      	b.n	800eba2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eba2:	4a04      	ldr	r2, [pc, #16]	@ (800ebb4 <prvSampleTimeNow+0x3c>)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eba8:	68fb      	ldr	r3, [r7, #12]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	2000210c 	.word	0x2000210c

0800ebb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
 800ebc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	68ba      	ldr	r2, [r7, #8]
 800ebce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	68fa      	ldr	r2, [r7, #12]
 800ebd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ebd6:	68ba      	ldr	r2, [r7, #8]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d812      	bhi.n	800ec04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	1ad2      	subs	r2, r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d302      	bcc.n	800ebf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ebec:	2301      	movs	r3, #1
 800ebee:	617b      	str	r3, [r7, #20]
 800ebf0:	e01b      	b.n	800ec2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ebf2:	4b10      	ldr	r3, [pc, #64]	@ (800ec34 <prvInsertTimerInActiveList+0x7c>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	f7fd fe8c 	bl	800c91a <vListInsert>
 800ec02:	e012      	b.n	800ec2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d206      	bcs.n	800ec1a <prvInsertTimerInActiveList+0x62>
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d302      	bcc.n	800ec1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec14:	2301      	movs	r3, #1
 800ec16:	617b      	str	r3, [r7, #20]
 800ec18:	e007      	b.n	800ec2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec1a:	4b07      	ldr	r3, [pc, #28]	@ (800ec38 <prvInsertTimerInActiveList+0x80>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3304      	adds	r3, #4
 800ec22:	4619      	mov	r1, r3
 800ec24:	4610      	mov	r0, r2
 800ec26:	f7fd fe78 	bl	800c91a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec2a:	697b      	ldr	r3, [r7, #20]
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3718      	adds	r7, #24
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	20002100 	.word	0x20002100
 800ec38:	200020fc 	.word	0x200020fc

0800ec3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b08e      	sub	sp, #56	@ 0x38
 800ec40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec42:	e0ce      	b.n	800ede2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	da19      	bge.n	800ec7e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec4a:	1d3b      	adds	r3, r7, #4
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10b      	bne.n	800ec6e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ec56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec5a:	f383 8811 	msr	BASEPRI, r3
 800ec5e:	f3bf 8f6f 	isb	sy
 800ec62:	f3bf 8f4f 	dsb	sy
 800ec66:	61fb      	str	r3, [r7, #28]
}
 800ec68:	bf00      	nop
 800ec6a:	bf00      	nop
 800ec6c:	e7fd      	b.n	800ec6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ec6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec74:	6850      	ldr	r0, [r2, #4]
 800ec76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec78:	6892      	ldr	r2, [r2, #8]
 800ec7a:	4611      	mov	r1, r2
 800ec7c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f2c0 80ae 	blt.w	800ede2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ec8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec8c:	695b      	ldr	r3, [r3, #20]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d004      	beq.n	800ec9c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec94:	3304      	adds	r3, #4
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fd fe78 	bl	800c98c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec9c:	463b      	mov	r3, r7
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7ff ff6a 	bl	800eb78 <prvSampleTimeNow>
 800eca4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2b09      	cmp	r3, #9
 800ecaa:	f200 8097 	bhi.w	800eddc <prvProcessReceivedCommands+0x1a0>
 800ecae:	a201      	add	r2, pc, #4	@ (adr r2, 800ecb4 <prvProcessReceivedCommands+0x78>)
 800ecb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb4:	0800ecdd 	.word	0x0800ecdd
 800ecb8:	0800ecdd 	.word	0x0800ecdd
 800ecbc:	0800ecdd 	.word	0x0800ecdd
 800ecc0:	0800ed53 	.word	0x0800ed53
 800ecc4:	0800ed67 	.word	0x0800ed67
 800ecc8:	0800edb3 	.word	0x0800edb3
 800eccc:	0800ecdd 	.word	0x0800ecdd
 800ecd0:	0800ecdd 	.word	0x0800ecdd
 800ecd4:	0800ed53 	.word	0x0800ed53
 800ecd8:	0800ed67 	.word	0x0800ed67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ecdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ece2:	f043 0301 	orr.w	r3, r3, #1
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	18d1      	adds	r1, r2, r3
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecfc:	f7ff ff5c 	bl	800ebb8 <prvInsertTimerInActiveList>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d06c      	beq.n	800ede0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed14:	f003 0304 	and.w	r3, r3, #4
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d061      	beq.n	800ede0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed20:	699b      	ldr	r3, [r3, #24]
 800ed22:	441a      	add	r2, r3
 800ed24:	2300      	movs	r3, #0
 800ed26:	9300      	str	r3, [sp, #0]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed2e:	f7ff fe01 	bl	800e934 <xTimerGenericCommand>
 800ed32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d152      	bne.n	800ede0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ed3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
 800ed4a:	61bb      	str	r3, [r7, #24]
}
 800ed4c:	bf00      	nop
 800ed4e:	bf00      	nop
 800ed50:	e7fd      	b.n	800ed4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed58:	f023 0301 	bic.w	r3, r3, #1
 800ed5c:	b2da      	uxtb	r2, r3
 800ed5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ed64:	e03d      	b.n	800ede2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed6c:	f043 0301 	orr.w	r3, r3, #1
 800ed70:	b2da      	uxtb	r2, r3
 800ed72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ed7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed80:	699b      	ldr	r3, [r3, #24]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10b      	bne.n	800ed9e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ed86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	617b      	str	r3, [r7, #20]
}
 800ed98:	bf00      	nop
 800ed9a:	bf00      	nop
 800ed9c:	e7fd      	b.n	800ed9a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ed9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda0:	699a      	ldr	r2, [r3, #24]
 800eda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda4:	18d1      	adds	r1, r2, r3
 800eda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edac:	f7ff ff04 	bl	800ebb8 <prvInsertTimerInActiveList>
					break;
 800edb0:	e017      	b.n	800ede2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800edb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edb8:	f003 0302 	and.w	r3, r3, #2
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d103      	bne.n	800edc8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800edc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edc2:	f000 fbe9 	bl	800f598 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800edc6:	e00c      	b.n	800ede2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edce:	f023 0301 	bic.w	r3, r3, #1
 800edd2:	b2da      	uxtb	r2, r3
 800edd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800edda:	e002      	b.n	800ede2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800eddc:	bf00      	nop
 800edde:	e000      	b.n	800ede2 <prvProcessReceivedCommands+0x1a6>
					break;
 800ede0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ede2:	4b08      	ldr	r3, [pc, #32]	@ (800ee04 <prvProcessReceivedCommands+0x1c8>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	1d39      	adds	r1, r7, #4
 800ede8:	2200      	movs	r2, #0
 800edea:	4618      	mov	r0, r3
 800edec:	f7fe f996 	bl	800d11c <xQueueReceive>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f47f af26 	bne.w	800ec44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800edf8:	bf00      	nop
 800edfa:	bf00      	nop
 800edfc:	3730      	adds	r7, #48	@ 0x30
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	20002104 	.word	0x20002104

0800ee08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b088      	sub	sp, #32
 800ee0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee0e:	e049      	b.n	800eea4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee10:	4b2e      	ldr	r3, [pc, #184]	@ (800eecc <prvSwitchTimerLists+0xc4>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee1a:	4b2c      	ldr	r3, [pc, #176]	@ (800eecc <prvSwitchTimerLists+0xc4>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	3304      	adds	r3, #4
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fd fdaf 	bl	800c98c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6a1b      	ldr	r3, [r3, #32]
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee3c:	f003 0304 	and.w	r3, r3, #4
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d02f      	beq.n	800eea4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	699b      	ldr	r3, [r3, #24]
 800ee48:	693a      	ldr	r2, [r7, #16]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d90e      	bls.n	800ee74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee62:	4b1a      	ldr	r3, [pc, #104]	@ (800eecc <prvSwitchTimerLists+0xc4>)
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	3304      	adds	r3, #4
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	f7fd fd54 	bl	800c91a <vListInsert>
 800ee72:	e017      	b.n	800eea4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee74:	2300      	movs	r3, #0
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	2300      	movs	r3, #0
 800ee7a:	693a      	ldr	r2, [r7, #16]
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f7ff fd58 	bl	800e934 <xTimerGenericCommand>
 800ee84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10b      	bne.n	800eea4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ee8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	603b      	str	r3, [r7, #0]
}
 800ee9e:	bf00      	nop
 800eea0:	bf00      	nop
 800eea2:	e7fd      	b.n	800eea0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eea4:	4b09      	ldr	r3, [pc, #36]	@ (800eecc <prvSwitchTimerLists+0xc4>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d1b0      	bne.n	800ee10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eeae:	4b07      	ldr	r3, [pc, #28]	@ (800eecc <prvSwitchTimerLists+0xc4>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eeb4:	4b06      	ldr	r3, [pc, #24]	@ (800eed0 <prvSwitchTimerLists+0xc8>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a04      	ldr	r2, [pc, #16]	@ (800eecc <prvSwitchTimerLists+0xc4>)
 800eeba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eebc:	4a04      	ldr	r2, [pc, #16]	@ (800eed0 <prvSwitchTimerLists+0xc8>)
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	6013      	str	r3, [r2, #0]
}
 800eec2:	bf00      	nop
 800eec4:	3718      	adds	r7, #24
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	200020fc 	.word	0x200020fc
 800eed0:	20002100 	.word	0x20002100

0800eed4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eeda:	f000 f96d 	bl	800f1b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eede:	4b15      	ldr	r3, [pc, #84]	@ (800ef34 <prvCheckForValidListAndQueue+0x60>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d120      	bne.n	800ef28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eee6:	4814      	ldr	r0, [pc, #80]	@ (800ef38 <prvCheckForValidListAndQueue+0x64>)
 800eee8:	f7fd fcc6 	bl	800c878 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eeec:	4813      	ldr	r0, [pc, #76]	@ (800ef3c <prvCheckForValidListAndQueue+0x68>)
 800eeee:	f7fd fcc3 	bl	800c878 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eef2:	4b13      	ldr	r3, [pc, #76]	@ (800ef40 <prvCheckForValidListAndQueue+0x6c>)
 800eef4:	4a10      	ldr	r2, [pc, #64]	@ (800ef38 <prvCheckForValidListAndQueue+0x64>)
 800eef6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eef8:	4b12      	ldr	r3, [pc, #72]	@ (800ef44 <prvCheckForValidListAndQueue+0x70>)
 800eefa:	4a10      	ldr	r2, [pc, #64]	@ (800ef3c <prvCheckForValidListAndQueue+0x68>)
 800eefc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eefe:	2300      	movs	r3, #0
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	4b11      	ldr	r3, [pc, #68]	@ (800ef48 <prvCheckForValidListAndQueue+0x74>)
 800ef04:	4a11      	ldr	r2, [pc, #68]	@ (800ef4c <prvCheckForValidListAndQueue+0x78>)
 800ef06:	2110      	movs	r1, #16
 800ef08:	200a      	movs	r0, #10
 800ef0a:	f7fd fdd3 	bl	800cab4 <xQueueGenericCreateStatic>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	4a08      	ldr	r2, [pc, #32]	@ (800ef34 <prvCheckForValidListAndQueue+0x60>)
 800ef12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef14:	4b07      	ldr	r3, [pc, #28]	@ (800ef34 <prvCheckForValidListAndQueue+0x60>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d005      	beq.n	800ef28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef1c:	4b05      	ldr	r3, [pc, #20]	@ (800ef34 <prvCheckForValidListAndQueue+0x60>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	490b      	ldr	r1, [pc, #44]	@ (800ef50 <prvCheckForValidListAndQueue+0x7c>)
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe fc14 	bl	800d750 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef28:	f000 f978 	bl	800f21c <vPortExitCritical>
}
 800ef2c:	bf00      	nop
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	20002104 	.word	0x20002104
 800ef38:	200020d4 	.word	0x200020d4
 800ef3c:	200020e8 	.word	0x200020e8
 800ef40:	200020fc 	.word	0x200020fc
 800ef44:	20002100 	.word	0x20002100
 800ef48:	200021b0 	.word	0x200021b0
 800ef4c:	20002110 	.word	0x20002110
 800ef50:	08012bd8 	.word	0x08012bd8

0800ef54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef54:	b480      	push	{r7}
 800ef56:	b085      	sub	sp, #20
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	3b04      	subs	r3, #4
 800ef64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ef6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	3b04      	subs	r3, #4
 800ef72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	f023 0201 	bic.w	r2, r3, #1
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	3b04      	subs	r3, #4
 800ef82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef84:	4a0c      	ldr	r2, [pc, #48]	@ (800efb8 <pxPortInitialiseStack+0x64>)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	3b14      	subs	r3, #20
 800ef8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	3b04      	subs	r3, #4
 800ef9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f06f 0202 	mvn.w	r2, #2
 800efa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	3b20      	subs	r3, #32
 800efa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800efaa:	68fb      	ldr	r3, [r7, #12]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3714      	adds	r7, #20
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr
 800efb8:	0800efbd 	.word	0x0800efbd

0800efbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800efbc:	b480      	push	{r7}
 800efbe:	b085      	sub	sp, #20
 800efc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800efc2:	2300      	movs	r3, #0
 800efc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800efc6:	4b13      	ldr	r3, [pc, #76]	@ (800f014 <prvTaskExitError+0x58>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efce:	d00b      	beq.n	800efe8 <prvTaskExitError+0x2c>
	__asm volatile
 800efd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	60fb      	str	r3, [r7, #12]
}
 800efe2:	bf00      	nop
 800efe4:	bf00      	nop
 800efe6:	e7fd      	b.n	800efe4 <prvTaskExitError+0x28>
	__asm volatile
 800efe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efec:	f383 8811 	msr	BASEPRI, r3
 800eff0:	f3bf 8f6f 	isb	sy
 800eff4:	f3bf 8f4f 	dsb	sy
 800eff8:	60bb      	str	r3, [r7, #8]
}
 800effa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800effc:	bf00      	nop
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d0fc      	beq.n	800effe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f004:	bf00      	nop
 800f006:	bf00      	nop
 800f008:	3714      	adds	r7, #20
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	20000078 	.word	0x20000078
	...

0800f020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f020:	4b07      	ldr	r3, [pc, #28]	@ (800f040 <pxCurrentTCBConst2>)
 800f022:	6819      	ldr	r1, [r3, #0]
 800f024:	6808      	ldr	r0, [r1, #0]
 800f026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02a:	f380 8809 	msr	PSP, r0
 800f02e:	f3bf 8f6f 	isb	sy
 800f032:	f04f 0000 	mov.w	r0, #0
 800f036:	f380 8811 	msr	BASEPRI, r0
 800f03a:	4770      	bx	lr
 800f03c:	f3af 8000 	nop.w

0800f040 <pxCurrentTCBConst2>:
 800f040:	20001bd4 	.word	0x20001bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f044:	bf00      	nop
 800f046:	bf00      	nop

0800f048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f048:	4808      	ldr	r0, [pc, #32]	@ (800f06c <prvPortStartFirstTask+0x24>)
 800f04a:	6800      	ldr	r0, [r0, #0]
 800f04c:	6800      	ldr	r0, [r0, #0]
 800f04e:	f380 8808 	msr	MSP, r0
 800f052:	f04f 0000 	mov.w	r0, #0
 800f056:	f380 8814 	msr	CONTROL, r0
 800f05a:	b662      	cpsie	i
 800f05c:	b661      	cpsie	f
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	f3bf 8f6f 	isb	sy
 800f066:	df00      	svc	0
 800f068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f06a:	bf00      	nop
 800f06c:	e000ed08 	.word	0xe000ed08

0800f070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f076:	4b47      	ldr	r3, [pc, #284]	@ (800f194 <xPortStartScheduler+0x124>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a47      	ldr	r2, [pc, #284]	@ (800f198 <xPortStartScheduler+0x128>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d10b      	bne.n	800f098 <xPortStartScheduler+0x28>
	__asm volatile
 800f080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	60fb      	str	r3, [r7, #12]
}
 800f092:	bf00      	nop
 800f094:	bf00      	nop
 800f096:	e7fd      	b.n	800f094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f098:	4b3e      	ldr	r3, [pc, #248]	@ (800f194 <xPortStartScheduler+0x124>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a3f      	ldr	r2, [pc, #252]	@ (800f19c <xPortStartScheduler+0x12c>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d10b      	bne.n	800f0ba <xPortStartScheduler+0x4a>
	__asm volatile
 800f0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	613b      	str	r3, [r7, #16]
}
 800f0b4:	bf00      	nop
 800f0b6:	bf00      	nop
 800f0b8:	e7fd      	b.n	800f0b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0ba:	4b39      	ldr	r3, [pc, #228]	@ (800f1a0 <xPortStartScheduler+0x130>)
 800f0bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	22ff      	movs	r2, #255	@ 0xff
 800f0ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0d4:	78fb      	ldrb	r3, [r7, #3]
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f0dc:	b2da      	uxtb	r2, r3
 800f0de:	4b31      	ldr	r3, [pc, #196]	@ (800f1a4 <xPortStartScheduler+0x134>)
 800f0e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f0e2:	4b31      	ldr	r3, [pc, #196]	@ (800f1a8 <xPortStartScheduler+0x138>)
 800f0e4:	2207      	movs	r2, #7
 800f0e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0e8:	e009      	b.n	800f0fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f0ea:	4b2f      	ldr	r3, [pc, #188]	@ (800f1a8 <xPortStartScheduler+0x138>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	4a2d      	ldr	r2, [pc, #180]	@ (800f1a8 <xPortStartScheduler+0x138>)
 800f0f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f0f4:	78fb      	ldrb	r3, [r7, #3]
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	005b      	lsls	r3, r3, #1
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0fe:	78fb      	ldrb	r3, [r7, #3]
 800f100:	b2db      	uxtb	r3, r3
 800f102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f106:	2b80      	cmp	r3, #128	@ 0x80
 800f108:	d0ef      	beq.n	800f0ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f10a:	4b27      	ldr	r3, [pc, #156]	@ (800f1a8 <xPortStartScheduler+0x138>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f1c3 0307 	rsb	r3, r3, #7
 800f112:	2b04      	cmp	r3, #4
 800f114:	d00b      	beq.n	800f12e <xPortStartScheduler+0xbe>
	__asm volatile
 800f116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	60bb      	str	r3, [r7, #8]
}
 800f128:	bf00      	nop
 800f12a:	bf00      	nop
 800f12c:	e7fd      	b.n	800f12a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f12e:	4b1e      	ldr	r3, [pc, #120]	@ (800f1a8 <xPortStartScheduler+0x138>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	021b      	lsls	r3, r3, #8
 800f134:	4a1c      	ldr	r2, [pc, #112]	@ (800f1a8 <xPortStartScheduler+0x138>)
 800f136:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f138:	4b1b      	ldr	r3, [pc, #108]	@ (800f1a8 <xPortStartScheduler+0x138>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f140:	4a19      	ldr	r2, [pc, #100]	@ (800f1a8 <xPortStartScheduler+0x138>)
 800f142:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	b2da      	uxtb	r2, r3
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f14c:	4b17      	ldr	r3, [pc, #92]	@ (800f1ac <xPortStartScheduler+0x13c>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4a16      	ldr	r2, [pc, #88]	@ (800f1ac <xPortStartScheduler+0x13c>)
 800f152:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f156:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f158:	4b14      	ldr	r3, [pc, #80]	@ (800f1ac <xPortStartScheduler+0x13c>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4a13      	ldr	r2, [pc, #76]	@ (800f1ac <xPortStartScheduler+0x13c>)
 800f15e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f162:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f164:	f000 f8da 	bl	800f31c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f168:	4b11      	ldr	r3, [pc, #68]	@ (800f1b0 <xPortStartScheduler+0x140>)
 800f16a:	2200      	movs	r2, #0
 800f16c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f16e:	f000 f8f9 	bl	800f364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f172:	4b10      	ldr	r3, [pc, #64]	@ (800f1b4 <xPortStartScheduler+0x144>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a0f      	ldr	r2, [pc, #60]	@ (800f1b4 <xPortStartScheduler+0x144>)
 800f178:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f17c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f17e:	f7ff ff63 	bl	800f048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f182:	f7fe ff1d 	bl	800dfc0 <vTaskSwitchContext>
	prvTaskExitError();
 800f186:	f7ff ff19 	bl	800efbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f18a:	2300      	movs	r3, #0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	e000ed00 	.word	0xe000ed00
 800f198:	410fc271 	.word	0x410fc271
 800f19c:	410fc270 	.word	0x410fc270
 800f1a0:	e000e400 	.word	0xe000e400
 800f1a4:	20002200 	.word	0x20002200
 800f1a8:	20002204 	.word	0x20002204
 800f1ac:	e000ed20 	.word	0xe000ed20
 800f1b0:	20000078 	.word	0x20000078
 800f1b4:	e000ef34 	.word	0xe000ef34

0800f1b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c2:	f383 8811 	msr	BASEPRI, r3
 800f1c6:	f3bf 8f6f 	isb	sy
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	607b      	str	r3, [r7, #4]
}
 800f1d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f1d2:	4b10      	ldr	r3, [pc, #64]	@ (800f214 <vPortEnterCritical+0x5c>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	4a0e      	ldr	r2, [pc, #56]	@ (800f214 <vPortEnterCritical+0x5c>)
 800f1da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f1dc:	4b0d      	ldr	r3, [pc, #52]	@ (800f214 <vPortEnterCritical+0x5c>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d110      	bne.n	800f206 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f1e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f218 <vPortEnterCritical+0x60>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00b      	beq.n	800f206 <vPortEnterCritical+0x4e>
	__asm volatile
 800f1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f2:	f383 8811 	msr	BASEPRI, r3
 800f1f6:	f3bf 8f6f 	isb	sy
 800f1fa:	f3bf 8f4f 	dsb	sy
 800f1fe:	603b      	str	r3, [r7, #0]
}
 800f200:	bf00      	nop
 800f202:	bf00      	nop
 800f204:	e7fd      	b.n	800f202 <vPortEnterCritical+0x4a>
	}
}
 800f206:	bf00      	nop
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr
 800f212:	bf00      	nop
 800f214:	20000078 	.word	0x20000078
 800f218:	e000ed04 	.word	0xe000ed04

0800f21c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f222:	4b12      	ldr	r3, [pc, #72]	@ (800f26c <vPortExitCritical+0x50>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d10b      	bne.n	800f242 <vPortExitCritical+0x26>
	__asm volatile
 800f22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f22e:	f383 8811 	msr	BASEPRI, r3
 800f232:	f3bf 8f6f 	isb	sy
 800f236:	f3bf 8f4f 	dsb	sy
 800f23a:	607b      	str	r3, [r7, #4]
}
 800f23c:	bf00      	nop
 800f23e:	bf00      	nop
 800f240:	e7fd      	b.n	800f23e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f242:	4b0a      	ldr	r3, [pc, #40]	@ (800f26c <vPortExitCritical+0x50>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	3b01      	subs	r3, #1
 800f248:	4a08      	ldr	r2, [pc, #32]	@ (800f26c <vPortExitCritical+0x50>)
 800f24a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f24c:	4b07      	ldr	r3, [pc, #28]	@ (800f26c <vPortExitCritical+0x50>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d105      	bne.n	800f260 <vPortExitCritical+0x44>
 800f254:	2300      	movs	r3, #0
 800f256:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	f383 8811 	msr	BASEPRI, r3
}
 800f25e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f260:	bf00      	nop
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	20000078 	.word	0x20000078

0800f270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f270:	f3ef 8009 	mrs	r0, PSP
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	4b15      	ldr	r3, [pc, #84]	@ (800f2d0 <pxCurrentTCBConst>)
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	f01e 0f10 	tst.w	lr, #16
 800f280:	bf08      	it	eq
 800f282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28a:	6010      	str	r0, [r2, #0]
 800f28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f290:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f294:	f380 8811 	msr	BASEPRI, r0
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	f3bf 8f6f 	isb	sy
 800f2a0:	f7fe fe8e 	bl	800dfc0 <vTaskSwitchContext>
 800f2a4:	f04f 0000 	mov.w	r0, #0
 800f2a8:	f380 8811 	msr	BASEPRI, r0
 800f2ac:	bc09      	pop	{r0, r3}
 800f2ae:	6819      	ldr	r1, [r3, #0]
 800f2b0:	6808      	ldr	r0, [r1, #0]
 800f2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b6:	f01e 0f10 	tst.w	lr, #16
 800f2ba:	bf08      	it	eq
 800f2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2c0:	f380 8809 	msr	PSP, r0
 800f2c4:	f3bf 8f6f 	isb	sy
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	f3af 8000 	nop.w

0800f2d0 <pxCurrentTCBConst>:
 800f2d0:	20001bd4 	.word	0x20001bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f2d4:	bf00      	nop
 800f2d6:	bf00      	nop

0800f2d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	607b      	str	r3, [r7, #4]
}
 800f2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f2f2:	f7fe fdab 	bl	800de4c <xTaskIncrementTick>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d003      	beq.n	800f304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f2fc:	4b06      	ldr	r3, [pc, #24]	@ (800f318 <xPortSysTickHandler+0x40>)
 800f2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f302:	601a      	str	r2, [r3, #0]
 800f304:	2300      	movs	r3, #0
 800f306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	f383 8811 	msr	BASEPRI, r3
}
 800f30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f310:	bf00      	nop
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	e000ed04 	.word	0xe000ed04

0800f31c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f31c:	b480      	push	{r7}
 800f31e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f320:	4b0b      	ldr	r3, [pc, #44]	@ (800f350 <vPortSetupTimerInterrupt+0x34>)
 800f322:	2200      	movs	r2, #0
 800f324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f326:	4b0b      	ldr	r3, [pc, #44]	@ (800f354 <vPortSetupTimerInterrupt+0x38>)
 800f328:	2200      	movs	r2, #0
 800f32a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f32c:	4b0a      	ldr	r3, [pc, #40]	@ (800f358 <vPortSetupTimerInterrupt+0x3c>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a0a      	ldr	r2, [pc, #40]	@ (800f35c <vPortSetupTimerInterrupt+0x40>)
 800f332:	fba2 2303 	umull	r2, r3, r2, r3
 800f336:	099b      	lsrs	r3, r3, #6
 800f338:	4a09      	ldr	r2, [pc, #36]	@ (800f360 <vPortSetupTimerInterrupt+0x44>)
 800f33a:	3b01      	subs	r3, #1
 800f33c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f33e:	4b04      	ldr	r3, [pc, #16]	@ (800f350 <vPortSetupTimerInterrupt+0x34>)
 800f340:	2207      	movs	r2, #7
 800f342:	601a      	str	r2, [r3, #0]
}
 800f344:	bf00      	nop
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	e000e010 	.word	0xe000e010
 800f354:	e000e018 	.word	0xe000e018
 800f358:	2000000c 	.word	0x2000000c
 800f35c:	10624dd3 	.word	0x10624dd3
 800f360:	e000e014 	.word	0xe000e014

0800f364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f364:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f374 <vPortEnableVFP+0x10>
 800f368:	6801      	ldr	r1, [r0, #0]
 800f36a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f36e:	6001      	str	r1, [r0, #0]
 800f370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f372:	bf00      	nop
 800f374:	e000ed88 	.word	0xe000ed88

0800f378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f378:	b480      	push	{r7}
 800f37a:	b085      	sub	sp, #20
 800f37c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f37e:	f3ef 8305 	mrs	r3, IPSR
 800f382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2b0f      	cmp	r3, #15
 800f388:	d915      	bls.n	800f3b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f38a:	4a18      	ldr	r2, [pc, #96]	@ (800f3ec <vPortValidateInterruptPriority+0x74>)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	4413      	add	r3, r2
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f394:	4b16      	ldr	r3, [pc, #88]	@ (800f3f0 <vPortValidateInterruptPriority+0x78>)
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	7afa      	ldrb	r2, [r7, #11]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d20b      	bcs.n	800f3b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a2:	f383 8811 	msr	BASEPRI, r3
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	607b      	str	r3, [r7, #4]
}
 800f3b0:	bf00      	nop
 800f3b2:	bf00      	nop
 800f3b4:	e7fd      	b.n	800f3b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3b6:	4b0f      	ldr	r3, [pc, #60]	@ (800f3f4 <vPortValidateInterruptPriority+0x7c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f3be:	4b0e      	ldr	r3, [pc, #56]	@ (800f3f8 <vPortValidateInterruptPriority+0x80>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d90b      	bls.n	800f3de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ca:	f383 8811 	msr	BASEPRI, r3
 800f3ce:	f3bf 8f6f 	isb	sy
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	603b      	str	r3, [r7, #0]
}
 800f3d8:	bf00      	nop
 800f3da:	bf00      	nop
 800f3dc:	e7fd      	b.n	800f3da <vPortValidateInterruptPriority+0x62>
	}
 800f3de:	bf00      	nop
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	e000e3f0 	.word	0xe000e3f0
 800f3f0:	20002200 	.word	0x20002200
 800f3f4:	e000ed0c 	.word	0xe000ed0c
 800f3f8:	20002204 	.word	0x20002204

0800f3fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08a      	sub	sp, #40	@ 0x28
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f404:	2300      	movs	r3, #0
 800f406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f408:	f7fe fc64 	bl	800dcd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f40c:	4b5c      	ldr	r3, [pc, #368]	@ (800f580 <pvPortMalloc+0x184>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d101      	bne.n	800f418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f414:	f000 f924 	bl	800f660 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f418:	4b5a      	ldr	r3, [pc, #360]	@ (800f584 <pvPortMalloc+0x188>)
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4013      	ands	r3, r2
 800f420:	2b00      	cmp	r3, #0
 800f422:	f040 8095 	bne.w	800f550 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d01e      	beq.n	800f46a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f42c:	2208      	movs	r2, #8
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4413      	add	r3, r2
 800f432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f003 0307 	and.w	r3, r3, #7
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d015      	beq.n	800f46a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f023 0307 	bic.w	r3, r3, #7
 800f444:	3308      	adds	r3, #8
 800f446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f003 0307 	and.w	r3, r3, #7
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00b      	beq.n	800f46a <pvPortMalloc+0x6e>
	__asm volatile
 800f452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f456:	f383 8811 	msr	BASEPRI, r3
 800f45a:	f3bf 8f6f 	isb	sy
 800f45e:	f3bf 8f4f 	dsb	sy
 800f462:	617b      	str	r3, [r7, #20]
}
 800f464:	bf00      	nop
 800f466:	bf00      	nop
 800f468:	e7fd      	b.n	800f466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d06f      	beq.n	800f550 <pvPortMalloc+0x154>
 800f470:	4b45      	ldr	r3, [pc, #276]	@ (800f588 <pvPortMalloc+0x18c>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	429a      	cmp	r2, r3
 800f478:	d86a      	bhi.n	800f550 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f47a:	4b44      	ldr	r3, [pc, #272]	@ (800f58c <pvPortMalloc+0x190>)
 800f47c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f47e:	4b43      	ldr	r3, [pc, #268]	@ (800f58c <pvPortMalloc+0x190>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f484:	e004      	b.n	800f490 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f488:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	429a      	cmp	r2, r3
 800f498:	d903      	bls.n	800f4a2 <pvPortMalloc+0xa6>
 800f49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1f1      	bne.n	800f486 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4a2:	4b37      	ldr	r3, [pc, #220]	@ (800f580 <pvPortMalloc+0x184>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d051      	beq.n	800f550 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4ac:	6a3b      	ldr	r3, [r7, #32]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2208      	movs	r2, #8
 800f4b2:	4413      	add	r3, r2
 800f4b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	6a3b      	ldr	r3, [r7, #32]
 800f4bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c0:	685a      	ldr	r2, [r3, #4]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	1ad2      	subs	r2, r2, r3
 800f4c6:	2308      	movs	r3, #8
 800f4c8:	005b      	lsls	r3, r3, #1
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d920      	bls.n	800f510 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	f003 0307 	and.w	r3, r3, #7
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00b      	beq.n	800f4f8 <pvPortMalloc+0xfc>
	__asm volatile
 800f4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e4:	f383 8811 	msr	BASEPRI, r3
 800f4e8:	f3bf 8f6f 	isb	sy
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	613b      	str	r3, [r7, #16]
}
 800f4f2:	bf00      	nop
 800f4f4:	bf00      	nop
 800f4f6:	e7fd      	b.n	800f4f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4fa:	685a      	ldr	r2, [r3, #4]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	1ad2      	subs	r2, r2, r3
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f50a:	69b8      	ldr	r0, [r7, #24]
 800f50c:	f000 f90a 	bl	800f724 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f510:	4b1d      	ldr	r3, [pc, #116]	@ (800f588 <pvPortMalloc+0x18c>)
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	1ad3      	subs	r3, r2, r3
 800f51a:	4a1b      	ldr	r2, [pc, #108]	@ (800f588 <pvPortMalloc+0x18c>)
 800f51c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f51e:	4b1a      	ldr	r3, [pc, #104]	@ (800f588 <pvPortMalloc+0x18c>)
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	4b1b      	ldr	r3, [pc, #108]	@ (800f590 <pvPortMalloc+0x194>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	429a      	cmp	r2, r3
 800f528:	d203      	bcs.n	800f532 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f52a:	4b17      	ldr	r3, [pc, #92]	@ (800f588 <pvPortMalloc+0x18c>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	4a18      	ldr	r2, [pc, #96]	@ (800f590 <pvPortMalloc+0x194>)
 800f530:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f534:	685a      	ldr	r2, [r3, #4]
 800f536:	4b13      	ldr	r3, [pc, #76]	@ (800f584 <pvPortMalloc+0x188>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	431a      	orrs	r2, r3
 800f53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f53e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f542:	2200      	movs	r2, #0
 800f544:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f546:	4b13      	ldr	r3, [pc, #76]	@ (800f594 <pvPortMalloc+0x198>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	3301      	adds	r3, #1
 800f54c:	4a11      	ldr	r2, [pc, #68]	@ (800f594 <pvPortMalloc+0x198>)
 800f54e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f550:	f7fe fbce 	bl	800dcf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	f003 0307 	and.w	r3, r3, #7
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00b      	beq.n	800f576 <pvPortMalloc+0x17a>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	60fb      	str	r3, [r7, #12]
}
 800f570:	bf00      	nop
 800f572:	bf00      	nop
 800f574:	e7fd      	b.n	800f572 <pvPortMalloc+0x176>
	return pvReturn;
 800f576:	69fb      	ldr	r3, [r7, #28]
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3728      	adds	r7, #40	@ 0x28
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	20005e10 	.word	0x20005e10
 800f584:	20005e24 	.word	0x20005e24
 800f588:	20005e14 	.word	0x20005e14
 800f58c:	20005e08 	.word	0x20005e08
 800f590:	20005e18 	.word	0x20005e18
 800f594:	20005e1c 	.word	0x20005e1c

0800f598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d04f      	beq.n	800f64a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5aa:	2308      	movs	r3, #8
 800f5ac:	425b      	negs	r3, r3
 800f5ae:	697a      	ldr	r2, [r7, #20]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	685a      	ldr	r2, [r3, #4]
 800f5bc:	4b25      	ldr	r3, [pc, #148]	@ (800f654 <vPortFree+0xbc>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4013      	ands	r3, r2
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10b      	bne.n	800f5de <vPortFree+0x46>
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	60fb      	str	r3, [r7, #12]
}
 800f5d8:	bf00      	nop
 800f5da:	bf00      	nop
 800f5dc:	e7fd      	b.n	800f5da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00b      	beq.n	800f5fe <vPortFree+0x66>
	__asm volatile
 800f5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ea:	f383 8811 	msr	BASEPRI, r3
 800f5ee:	f3bf 8f6f 	isb	sy
 800f5f2:	f3bf 8f4f 	dsb	sy
 800f5f6:	60bb      	str	r3, [r7, #8]
}
 800f5f8:	bf00      	nop
 800f5fa:	bf00      	nop
 800f5fc:	e7fd      	b.n	800f5fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	685a      	ldr	r2, [r3, #4]
 800f602:	4b14      	ldr	r3, [pc, #80]	@ (800f654 <vPortFree+0xbc>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4013      	ands	r3, r2
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d01e      	beq.n	800f64a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d11a      	bne.n	800f64a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	685a      	ldr	r2, [r3, #4]
 800f618:	4b0e      	ldr	r3, [pc, #56]	@ (800f654 <vPortFree+0xbc>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	43db      	mvns	r3, r3
 800f61e:	401a      	ands	r2, r3
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f624:	f7fe fb56 	bl	800dcd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	685a      	ldr	r2, [r3, #4]
 800f62c:	4b0a      	ldr	r3, [pc, #40]	@ (800f658 <vPortFree+0xc0>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4413      	add	r3, r2
 800f632:	4a09      	ldr	r2, [pc, #36]	@ (800f658 <vPortFree+0xc0>)
 800f634:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f636:	6938      	ldr	r0, [r7, #16]
 800f638:	f000 f874 	bl	800f724 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f63c:	4b07      	ldr	r3, [pc, #28]	@ (800f65c <vPortFree+0xc4>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	3301      	adds	r3, #1
 800f642:	4a06      	ldr	r2, [pc, #24]	@ (800f65c <vPortFree+0xc4>)
 800f644:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f646:	f7fe fb53 	bl	800dcf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f64a:	bf00      	nop
 800f64c:	3718      	adds	r7, #24
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	20005e24 	.word	0x20005e24
 800f658:	20005e14 	.word	0x20005e14
 800f65c:	20005e20 	.word	0x20005e20

0800f660 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f660:	b480      	push	{r7}
 800f662:	b085      	sub	sp, #20
 800f664:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f666:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f66a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f66c:	4b27      	ldr	r3, [pc, #156]	@ (800f70c <prvHeapInit+0xac>)
 800f66e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f003 0307 	and.w	r3, r3, #7
 800f676:	2b00      	cmp	r3, #0
 800f678:	d00c      	beq.n	800f694 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	3307      	adds	r3, #7
 800f67e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f023 0307 	bic.w	r3, r3, #7
 800f686:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f688:	68ba      	ldr	r2, [r7, #8]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	4a1f      	ldr	r2, [pc, #124]	@ (800f70c <prvHeapInit+0xac>)
 800f690:	4413      	add	r3, r2
 800f692:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f698:	4a1d      	ldr	r2, [pc, #116]	@ (800f710 <prvHeapInit+0xb0>)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f69e:	4b1c      	ldr	r3, [pc, #112]	@ (800f710 <prvHeapInit+0xb0>)
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6ac:	2208      	movs	r2, #8
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	1a9b      	subs	r3, r3, r2
 800f6b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f023 0307 	bic.w	r3, r3, #7
 800f6ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	4a15      	ldr	r2, [pc, #84]	@ (800f714 <prvHeapInit+0xb4>)
 800f6c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6c2:	4b14      	ldr	r3, [pc, #80]	@ (800f714 <prvHeapInit+0xb4>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6ca:	4b12      	ldr	r3, [pc, #72]	@ (800f714 <prvHeapInit+0xb4>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	1ad2      	subs	r2, r2, r3
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800f714 <prvHeapInit+0xb4>)
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	4a0a      	ldr	r2, [pc, #40]	@ (800f718 <prvHeapInit+0xb8>)
 800f6ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	4a09      	ldr	r2, [pc, #36]	@ (800f71c <prvHeapInit+0xbc>)
 800f6f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6f8:	4b09      	ldr	r3, [pc, #36]	@ (800f720 <prvHeapInit+0xc0>)
 800f6fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f6fe:	601a      	str	r2, [r3, #0]
}
 800f700:	bf00      	nop
 800f702:	3714      	adds	r7, #20
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	20002208 	.word	0x20002208
 800f710:	20005e08 	.word	0x20005e08
 800f714:	20005e10 	.word	0x20005e10
 800f718:	20005e18 	.word	0x20005e18
 800f71c:	20005e14 	.word	0x20005e14
 800f720:	20005e24 	.word	0x20005e24

0800f724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f72c:	4b28      	ldr	r3, [pc, #160]	@ (800f7d0 <prvInsertBlockIntoFreeList+0xac>)
 800f72e:	60fb      	str	r3, [r7, #12]
 800f730:	e002      	b.n	800f738 <prvInsertBlockIntoFreeList+0x14>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	60fb      	str	r3, [r7, #12]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d8f7      	bhi.n	800f732 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	68ba      	ldr	r2, [r7, #8]
 800f74c:	4413      	add	r3, r2
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	429a      	cmp	r2, r3
 800f752:	d108      	bne.n	800f766 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	685a      	ldr	r2, [r3, #4]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	441a      	add	r2, r3
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	441a      	add	r2, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	429a      	cmp	r2, r3
 800f778:	d118      	bne.n	800f7ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	4b15      	ldr	r3, [pc, #84]	@ (800f7d4 <prvInsertBlockIntoFreeList+0xb0>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	429a      	cmp	r2, r3
 800f784:	d00d      	beq.n	800f7a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	685a      	ldr	r2, [r3, #4]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	441a      	add	r2, r3
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	601a      	str	r2, [r3, #0]
 800f7a0:	e008      	b.n	800f7b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7a2:	4b0c      	ldr	r3, [pc, #48]	@ (800f7d4 <prvInsertBlockIntoFreeList+0xb0>)
 800f7a4:	681a      	ldr	r2, [r3, #0]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	601a      	str	r2, [r3, #0]
 800f7aa:	e003      	b.n	800f7b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d002      	beq.n	800f7c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7c2:	bf00      	nop
 800f7c4:	3714      	adds	r7, #20
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	20005e08 	.word	0x20005e08
 800f7d4:	20005e10 	.word	0x20005e10

0800f7d8 <__cvt>:
 800f7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7dc:	ec57 6b10 	vmov	r6, r7, d0
 800f7e0:	2f00      	cmp	r7, #0
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	463b      	mov	r3, r7
 800f7e8:	bfbb      	ittet	lt
 800f7ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f7ee:	461f      	movlt	r7, r3
 800f7f0:	2300      	movge	r3, #0
 800f7f2:	232d      	movlt	r3, #45	@ 0x2d
 800f7f4:	700b      	strb	r3, [r1, #0]
 800f7f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f7fc:	4691      	mov	r9, r2
 800f7fe:	f023 0820 	bic.w	r8, r3, #32
 800f802:	bfbc      	itt	lt
 800f804:	4632      	movlt	r2, r6
 800f806:	4616      	movlt	r6, r2
 800f808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f80c:	d005      	beq.n	800f81a <__cvt+0x42>
 800f80e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f812:	d100      	bne.n	800f816 <__cvt+0x3e>
 800f814:	3401      	adds	r4, #1
 800f816:	2102      	movs	r1, #2
 800f818:	e000      	b.n	800f81c <__cvt+0x44>
 800f81a:	2103      	movs	r1, #3
 800f81c:	ab03      	add	r3, sp, #12
 800f81e:	9301      	str	r3, [sp, #4]
 800f820:	ab02      	add	r3, sp, #8
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	ec47 6b10 	vmov	d0, r6, r7
 800f828:	4653      	mov	r3, sl
 800f82a:	4622      	mov	r2, r4
 800f82c:	f000 feec 	bl	8010608 <_dtoa_r>
 800f830:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f834:	4605      	mov	r5, r0
 800f836:	d119      	bne.n	800f86c <__cvt+0x94>
 800f838:	f019 0f01 	tst.w	r9, #1
 800f83c:	d00e      	beq.n	800f85c <__cvt+0x84>
 800f83e:	eb00 0904 	add.w	r9, r0, r4
 800f842:	2200      	movs	r2, #0
 800f844:	2300      	movs	r3, #0
 800f846:	4630      	mov	r0, r6
 800f848:	4639      	mov	r1, r7
 800f84a:	f7f1 f945 	bl	8000ad8 <__aeabi_dcmpeq>
 800f84e:	b108      	cbz	r0, 800f854 <__cvt+0x7c>
 800f850:	f8cd 900c 	str.w	r9, [sp, #12]
 800f854:	2230      	movs	r2, #48	@ 0x30
 800f856:	9b03      	ldr	r3, [sp, #12]
 800f858:	454b      	cmp	r3, r9
 800f85a:	d31e      	bcc.n	800f89a <__cvt+0xc2>
 800f85c:	9b03      	ldr	r3, [sp, #12]
 800f85e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f860:	1b5b      	subs	r3, r3, r5
 800f862:	4628      	mov	r0, r5
 800f864:	6013      	str	r3, [r2, #0]
 800f866:	b004      	add	sp, #16
 800f868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f86c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f870:	eb00 0904 	add.w	r9, r0, r4
 800f874:	d1e5      	bne.n	800f842 <__cvt+0x6a>
 800f876:	7803      	ldrb	r3, [r0, #0]
 800f878:	2b30      	cmp	r3, #48	@ 0x30
 800f87a:	d10a      	bne.n	800f892 <__cvt+0xba>
 800f87c:	2200      	movs	r2, #0
 800f87e:	2300      	movs	r3, #0
 800f880:	4630      	mov	r0, r6
 800f882:	4639      	mov	r1, r7
 800f884:	f7f1 f928 	bl	8000ad8 <__aeabi_dcmpeq>
 800f888:	b918      	cbnz	r0, 800f892 <__cvt+0xba>
 800f88a:	f1c4 0401 	rsb	r4, r4, #1
 800f88e:	f8ca 4000 	str.w	r4, [sl]
 800f892:	f8da 3000 	ldr.w	r3, [sl]
 800f896:	4499      	add	r9, r3
 800f898:	e7d3      	b.n	800f842 <__cvt+0x6a>
 800f89a:	1c59      	adds	r1, r3, #1
 800f89c:	9103      	str	r1, [sp, #12]
 800f89e:	701a      	strb	r2, [r3, #0]
 800f8a0:	e7d9      	b.n	800f856 <__cvt+0x7e>

0800f8a2 <__exponent>:
 800f8a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8a4:	2900      	cmp	r1, #0
 800f8a6:	bfba      	itte	lt
 800f8a8:	4249      	neglt	r1, r1
 800f8aa:	232d      	movlt	r3, #45	@ 0x2d
 800f8ac:	232b      	movge	r3, #43	@ 0x2b
 800f8ae:	2909      	cmp	r1, #9
 800f8b0:	7002      	strb	r2, [r0, #0]
 800f8b2:	7043      	strb	r3, [r0, #1]
 800f8b4:	dd29      	ble.n	800f90a <__exponent+0x68>
 800f8b6:	f10d 0307 	add.w	r3, sp, #7
 800f8ba:	461d      	mov	r5, r3
 800f8bc:	270a      	movs	r7, #10
 800f8be:	461a      	mov	r2, r3
 800f8c0:	fbb1 f6f7 	udiv	r6, r1, r7
 800f8c4:	fb07 1416 	mls	r4, r7, r6, r1
 800f8c8:	3430      	adds	r4, #48	@ 0x30
 800f8ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	2c63      	cmp	r4, #99	@ 0x63
 800f8d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8d6:	4631      	mov	r1, r6
 800f8d8:	dcf1      	bgt.n	800f8be <__exponent+0x1c>
 800f8da:	3130      	adds	r1, #48	@ 0x30
 800f8dc:	1e94      	subs	r4, r2, #2
 800f8de:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f8e2:	1c41      	adds	r1, r0, #1
 800f8e4:	4623      	mov	r3, r4
 800f8e6:	42ab      	cmp	r3, r5
 800f8e8:	d30a      	bcc.n	800f900 <__exponent+0x5e>
 800f8ea:	f10d 0309 	add.w	r3, sp, #9
 800f8ee:	1a9b      	subs	r3, r3, r2
 800f8f0:	42ac      	cmp	r4, r5
 800f8f2:	bf88      	it	hi
 800f8f4:	2300      	movhi	r3, #0
 800f8f6:	3302      	adds	r3, #2
 800f8f8:	4403      	add	r3, r0
 800f8fa:	1a18      	subs	r0, r3, r0
 800f8fc:	b003      	add	sp, #12
 800f8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f900:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f904:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f908:	e7ed      	b.n	800f8e6 <__exponent+0x44>
 800f90a:	2330      	movs	r3, #48	@ 0x30
 800f90c:	3130      	adds	r1, #48	@ 0x30
 800f90e:	7083      	strb	r3, [r0, #2]
 800f910:	70c1      	strb	r1, [r0, #3]
 800f912:	1d03      	adds	r3, r0, #4
 800f914:	e7f1      	b.n	800f8fa <__exponent+0x58>
	...

0800f918 <_printf_float>:
 800f918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f91c:	b08d      	sub	sp, #52	@ 0x34
 800f91e:	460c      	mov	r4, r1
 800f920:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f924:	4616      	mov	r6, r2
 800f926:	461f      	mov	r7, r3
 800f928:	4605      	mov	r5, r0
 800f92a:	f000 fd01 	bl	8010330 <_localeconv_r>
 800f92e:	6803      	ldr	r3, [r0, #0]
 800f930:	9304      	str	r3, [sp, #16]
 800f932:	4618      	mov	r0, r3
 800f934:	f7f0 fca4 	bl	8000280 <strlen>
 800f938:	2300      	movs	r3, #0
 800f93a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f93c:	f8d8 3000 	ldr.w	r3, [r8]
 800f940:	9005      	str	r0, [sp, #20]
 800f942:	3307      	adds	r3, #7
 800f944:	f023 0307 	bic.w	r3, r3, #7
 800f948:	f103 0208 	add.w	r2, r3, #8
 800f94c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f950:	f8d4 b000 	ldr.w	fp, [r4]
 800f954:	f8c8 2000 	str.w	r2, [r8]
 800f958:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f95c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f960:	9307      	str	r3, [sp, #28]
 800f962:	f8cd 8018 	str.w	r8, [sp, #24]
 800f966:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f96a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f96e:	4b9c      	ldr	r3, [pc, #624]	@ (800fbe0 <_printf_float+0x2c8>)
 800f970:	f04f 32ff 	mov.w	r2, #4294967295
 800f974:	f7f1 f8e2 	bl	8000b3c <__aeabi_dcmpun>
 800f978:	bb70      	cbnz	r0, 800f9d8 <_printf_float+0xc0>
 800f97a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f97e:	4b98      	ldr	r3, [pc, #608]	@ (800fbe0 <_printf_float+0x2c8>)
 800f980:	f04f 32ff 	mov.w	r2, #4294967295
 800f984:	f7f1 f8bc 	bl	8000b00 <__aeabi_dcmple>
 800f988:	bb30      	cbnz	r0, 800f9d8 <_printf_float+0xc0>
 800f98a:	2200      	movs	r2, #0
 800f98c:	2300      	movs	r3, #0
 800f98e:	4640      	mov	r0, r8
 800f990:	4649      	mov	r1, r9
 800f992:	f7f1 f8ab 	bl	8000aec <__aeabi_dcmplt>
 800f996:	b110      	cbz	r0, 800f99e <_printf_float+0x86>
 800f998:	232d      	movs	r3, #45	@ 0x2d
 800f99a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f99e:	4a91      	ldr	r2, [pc, #580]	@ (800fbe4 <_printf_float+0x2cc>)
 800f9a0:	4b91      	ldr	r3, [pc, #580]	@ (800fbe8 <_printf_float+0x2d0>)
 800f9a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f9a6:	bf8c      	ite	hi
 800f9a8:	4690      	movhi	r8, r2
 800f9aa:	4698      	movls	r8, r3
 800f9ac:	2303      	movs	r3, #3
 800f9ae:	6123      	str	r3, [r4, #16]
 800f9b0:	f02b 0304 	bic.w	r3, fp, #4
 800f9b4:	6023      	str	r3, [r4, #0]
 800f9b6:	f04f 0900 	mov.w	r9, #0
 800f9ba:	9700      	str	r7, [sp, #0]
 800f9bc:	4633      	mov	r3, r6
 800f9be:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f9c0:	4621      	mov	r1, r4
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	f000 f9d2 	bl	800fd6c <_printf_common>
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	f040 808d 	bne.w	800fae8 <_printf_float+0x1d0>
 800f9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d2:	b00d      	add	sp, #52	@ 0x34
 800f9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d8:	4642      	mov	r2, r8
 800f9da:	464b      	mov	r3, r9
 800f9dc:	4640      	mov	r0, r8
 800f9de:	4649      	mov	r1, r9
 800f9e0:	f7f1 f8ac 	bl	8000b3c <__aeabi_dcmpun>
 800f9e4:	b140      	cbz	r0, 800f9f8 <_printf_float+0xe0>
 800f9e6:	464b      	mov	r3, r9
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	bfbc      	itt	lt
 800f9ec:	232d      	movlt	r3, #45	@ 0x2d
 800f9ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f9f2:	4a7e      	ldr	r2, [pc, #504]	@ (800fbec <_printf_float+0x2d4>)
 800f9f4:	4b7e      	ldr	r3, [pc, #504]	@ (800fbf0 <_printf_float+0x2d8>)
 800f9f6:	e7d4      	b.n	800f9a2 <_printf_float+0x8a>
 800f9f8:	6863      	ldr	r3, [r4, #4]
 800f9fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f9fe:	9206      	str	r2, [sp, #24]
 800fa00:	1c5a      	adds	r2, r3, #1
 800fa02:	d13b      	bne.n	800fa7c <_printf_float+0x164>
 800fa04:	2306      	movs	r3, #6
 800fa06:	6063      	str	r3, [r4, #4]
 800fa08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	6022      	str	r2, [r4, #0]
 800fa10:	9303      	str	r3, [sp, #12]
 800fa12:	ab0a      	add	r3, sp, #40	@ 0x28
 800fa14:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fa18:	ab09      	add	r3, sp, #36	@ 0x24
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	6861      	ldr	r1, [r4, #4]
 800fa1e:	ec49 8b10 	vmov	d0, r8, r9
 800fa22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fa26:	4628      	mov	r0, r5
 800fa28:	f7ff fed6 	bl	800f7d8 <__cvt>
 800fa2c:	9b06      	ldr	r3, [sp, #24]
 800fa2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa30:	2b47      	cmp	r3, #71	@ 0x47
 800fa32:	4680      	mov	r8, r0
 800fa34:	d129      	bne.n	800fa8a <_printf_float+0x172>
 800fa36:	1cc8      	adds	r0, r1, #3
 800fa38:	db02      	blt.n	800fa40 <_printf_float+0x128>
 800fa3a:	6863      	ldr	r3, [r4, #4]
 800fa3c:	4299      	cmp	r1, r3
 800fa3e:	dd41      	ble.n	800fac4 <_printf_float+0x1ac>
 800fa40:	f1aa 0a02 	sub.w	sl, sl, #2
 800fa44:	fa5f fa8a 	uxtb.w	sl, sl
 800fa48:	3901      	subs	r1, #1
 800fa4a:	4652      	mov	r2, sl
 800fa4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fa50:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa52:	f7ff ff26 	bl	800f8a2 <__exponent>
 800fa56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa58:	1813      	adds	r3, r2, r0
 800fa5a:	2a01      	cmp	r2, #1
 800fa5c:	4681      	mov	r9, r0
 800fa5e:	6123      	str	r3, [r4, #16]
 800fa60:	dc02      	bgt.n	800fa68 <_printf_float+0x150>
 800fa62:	6822      	ldr	r2, [r4, #0]
 800fa64:	07d2      	lsls	r2, r2, #31
 800fa66:	d501      	bpl.n	800fa6c <_printf_float+0x154>
 800fa68:	3301      	adds	r3, #1
 800fa6a:	6123      	str	r3, [r4, #16]
 800fa6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d0a2      	beq.n	800f9ba <_printf_float+0xa2>
 800fa74:	232d      	movs	r3, #45	@ 0x2d
 800fa76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa7a:	e79e      	b.n	800f9ba <_printf_float+0xa2>
 800fa7c:	9a06      	ldr	r2, [sp, #24]
 800fa7e:	2a47      	cmp	r2, #71	@ 0x47
 800fa80:	d1c2      	bne.n	800fa08 <_printf_float+0xf0>
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d1c0      	bne.n	800fa08 <_printf_float+0xf0>
 800fa86:	2301      	movs	r3, #1
 800fa88:	e7bd      	b.n	800fa06 <_printf_float+0xee>
 800fa8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa8e:	d9db      	bls.n	800fa48 <_printf_float+0x130>
 800fa90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fa94:	d118      	bne.n	800fac8 <_printf_float+0x1b0>
 800fa96:	2900      	cmp	r1, #0
 800fa98:	6863      	ldr	r3, [r4, #4]
 800fa9a:	dd0b      	ble.n	800fab4 <_printf_float+0x19c>
 800fa9c:	6121      	str	r1, [r4, #16]
 800fa9e:	b913      	cbnz	r3, 800faa6 <_printf_float+0x18e>
 800faa0:	6822      	ldr	r2, [r4, #0]
 800faa2:	07d0      	lsls	r0, r2, #31
 800faa4:	d502      	bpl.n	800faac <_printf_float+0x194>
 800faa6:	3301      	adds	r3, #1
 800faa8:	440b      	add	r3, r1
 800faaa:	6123      	str	r3, [r4, #16]
 800faac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800faae:	f04f 0900 	mov.w	r9, #0
 800fab2:	e7db      	b.n	800fa6c <_printf_float+0x154>
 800fab4:	b913      	cbnz	r3, 800fabc <_printf_float+0x1a4>
 800fab6:	6822      	ldr	r2, [r4, #0]
 800fab8:	07d2      	lsls	r2, r2, #31
 800faba:	d501      	bpl.n	800fac0 <_printf_float+0x1a8>
 800fabc:	3302      	adds	r3, #2
 800fabe:	e7f4      	b.n	800faaa <_printf_float+0x192>
 800fac0:	2301      	movs	r3, #1
 800fac2:	e7f2      	b.n	800faaa <_printf_float+0x192>
 800fac4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800faca:	4299      	cmp	r1, r3
 800facc:	db05      	blt.n	800fada <_printf_float+0x1c2>
 800face:	6823      	ldr	r3, [r4, #0]
 800fad0:	6121      	str	r1, [r4, #16]
 800fad2:	07d8      	lsls	r0, r3, #31
 800fad4:	d5ea      	bpl.n	800faac <_printf_float+0x194>
 800fad6:	1c4b      	adds	r3, r1, #1
 800fad8:	e7e7      	b.n	800faaa <_printf_float+0x192>
 800fada:	2900      	cmp	r1, #0
 800fadc:	bfd4      	ite	le
 800fade:	f1c1 0202 	rsble	r2, r1, #2
 800fae2:	2201      	movgt	r2, #1
 800fae4:	4413      	add	r3, r2
 800fae6:	e7e0      	b.n	800faaa <_printf_float+0x192>
 800fae8:	6823      	ldr	r3, [r4, #0]
 800faea:	055a      	lsls	r2, r3, #21
 800faec:	d407      	bmi.n	800fafe <_printf_float+0x1e6>
 800faee:	6923      	ldr	r3, [r4, #16]
 800faf0:	4642      	mov	r2, r8
 800faf2:	4631      	mov	r1, r6
 800faf4:	4628      	mov	r0, r5
 800faf6:	47b8      	blx	r7
 800faf8:	3001      	adds	r0, #1
 800fafa:	d12b      	bne.n	800fb54 <_printf_float+0x23c>
 800fafc:	e767      	b.n	800f9ce <_printf_float+0xb6>
 800fafe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fb02:	f240 80dd 	bls.w	800fcc0 <_printf_float+0x3a8>
 800fb06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	f7f0 ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb12:	2800      	cmp	r0, #0
 800fb14:	d033      	beq.n	800fb7e <_printf_float+0x266>
 800fb16:	4a37      	ldr	r2, [pc, #220]	@ (800fbf4 <_printf_float+0x2dc>)
 800fb18:	2301      	movs	r3, #1
 800fb1a:	4631      	mov	r1, r6
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	47b8      	blx	r7
 800fb20:	3001      	adds	r0, #1
 800fb22:	f43f af54 	beq.w	800f9ce <_printf_float+0xb6>
 800fb26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fb2a:	4543      	cmp	r3, r8
 800fb2c:	db02      	blt.n	800fb34 <_printf_float+0x21c>
 800fb2e:	6823      	ldr	r3, [r4, #0]
 800fb30:	07d8      	lsls	r0, r3, #31
 800fb32:	d50f      	bpl.n	800fb54 <_printf_float+0x23c>
 800fb34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb38:	4631      	mov	r1, r6
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	47b8      	blx	r7
 800fb3e:	3001      	adds	r0, #1
 800fb40:	f43f af45 	beq.w	800f9ce <_printf_float+0xb6>
 800fb44:	f04f 0900 	mov.w	r9, #0
 800fb48:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb4c:	f104 0a1a 	add.w	sl, r4, #26
 800fb50:	45c8      	cmp	r8, r9
 800fb52:	dc09      	bgt.n	800fb68 <_printf_float+0x250>
 800fb54:	6823      	ldr	r3, [r4, #0]
 800fb56:	079b      	lsls	r3, r3, #30
 800fb58:	f100 8103 	bmi.w	800fd62 <_printf_float+0x44a>
 800fb5c:	68e0      	ldr	r0, [r4, #12]
 800fb5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb60:	4298      	cmp	r0, r3
 800fb62:	bfb8      	it	lt
 800fb64:	4618      	movlt	r0, r3
 800fb66:	e734      	b.n	800f9d2 <_printf_float+0xba>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	4652      	mov	r2, sl
 800fb6c:	4631      	mov	r1, r6
 800fb6e:	4628      	mov	r0, r5
 800fb70:	47b8      	blx	r7
 800fb72:	3001      	adds	r0, #1
 800fb74:	f43f af2b 	beq.w	800f9ce <_printf_float+0xb6>
 800fb78:	f109 0901 	add.w	r9, r9, #1
 800fb7c:	e7e8      	b.n	800fb50 <_printf_float+0x238>
 800fb7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	dc39      	bgt.n	800fbf8 <_printf_float+0x2e0>
 800fb84:	4a1b      	ldr	r2, [pc, #108]	@ (800fbf4 <_printf_float+0x2dc>)
 800fb86:	2301      	movs	r3, #1
 800fb88:	4631      	mov	r1, r6
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	47b8      	blx	r7
 800fb8e:	3001      	adds	r0, #1
 800fb90:	f43f af1d 	beq.w	800f9ce <_printf_float+0xb6>
 800fb94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb98:	ea59 0303 	orrs.w	r3, r9, r3
 800fb9c:	d102      	bne.n	800fba4 <_printf_float+0x28c>
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	07d9      	lsls	r1, r3, #31
 800fba2:	d5d7      	bpl.n	800fb54 <_printf_float+0x23c>
 800fba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fba8:	4631      	mov	r1, r6
 800fbaa:	4628      	mov	r0, r5
 800fbac:	47b8      	blx	r7
 800fbae:	3001      	adds	r0, #1
 800fbb0:	f43f af0d 	beq.w	800f9ce <_printf_float+0xb6>
 800fbb4:	f04f 0a00 	mov.w	sl, #0
 800fbb8:	f104 0b1a 	add.w	fp, r4, #26
 800fbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbbe:	425b      	negs	r3, r3
 800fbc0:	4553      	cmp	r3, sl
 800fbc2:	dc01      	bgt.n	800fbc8 <_printf_float+0x2b0>
 800fbc4:	464b      	mov	r3, r9
 800fbc6:	e793      	b.n	800faf0 <_printf_float+0x1d8>
 800fbc8:	2301      	movs	r3, #1
 800fbca:	465a      	mov	r2, fp
 800fbcc:	4631      	mov	r1, r6
 800fbce:	4628      	mov	r0, r5
 800fbd0:	47b8      	blx	r7
 800fbd2:	3001      	adds	r0, #1
 800fbd4:	f43f aefb 	beq.w	800f9ce <_printf_float+0xb6>
 800fbd8:	f10a 0a01 	add.w	sl, sl, #1
 800fbdc:	e7ee      	b.n	800fbbc <_printf_float+0x2a4>
 800fbde:	bf00      	nop
 800fbe0:	7fefffff 	.word	0x7fefffff
 800fbe4:	080134e0 	.word	0x080134e0
 800fbe8:	080134dc 	.word	0x080134dc
 800fbec:	080134e8 	.word	0x080134e8
 800fbf0:	080134e4 	.word	0x080134e4
 800fbf4:	080134ec 	.word	0x080134ec
 800fbf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fbfe:	4553      	cmp	r3, sl
 800fc00:	bfa8      	it	ge
 800fc02:	4653      	movge	r3, sl
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	4699      	mov	r9, r3
 800fc08:	dc36      	bgt.n	800fc78 <_printf_float+0x360>
 800fc0a:	f04f 0b00 	mov.w	fp, #0
 800fc0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc12:	f104 021a 	add.w	r2, r4, #26
 800fc16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fc18:	9306      	str	r3, [sp, #24]
 800fc1a:	eba3 0309 	sub.w	r3, r3, r9
 800fc1e:	455b      	cmp	r3, fp
 800fc20:	dc31      	bgt.n	800fc86 <_printf_float+0x36e>
 800fc22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc24:	459a      	cmp	sl, r3
 800fc26:	dc3a      	bgt.n	800fc9e <_printf_float+0x386>
 800fc28:	6823      	ldr	r3, [r4, #0]
 800fc2a:	07da      	lsls	r2, r3, #31
 800fc2c:	d437      	bmi.n	800fc9e <_printf_float+0x386>
 800fc2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc30:	ebaa 0903 	sub.w	r9, sl, r3
 800fc34:	9b06      	ldr	r3, [sp, #24]
 800fc36:	ebaa 0303 	sub.w	r3, sl, r3
 800fc3a:	4599      	cmp	r9, r3
 800fc3c:	bfa8      	it	ge
 800fc3e:	4699      	movge	r9, r3
 800fc40:	f1b9 0f00 	cmp.w	r9, #0
 800fc44:	dc33      	bgt.n	800fcae <_printf_float+0x396>
 800fc46:	f04f 0800 	mov.w	r8, #0
 800fc4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc4e:	f104 0b1a 	add.w	fp, r4, #26
 800fc52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc54:	ebaa 0303 	sub.w	r3, sl, r3
 800fc58:	eba3 0309 	sub.w	r3, r3, r9
 800fc5c:	4543      	cmp	r3, r8
 800fc5e:	f77f af79 	ble.w	800fb54 <_printf_float+0x23c>
 800fc62:	2301      	movs	r3, #1
 800fc64:	465a      	mov	r2, fp
 800fc66:	4631      	mov	r1, r6
 800fc68:	4628      	mov	r0, r5
 800fc6a:	47b8      	blx	r7
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	f43f aeae 	beq.w	800f9ce <_printf_float+0xb6>
 800fc72:	f108 0801 	add.w	r8, r8, #1
 800fc76:	e7ec      	b.n	800fc52 <_printf_float+0x33a>
 800fc78:	4642      	mov	r2, r8
 800fc7a:	4631      	mov	r1, r6
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	47b8      	blx	r7
 800fc80:	3001      	adds	r0, #1
 800fc82:	d1c2      	bne.n	800fc0a <_printf_float+0x2f2>
 800fc84:	e6a3      	b.n	800f9ce <_printf_float+0xb6>
 800fc86:	2301      	movs	r3, #1
 800fc88:	4631      	mov	r1, r6
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	9206      	str	r2, [sp, #24]
 800fc8e:	47b8      	blx	r7
 800fc90:	3001      	adds	r0, #1
 800fc92:	f43f ae9c 	beq.w	800f9ce <_printf_float+0xb6>
 800fc96:	9a06      	ldr	r2, [sp, #24]
 800fc98:	f10b 0b01 	add.w	fp, fp, #1
 800fc9c:	e7bb      	b.n	800fc16 <_printf_float+0x2fe>
 800fc9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fca2:	4631      	mov	r1, r6
 800fca4:	4628      	mov	r0, r5
 800fca6:	47b8      	blx	r7
 800fca8:	3001      	adds	r0, #1
 800fcaa:	d1c0      	bne.n	800fc2e <_printf_float+0x316>
 800fcac:	e68f      	b.n	800f9ce <_printf_float+0xb6>
 800fcae:	9a06      	ldr	r2, [sp, #24]
 800fcb0:	464b      	mov	r3, r9
 800fcb2:	4442      	add	r2, r8
 800fcb4:	4631      	mov	r1, r6
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	47b8      	blx	r7
 800fcba:	3001      	adds	r0, #1
 800fcbc:	d1c3      	bne.n	800fc46 <_printf_float+0x32e>
 800fcbe:	e686      	b.n	800f9ce <_printf_float+0xb6>
 800fcc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fcc4:	f1ba 0f01 	cmp.w	sl, #1
 800fcc8:	dc01      	bgt.n	800fcce <_printf_float+0x3b6>
 800fcca:	07db      	lsls	r3, r3, #31
 800fccc:	d536      	bpl.n	800fd3c <_printf_float+0x424>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	4642      	mov	r2, r8
 800fcd2:	4631      	mov	r1, r6
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	47b8      	blx	r7
 800fcd8:	3001      	adds	r0, #1
 800fcda:	f43f ae78 	beq.w	800f9ce <_printf_float+0xb6>
 800fcde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fce2:	4631      	mov	r1, r6
 800fce4:	4628      	mov	r0, r5
 800fce6:	47b8      	blx	r7
 800fce8:	3001      	adds	r0, #1
 800fcea:	f43f ae70 	beq.w	800f9ce <_printf_float+0xb6>
 800fcee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcfa:	f7f0 feed 	bl	8000ad8 <__aeabi_dcmpeq>
 800fcfe:	b9c0      	cbnz	r0, 800fd32 <_printf_float+0x41a>
 800fd00:	4653      	mov	r3, sl
 800fd02:	f108 0201 	add.w	r2, r8, #1
 800fd06:	4631      	mov	r1, r6
 800fd08:	4628      	mov	r0, r5
 800fd0a:	47b8      	blx	r7
 800fd0c:	3001      	adds	r0, #1
 800fd0e:	d10c      	bne.n	800fd2a <_printf_float+0x412>
 800fd10:	e65d      	b.n	800f9ce <_printf_float+0xb6>
 800fd12:	2301      	movs	r3, #1
 800fd14:	465a      	mov	r2, fp
 800fd16:	4631      	mov	r1, r6
 800fd18:	4628      	mov	r0, r5
 800fd1a:	47b8      	blx	r7
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	f43f ae56 	beq.w	800f9ce <_printf_float+0xb6>
 800fd22:	f108 0801 	add.w	r8, r8, #1
 800fd26:	45d0      	cmp	r8, sl
 800fd28:	dbf3      	blt.n	800fd12 <_printf_float+0x3fa>
 800fd2a:	464b      	mov	r3, r9
 800fd2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fd30:	e6df      	b.n	800faf2 <_printf_float+0x1da>
 800fd32:	f04f 0800 	mov.w	r8, #0
 800fd36:	f104 0b1a 	add.w	fp, r4, #26
 800fd3a:	e7f4      	b.n	800fd26 <_printf_float+0x40e>
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	4642      	mov	r2, r8
 800fd40:	e7e1      	b.n	800fd06 <_printf_float+0x3ee>
 800fd42:	2301      	movs	r3, #1
 800fd44:	464a      	mov	r2, r9
 800fd46:	4631      	mov	r1, r6
 800fd48:	4628      	mov	r0, r5
 800fd4a:	47b8      	blx	r7
 800fd4c:	3001      	adds	r0, #1
 800fd4e:	f43f ae3e 	beq.w	800f9ce <_printf_float+0xb6>
 800fd52:	f108 0801 	add.w	r8, r8, #1
 800fd56:	68e3      	ldr	r3, [r4, #12]
 800fd58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fd5a:	1a5b      	subs	r3, r3, r1
 800fd5c:	4543      	cmp	r3, r8
 800fd5e:	dcf0      	bgt.n	800fd42 <_printf_float+0x42a>
 800fd60:	e6fc      	b.n	800fb5c <_printf_float+0x244>
 800fd62:	f04f 0800 	mov.w	r8, #0
 800fd66:	f104 0919 	add.w	r9, r4, #25
 800fd6a:	e7f4      	b.n	800fd56 <_printf_float+0x43e>

0800fd6c <_printf_common>:
 800fd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd70:	4616      	mov	r6, r2
 800fd72:	4698      	mov	r8, r3
 800fd74:	688a      	ldr	r2, [r1, #8]
 800fd76:	690b      	ldr	r3, [r1, #16]
 800fd78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	bfb8      	it	lt
 800fd80:	4613      	movlt	r3, r2
 800fd82:	6033      	str	r3, [r6, #0]
 800fd84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd88:	4607      	mov	r7, r0
 800fd8a:	460c      	mov	r4, r1
 800fd8c:	b10a      	cbz	r2, 800fd92 <_printf_common+0x26>
 800fd8e:	3301      	adds	r3, #1
 800fd90:	6033      	str	r3, [r6, #0]
 800fd92:	6823      	ldr	r3, [r4, #0]
 800fd94:	0699      	lsls	r1, r3, #26
 800fd96:	bf42      	ittt	mi
 800fd98:	6833      	ldrmi	r3, [r6, #0]
 800fd9a:	3302      	addmi	r3, #2
 800fd9c:	6033      	strmi	r3, [r6, #0]
 800fd9e:	6825      	ldr	r5, [r4, #0]
 800fda0:	f015 0506 	ands.w	r5, r5, #6
 800fda4:	d106      	bne.n	800fdb4 <_printf_common+0x48>
 800fda6:	f104 0a19 	add.w	sl, r4, #25
 800fdaa:	68e3      	ldr	r3, [r4, #12]
 800fdac:	6832      	ldr	r2, [r6, #0]
 800fdae:	1a9b      	subs	r3, r3, r2
 800fdb0:	42ab      	cmp	r3, r5
 800fdb2:	dc26      	bgt.n	800fe02 <_printf_common+0x96>
 800fdb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fdb8:	6822      	ldr	r2, [r4, #0]
 800fdba:	3b00      	subs	r3, #0
 800fdbc:	bf18      	it	ne
 800fdbe:	2301      	movne	r3, #1
 800fdc0:	0692      	lsls	r2, r2, #26
 800fdc2:	d42b      	bmi.n	800fe1c <_printf_common+0xb0>
 800fdc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fdc8:	4641      	mov	r1, r8
 800fdca:	4638      	mov	r0, r7
 800fdcc:	47c8      	blx	r9
 800fdce:	3001      	adds	r0, #1
 800fdd0:	d01e      	beq.n	800fe10 <_printf_common+0xa4>
 800fdd2:	6823      	ldr	r3, [r4, #0]
 800fdd4:	6922      	ldr	r2, [r4, #16]
 800fdd6:	f003 0306 	and.w	r3, r3, #6
 800fdda:	2b04      	cmp	r3, #4
 800fddc:	bf02      	ittt	eq
 800fdde:	68e5      	ldreq	r5, [r4, #12]
 800fde0:	6833      	ldreq	r3, [r6, #0]
 800fde2:	1aed      	subeq	r5, r5, r3
 800fde4:	68a3      	ldr	r3, [r4, #8]
 800fde6:	bf0c      	ite	eq
 800fde8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fdec:	2500      	movne	r5, #0
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	bfc4      	itt	gt
 800fdf2:	1a9b      	subgt	r3, r3, r2
 800fdf4:	18ed      	addgt	r5, r5, r3
 800fdf6:	2600      	movs	r6, #0
 800fdf8:	341a      	adds	r4, #26
 800fdfa:	42b5      	cmp	r5, r6
 800fdfc:	d11a      	bne.n	800fe34 <_printf_common+0xc8>
 800fdfe:	2000      	movs	r0, #0
 800fe00:	e008      	b.n	800fe14 <_printf_common+0xa8>
 800fe02:	2301      	movs	r3, #1
 800fe04:	4652      	mov	r2, sl
 800fe06:	4641      	mov	r1, r8
 800fe08:	4638      	mov	r0, r7
 800fe0a:	47c8      	blx	r9
 800fe0c:	3001      	adds	r0, #1
 800fe0e:	d103      	bne.n	800fe18 <_printf_common+0xac>
 800fe10:	f04f 30ff 	mov.w	r0, #4294967295
 800fe14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe18:	3501      	adds	r5, #1
 800fe1a:	e7c6      	b.n	800fdaa <_printf_common+0x3e>
 800fe1c:	18e1      	adds	r1, r4, r3
 800fe1e:	1c5a      	adds	r2, r3, #1
 800fe20:	2030      	movs	r0, #48	@ 0x30
 800fe22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fe26:	4422      	add	r2, r4
 800fe28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fe2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fe30:	3302      	adds	r3, #2
 800fe32:	e7c7      	b.n	800fdc4 <_printf_common+0x58>
 800fe34:	2301      	movs	r3, #1
 800fe36:	4622      	mov	r2, r4
 800fe38:	4641      	mov	r1, r8
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	47c8      	blx	r9
 800fe3e:	3001      	adds	r0, #1
 800fe40:	d0e6      	beq.n	800fe10 <_printf_common+0xa4>
 800fe42:	3601      	adds	r6, #1
 800fe44:	e7d9      	b.n	800fdfa <_printf_common+0x8e>
	...

0800fe48 <_printf_i>:
 800fe48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe4c:	7e0f      	ldrb	r7, [r1, #24]
 800fe4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe50:	2f78      	cmp	r7, #120	@ 0x78
 800fe52:	4691      	mov	r9, r2
 800fe54:	4680      	mov	r8, r0
 800fe56:	460c      	mov	r4, r1
 800fe58:	469a      	mov	sl, r3
 800fe5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe5e:	d807      	bhi.n	800fe70 <_printf_i+0x28>
 800fe60:	2f62      	cmp	r7, #98	@ 0x62
 800fe62:	d80a      	bhi.n	800fe7a <_printf_i+0x32>
 800fe64:	2f00      	cmp	r7, #0
 800fe66:	f000 80d1 	beq.w	801000c <_printf_i+0x1c4>
 800fe6a:	2f58      	cmp	r7, #88	@ 0x58
 800fe6c:	f000 80b8 	beq.w	800ffe0 <_printf_i+0x198>
 800fe70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe78:	e03a      	b.n	800fef0 <_printf_i+0xa8>
 800fe7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe7e:	2b15      	cmp	r3, #21
 800fe80:	d8f6      	bhi.n	800fe70 <_printf_i+0x28>
 800fe82:	a101      	add	r1, pc, #4	@ (adr r1, 800fe88 <_printf_i+0x40>)
 800fe84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe88:	0800fee1 	.word	0x0800fee1
 800fe8c:	0800fef5 	.word	0x0800fef5
 800fe90:	0800fe71 	.word	0x0800fe71
 800fe94:	0800fe71 	.word	0x0800fe71
 800fe98:	0800fe71 	.word	0x0800fe71
 800fe9c:	0800fe71 	.word	0x0800fe71
 800fea0:	0800fef5 	.word	0x0800fef5
 800fea4:	0800fe71 	.word	0x0800fe71
 800fea8:	0800fe71 	.word	0x0800fe71
 800feac:	0800fe71 	.word	0x0800fe71
 800feb0:	0800fe71 	.word	0x0800fe71
 800feb4:	0800fff3 	.word	0x0800fff3
 800feb8:	0800ff1f 	.word	0x0800ff1f
 800febc:	0800ffad 	.word	0x0800ffad
 800fec0:	0800fe71 	.word	0x0800fe71
 800fec4:	0800fe71 	.word	0x0800fe71
 800fec8:	08010015 	.word	0x08010015
 800fecc:	0800fe71 	.word	0x0800fe71
 800fed0:	0800ff1f 	.word	0x0800ff1f
 800fed4:	0800fe71 	.word	0x0800fe71
 800fed8:	0800fe71 	.word	0x0800fe71
 800fedc:	0800ffb5 	.word	0x0800ffb5
 800fee0:	6833      	ldr	r3, [r6, #0]
 800fee2:	1d1a      	adds	r2, r3, #4
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	6032      	str	r2, [r6, #0]
 800fee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800feec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fef0:	2301      	movs	r3, #1
 800fef2:	e09c      	b.n	801002e <_printf_i+0x1e6>
 800fef4:	6833      	ldr	r3, [r6, #0]
 800fef6:	6820      	ldr	r0, [r4, #0]
 800fef8:	1d19      	adds	r1, r3, #4
 800fefa:	6031      	str	r1, [r6, #0]
 800fefc:	0606      	lsls	r6, r0, #24
 800fefe:	d501      	bpl.n	800ff04 <_printf_i+0xbc>
 800ff00:	681d      	ldr	r5, [r3, #0]
 800ff02:	e003      	b.n	800ff0c <_printf_i+0xc4>
 800ff04:	0645      	lsls	r5, r0, #25
 800ff06:	d5fb      	bpl.n	800ff00 <_printf_i+0xb8>
 800ff08:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ff0c:	2d00      	cmp	r5, #0
 800ff0e:	da03      	bge.n	800ff18 <_printf_i+0xd0>
 800ff10:	232d      	movs	r3, #45	@ 0x2d
 800ff12:	426d      	negs	r5, r5
 800ff14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff18:	4858      	ldr	r0, [pc, #352]	@ (801007c <_printf_i+0x234>)
 800ff1a:	230a      	movs	r3, #10
 800ff1c:	e011      	b.n	800ff42 <_printf_i+0xfa>
 800ff1e:	6821      	ldr	r1, [r4, #0]
 800ff20:	6833      	ldr	r3, [r6, #0]
 800ff22:	0608      	lsls	r0, r1, #24
 800ff24:	f853 5b04 	ldr.w	r5, [r3], #4
 800ff28:	d402      	bmi.n	800ff30 <_printf_i+0xe8>
 800ff2a:	0649      	lsls	r1, r1, #25
 800ff2c:	bf48      	it	mi
 800ff2e:	b2ad      	uxthmi	r5, r5
 800ff30:	2f6f      	cmp	r7, #111	@ 0x6f
 800ff32:	4852      	ldr	r0, [pc, #328]	@ (801007c <_printf_i+0x234>)
 800ff34:	6033      	str	r3, [r6, #0]
 800ff36:	bf14      	ite	ne
 800ff38:	230a      	movne	r3, #10
 800ff3a:	2308      	moveq	r3, #8
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ff42:	6866      	ldr	r6, [r4, #4]
 800ff44:	60a6      	str	r6, [r4, #8]
 800ff46:	2e00      	cmp	r6, #0
 800ff48:	db05      	blt.n	800ff56 <_printf_i+0x10e>
 800ff4a:	6821      	ldr	r1, [r4, #0]
 800ff4c:	432e      	orrs	r6, r5
 800ff4e:	f021 0104 	bic.w	r1, r1, #4
 800ff52:	6021      	str	r1, [r4, #0]
 800ff54:	d04b      	beq.n	800ffee <_printf_i+0x1a6>
 800ff56:	4616      	mov	r6, r2
 800ff58:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff5c:	fb03 5711 	mls	r7, r3, r1, r5
 800ff60:	5dc7      	ldrb	r7, [r0, r7]
 800ff62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff66:	462f      	mov	r7, r5
 800ff68:	42bb      	cmp	r3, r7
 800ff6a:	460d      	mov	r5, r1
 800ff6c:	d9f4      	bls.n	800ff58 <_printf_i+0x110>
 800ff6e:	2b08      	cmp	r3, #8
 800ff70:	d10b      	bne.n	800ff8a <_printf_i+0x142>
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	07df      	lsls	r7, r3, #31
 800ff76:	d508      	bpl.n	800ff8a <_printf_i+0x142>
 800ff78:	6923      	ldr	r3, [r4, #16]
 800ff7a:	6861      	ldr	r1, [r4, #4]
 800ff7c:	4299      	cmp	r1, r3
 800ff7e:	bfde      	ittt	le
 800ff80:	2330      	movle	r3, #48	@ 0x30
 800ff82:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff86:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff8a:	1b92      	subs	r2, r2, r6
 800ff8c:	6122      	str	r2, [r4, #16]
 800ff8e:	f8cd a000 	str.w	sl, [sp]
 800ff92:	464b      	mov	r3, r9
 800ff94:	aa03      	add	r2, sp, #12
 800ff96:	4621      	mov	r1, r4
 800ff98:	4640      	mov	r0, r8
 800ff9a:	f7ff fee7 	bl	800fd6c <_printf_common>
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	d14a      	bne.n	8010038 <_printf_i+0x1f0>
 800ffa2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa6:	b004      	add	sp, #16
 800ffa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffac:	6823      	ldr	r3, [r4, #0]
 800ffae:	f043 0320 	orr.w	r3, r3, #32
 800ffb2:	6023      	str	r3, [r4, #0]
 800ffb4:	4832      	ldr	r0, [pc, #200]	@ (8010080 <_printf_i+0x238>)
 800ffb6:	2778      	movs	r7, #120	@ 0x78
 800ffb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ffbc:	6823      	ldr	r3, [r4, #0]
 800ffbe:	6831      	ldr	r1, [r6, #0]
 800ffc0:	061f      	lsls	r7, r3, #24
 800ffc2:	f851 5b04 	ldr.w	r5, [r1], #4
 800ffc6:	d402      	bmi.n	800ffce <_printf_i+0x186>
 800ffc8:	065f      	lsls	r7, r3, #25
 800ffca:	bf48      	it	mi
 800ffcc:	b2ad      	uxthmi	r5, r5
 800ffce:	6031      	str	r1, [r6, #0]
 800ffd0:	07d9      	lsls	r1, r3, #31
 800ffd2:	bf44      	itt	mi
 800ffd4:	f043 0320 	orrmi.w	r3, r3, #32
 800ffd8:	6023      	strmi	r3, [r4, #0]
 800ffda:	b11d      	cbz	r5, 800ffe4 <_printf_i+0x19c>
 800ffdc:	2310      	movs	r3, #16
 800ffde:	e7ad      	b.n	800ff3c <_printf_i+0xf4>
 800ffe0:	4826      	ldr	r0, [pc, #152]	@ (801007c <_printf_i+0x234>)
 800ffe2:	e7e9      	b.n	800ffb8 <_printf_i+0x170>
 800ffe4:	6823      	ldr	r3, [r4, #0]
 800ffe6:	f023 0320 	bic.w	r3, r3, #32
 800ffea:	6023      	str	r3, [r4, #0]
 800ffec:	e7f6      	b.n	800ffdc <_printf_i+0x194>
 800ffee:	4616      	mov	r6, r2
 800fff0:	e7bd      	b.n	800ff6e <_printf_i+0x126>
 800fff2:	6833      	ldr	r3, [r6, #0]
 800fff4:	6825      	ldr	r5, [r4, #0]
 800fff6:	6961      	ldr	r1, [r4, #20]
 800fff8:	1d18      	adds	r0, r3, #4
 800fffa:	6030      	str	r0, [r6, #0]
 800fffc:	062e      	lsls	r6, r5, #24
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	d501      	bpl.n	8010006 <_printf_i+0x1be>
 8010002:	6019      	str	r1, [r3, #0]
 8010004:	e002      	b.n	801000c <_printf_i+0x1c4>
 8010006:	0668      	lsls	r0, r5, #25
 8010008:	d5fb      	bpl.n	8010002 <_printf_i+0x1ba>
 801000a:	8019      	strh	r1, [r3, #0]
 801000c:	2300      	movs	r3, #0
 801000e:	6123      	str	r3, [r4, #16]
 8010010:	4616      	mov	r6, r2
 8010012:	e7bc      	b.n	800ff8e <_printf_i+0x146>
 8010014:	6833      	ldr	r3, [r6, #0]
 8010016:	1d1a      	adds	r2, r3, #4
 8010018:	6032      	str	r2, [r6, #0]
 801001a:	681e      	ldr	r6, [r3, #0]
 801001c:	6862      	ldr	r2, [r4, #4]
 801001e:	2100      	movs	r1, #0
 8010020:	4630      	mov	r0, r6
 8010022:	f7f0 f8dd 	bl	80001e0 <memchr>
 8010026:	b108      	cbz	r0, 801002c <_printf_i+0x1e4>
 8010028:	1b80      	subs	r0, r0, r6
 801002a:	6060      	str	r0, [r4, #4]
 801002c:	6863      	ldr	r3, [r4, #4]
 801002e:	6123      	str	r3, [r4, #16]
 8010030:	2300      	movs	r3, #0
 8010032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010036:	e7aa      	b.n	800ff8e <_printf_i+0x146>
 8010038:	6923      	ldr	r3, [r4, #16]
 801003a:	4632      	mov	r2, r6
 801003c:	4649      	mov	r1, r9
 801003e:	4640      	mov	r0, r8
 8010040:	47d0      	blx	sl
 8010042:	3001      	adds	r0, #1
 8010044:	d0ad      	beq.n	800ffa2 <_printf_i+0x15a>
 8010046:	6823      	ldr	r3, [r4, #0]
 8010048:	079b      	lsls	r3, r3, #30
 801004a:	d413      	bmi.n	8010074 <_printf_i+0x22c>
 801004c:	68e0      	ldr	r0, [r4, #12]
 801004e:	9b03      	ldr	r3, [sp, #12]
 8010050:	4298      	cmp	r0, r3
 8010052:	bfb8      	it	lt
 8010054:	4618      	movlt	r0, r3
 8010056:	e7a6      	b.n	800ffa6 <_printf_i+0x15e>
 8010058:	2301      	movs	r3, #1
 801005a:	4632      	mov	r2, r6
 801005c:	4649      	mov	r1, r9
 801005e:	4640      	mov	r0, r8
 8010060:	47d0      	blx	sl
 8010062:	3001      	adds	r0, #1
 8010064:	d09d      	beq.n	800ffa2 <_printf_i+0x15a>
 8010066:	3501      	adds	r5, #1
 8010068:	68e3      	ldr	r3, [r4, #12]
 801006a:	9903      	ldr	r1, [sp, #12]
 801006c:	1a5b      	subs	r3, r3, r1
 801006e:	42ab      	cmp	r3, r5
 8010070:	dcf2      	bgt.n	8010058 <_printf_i+0x210>
 8010072:	e7eb      	b.n	801004c <_printf_i+0x204>
 8010074:	2500      	movs	r5, #0
 8010076:	f104 0619 	add.w	r6, r4, #25
 801007a:	e7f5      	b.n	8010068 <_printf_i+0x220>
 801007c:	080134ee 	.word	0x080134ee
 8010080:	080134ff 	.word	0x080134ff

08010084 <std>:
 8010084:	2300      	movs	r3, #0
 8010086:	b510      	push	{r4, lr}
 8010088:	4604      	mov	r4, r0
 801008a:	e9c0 3300 	strd	r3, r3, [r0]
 801008e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010092:	6083      	str	r3, [r0, #8]
 8010094:	8181      	strh	r1, [r0, #12]
 8010096:	6643      	str	r3, [r0, #100]	@ 0x64
 8010098:	81c2      	strh	r2, [r0, #14]
 801009a:	6183      	str	r3, [r0, #24]
 801009c:	4619      	mov	r1, r3
 801009e:	2208      	movs	r2, #8
 80100a0:	305c      	adds	r0, #92	@ 0x5c
 80100a2:	f000 f92a 	bl	80102fa <memset>
 80100a6:	4b0d      	ldr	r3, [pc, #52]	@ (80100dc <std+0x58>)
 80100a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80100aa:	4b0d      	ldr	r3, [pc, #52]	@ (80100e0 <std+0x5c>)
 80100ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80100ae:	4b0d      	ldr	r3, [pc, #52]	@ (80100e4 <std+0x60>)
 80100b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80100b2:	4b0d      	ldr	r3, [pc, #52]	@ (80100e8 <std+0x64>)
 80100b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80100b6:	4b0d      	ldr	r3, [pc, #52]	@ (80100ec <std+0x68>)
 80100b8:	6224      	str	r4, [r4, #32]
 80100ba:	429c      	cmp	r4, r3
 80100bc:	d006      	beq.n	80100cc <std+0x48>
 80100be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80100c2:	4294      	cmp	r4, r2
 80100c4:	d002      	beq.n	80100cc <std+0x48>
 80100c6:	33d0      	adds	r3, #208	@ 0xd0
 80100c8:	429c      	cmp	r4, r3
 80100ca:	d105      	bne.n	80100d8 <std+0x54>
 80100cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80100d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100d4:	f000 b9fe 	b.w	80104d4 <__retarget_lock_init_recursive>
 80100d8:	bd10      	pop	{r4, pc}
 80100da:	bf00      	nop
 80100dc:	08010275 	.word	0x08010275
 80100e0:	08010297 	.word	0x08010297
 80100e4:	080102cf 	.word	0x080102cf
 80100e8:	080102f3 	.word	0x080102f3
 80100ec:	20005e28 	.word	0x20005e28

080100f0 <stdio_exit_handler>:
 80100f0:	4a02      	ldr	r2, [pc, #8]	@ (80100fc <stdio_exit_handler+0xc>)
 80100f2:	4903      	ldr	r1, [pc, #12]	@ (8010100 <stdio_exit_handler+0x10>)
 80100f4:	4803      	ldr	r0, [pc, #12]	@ (8010104 <stdio_exit_handler+0x14>)
 80100f6:	f000 b869 	b.w	80101cc <_fwalk_sglue>
 80100fa:	bf00      	nop
 80100fc:	2000007c 	.word	0x2000007c
 8010100:	08011e55 	.word	0x08011e55
 8010104:	2000008c 	.word	0x2000008c

08010108 <cleanup_stdio>:
 8010108:	6841      	ldr	r1, [r0, #4]
 801010a:	4b0c      	ldr	r3, [pc, #48]	@ (801013c <cleanup_stdio+0x34>)
 801010c:	4299      	cmp	r1, r3
 801010e:	b510      	push	{r4, lr}
 8010110:	4604      	mov	r4, r0
 8010112:	d001      	beq.n	8010118 <cleanup_stdio+0x10>
 8010114:	f001 fe9e 	bl	8011e54 <_fflush_r>
 8010118:	68a1      	ldr	r1, [r4, #8]
 801011a:	4b09      	ldr	r3, [pc, #36]	@ (8010140 <cleanup_stdio+0x38>)
 801011c:	4299      	cmp	r1, r3
 801011e:	d002      	beq.n	8010126 <cleanup_stdio+0x1e>
 8010120:	4620      	mov	r0, r4
 8010122:	f001 fe97 	bl	8011e54 <_fflush_r>
 8010126:	68e1      	ldr	r1, [r4, #12]
 8010128:	4b06      	ldr	r3, [pc, #24]	@ (8010144 <cleanup_stdio+0x3c>)
 801012a:	4299      	cmp	r1, r3
 801012c:	d004      	beq.n	8010138 <cleanup_stdio+0x30>
 801012e:	4620      	mov	r0, r4
 8010130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010134:	f001 be8e 	b.w	8011e54 <_fflush_r>
 8010138:	bd10      	pop	{r4, pc}
 801013a:	bf00      	nop
 801013c:	20005e28 	.word	0x20005e28
 8010140:	20005e90 	.word	0x20005e90
 8010144:	20005ef8 	.word	0x20005ef8

08010148 <global_stdio_init.part.0>:
 8010148:	b510      	push	{r4, lr}
 801014a:	4b0b      	ldr	r3, [pc, #44]	@ (8010178 <global_stdio_init.part.0+0x30>)
 801014c:	4c0b      	ldr	r4, [pc, #44]	@ (801017c <global_stdio_init.part.0+0x34>)
 801014e:	4a0c      	ldr	r2, [pc, #48]	@ (8010180 <global_stdio_init.part.0+0x38>)
 8010150:	601a      	str	r2, [r3, #0]
 8010152:	4620      	mov	r0, r4
 8010154:	2200      	movs	r2, #0
 8010156:	2104      	movs	r1, #4
 8010158:	f7ff ff94 	bl	8010084 <std>
 801015c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010160:	2201      	movs	r2, #1
 8010162:	2109      	movs	r1, #9
 8010164:	f7ff ff8e 	bl	8010084 <std>
 8010168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801016c:	2202      	movs	r2, #2
 801016e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010172:	2112      	movs	r1, #18
 8010174:	f7ff bf86 	b.w	8010084 <std>
 8010178:	20005f60 	.word	0x20005f60
 801017c:	20005e28 	.word	0x20005e28
 8010180:	080100f1 	.word	0x080100f1

08010184 <__sfp_lock_acquire>:
 8010184:	4801      	ldr	r0, [pc, #4]	@ (801018c <__sfp_lock_acquire+0x8>)
 8010186:	f000 b9a6 	b.w	80104d6 <__retarget_lock_acquire_recursive>
 801018a:	bf00      	nop
 801018c:	20005f69 	.word	0x20005f69

08010190 <__sfp_lock_release>:
 8010190:	4801      	ldr	r0, [pc, #4]	@ (8010198 <__sfp_lock_release+0x8>)
 8010192:	f000 b9a1 	b.w	80104d8 <__retarget_lock_release_recursive>
 8010196:	bf00      	nop
 8010198:	20005f69 	.word	0x20005f69

0801019c <__sinit>:
 801019c:	b510      	push	{r4, lr}
 801019e:	4604      	mov	r4, r0
 80101a0:	f7ff fff0 	bl	8010184 <__sfp_lock_acquire>
 80101a4:	6a23      	ldr	r3, [r4, #32]
 80101a6:	b11b      	cbz	r3, 80101b0 <__sinit+0x14>
 80101a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101ac:	f7ff bff0 	b.w	8010190 <__sfp_lock_release>
 80101b0:	4b04      	ldr	r3, [pc, #16]	@ (80101c4 <__sinit+0x28>)
 80101b2:	6223      	str	r3, [r4, #32]
 80101b4:	4b04      	ldr	r3, [pc, #16]	@ (80101c8 <__sinit+0x2c>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d1f5      	bne.n	80101a8 <__sinit+0xc>
 80101bc:	f7ff ffc4 	bl	8010148 <global_stdio_init.part.0>
 80101c0:	e7f2      	b.n	80101a8 <__sinit+0xc>
 80101c2:	bf00      	nop
 80101c4:	08010109 	.word	0x08010109
 80101c8:	20005f60 	.word	0x20005f60

080101cc <_fwalk_sglue>:
 80101cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101d0:	4607      	mov	r7, r0
 80101d2:	4688      	mov	r8, r1
 80101d4:	4614      	mov	r4, r2
 80101d6:	2600      	movs	r6, #0
 80101d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101dc:	f1b9 0901 	subs.w	r9, r9, #1
 80101e0:	d505      	bpl.n	80101ee <_fwalk_sglue+0x22>
 80101e2:	6824      	ldr	r4, [r4, #0]
 80101e4:	2c00      	cmp	r4, #0
 80101e6:	d1f7      	bne.n	80101d8 <_fwalk_sglue+0xc>
 80101e8:	4630      	mov	r0, r6
 80101ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101ee:	89ab      	ldrh	r3, [r5, #12]
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d907      	bls.n	8010204 <_fwalk_sglue+0x38>
 80101f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101f8:	3301      	adds	r3, #1
 80101fa:	d003      	beq.n	8010204 <_fwalk_sglue+0x38>
 80101fc:	4629      	mov	r1, r5
 80101fe:	4638      	mov	r0, r7
 8010200:	47c0      	blx	r8
 8010202:	4306      	orrs	r6, r0
 8010204:	3568      	adds	r5, #104	@ 0x68
 8010206:	e7e9      	b.n	80101dc <_fwalk_sglue+0x10>

08010208 <sniprintf>:
 8010208:	b40c      	push	{r2, r3}
 801020a:	b530      	push	{r4, r5, lr}
 801020c:	4b18      	ldr	r3, [pc, #96]	@ (8010270 <sniprintf+0x68>)
 801020e:	1e0c      	subs	r4, r1, #0
 8010210:	681d      	ldr	r5, [r3, #0]
 8010212:	b09d      	sub	sp, #116	@ 0x74
 8010214:	da08      	bge.n	8010228 <sniprintf+0x20>
 8010216:	238b      	movs	r3, #139	@ 0x8b
 8010218:	602b      	str	r3, [r5, #0]
 801021a:	f04f 30ff 	mov.w	r0, #4294967295
 801021e:	b01d      	add	sp, #116	@ 0x74
 8010220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010224:	b002      	add	sp, #8
 8010226:	4770      	bx	lr
 8010228:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801022c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010230:	f04f 0300 	mov.w	r3, #0
 8010234:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010236:	bf14      	ite	ne
 8010238:	f104 33ff 	addne.w	r3, r4, #4294967295
 801023c:	4623      	moveq	r3, r4
 801023e:	9304      	str	r3, [sp, #16]
 8010240:	9307      	str	r3, [sp, #28]
 8010242:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010246:	9002      	str	r0, [sp, #8]
 8010248:	9006      	str	r0, [sp, #24]
 801024a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801024e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010250:	ab21      	add	r3, sp, #132	@ 0x84
 8010252:	a902      	add	r1, sp, #8
 8010254:	4628      	mov	r0, r5
 8010256:	9301      	str	r3, [sp, #4]
 8010258:	f001 fc7c 	bl	8011b54 <_svfiprintf_r>
 801025c:	1c43      	adds	r3, r0, #1
 801025e:	bfbc      	itt	lt
 8010260:	238b      	movlt	r3, #139	@ 0x8b
 8010262:	602b      	strlt	r3, [r5, #0]
 8010264:	2c00      	cmp	r4, #0
 8010266:	d0da      	beq.n	801021e <sniprintf+0x16>
 8010268:	9b02      	ldr	r3, [sp, #8]
 801026a:	2200      	movs	r2, #0
 801026c:	701a      	strb	r2, [r3, #0]
 801026e:	e7d6      	b.n	801021e <sniprintf+0x16>
 8010270:	20000088 	.word	0x20000088

08010274 <__sread>:
 8010274:	b510      	push	{r4, lr}
 8010276:	460c      	mov	r4, r1
 8010278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801027c:	f000 f8dc 	bl	8010438 <_read_r>
 8010280:	2800      	cmp	r0, #0
 8010282:	bfab      	itete	ge
 8010284:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010286:	89a3      	ldrhlt	r3, [r4, #12]
 8010288:	181b      	addge	r3, r3, r0
 801028a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801028e:	bfac      	ite	ge
 8010290:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010292:	81a3      	strhlt	r3, [r4, #12]
 8010294:	bd10      	pop	{r4, pc}

08010296 <__swrite>:
 8010296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801029a:	461f      	mov	r7, r3
 801029c:	898b      	ldrh	r3, [r1, #12]
 801029e:	05db      	lsls	r3, r3, #23
 80102a0:	4605      	mov	r5, r0
 80102a2:	460c      	mov	r4, r1
 80102a4:	4616      	mov	r6, r2
 80102a6:	d505      	bpl.n	80102b4 <__swrite+0x1e>
 80102a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ac:	2302      	movs	r3, #2
 80102ae:	2200      	movs	r2, #0
 80102b0:	f000 f8b0 	bl	8010414 <_lseek_r>
 80102b4:	89a3      	ldrh	r3, [r4, #12]
 80102b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80102be:	81a3      	strh	r3, [r4, #12]
 80102c0:	4632      	mov	r2, r6
 80102c2:	463b      	mov	r3, r7
 80102c4:	4628      	mov	r0, r5
 80102c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102ca:	f000 b8c7 	b.w	801045c <_write_r>

080102ce <__sseek>:
 80102ce:	b510      	push	{r4, lr}
 80102d0:	460c      	mov	r4, r1
 80102d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d6:	f000 f89d 	bl	8010414 <_lseek_r>
 80102da:	1c43      	adds	r3, r0, #1
 80102dc:	89a3      	ldrh	r3, [r4, #12]
 80102de:	bf15      	itete	ne
 80102e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80102e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80102e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80102ea:	81a3      	strheq	r3, [r4, #12]
 80102ec:	bf18      	it	ne
 80102ee:	81a3      	strhne	r3, [r4, #12]
 80102f0:	bd10      	pop	{r4, pc}

080102f2 <__sclose>:
 80102f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102f6:	f000 b81f 	b.w	8010338 <_close_r>

080102fa <memset>:
 80102fa:	4402      	add	r2, r0
 80102fc:	4603      	mov	r3, r0
 80102fe:	4293      	cmp	r3, r2
 8010300:	d100      	bne.n	8010304 <memset+0xa>
 8010302:	4770      	bx	lr
 8010304:	f803 1b01 	strb.w	r1, [r3], #1
 8010308:	e7f9      	b.n	80102fe <memset+0x4>

0801030a <strncat>:
 801030a:	b530      	push	{r4, r5, lr}
 801030c:	4604      	mov	r4, r0
 801030e:	7825      	ldrb	r5, [r4, #0]
 8010310:	4623      	mov	r3, r4
 8010312:	3401      	adds	r4, #1
 8010314:	2d00      	cmp	r5, #0
 8010316:	d1fa      	bne.n	801030e <strncat+0x4>
 8010318:	3a01      	subs	r2, #1
 801031a:	d304      	bcc.n	8010326 <strncat+0x1c>
 801031c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010320:	f803 4b01 	strb.w	r4, [r3], #1
 8010324:	b904      	cbnz	r4, 8010328 <strncat+0x1e>
 8010326:	bd30      	pop	{r4, r5, pc}
 8010328:	2a00      	cmp	r2, #0
 801032a:	d1f5      	bne.n	8010318 <strncat+0xe>
 801032c:	701a      	strb	r2, [r3, #0]
 801032e:	e7f3      	b.n	8010318 <strncat+0xe>

08010330 <_localeconv_r>:
 8010330:	4800      	ldr	r0, [pc, #0]	@ (8010334 <_localeconv_r+0x4>)
 8010332:	4770      	bx	lr
 8010334:	200001c8 	.word	0x200001c8

08010338 <_close_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4d06      	ldr	r5, [pc, #24]	@ (8010354 <_close_r+0x1c>)
 801033c:	2300      	movs	r3, #0
 801033e:	4604      	mov	r4, r0
 8010340:	4608      	mov	r0, r1
 8010342:	602b      	str	r3, [r5, #0]
 8010344:	f7f4 f83c 	bl	80043c0 <_close>
 8010348:	1c43      	adds	r3, r0, #1
 801034a:	d102      	bne.n	8010352 <_close_r+0x1a>
 801034c:	682b      	ldr	r3, [r5, #0]
 801034e:	b103      	cbz	r3, 8010352 <_close_r+0x1a>
 8010350:	6023      	str	r3, [r4, #0]
 8010352:	bd38      	pop	{r3, r4, r5, pc}
 8010354:	20005f64 	.word	0x20005f64

08010358 <_reclaim_reent>:
 8010358:	4b2d      	ldr	r3, [pc, #180]	@ (8010410 <_reclaim_reent+0xb8>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4283      	cmp	r3, r0
 801035e:	b570      	push	{r4, r5, r6, lr}
 8010360:	4604      	mov	r4, r0
 8010362:	d053      	beq.n	801040c <_reclaim_reent+0xb4>
 8010364:	69c3      	ldr	r3, [r0, #28]
 8010366:	b31b      	cbz	r3, 80103b0 <_reclaim_reent+0x58>
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	b163      	cbz	r3, 8010386 <_reclaim_reent+0x2e>
 801036c:	2500      	movs	r5, #0
 801036e:	69e3      	ldr	r3, [r4, #28]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	5959      	ldr	r1, [r3, r5]
 8010374:	b9b1      	cbnz	r1, 80103a4 <_reclaim_reent+0x4c>
 8010376:	3504      	adds	r5, #4
 8010378:	2d80      	cmp	r5, #128	@ 0x80
 801037a:	d1f8      	bne.n	801036e <_reclaim_reent+0x16>
 801037c:	69e3      	ldr	r3, [r4, #28]
 801037e:	4620      	mov	r0, r4
 8010380:	68d9      	ldr	r1, [r3, #12]
 8010382:	f000 ff11 	bl	80111a8 <_free_r>
 8010386:	69e3      	ldr	r3, [r4, #28]
 8010388:	6819      	ldr	r1, [r3, #0]
 801038a:	b111      	cbz	r1, 8010392 <_reclaim_reent+0x3a>
 801038c:	4620      	mov	r0, r4
 801038e:	f000 ff0b 	bl	80111a8 <_free_r>
 8010392:	69e3      	ldr	r3, [r4, #28]
 8010394:	689d      	ldr	r5, [r3, #8]
 8010396:	b15d      	cbz	r5, 80103b0 <_reclaim_reent+0x58>
 8010398:	4629      	mov	r1, r5
 801039a:	4620      	mov	r0, r4
 801039c:	682d      	ldr	r5, [r5, #0]
 801039e:	f000 ff03 	bl	80111a8 <_free_r>
 80103a2:	e7f8      	b.n	8010396 <_reclaim_reent+0x3e>
 80103a4:	680e      	ldr	r6, [r1, #0]
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 fefe 	bl	80111a8 <_free_r>
 80103ac:	4631      	mov	r1, r6
 80103ae:	e7e1      	b.n	8010374 <_reclaim_reent+0x1c>
 80103b0:	6961      	ldr	r1, [r4, #20]
 80103b2:	b111      	cbz	r1, 80103ba <_reclaim_reent+0x62>
 80103b4:	4620      	mov	r0, r4
 80103b6:	f000 fef7 	bl	80111a8 <_free_r>
 80103ba:	69e1      	ldr	r1, [r4, #28]
 80103bc:	b111      	cbz	r1, 80103c4 <_reclaim_reent+0x6c>
 80103be:	4620      	mov	r0, r4
 80103c0:	f000 fef2 	bl	80111a8 <_free_r>
 80103c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80103c6:	b111      	cbz	r1, 80103ce <_reclaim_reent+0x76>
 80103c8:	4620      	mov	r0, r4
 80103ca:	f000 feed 	bl	80111a8 <_free_r>
 80103ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80103d0:	b111      	cbz	r1, 80103d8 <_reclaim_reent+0x80>
 80103d2:	4620      	mov	r0, r4
 80103d4:	f000 fee8 	bl	80111a8 <_free_r>
 80103d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80103da:	b111      	cbz	r1, 80103e2 <_reclaim_reent+0x8a>
 80103dc:	4620      	mov	r0, r4
 80103de:	f000 fee3 	bl	80111a8 <_free_r>
 80103e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80103e4:	b111      	cbz	r1, 80103ec <_reclaim_reent+0x94>
 80103e6:	4620      	mov	r0, r4
 80103e8:	f000 fede 	bl	80111a8 <_free_r>
 80103ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80103ee:	b111      	cbz	r1, 80103f6 <_reclaim_reent+0x9e>
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 fed9 	bl	80111a8 <_free_r>
 80103f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80103f8:	b111      	cbz	r1, 8010400 <_reclaim_reent+0xa8>
 80103fa:	4620      	mov	r0, r4
 80103fc:	f000 fed4 	bl	80111a8 <_free_r>
 8010400:	6a23      	ldr	r3, [r4, #32]
 8010402:	b11b      	cbz	r3, 801040c <_reclaim_reent+0xb4>
 8010404:	4620      	mov	r0, r4
 8010406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801040a:	4718      	bx	r3
 801040c:	bd70      	pop	{r4, r5, r6, pc}
 801040e:	bf00      	nop
 8010410:	20000088 	.word	0x20000088

08010414 <_lseek_r>:
 8010414:	b538      	push	{r3, r4, r5, lr}
 8010416:	4d07      	ldr	r5, [pc, #28]	@ (8010434 <_lseek_r+0x20>)
 8010418:	4604      	mov	r4, r0
 801041a:	4608      	mov	r0, r1
 801041c:	4611      	mov	r1, r2
 801041e:	2200      	movs	r2, #0
 8010420:	602a      	str	r2, [r5, #0]
 8010422:	461a      	mov	r2, r3
 8010424:	f7f3 fff3 	bl	800440e <_lseek>
 8010428:	1c43      	adds	r3, r0, #1
 801042a:	d102      	bne.n	8010432 <_lseek_r+0x1e>
 801042c:	682b      	ldr	r3, [r5, #0]
 801042e:	b103      	cbz	r3, 8010432 <_lseek_r+0x1e>
 8010430:	6023      	str	r3, [r4, #0]
 8010432:	bd38      	pop	{r3, r4, r5, pc}
 8010434:	20005f64 	.word	0x20005f64

08010438 <_read_r>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4d07      	ldr	r5, [pc, #28]	@ (8010458 <_read_r+0x20>)
 801043c:	4604      	mov	r4, r0
 801043e:	4608      	mov	r0, r1
 8010440:	4611      	mov	r1, r2
 8010442:	2200      	movs	r2, #0
 8010444:	602a      	str	r2, [r5, #0]
 8010446:	461a      	mov	r2, r3
 8010448:	f7f3 ff81 	bl	800434e <_read>
 801044c:	1c43      	adds	r3, r0, #1
 801044e:	d102      	bne.n	8010456 <_read_r+0x1e>
 8010450:	682b      	ldr	r3, [r5, #0]
 8010452:	b103      	cbz	r3, 8010456 <_read_r+0x1e>
 8010454:	6023      	str	r3, [r4, #0]
 8010456:	bd38      	pop	{r3, r4, r5, pc}
 8010458:	20005f64 	.word	0x20005f64

0801045c <_write_r>:
 801045c:	b538      	push	{r3, r4, r5, lr}
 801045e:	4d07      	ldr	r5, [pc, #28]	@ (801047c <_write_r+0x20>)
 8010460:	4604      	mov	r4, r0
 8010462:	4608      	mov	r0, r1
 8010464:	4611      	mov	r1, r2
 8010466:	2200      	movs	r2, #0
 8010468:	602a      	str	r2, [r5, #0]
 801046a:	461a      	mov	r2, r3
 801046c:	f7f3 ff8c 	bl	8004388 <_write>
 8010470:	1c43      	adds	r3, r0, #1
 8010472:	d102      	bne.n	801047a <_write_r+0x1e>
 8010474:	682b      	ldr	r3, [r5, #0]
 8010476:	b103      	cbz	r3, 801047a <_write_r+0x1e>
 8010478:	6023      	str	r3, [r4, #0]
 801047a:	bd38      	pop	{r3, r4, r5, pc}
 801047c:	20005f64 	.word	0x20005f64

08010480 <__errno>:
 8010480:	4b01      	ldr	r3, [pc, #4]	@ (8010488 <__errno+0x8>)
 8010482:	6818      	ldr	r0, [r3, #0]
 8010484:	4770      	bx	lr
 8010486:	bf00      	nop
 8010488:	20000088 	.word	0x20000088

0801048c <__libc_init_array>:
 801048c:	b570      	push	{r4, r5, r6, lr}
 801048e:	4d0d      	ldr	r5, [pc, #52]	@ (80104c4 <__libc_init_array+0x38>)
 8010490:	4c0d      	ldr	r4, [pc, #52]	@ (80104c8 <__libc_init_array+0x3c>)
 8010492:	1b64      	subs	r4, r4, r5
 8010494:	10a4      	asrs	r4, r4, #2
 8010496:	2600      	movs	r6, #0
 8010498:	42a6      	cmp	r6, r4
 801049a:	d109      	bne.n	80104b0 <__libc_init_array+0x24>
 801049c:	4d0b      	ldr	r5, [pc, #44]	@ (80104cc <__libc_init_array+0x40>)
 801049e:	4c0c      	ldr	r4, [pc, #48]	@ (80104d0 <__libc_init_array+0x44>)
 80104a0:	f002 fa3c 	bl	801291c <_init>
 80104a4:	1b64      	subs	r4, r4, r5
 80104a6:	10a4      	asrs	r4, r4, #2
 80104a8:	2600      	movs	r6, #0
 80104aa:	42a6      	cmp	r6, r4
 80104ac:	d105      	bne.n	80104ba <__libc_init_array+0x2e>
 80104ae:	bd70      	pop	{r4, r5, r6, pc}
 80104b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80104b4:	4798      	blx	r3
 80104b6:	3601      	adds	r6, #1
 80104b8:	e7ee      	b.n	8010498 <__libc_init_array+0xc>
 80104ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80104be:	4798      	blx	r3
 80104c0:	3601      	adds	r6, #1
 80104c2:	e7f2      	b.n	80104aa <__libc_init_array+0x1e>
 80104c4:	08013894 	.word	0x08013894
 80104c8:	08013894 	.word	0x08013894
 80104cc:	08013894 	.word	0x08013894
 80104d0:	08013898 	.word	0x08013898

080104d4 <__retarget_lock_init_recursive>:
 80104d4:	4770      	bx	lr

080104d6 <__retarget_lock_acquire_recursive>:
 80104d6:	4770      	bx	lr

080104d8 <__retarget_lock_release_recursive>:
 80104d8:	4770      	bx	lr

080104da <memcpy>:
 80104da:	440a      	add	r2, r1
 80104dc:	4291      	cmp	r1, r2
 80104de:	f100 33ff 	add.w	r3, r0, #4294967295
 80104e2:	d100      	bne.n	80104e6 <memcpy+0xc>
 80104e4:	4770      	bx	lr
 80104e6:	b510      	push	{r4, lr}
 80104e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104f0:	4291      	cmp	r1, r2
 80104f2:	d1f9      	bne.n	80104e8 <memcpy+0xe>
 80104f4:	bd10      	pop	{r4, pc}

080104f6 <quorem>:
 80104f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fa:	6903      	ldr	r3, [r0, #16]
 80104fc:	690c      	ldr	r4, [r1, #16]
 80104fe:	42a3      	cmp	r3, r4
 8010500:	4607      	mov	r7, r0
 8010502:	db7e      	blt.n	8010602 <quorem+0x10c>
 8010504:	3c01      	subs	r4, #1
 8010506:	f101 0814 	add.w	r8, r1, #20
 801050a:	00a3      	lsls	r3, r4, #2
 801050c:	f100 0514 	add.w	r5, r0, #20
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010516:	9301      	str	r3, [sp, #4]
 8010518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801051c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010520:	3301      	adds	r3, #1
 8010522:	429a      	cmp	r2, r3
 8010524:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010528:	fbb2 f6f3 	udiv	r6, r2, r3
 801052c:	d32e      	bcc.n	801058c <quorem+0x96>
 801052e:	f04f 0a00 	mov.w	sl, #0
 8010532:	46c4      	mov	ip, r8
 8010534:	46ae      	mov	lr, r5
 8010536:	46d3      	mov	fp, sl
 8010538:	f85c 3b04 	ldr.w	r3, [ip], #4
 801053c:	b298      	uxth	r0, r3
 801053e:	fb06 a000 	mla	r0, r6, r0, sl
 8010542:	0c02      	lsrs	r2, r0, #16
 8010544:	0c1b      	lsrs	r3, r3, #16
 8010546:	fb06 2303 	mla	r3, r6, r3, r2
 801054a:	f8de 2000 	ldr.w	r2, [lr]
 801054e:	b280      	uxth	r0, r0
 8010550:	b292      	uxth	r2, r2
 8010552:	1a12      	subs	r2, r2, r0
 8010554:	445a      	add	r2, fp
 8010556:	f8de 0000 	ldr.w	r0, [lr]
 801055a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801055e:	b29b      	uxth	r3, r3
 8010560:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010564:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010568:	b292      	uxth	r2, r2
 801056a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801056e:	45e1      	cmp	r9, ip
 8010570:	f84e 2b04 	str.w	r2, [lr], #4
 8010574:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010578:	d2de      	bcs.n	8010538 <quorem+0x42>
 801057a:	9b00      	ldr	r3, [sp, #0]
 801057c:	58eb      	ldr	r3, [r5, r3]
 801057e:	b92b      	cbnz	r3, 801058c <quorem+0x96>
 8010580:	9b01      	ldr	r3, [sp, #4]
 8010582:	3b04      	subs	r3, #4
 8010584:	429d      	cmp	r5, r3
 8010586:	461a      	mov	r2, r3
 8010588:	d32f      	bcc.n	80105ea <quorem+0xf4>
 801058a:	613c      	str	r4, [r7, #16]
 801058c:	4638      	mov	r0, r7
 801058e:	f001 f97d 	bl	801188c <__mcmp>
 8010592:	2800      	cmp	r0, #0
 8010594:	db25      	blt.n	80105e2 <quorem+0xec>
 8010596:	4629      	mov	r1, r5
 8010598:	2000      	movs	r0, #0
 801059a:	f858 2b04 	ldr.w	r2, [r8], #4
 801059e:	f8d1 c000 	ldr.w	ip, [r1]
 80105a2:	fa1f fe82 	uxth.w	lr, r2
 80105a6:	fa1f f38c 	uxth.w	r3, ip
 80105aa:	eba3 030e 	sub.w	r3, r3, lr
 80105ae:	4403      	add	r3, r0
 80105b0:	0c12      	lsrs	r2, r2, #16
 80105b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80105b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105c0:	45c1      	cmp	r9, r8
 80105c2:	f841 3b04 	str.w	r3, [r1], #4
 80105c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80105ca:	d2e6      	bcs.n	801059a <quorem+0xa4>
 80105cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105d4:	b922      	cbnz	r2, 80105e0 <quorem+0xea>
 80105d6:	3b04      	subs	r3, #4
 80105d8:	429d      	cmp	r5, r3
 80105da:	461a      	mov	r2, r3
 80105dc:	d30b      	bcc.n	80105f6 <quorem+0x100>
 80105de:	613c      	str	r4, [r7, #16]
 80105e0:	3601      	adds	r6, #1
 80105e2:	4630      	mov	r0, r6
 80105e4:	b003      	add	sp, #12
 80105e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ea:	6812      	ldr	r2, [r2, #0]
 80105ec:	3b04      	subs	r3, #4
 80105ee:	2a00      	cmp	r2, #0
 80105f0:	d1cb      	bne.n	801058a <quorem+0x94>
 80105f2:	3c01      	subs	r4, #1
 80105f4:	e7c6      	b.n	8010584 <quorem+0x8e>
 80105f6:	6812      	ldr	r2, [r2, #0]
 80105f8:	3b04      	subs	r3, #4
 80105fa:	2a00      	cmp	r2, #0
 80105fc:	d1ef      	bne.n	80105de <quorem+0xe8>
 80105fe:	3c01      	subs	r4, #1
 8010600:	e7ea      	b.n	80105d8 <quorem+0xe2>
 8010602:	2000      	movs	r0, #0
 8010604:	e7ee      	b.n	80105e4 <quorem+0xee>
	...

08010608 <_dtoa_r>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	69c7      	ldr	r7, [r0, #28]
 801060e:	b097      	sub	sp, #92	@ 0x5c
 8010610:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010614:	ec55 4b10 	vmov	r4, r5, d0
 8010618:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801061a:	9107      	str	r1, [sp, #28]
 801061c:	4681      	mov	r9, r0
 801061e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010620:	9311      	str	r3, [sp, #68]	@ 0x44
 8010622:	b97f      	cbnz	r7, 8010644 <_dtoa_r+0x3c>
 8010624:	2010      	movs	r0, #16
 8010626:	f000 fe09 	bl	801123c <malloc>
 801062a:	4602      	mov	r2, r0
 801062c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010630:	b920      	cbnz	r0, 801063c <_dtoa_r+0x34>
 8010632:	4ba9      	ldr	r3, [pc, #676]	@ (80108d8 <_dtoa_r+0x2d0>)
 8010634:	21ef      	movs	r1, #239	@ 0xef
 8010636:	48a9      	ldr	r0, [pc, #676]	@ (80108dc <_dtoa_r+0x2d4>)
 8010638:	f001 fc5e 	bl	8011ef8 <__assert_func>
 801063c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010640:	6007      	str	r7, [r0, #0]
 8010642:	60c7      	str	r7, [r0, #12]
 8010644:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010648:	6819      	ldr	r1, [r3, #0]
 801064a:	b159      	cbz	r1, 8010664 <_dtoa_r+0x5c>
 801064c:	685a      	ldr	r2, [r3, #4]
 801064e:	604a      	str	r2, [r1, #4]
 8010650:	2301      	movs	r3, #1
 8010652:	4093      	lsls	r3, r2
 8010654:	608b      	str	r3, [r1, #8]
 8010656:	4648      	mov	r0, r9
 8010658:	f000 fee6 	bl	8011428 <_Bfree>
 801065c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010660:	2200      	movs	r2, #0
 8010662:	601a      	str	r2, [r3, #0]
 8010664:	1e2b      	subs	r3, r5, #0
 8010666:	bfb9      	ittee	lt
 8010668:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801066c:	9305      	strlt	r3, [sp, #20]
 801066e:	2300      	movge	r3, #0
 8010670:	6033      	strge	r3, [r6, #0]
 8010672:	9f05      	ldr	r7, [sp, #20]
 8010674:	4b9a      	ldr	r3, [pc, #616]	@ (80108e0 <_dtoa_r+0x2d8>)
 8010676:	bfbc      	itt	lt
 8010678:	2201      	movlt	r2, #1
 801067a:	6032      	strlt	r2, [r6, #0]
 801067c:	43bb      	bics	r3, r7
 801067e:	d112      	bne.n	80106a6 <_dtoa_r+0x9e>
 8010680:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010682:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010686:	6013      	str	r3, [r2, #0]
 8010688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801068c:	4323      	orrs	r3, r4
 801068e:	f000 855a 	beq.w	8011146 <_dtoa_r+0xb3e>
 8010692:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010694:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80108f4 <_dtoa_r+0x2ec>
 8010698:	2b00      	cmp	r3, #0
 801069a:	f000 855c 	beq.w	8011156 <_dtoa_r+0xb4e>
 801069e:	f10a 0303 	add.w	r3, sl, #3
 80106a2:	f000 bd56 	b.w	8011152 <_dtoa_r+0xb4a>
 80106a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80106aa:	2200      	movs	r2, #0
 80106ac:	ec51 0b17 	vmov	r0, r1, d7
 80106b0:	2300      	movs	r3, #0
 80106b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80106b6:	f7f0 fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80106ba:	4680      	mov	r8, r0
 80106bc:	b158      	cbz	r0, 80106d6 <_dtoa_r+0xce>
 80106be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106c0:	2301      	movs	r3, #1
 80106c2:	6013      	str	r3, [r2, #0]
 80106c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80106c6:	b113      	cbz	r3, 80106ce <_dtoa_r+0xc6>
 80106c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80106ca:	4b86      	ldr	r3, [pc, #536]	@ (80108e4 <_dtoa_r+0x2dc>)
 80106cc:	6013      	str	r3, [r2, #0]
 80106ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80108f8 <_dtoa_r+0x2f0>
 80106d2:	f000 bd40 	b.w	8011156 <_dtoa_r+0xb4e>
 80106d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80106da:	aa14      	add	r2, sp, #80	@ 0x50
 80106dc:	a915      	add	r1, sp, #84	@ 0x54
 80106de:	4648      	mov	r0, r9
 80106e0:	f001 f984 	bl	80119ec <__d2b>
 80106e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80106e8:	9002      	str	r0, [sp, #8]
 80106ea:	2e00      	cmp	r6, #0
 80106ec:	d078      	beq.n	80107e0 <_dtoa_r+0x1d8>
 80106ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80106f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80106fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010700:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010704:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010708:	4619      	mov	r1, r3
 801070a:	2200      	movs	r2, #0
 801070c:	4b76      	ldr	r3, [pc, #472]	@ (80108e8 <_dtoa_r+0x2e0>)
 801070e:	f7ef fdc3 	bl	8000298 <__aeabi_dsub>
 8010712:	a36b      	add	r3, pc, #428	@ (adr r3, 80108c0 <_dtoa_r+0x2b8>)
 8010714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010718:	f7ef ff76 	bl	8000608 <__aeabi_dmul>
 801071c:	a36a      	add	r3, pc, #424	@ (adr r3, 80108c8 <_dtoa_r+0x2c0>)
 801071e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010722:	f7ef fdbb 	bl	800029c <__adddf3>
 8010726:	4604      	mov	r4, r0
 8010728:	4630      	mov	r0, r6
 801072a:	460d      	mov	r5, r1
 801072c:	f7ef ff02 	bl	8000534 <__aeabi_i2d>
 8010730:	a367      	add	r3, pc, #412	@ (adr r3, 80108d0 <_dtoa_r+0x2c8>)
 8010732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010736:	f7ef ff67 	bl	8000608 <__aeabi_dmul>
 801073a:	4602      	mov	r2, r0
 801073c:	460b      	mov	r3, r1
 801073e:	4620      	mov	r0, r4
 8010740:	4629      	mov	r1, r5
 8010742:	f7ef fdab 	bl	800029c <__adddf3>
 8010746:	4604      	mov	r4, r0
 8010748:	460d      	mov	r5, r1
 801074a:	f7f0 fa0d 	bl	8000b68 <__aeabi_d2iz>
 801074e:	2200      	movs	r2, #0
 8010750:	4607      	mov	r7, r0
 8010752:	2300      	movs	r3, #0
 8010754:	4620      	mov	r0, r4
 8010756:	4629      	mov	r1, r5
 8010758:	f7f0 f9c8 	bl	8000aec <__aeabi_dcmplt>
 801075c:	b140      	cbz	r0, 8010770 <_dtoa_r+0x168>
 801075e:	4638      	mov	r0, r7
 8010760:	f7ef fee8 	bl	8000534 <__aeabi_i2d>
 8010764:	4622      	mov	r2, r4
 8010766:	462b      	mov	r3, r5
 8010768:	f7f0 f9b6 	bl	8000ad8 <__aeabi_dcmpeq>
 801076c:	b900      	cbnz	r0, 8010770 <_dtoa_r+0x168>
 801076e:	3f01      	subs	r7, #1
 8010770:	2f16      	cmp	r7, #22
 8010772:	d852      	bhi.n	801081a <_dtoa_r+0x212>
 8010774:	4b5d      	ldr	r3, [pc, #372]	@ (80108ec <_dtoa_r+0x2e4>)
 8010776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010782:	f7f0 f9b3 	bl	8000aec <__aeabi_dcmplt>
 8010786:	2800      	cmp	r0, #0
 8010788:	d049      	beq.n	801081e <_dtoa_r+0x216>
 801078a:	3f01      	subs	r7, #1
 801078c:	2300      	movs	r3, #0
 801078e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010790:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010792:	1b9b      	subs	r3, r3, r6
 8010794:	1e5a      	subs	r2, r3, #1
 8010796:	bf45      	ittet	mi
 8010798:	f1c3 0301 	rsbmi	r3, r3, #1
 801079c:	9300      	strmi	r3, [sp, #0]
 801079e:	2300      	movpl	r3, #0
 80107a0:	2300      	movmi	r3, #0
 80107a2:	9206      	str	r2, [sp, #24]
 80107a4:	bf54      	ite	pl
 80107a6:	9300      	strpl	r3, [sp, #0]
 80107a8:	9306      	strmi	r3, [sp, #24]
 80107aa:	2f00      	cmp	r7, #0
 80107ac:	db39      	blt.n	8010822 <_dtoa_r+0x21a>
 80107ae:	9b06      	ldr	r3, [sp, #24]
 80107b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80107b2:	443b      	add	r3, r7
 80107b4:	9306      	str	r3, [sp, #24]
 80107b6:	2300      	movs	r3, #0
 80107b8:	9308      	str	r3, [sp, #32]
 80107ba:	9b07      	ldr	r3, [sp, #28]
 80107bc:	2b09      	cmp	r3, #9
 80107be:	d863      	bhi.n	8010888 <_dtoa_r+0x280>
 80107c0:	2b05      	cmp	r3, #5
 80107c2:	bfc4      	itt	gt
 80107c4:	3b04      	subgt	r3, #4
 80107c6:	9307      	strgt	r3, [sp, #28]
 80107c8:	9b07      	ldr	r3, [sp, #28]
 80107ca:	f1a3 0302 	sub.w	r3, r3, #2
 80107ce:	bfcc      	ite	gt
 80107d0:	2400      	movgt	r4, #0
 80107d2:	2401      	movle	r4, #1
 80107d4:	2b03      	cmp	r3, #3
 80107d6:	d863      	bhi.n	80108a0 <_dtoa_r+0x298>
 80107d8:	e8df f003 	tbb	[pc, r3]
 80107dc:	2b375452 	.word	0x2b375452
 80107e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80107e4:	441e      	add	r6, r3
 80107e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80107ea:	2b20      	cmp	r3, #32
 80107ec:	bfc1      	itttt	gt
 80107ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80107f2:	409f      	lslgt	r7, r3
 80107f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80107f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80107fc:	bfd6      	itet	le
 80107fe:	f1c3 0320 	rsble	r3, r3, #32
 8010802:	ea47 0003 	orrgt.w	r0, r7, r3
 8010806:	fa04 f003 	lslle.w	r0, r4, r3
 801080a:	f7ef fe83 	bl	8000514 <__aeabi_ui2d>
 801080e:	2201      	movs	r2, #1
 8010810:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010814:	3e01      	subs	r6, #1
 8010816:	9212      	str	r2, [sp, #72]	@ 0x48
 8010818:	e776      	b.n	8010708 <_dtoa_r+0x100>
 801081a:	2301      	movs	r3, #1
 801081c:	e7b7      	b.n	801078e <_dtoa_r+0x186>
 801081e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010820:	e7b6      	b.n	8010790 <_dtoa_r+0x188>
 8010822:	9b00      	ldr	r3, [sp, #0]
 8010824:	1bdb      	subs	r3, r3, r7
 8010826:	9300      	str	r3, [sp, #0]
 8010828:	427b      	negs	r3, r7
 801082a:	9308      	str	r3, [sp, #32]
 801082c:	2300      	movs	r3, #0
 801082e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010830:	e7c3      	b.n	80107ba <_dtoa_r+0x1b2>
 8010832:	2301      	movs	r3, #1
 8010834:	9309      	str	r3, [sp, #36]	@ 0x24
 8010836:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010838:	eb07 0b03 	add.w	fp, r7, r3
 801083c:	f10b 0301 	add.w	r3, fp, #1
 8010840:	2b01      	cmp	r3, #1
 8010842:	9303      	str	r3, [sp, #12]
 8010844:	bfb8      	it	lt
 8010846:	2301      	movlt	r3, #1
 8010848:	e006      	b.n	8010858 <_dtoa_r+0x250>
 801084a:	2301      	movs	r3, #1
 801084c:	9309      	str	r3, [sp, #36]	@ 0x24
 801084e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010850:	2b00      	cmp	r3, #0
 8010852:	dd28      	ble.n	80108a6 <_dtoa_r+0x29e>
 8010854:	469b      	mov	fp, r3
 8010856:	9303      	str	r3, [sp, #12]
 8010858:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801085c:	2100      	movs	r1, #0
 801085e:	2204      	movs	r2, #4
 8010860:	f102 0514 	add.w	r5, r2, #20
 8010864:	429d      	cmp	r5, r3
 8010866:	d926      	bls.n	80108b6 <_dtoa_r+0x2ae>
 8010868:	6041      	str	r1, [r0, #4]
 801086a:	4648      	mov	r0, r9
 801086c:	f000 fd9c 	bl	80113a8 <_Balloc>
 8010870:	4682      	mov	sl, r0
 8010872:	2800      	cmp	r0, #0
 8010874:	d142      	bne.n	80108fc <_dtoa_r+0x2f4>
 8010876:	4b1e      	ldr	r3, [pc, #120]	@ (80108f0 <_dtoa_r+0x2e8>)
 8010878:	4602      	mov	r2, r0
 801087a:	f240 11af 	movw	r1, #431	@ 0x1af
 801087e:	e6da      	b.n	8010636 <_dtoa_r+0x2e>
 8010880:	2300      	movs	r3, #0
 8010882:	e7e3      	b.n	801084c <_dtoa_r+0x244>
 8010884:	2300      	movs	r3, #0
 8010886:	e7d5      	b.n	8010834 <_dtoa_r+0x22c>
 8010888:	2401      	movs	r4, #1
 801088a:	2300      	movs	r3, #0
 801088c:	9307      	str	r3, [sp, #28]
 801088e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010890:	f04f 3bff 	mov.w	fp, #4294967295
 8010894:	2200      	movs	r2, #0
 8010896:	f8cd b00c 	str.w	fp, [sp, #12]
 801089a:	2312      	movs	r3, #18
 801089c:	920c      	str	r2, [sp, #48]	@ 0x30
 801089e:	e7db      	b.n	8010858 <_dtoa_r+0x250>
 80108a0:	2301      	movs	r3, #1
 80108a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80108a4:	e7f4      	b.n	8010890 <_dtoa_r+0x288>
 80108a6:	f04f 0b01 	mov.w	fp, #1
 80108aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80108ae:	465b      	mov	r3, fp
 80108b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80108b4:	e7d0      	b.n	8010858 <_dtoa_r+0x250>
 80108b6:	3101      	adds	r1, #1
 80108b8:	0052      	lsls	r2, r2, #1
 80108ba:	e7d1      	b.n	8010860 <_dtoa_r+0x258>
 80108bc:	f3af 8000 	nop.w
 80108c0:	636f4361 	.word	0x636f4361
 80108c4:	3fd287a7 	.word	0x3fd287a7
 80108c8:	8b60c8b3 	.word	0x8b60c8b3
 80108cc:	3fc68a28 	.word	0x3fc68a28
 80108d0:	509f79fb 	.word	0x509f79fb
 80108d4:	3fd34413 	.word	0x3fd34413
 80108d8:	0801351d 	.word	0x0801351d
 80108dc:	08013534 	.word	0x08013534
 80108e0:	7ff00000 	.word	0x7ff00000
 80108e4:	080134ed 	.word	0x080134ed
 80108e8:	3ff80000 	.word	0x3ff80000
 80108ec:	08013688 	.word	0x08013688
 80108f0:	0801358c 	.word	0x0801358c
 80108f4:	08013519 	.word	0x08013519
 80108f8:	080134ec 	.word	0x080134ec
 80108fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010900:	6018      	str	r0, [r3, #0]
 8010902:	9b03      	ldr	r3, [sp, #12]
 8010904:	2b0e      	cmp	r3, #14
 8010906:	f200 80a1 	bhi.w	8010a4c <_dtoa_r+0x444>
 801090a:	2c00      	cmp	r4, #0
 801090c:	f000 809e 	beq.w	8010a4c <_dtoa_r+0x444>
 8010910:	2f00      	cmp	r7, #0
 8010912:	dd33      	ble.n	801097c <_dtoa_r+0x374>
 8010914:	4b9c      	ldr	r3, [pc, #624]	@ (8010b88 <_dtoa_r+0x580>)
 8010916:	f007 020f 	and.w	r2, r7, #15
 801091a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801091e:	ed93 7b00 	vldr	d7, [r3]
 8010922:	05f8      	lsls	r0, r7, #23
 8010924:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010928:	ea4f 1427 	mov.w	r4, r7, asr #4
 801092c:	d516      	bpl.n	801095c <_dtoa_r+0x354>
 801092e:	4b97      	ldr	r3, [pc, #604]	@ (8010b8c <_dtoa_r+0x584>)
 8010930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010938:	f7ef ff90 	bl	800085c <__aeabi_ddiv>
 801093c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010940:	f004 040f 	and.w	r4, r4, #15
 8010944:	2603      	movs	r6, #3
 8010946:	4d91      	ldr	r5, [pc, #580]	@ (8010b8c <_dtoa_r+0x584>)
 8010948:	b954      	cbnz	r4, 8010960 <_dtoa_r+0x358>
 801094a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801094e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010952:	f7ef ff83 	bl	800085c <__aeabi_ddiv>
 8010956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801095a:	e028      	b.n	80109ae <_dtoa_r+0x3a6>
 801095c:	2602      	movs	r6, #2
 801095e:	e7f2      	b.n	8010946 <_dtoa_r+0x33e>
 8010960:	07e1      	lsls	r1, r4, #31
 8010962:	d508      	bpl.n	8010976 <_dtoa_r+0x36e>
 8010964:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010968:	e9d5 2300 	ldrd	r2, r3, [r5]
 801096c:	f7ef fe4c 	bl	8000608 <__aeabi_dmul>
 8010970:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010974:	3601      	adds	r6, #1
 8010976:	1064      	asrs	r4, r4, #1
 8010978:	3508      	adds	r5, #8
 801097a:	e7e5      	b.n	8010948 <_dtoa_r+0x340>
 801097c:	f000 80af 	beq.w	8010ade <_dtoa_r+0x4d6>
 8010980:	427c      	negs	r4, r7
 8010982:	4b81      	ldr	r3, [pc, #516]	@ (8010b88 <_dtoa_r+0x580>)
 8010984:	4d81      	ldr	r5, [pc, #516]	@ (8010b8c <_dtoa_r+0x584>)
 8010986:	f004 020f 	and.w	r2, r4, #15
 801098a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010992:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010996:	f7ef fe37 	bl	8000608 <__aeabi_dmul>
 801099a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801099e:	1124      	asrs	r4, r4, #4
 80109a0:	2300      	movs	r3, #0
 80109a2:	2602      	movs	r6, #2
 80109a4:	2c00      	cmp	r4, #0
 80109a6:	f040 808f 	bne.w	8010ac8 <_dtoa_r+0x4c0>
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d1d3      	bne.n	8010956 <_dtoa_r+0x34e>
 80109ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f000 8094 	beq.w	8010ae2 <_dtoa_r+0x4da>
 80109ba:	4b75      	ldr	r3, [pc, #468]	@ (8010b90 <_dtoa_r+0x588>)
 80109bc:	2200      	movs	r2, #0
 80109be:	4620      	mov	r0, r4
 80109c0:	4629      	mov	r1, r5
 80109c2:	f7f0 f893 	bl	8000aec <__aeabi_dcmplt>
 80109c6:	2800      	cmp	r0, #0
 80109c8:	f000 808b 	beq.w	8010ae2 <_dtoa_r+0x4da>
 80109cc:	9b03      	ldr	r3, [sp, #12]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	f000 8087 	beq.w	8010ae2 <_dtoa_r+0x4da>
 80109d4:	f1bb 0f00 	cmp.w	fp, #0
 80109d8:	dd34      	ble.n	8010a44 <_dtoa_r+0x43c>
 80109da:	4620      	mov	r0, r4
 80109dc:	4b6d      	ldr	r3, [pc, #436]	@ (8010b94 <_dtoa_r+0x58c>)
 80109de:	2200      	movs	r2, #0
 80109e0:	4629      	mov	r1, r5
 80109e2:	f7ef fe11 	bl	8000608 <__aeabi_dmul>
 80109e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109ea:	f107 38ff 	add.w	r8, r7, #4294967295
 80109ee:	3601      	adds	r6, #1
 80109f0:	465c      	mov	r4, fp
 80109f2:	4630      	mov	r0, r6
 80109f4:	f7ef fd9e 	bl	8000534 <__aeabi_i2d>
 80109f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109fc:	f7ef fe04 	bl	8000608 <__aeabi_dmul>
 8010a00:	4b65      	ldr	r3, [pc, #404]	@ (8010b98 <_dtoa_r+0x590>)
 8010a02:	2200      	movs	r2, #0
 8010a04:	f7ef fc4a 	bl	800029c <__adddf3>
 8010a08:	4605      	mov	r5, r0
 8010a0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010a0e:	2c00      	cmp	r4, #0
 8010a10:	d16a      	bne.n	8010ae8 <_dtoa_r+0x4e0>
 8010a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a16:	4b61      	ldr	r3, [pc, #388]	@ (8010b9c <_dtoa_r+0x594>)
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f7ef fc3d 	bl	8000298 <__aeabi_dsub>
 8010a1e:	4602      	mov	r2, r0
 8010a20:	460b      	mov	r3, r1
 8010a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a26:	462a      	mov	r2, r5
 8010a28:	4633      	mov	r3, r6
 8010a2a:	f7f0 f87d 	bl	8000b28 <__aeabi_dcmpgt>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	f040 8298 	bne.w	8010f64 <_dtoa_r+0x95c>
 8010a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a38:	462a      	mov	r2, r5
 8010a3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010a3e:	f7f0 f855 	bl	8000aec <__aeabi_dcmplt>
 8010a42:	bb38      	cbnz	r0, 8010a94 <_dtoa_r+0x48c>
 8010a44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010a48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010a4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	f2c0 8157 	blt.w	8010d02 <_dtoa_r+0x6fa>
 8010a54:	2f0e      	cmp	r7, #14
 8010a56:	f300 8154 	bgt.w	8010d02 <_dtoa_r+0x6fa>
 8010a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8010b88 <_dtoa_r+0x580>)
 8010a5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010a60:	ed93 7b00 	vldr	d7, [r3]
 8010a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	ed8d 7b00 	vstr	d7, [sp]
 8010a6c:	f280 80e5 	bge.w	8010c3a <_dtoa_r+0x632>
 8010a70:	9b03      	ldr	r3, [sp, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	f300 80e1 	bgt.w	8010c3a <_dtoa_r+0x632>
 8010a78:	d10c      	bne.n	8010a94 <_dtoa_r+0x48c>
 8010a7a:	4b48      	ldr	r3, [pc, #288]	@ (8010b9c <_dtoa_r+0x594>)
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	ec51 0b17 	vmov	r0, r1, d7
 8010a82:	f7ef fdc1 	bl	8000608 <__aeabi_dmul>
 8010a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a8a:	f7f0 f843 	bl	8000b14 <__aeabi_dcmpge>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	f000 8266 	beq.w	8010f60 <_dtoa_r+0x958>
 8010a94:	2400      	movs	r4, #0
 8010a96:	4625      	mov	r5, r4
 8010a98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a9a:	4656      	mov	r6, sl
 8010a9c:	ea6f 0803 	mvn.w	r8, r3
 8010aa0:	2700      	movs	r7, #0
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	4648      	mov	r0, r9
 8010aa6:	f000 fcbf 	bl	8011428 <_Bfree>
 8010aaa:	2d00      	cmp	r5, #0
 8010aac:	f000 80bd 	beq.w	8010c2a <_dtoa_r+0x622>
 8010ab0:	b12f      	cbz	r7, 8010abe <_dtoa_r+0x4b6>
 8010ab2:	42af      	cmp	r7, r5
 8010ab4:	d003      	beq.n	8010abe <_dtoa_r+0x4b6>
 8010ab6:	4639      	mov	r1, r7
 8010ab8:	4648      	mov	r0, r9
 8010aba:	f000 fcb5 	bl	8011428 <_Bfree>
 8010abe:	4629      	mov	r1, r5
 8010ac0:	4648      	mov	r0, r9
 8010ac2:	f000 fcb1 	bl	8011428 <_Bfree>
 8010ac6:	e0b0      	b.n	8010c2a <_dtoa_r+0x622>
 8010ac8:	07e2      	lsls	r2, r4, #31
 8010aca:	d505      	bpl.n	8010ad8 <_dtoa_r+0x4d0>
 8010acc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010ad0:	f7ef fd9a 	bl	8000608 <__aeabi_dmul>
 8010ad4:	3601      	adds	r6, #1
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	1064      	asrs	r4, r4, #1
 8010ada:	3508      	adds	r5, #8
 8010adc:	e762      	b.n	80109a4 <_dtoa_r+0x39c>
 8010ade:	2602      	movs	r6, #2
 8010ae0:	e765      	b.n	80109ae <_dtoa_r+0x3a6>
 8010ae2:	9c03      	ldr	r4, [sp, #12]
 8010ae4:	46b8      	mov	r8, r7
 8010ae6:	e784      	b.n	80109f2 <_dtoa_r+0x3ea>
 8010ae8:	4b27      	ldr	r3, [pc, #156]	@ (8010b88 <_dtoa_r+0x580>)
 8010aea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010aec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010af0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010af4:	4454      	add	r4, sl
 8010af6:	2900      	cmp	r1, #0
 8010af8:	d054      	beq.n	8010ba4 <_dtoa_r+0x59c>
 8010afa:	4929      	ldr	r1, [pc, #164]	@ (8010ba0 <_dtoa_r+0x598>)
 8010afc:	2000      	movs	r0, #0
 8010afe:	f7ef fead 	bl	800085c <__aeabi_ddiv>
 8010b02:	4633      	mov	r3, r6
 8010b04:	462a      	mov	r2, r5
 8010b06:	f7ef fbc7 	bl	8000298 <__aeabi_dsub>
 8010b0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b0e:	4656      	mov	r6, sl
 8010b10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b14:	f7f0 f828 	bl	8000b68 <__aeabi_d2iz>
 8010b18:	4605      	mov	r5, r0
 8010b1a:	f7ef fd0b 	bl	8000534 <__aeabi_i2d>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b26:	f7ef fbb7 	bl	8000298 <__aeabi_dsub>
 8010b2a:	3530      	adds	r5, #48	@ 0x30
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b34:	f806 5b01 	strb.w	r5, [r6], #1
 8010b38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b3c:	f7ef ffd6 	bl	8000aec <__aeabi_dcmplt>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d172      	bne.n	8010c2a <_dtoa_r+0x622>
 8010b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b48:	4911      	ldr	r1, [pc, #68]	@ (8010b90 <_dtoa_r+0x588>)
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	f7ef fba4 	bl	8000298 <__aeabi_dsub>
 8010b50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b54:	f7ef ffca 	bl	8000aec <__aeabi_dcmplt>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	f040 80b4 	bne.w	8010cc6 <_dtoa_r+0x6be>
 8010b5e:	42a6      	cmp	r6, r4
 8010b60:	f43f af70 	beq.w	8010a44 <_dtoa_r+0x43c>
 8010b64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010b68:	4b0a      	ldr	r3, [pc, #40]	@ (8010b94 <_dtoa_r+0x58c>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f7ef fd4c 	bl	8000608 <__aeabi_dmul>
 8010b70:	4b08      	ldr	r3, [pc, #32]	@ (8010b94 <_dtoa_r+0x58c>)
 8010b72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b76:	2200      	movs	r2, #0
 8010b78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b7c:	f7ef fd44 	bl	8000608 <__aeabi_dmul>
 8010b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b84:	e7c4      	b.n	8010b10 <_dtoa_r+0x508>
 8010b86:	bf00      	nop
 8010b88:	08013688 	.word	0x08013688
 8010b8c:	08013660 	.word	0x08013660
 8010b90:	3ff00000 	.word	0x3ff00000
 8010b94:	40240000 	.word	0x40240000
 8010b98:	401c0000 	.word	0x401c0000
 8010b9c:	40140000 	.word	0x40140000
 8010ba0:	3fe00000 	.word	0x3fe00000
 8010ba4:	4631      	mov	r1, r6
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f7ef fd2e 	bl	8000608 <__aeabi_dmul>
 8010bac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010bb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010bb2:	4656      	mov	r6, sl
 8010bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bb8:	f7ef ffd6 	bl	8000b68 <__aeabi_d2iz>
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	f7ef fcb9 	bl	8000534 <__aeabi_i2d>
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bca:	f7ef fb65 	bl	8000298 <__aeabi_dsub>
 8010bce:	3530      	adds	r5, #48	@ 0x30
 8010bd0:	f806 5b01 	strb.w	r5, [r6], #1
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	42a6      	cmp	r6, r4
 8010bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010bde:	f04f 0200 	mov.w	r2, #0
 8010be2:	d124      	bne.n	8010c2e <_dtoa_r+0x626>
 8010be4:	4baf      	ldr	r3, [pc, #700]	@ (8010ea4 <_dtoa_r+0x89c>)
 8010be6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010bea:	f7ef fb57 	bl	800029c <__adddf3>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bf6:	f7ef ff97 	bl	8000b28 <__aeabi_dcmpgt>
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	d163      	bne.n	8010cc6 <_dtoa_r+0x6be>
 8010bfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c02:	49a8      	ldr	r1, [pc, #672]	@ (8010ea4 <_dtoa_r+0x89c>)
 8010c04:	2000      	movs	r0, #0
 8010c06:	f7ef fb47 	bl	8000298 <__aeabi_dsub>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c12:	f7ef ff6b 	bl	8000aec <__aeabi_dcmplt>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	f43f af14 	beq.w	8010a44 <_dtoa_r+0x43c>
 8010c1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010c1e:	1e73      	subs	r3, r6, #1
 8010c20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010c26:	2b30      	cmp	r3, #48	@ 0x30
 8010c28:	d0f8      	beq.n	8010c1c <_dtoa_r+0x614>
 8010c2a:	4647      	mov	r7, r8
 8010c2c:	e03b      	b.n	8010ca6 <_dtoa_r+0x69e>
 8010c2e:	4b9e      	ldr	r3, [pc, #632]	@ (8010ea8 <_dtoa_r+0x8a0>)
 8010c30:	f7ef fcea 	bl	8000608 <__aeabi_dmul>
 8010c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c38:	e7bc      	b.n	8010bb4 <_dtoa_r+0x5ac>
 8010c3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010c3e:	4656      	mov	r6, sl
 8010c40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c44:	4620      	mov	r0, r4
 8010c46:	4629      	mov	r1, r5
 8010c48:	f7ef fe08 	bl	800085c <__aeabi_ddiv>
 8010c4c:	f7ef ff8c 	bl	8000b68 <__aeabi_d2iz>
 8010c50:	4680      	mov	r8, r0
 8010c52:	f7ef fc6f 	bl	8000534 <__aeabi_i2d>
 8010c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c5a:	f7ef fcd5 	bl	8000608 <__aeabi_dmul>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	460b      	mov	r3, r1
 8010c62:	4620      	mov	r0, r4
 8010c64:	4629      	mov	r1, r5
 8010c66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010c6a:	f7ef fb15 	bl	8000298 <__aeabi_dsub>
 8010c6e:	f806 4b01 	strb.w	r4, [r6], #1
 8010c72:	9d03      	ldr	r5, [sp, #12]
 8010c74:	eba6 040a 	sub.w	r4, r6, sl
 8010c78:	42a5      	cmp	r5, r4
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	d133      	bne.n	8010ce8 <_dtoa_r+0x6e0>
 8010c80:	f7ef fb0c 	bl	800029c <__adddf3>
 8010c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c88:	4604      	mov	r4, r0
 8010c8a:	460d      	mov	r5, r1
 8010c8c:	f7ef ff4c 	bl	8000b28 <__aeabi_dcmpgt>
 8010c90:	b9c0      	cbnz	r0, 8010cc4 <_dtoa_r+0x6bc>
 8010c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c96:	4620      	mov	r0, r4
 8010c98:	4629      	mov	r1, r5
 8010c9a:	f7ef ff1d 	bl	8000ad8 <__aeabi_dcmpeq>
 8010c9e:	b110      	cbz	r0, 8010ca6 <_dtoa_r+0x69e>
 8010ca0:	f018 0f01 	tst.w	r8, #1
 8010ca4:	d10e      	bne.n	8010cc4 <_dtoa_r+0x6bc>
 8010ca6:	9902      	ldr	r1, [sp, #8]
 8010ca8:	4648      	mov	r0, r9
 8010caa:	f000 fbbd 	bl	8011428 <_Bfree>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	7033      	strb	r3, [r6, #0]
 8010cb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010cb4:	3701      	adds	r7, #1
 8010cb6:	601f      	str	r7, [r3, #0]
 8010cb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 824b 	beq.w	8011156 <_dtoa_r+0xb4e>
 8010cc0:	601e      	str	r6, [r3, #0]
 8010cc2:	e248      	b.n	8011156 <_dtoa_r+0xb4e>
 8010cc4:	46b8      	mov	r8, r7
 8010cc6:	4633      	mov	r3, r6
 8010cc8:	461e      	mov	r6, r3
 8010cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cce:	2a39      	cmp	r2, #57	@ 0x39
 8010cd0:	d106      	bne.n	8010ce0 <_dtoa_r+0x6d8>
 8010cd2:	459a      	cmp	sl, r3
 8010cd4:	d1f8      	bne.n	8010cc8 <_dtoa_r+0x6c0>
 8010cd6:	2230      	movs	r2, #48	@ 0x30
 8010cd8:	f108 0801 	add.w	r8, r8, #1
 8010cdc:	f88a 2000 	strb.w	r2, [sl]
 8010ce0:	781a      	ldrb	r2, [r3, #0]
 8010ce2:	3201      	adds	r2, #1
 8010ce4:	701a      	strb	r2, [r3, #0]
 8010ce6:	e7a0      	b.n	8010c2a <_dtoa_r+0x622>
 8010ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8010ea8 <_dtoa_r+0x8a0>)
 8010cea:	2200      	movs	r2, #0
 8010cec:	f7ef fc8c 	bl	8000608 <__aeabi_dmul>
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	4604      	mov	r4, r0
 8010cf6:	460d      	mov	r5, r1
 8010cf8:	f7ef feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d09f      	beq.n	8010c40 <_dtoa_r+0x638>
 8010d00:	e7d1      	b.n	8010ca6 <_dtoa_r+0x69e>
 8010d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d04:	2a00      	cmp	r2, #0
 8010d06:	f000 80ea 	beq.w	8010ede <_dtoa_r+0x8d6>
 8010d0a:	9a07      	ldr	r2, [sp, #28]
 8010d0c:	2a01      	cmp	r2, #1
 8010d0e:	f300 80cd 	bgt.w	8010eac <_dtoa_r+0x8a4>
 8010d12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010d14:	2a00      	cmp	r2, #0
 8010d16:	f000 80c1 	beq.w	8010e9c <_dtoa_r+0x894>
 8010d1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010d1e:	9c08      	ldr	r4, [sp, #32]
 8010d20:	9e00      	ldr	r6, [sp, #0]
 8010d22:	9a00      	ldr	r2, [sp, #0]
 8010d24:	441a      	add	r2, r3
 8010d26:	9200      	str	r2, [sp, #0]
 8010d28:	9a06      	ldr	r2, [sp, #24]
 8010d2a:	2101      	movs	r1, #1
 8010d2c:	441a      	add	r2, r3
 8010d2e:	4648      	mov	r0, r9
 8010d30:	9206      	str	r2, [sp, #24]
 8010d32:	f000 fc2d 	bl	8011590 <__i2b>
 8010d36:	4605      	mov	r5, r0
 8010d38:	b166      	cbz	r6, 8010d54 <_dtoa_r+0x74c>
 8010d3a:	9b06      	ldr	r3, [sp, #24]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	dd09      	ble.n	8010d54 <_dtoa_r+0x74c>
 8010d40:	42b3      	cmp	r3, r6
 8010d42:	9a00      	ldr	r2, [sp, #0]
 8010d44:	bfa8      	it	ge
 8010d46:	4633      	movge	r3, r6
 8010d48:	1ad2      	subs	r2, r2, r3
 8010d4a:	9200      	str	r2, [sp, #0]
 8010d4c:	9a06      	ldr	r2, [sp, #24]
 8010d4e:	1af6      	subs	r6, r6, r3
 8010d50:	1ad3      	subs	r3, r2, r3
 8010d52:	9306      	str	r3, [sp, #24]
 8010d54:	9b08      	ldr	r3, [sp, #32]
 8010d56:	b30b      	cbz	r3, 8010d9c <_dtoa_r+0x794>
 8010d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	f000 80c6 	beq.w	8010eec <_dtoa_r+0x8e4>
 8010d60:	2c00      	cmp	r4, #0
 8010d62:	f000 80c0 	beq.w	8010ee6 <_dtoa_r+0x8de>
 8010d66:	4629      	mov	r1, r5
 8010d68:	4622      	mov	r2, r4
 8010d6a:	4648      	mov	r0, r9
 8010d6c:	f000 fcc8 	bl	8011700 <__pow5mult>
 8010d70:	9a02      	ldr	r2, [sp, #8]
 8010d72:	4601      	mov	r1, r0
 8010d74:	4605      	mov	r5, r0
 8010d76:	4648      	mov	r0, r9
 8010d78:	f000 fc20 	bl	80115bc <__multiply>
 8010d7c:	9902      	ldr	r1, [sp, #8]
 8010d7e:	4680      	mov	r8, r0
 8010d80:	4648      	mov	r0, r9
 8010d82:	f000 fb51 	bl	8011428 <_Bfree>
 8010d86:	9b08      	ldr	r3, [sp, #32]
 8010d88:	1b1b      	subs	r3, r3, r4
 8010d8a:	9308      	str	r3, [sp, #32]
 8010d8c:	f000 80b1 	beq.w	8010ef2 <_dtoa_r+0x8ea>
 8010d90:	9a08      	ldr	r2, [sp, #32]
 8010d92:	4641      	mov	r1, r8
 8010d94:	4648      	mov	r0, r9
 8010d96:	f000 fcb3 	bl	8011700 <__pow5mult>
 8010d9a:	9002      	str	r0, [sp, #8]
 8010d9c:	2101      	movs	r1, #1
 8010d9e:	4648      	mov	r0, r9
 8010da0:	f000 fbf6 	bl	8011590 <__i2b>
 8010da4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010da6:	4604      	mov	r4, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f000 81d8 	beq.w	801115e <_dtoa_r+0xb56>
 8010dae:	461a      	mov	r2, r3
 8010db0:	4601      	mov	r1, r0
 8010db2:	4648      	mov	r0, r9
 8010db4:	f000 fca4 	bl	8011700 <__pow5mult>
 8010db8:	9b07      	ldr	r3, [sp, #28]
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	f300 809f 	bgt.w	8010f00 <_dtoa_r+0x8f8>
 8010dc2:	9b04      	ldr	r3, [sp, #16]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f040 8097 	bne.w	8010ef8 <_dtoa_r+0x8f0>
 8010dca:	9b05      	ldr	r3, [sp, #20]
 8010dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f040 8093 	bne.w	8010efc <_dtoa_r+0x8f4>
 8010dd6:	9b05      	ldr	r3, [sp, #20]
 8010dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ddc:	0d1b      	lsrs	r3, r3, #20
 8010dde:	051b      	lsls	r3, r3, #20
 8010de0:	b133      	cbz	r3, 8010df0 <_dtoa_r+0x7e8>
 8010de2:	9b00      	ldr	r3, [sp, #0]
 8010de4:	3301      	adds	r3, #1
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	9b06      	ldr	r3, [sp, #24]
 8010dea:	3301      	adds	r3, #1
 8010dec:	9306      	str	r3, [sp, #24]
 8010dee:	2301      	movs	r3, #1
 8010df0:	9308      	str	r3, [sp, #32]
 8010df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f000 81b8 	beq.w	801116a <_dtoa_r+0xb62>
 8010dfa:	6923      	ldr	r3, [r4, #16]
 8010dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e00:	6918      	ldr	r0, [r3, #16]
 8010e02:	f000 fb79 	bl	80114f8 <__hi0bits>
 8010e06:	f1c0 0020 	rsb	r0, r0, #32
 8010e0a:	9b06      	ldr	r3, [sp, #24]
 8010e0c:	4418      	add	r0, r3
 8010e0e:	f010 001f 	ands.w	r0, r0, #31
 8010e12:	f000 8082 	beq.w	8010f1a <_dtoa_r+0x912>
 8010e16:	f1c0 0320 	rsb	r3, r0, #32
 8010e1a:	2b04      	cmp	r3, #4
 8010e1c:	dd73      	ble.n	8010f06 <_dtoa_r+0x8fe>
 8010e1e:	9b00      	ldr	r3, [sp, #0]
 8010e20:	f1c0 001c 	rsb	r0, r0, #28
 8010e24:	4403      	add	r3, r0
 8010e26:	9300      	str	r3, [sp, #0]
 8010e28:	9b06      	ldr	r3, [sp, #24]
 8010e2a:	4403      	add	r3, r0
 8010e2c:	4406      	add	r6, r0
 8010e2e:	9306      	str	r3, [sp, #24]
 8010e30:	9b00      	ldr	r3, [sp, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	dd05      	ble.n	8010e42 <_dtoa_r+0x83a>
 8010e36:	9902      	ldr	r1, [sp, #8]
 8010e38:	461a      	mov	r2, r3
 8010e3a:	4648      	mov	r0, r9
 8010e3c:	f000 fcba 	bl	80117b4 <__lshift>
 8010e40:	9002      	str	r0, [sp, #8]
 8010e42:	9b06      	ldr	r3, [sp, #24]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	dd05      	ble.n	8010e54 <_dtoa_r+0x84c>
 8010e48:	4621      	mov	r1, r4
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	4648      	mov	r0, r9
 8010e4e:	f000 fcb1 	bl	80117b4 <__lshift>
 8010e52:	4604      	mov	r4, r0
 8010e54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d061      	beq.n	8010f1e <_dtoa_r+0x916>
 8010e5a:	9802      	ldr	r0, [sp, #8]
 8010e5c:	4621      	mov	r1, r4
 8010e5e:	f000 fd15 	bl	801188c <__mcmp>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	da5b      	bge.n	8010f1e <_dtoa_r+0x916>
 8010e66:	2300      	movs	r3, #0
 8010e68:	9902      	ldr	r1, [sp, #8]
 8010e6a:	220a      	movs	r2, #10
 8010e6c:	4648      	mov	r0, r9
 8010e6e:	f000 fafd 	bl	801146c <__multadd>
 8010e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e74:	9002      	str	r0, [sp, #8]
 8010e76:	f107 38ff 	add.w	r8, r7, #4294967295
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f000 8177 	beq.w	801116e <_dtoa_r+0xb66>
 8010e80:	4629      	mov	r1, r5
 8010e82:	2300      	movs	r3, #0
 8010e84:	220a      	movs	r2, #10
 8010e86:	4648      	mov	r0, r9
 8010e88:	f000 faf0 	bl	801146c <__multadd>
 8010e8c:	f1bb 0f00 	cmp.w	fp, #0
 8010e90:	4605      	mov	r5, r0
 8010e92:	dc6f      	bgt.n	8010f74 <_dtoa_r+0x96c>
 8010e94:	9b07      	ldr	r3, [sp, #28]
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	dc49      	bgt.n	8010f2e <_dtoa_r+0x926>
 8010e9a:	e06b      	b.n	8010f74 <_dtoa_r+0x96c>
 8010e9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010ea2:	e73c      	b.n	8010d1e <_dtoa_r+0x716>
 8010ea4:	3fe00000 	.word	0x3fe00000
 8010ea8:	40240000 	.word	0x40240000
 8010eac:	9b03      	ldr	r3, [sp, #12]
 8010eae:	1e5c      	subs	r4, r3, #1
 8010eb0:	9b08      	ldr	r3, [sp, #32]
 8010eb2:	42a3      	cmp	r3, r4
 8010eb4:	db09      	blt.n	8010eca <_dtoa_r+0x8c2>
 8010eb6:	1b1c      	subs	r4, r3, r4
 8010eb8:	9b03      	ldr	r3, [sp, #12]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f6bf af30 	bge.w	8010d20 <_dtoa_r+0x718>
 8010ec0:	9b00      	ldr	r3, [sp, #0]
 8010ec2:	9a03      	ldr	r2, [sp, #12]
 8010ec4:	1a9e      	subs	r6, r3, r2
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	e72b      	b.n	8010d22 <_dtoa_r+0x71a>
 8010eca:	9b08      	ldr	r3, [sp, #32]
 8010ecc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ece:	9408      	str	r4, [sp, #32]
 8010ed0:	1ae3      	subs	r3, r4, r3
 8010ed2:	441a      	add	r2, r3
 8010ed4:	9e00      	ldr	r6, [sp, #0]
 8010ed6:	9b03      	ldr	r3, [sp, #12]
 8010ed8:	920d      	str	r2, [sp, #52]	@ 0x34
 8010eda:	2400      	movs	r4, #0
 8010edc:	e721      	b.n	8010d22 <_dtoa_r+0x71a>
 8010ede:	9c08      	ldr	r4, [sp, #32]
 8010ee0:	9e00      	ldr	r6, [sp, #0]
 8010ee2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010ee4:	e728      	b.n	8010d38 <_dtoa_r+0x730>
 8010ee6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010eea:	e751      	b.n	8010d90 <_dtoa_r+0x788>
 8010eec:	9a08      	ldr	r2, [sp, #32]
 8010eee:	9902      	ldr	r1, [sp, #8]
 8010ef0:	e750      	b.n	8010d94 <_dtoa_r+0x78c>
 8010ef2:	f8cd 8008 	str.w	r8, [sp, #8]
 8010ef6:	e751      	b.n	8010d9c <_dtoa_r+0x794>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	e779      	b.n	8010df0 <_dtoa_r+0x7e8>
 8010efc:	9b04      	ldr	r3, [sp, #16]
 8010efe:	e777      	b.n	8010df0 <_dtoa_r+0x7e8>
 8010f00:	2300      	movs	r3, #0
 8010f02:	9308      	str	r3, [sp, #32]
 8010f04:	e779      	b.n	8010dfa <_dtoa_r+0x7f2>
 8010f06:	d093      	beq.n	8010e30 <_dtoa_r+0x828>
 8010f08:	9a00      	ldr	r2, [sp, #0]
 8010f0a:	331c      	adds	r3, #28
 8010f0c:	441a      	add	r2, r3
 8010f0e:	9200      	str	r2, [sp, #0]
 8010f10:	9a06      	ldr	r2, [sp, #24]
 8010f12:	441a      	add	r2, r3
 8010f14:	441e      	add	r6, r3
 8010f16:	9206      	str	r2, [sp, #24]
 8010f18:	e78a      	b.n	8010e30 <_dtoa_r+0x828>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	e7f4      	b.n	8010f08 <_dtoa_r+0x900>
 8010f1e:	9b03      	ldr	r3, [sp, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	46b8      	mov	r8, r7
 8010f24:	dc20      	bgt.n	8010f68 <_dtoa_r+0x960>
 8010f26:	469b      	mov	fp, r3
 8010f28:	9b07      	ldr	r3, [sp, #28]
 8010f2a:	2b02      	cmp	r3, #2
 8010f2c:	dd1e      	ble.n	8010f6c <_dtoa_r+0x964>
 8010f2e:	f1bb 0f00 	cmp.w	fp, #0
 8010f32:	f47f adb1 	bne.w	8010a98 <_dtoa_r+0x490>
 8010f36:	4621      	mov	r1, r4
 8010f38:	465b      	mov	r3, fp
 8010f3a:	2205      	movs	r2, #5
 8010f3c:	4648      	mov	r0, r9
 8010f3e:	f000 fa95 	bl	801146c <__multadd>
 8010f42:	4601      	mov	r1, r0
 8010f44:	4604      	mov	r4, r0
 8010f46:	9802      	ldr	r0, [sp, #8]
 8010f48:	f000 fca0 	bl	801188c <__mcmp>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	f77f ada3 	ble.w	8010a98 <_dtoa_r+0x490>
 8010f52:	4656      	mov	r6, sl
 8010f54:	2331      	movs	r3, #49	@ 0x31
 8010f56:	f806 3b01 	strb.w	r3, [r6], #1
 8010f5a:	f108 0801 	add.w	r8, r8, #1
 8010f5e:	e59f      	b.n	8010aa0 <_dtoa_r+0x498>
 8010f60:	9c03      	ldr	r4, [sp, #12]
 8010f62:	46b8      	mov	r8, r7
 8010f64:	4625      	mov	r5, r4
 8010f66:	e7f4      	b.n	8010f52 <_dtoa_r+0x94a>
 8010f68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	f000 8101 	beq.w	8011176 <_dtoa_r+0xb6e>
 8010f74:	2e00      	cmp	r6, #0
 8010f76:	dd05      	ble.n	8010f84 <_dtoa_r+0x97c>
 8010f78:	4629      	mov	r1, r5
 8010f7a:	4632      	mov	r2, r6
 8010f7c:	4648      	mov	r0, r9
 8010f7e:	f000 fc19 	bl	80117b4 <__lshift>
 8010f82:	4605      	mov	r5, r0
 8010f84:	9b08      	ldr	r3, [sp, #32]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d05c      	beq.n	8011044 <_dtoa_r+0xa3c>
 8010f8a:	6869      	ldr	r1, [r5, #4]
 8010f8c:	4648      	mov	r0, r9
 8010f8e:	f000 fa0b 	bl	80113a8 <_Balloc>
 8010f92:	4606      	mov	r6, r0
 8010f94:	b928      	cbnz	r0, 8010fa2 <_dtoa_r+0x99a>
 8010f96:	4b82      	ldr	r3, [pc, #520]	@ (80111a0 <_dtoa_r+0xb98>)
 8010f98:	4602      	mov	r2, r0
 8010f9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010f9e:	f7ff bb4a 	b.w	8010636 <_dtoa_r+0x2e>
 8010fa2:	692a      	ldr	r2, [r5, #16]
 8010fa4:	3202      	adds	r2, #2
 8010fa6:	0092      	lsls	r2, r2, #2
 8010fa8:	f105 010c 	add.w	r1, r5, #12
 8010fac:	300c      	adds	r0, #12
 8010fae:	f7ff fa94 	bl	80104da <memcpy>
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	4648      	mov	r0, r9
 8010fb8:	f000 fbfc 	bl	80117b4 <__lshift>
 8010fbc:	f10a 0301 	add.w	r3, sl, #1
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	eb0a 030b 	add.w	r3, sl, fp
 8010fc6:	9308      	str	r3, [sp, #32]
 8010fc8:	9b04      	ldr	r3, [sp, #16]
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	462f      	mov	r7, r5
 8010fd0:	9306      	str	r3, [sp, #24]
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	9b00      	ldr	r3, [sp, #0]
 8010fd6:	9802      	ldr	r0, [sp, #8]
 8010fd8:	4621      	mov	r1, r4
 8010fda:	f103 3bff 	add.w	fp, r3, #4294967295
 8010fde:	f7ff fa8a 	bl	80104f6 <quorem>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	3330      	adds	r3, #48	@ 0x30
 8010fe6:	9003      	str	r0, [sp, #12]
 8010fe8:	4639      	mov	r1, r7
 8010fea:	9802      	ldr	r0, [sp, #8]
 8010fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fee:	f000 fc4d 	bl	801188c <__mcmp>
 8010ff2:	462a      	mov	r2, r5
 8010ff4:	9004      	str	r0, [sp, #16]
 8010ff6:	4621      	mov	r1, r4
 8010ff8:	4648      	mov	r0, r9
 8010ffa:	f000 fc63 	bl	80118c4 <__mdiff>
 8010ffe:	68c2      	ldr	r2, [r0, #12]
 8011000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011002:	4606      	mov	r6, r0
 8011004:	bb02      	cbnz	r2, 8011048 <_dtoa_r+0xa40>
 8011006:	4601      	mov	r1, r0
 8011008:	9802      	ldr	r0, [sp, #8]
 801100a:	f000 fc3f 	bl	801188c <__mcmp>
 801100e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011010:	4602      	mov	r2, r0
 8011012:	4631      	mov	r1, r6
 8011014:	4648      	mov	r0, r9
 8011016:	920c      	str	r2, [sp, #48]	@ 0x30
 8011018:	9309      	str	r3, [sp, #36]	@ 0x24
 801101a:	f000 fa05 	bl	8011428 <_Bfree>
 801101e:	9b07      	ldr	r3, [sp, #28]
 8011020:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011022:	9e00      	ldr	r6, [sp, #0]
 8011024:	ea42 0103 	orr.w	r1, r2, r3
 8011028:	9b06      	ldr	r3, [sp, #24]
 801102a:	4319      	orrs	r1, r3
 801102c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801102e:	d10d      	bne.n	801104c <_dtoa_r+0xa44>
 8011030:	2b39      	cmp	r3, #57	@ 0x39
 8011032:	d027      	beq.n	8011084 <_dtoa_r+0xa7c>
 8011034:	9a04      	ldr	r2, [sp, #16]
 8011036:	2a00      	cmp	r2, #0
 8011038:	dd01      	ble.n	801103e <_dtoa_r+0xa36>
 801103a:	9b03      	ldr	r3, [sp, #12]
 801103c:	3331      	adds	r3, #49	@ 0x31
 801103e:	f88b 3000 	strb.w	r3, [fp]
 8011042:	e52e      	b.n	8010aa2 <_dtoa_r+0x49a>
 8011044:	4628      	mov	r0, r5
 8011046:	e7b9      	b.n	8010fbc <_dtoa_r+0x9b4>
 8011048:	2201      	movs	r2, #1
 801104a:	e7e2      	b.n	8011012 <_dtoa_r+0xa0a>
 801104c:	9904      	ldr	r1, [sp, #16]
 801104e:	2900      	cmp	r1, #0
 8011050:	db04      	blt.n	801105c <_dtoa_r+0xa54>
 8011052:	9807      	ldr	r0, [sp, #28]
 8011054:	4301      	orrs	r1, r0
 8011056:	9806      	ldr	r0, [sp, #24]
 8011058:	4301      	orrs	r1, r0
 801105a:	d120      	bne.n	801109e <_dtoa_r+0xa96>
 801105c:	2a00      	cmp	r2, #0
 801105e:	ddee      	ble.n	801103e <_dtoa_r+0xa36>
 8011060:	9902      	ldr	r1, [sp, #8]
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	2201      	movs	r2, #1
 8011066:	4648      	mov	r0, r9
 8011068:	f000 fba4 	bl	80117b4 <__lshift>
 801106c:	4621      	mov	r1, r4
 801106e:	9002      	str	r0, [sp, #8]
 8011070:	f000 fc0c 	bl	801188c <__mcmp>
 8011074:	2800      	cmp	r0, #0
 8011076:	9b00      	ldr	r3, [sp, #0]
 8011078:	dc02      	bgt.n	8011080 <_dtoa_r+0xa78>
 801107a:	d1e0      	bne.n	801103e <_dtoa_r+0xa36>
 801107c:	07da      	lsls	r2, r3, #31
 801107e:	d5de      	bpl.n	801103e <_dtoa_r+0xa36>
 8011080:	2b39      	cmp	r3, #57	@ 0x39
 8011082:	d1da      	bne.n	801103a <_dtoa_r+0xa32>
 8011084:	2339      	movs	r3, #57	@ 0x39
 8011086:	f88b 3000 	strb.w	r3, [fp]
 801108a:	4633      	mov	r3, r6
 801108c:	461e      	mov	r6, r3
 801108e:	3b01      	subs	r3, #1
 8011090:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011094:	2a39      	cmp	r2, #57	@ 0x39
 8011096:	d04e      	beq.n	8011136 <_dtoa_r+0xb2e>
 8011098:	3201      	adds	r2, #1
 801109a:	701a      	strb	r2, [r3, #0]
 801109c:	e501      	b.n	8010aa2 <_dtoa_r+0x49a>
 801109e:	2a00      	cmp	r2, #0
 80110a0:	dd03      	ble.n	80110aa <_dtoa_r+0xaa2>
 80110a2:	2b39      	cmp	r3, #57	@ 0x39
 80110a4:	d0ee      	beq.n	8011084 <_dtoa_r+0xa7c>
 80110a6:	3301      	adds	r3, #1
 80110a8:	e7c9      	b.n	801103e <_dtoa_r+0xa36>
 80110aa:	9a00      	ldr	r2, [sp, #0]
 80110ac:	9908      	ldr	r1, [sp, #32]
 80110ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80110b2:	428a      	cmp	r2, r1
 80110b4:	d028      	beq.n	8011108 <_dtoa_r+0xb00>
 80110b6:	9902      	ldr	r1, [sp, #8]
 80110b8:	2300      	movs	r3, #0
 80110ba:	220a      	movs	r2, #10
 80110bc:	4648      	mov	r0, r9
 80110be:	f000 f9d5 	bl	801146c <__multadd>
 80110c2:	42af      	cmp	r7, r5
 80110c4:	9002      	str	r0, [sp, #8]
 80110c6:	f04f 0300 	mov.w	r3, #0
 80110ca:	f04f 020a 	mov.w	r2, #10
 80110ce:	4639      	mov	r1, r7
 80110d0:	4648      	mov	r0, r9
 80110d2:	d107      	bne.n	80110e4 <_dtoa_r+0xadc>
 80110d4:	f000 f9ca 	bl	801146c <__multadd>
 80110d8:	4607      	mov	r7, r0
 80110da:	4605      	mov	r5, r0
 80110dc:	9b00      	ldr	r3, [sp, #0]
 80110de:	3301      	adds	r3, #1
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	e777      	b.n	8010fd4 <_dtoa_r+0x9cc>
 80110e4:	f000 f9c2 	bl	801146c <__multadd>
 80110e8:	4629      	mov	r1, r5
 80110ea:	4607      	mov	r7, r0
 80110ec:	2300      	movs	r3, #0
 80110ee:	220a      	movs	r2, #10
 80110f0:	4648      	mov	r0, r9
 80110f2:	f000 f9bb 	bl	801146c <__multadd>
 80110f6:	4605      	mov	r5, r0
 80110f8:	e7f0      	b.n	80110dc <_dtoa_r+0xad4>
 80110fa:	f1bb 0f00 	cmp.w	fp, #0
 80110fe:	bfcc      	ite	gt
 8011100:	465e      	movgt	r6, fp
 8011102:	2601      	movle	r6, #1
 8011104:	4456      	add	r6, sl
 8011106:	2700      	movs	r7, #0
 8011108:	9902      	ldr	r1, [sp, #8]
 801110a:	9300      	str	r3, [sp, #0]
 801110c:	2201      	movs	r2, #1
 801110e:	4648      	mov	r0, r9
 8011110:	f000 fb50 	bl	80117b4 <__lshift>
 8011114:	4621      	mov	r1, r4
 8011116:	9002      	str	r0, [sp, #8]
 8011118:	f000 fbb8 	bl	801188c <__mcmp>
 801111c:	2800      	cmp	r0, #0
 801111e:	dcb4      	bgt.n	801108a <_dtoa_r+0xa82>
 8011120:	d102      	bne.n	8011128 <_dtoa_r+0xb20>
 8011122:	9b00      	ldr	r3, [sp, #0]
 8011124:	07db      	lsls	r3, r3, #31
 8011126:	d4b0      	bmi.n	801108a <_dtoa_r+0xa82>
 8011128:	4633      	mov	r3, r6
 801112a:	461e      	mov	r6, r3
 801112c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011130:	2a30      	cmp	r2, #48	@ 0x30
 8011132:	d0fa      	beq.n	801112a <_dtoa_r+0xb22>
 8011134:	e4b5      	b.n	8010aa2 <_dtoa_r+0x49a>
 8011136:	459a      	cmp	sl, r3
 8011138:	d1a8      	bne.n	801108c <_dtoa_r+0xa84>
 801113a:	2331      	movs	r3, #49	@ 0x31
 801113c:	f108 0801 	add.w	r8, r8, #1
 8011140:	f88a 3000 	strb.w	r3, [sl]
 8011144:	e4ad      	b.n	8010aa2 <_dtoa_r+0x49a>
 8011146:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011148:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80111a4 <_dtoa_r+0xb9c>
 801114c:	b11b      	cbz	r3, 8011156 <_dtoa_r+0xb4e>
 801114e:	f10a 0308 	add.w	r3, sl, #8
 8011152:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011154:	6013      	str	r3, [r2, #0]
 8011156:	4650      	mov	r0, sl
 8011158:	b017      	add	sp, #92	@ 0x5c
 801115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115e:	9b07      	ldr	r3, [sp, #28]
 8011160:	2b01      	cmp	r3, #1
 8011162:	f77f ae2e 	ble.w	8010dc2 <_dtoa_r+0x7ba>
 8011166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011168:	9308      	str	r3, [sp, #32]
 801116a:	2001      	movs	r0, #1
 801116c:	e64d      	b.n	8010e0a <_dtoa_r+0x802>
 801116e:	f1bb 0f00 	cmp.w	fp, #0
 8011172:	f77f aed9 	ble.w	8010f28 <_dtoa_r+0x920>
 8011176:	4656      	mov	r6, sl
 8011178:	9802      	ldr	r0, [sp, #8]
 801117a:	4621      	mov	r1, r4
 801117c:	f7ff f9bb 	bl	80104f6 <quorem>
 8011180:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8011184:	f806 3b01 	strb.w	r3, [r6], #1
 8011188:	eba6 020a 	sub.w	r2, r6, sl
 801118c:	4593      	cmp	fp, r2
 801118e:	ddb4      	ble.n	80110fa <_dtoa_r+0xaf2>
 8011190:	9902      	ldr	r1, [sp, #8]
 8011192:	2300      	movs	r3, #0
 8011194:	220a      	movs	r2, #10
 8011196:	4648      	mov	r0, r9
 8011198:	f000 f968 	bl	801146c <__multadd>
 801119c:	9002      	str	r0, [sp, #8]
 801119e:	e7eb      	b.n	8011178 <_dtoa_r+0xb70>
 80111a0:	0801358c 	.word	0x0801358c
 80111a4:	08013510 	.word	0x08013510

080111a8 <_free_r>:
 80111a8:	b538      	push	{r3, r4, r5, lr}
 80111aa:	4605      	mov	r5, r0
 80111ac:	2900      	cmp	r1, #0
 80111ae:	d041      	beq.n	8011234 <_free_r+0x8c>
 80111b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111b4:	1f0c      	subs	r4, r1, #4
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	bfb8      	it	lt
 80111ba:	18e4      	addlt	r4, r4, r3
 80111bc:	f000 f8e8 	bl	8011390 <__malloc_lock>
 80111c0:	4a1d      	ldr	r2, [pc, #116]	@ (8011238 <_free_r+0x90>)
 80111c2:	6813      	ldr	r3, [r2, #0]
 80111c4:	b933      	cbnz	r3, 80111d4 <_free_r+0x2c>
 80111c6:	6063      	str	r3, [r4, #4]
 80111c8:	6014      	str	r4, [r2, #0]
 80111ca:	4628      	mov	r0, r5
 80111cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111d0:	f000 b8e4 	b.w	801139c <__malloc_unlock>
 80111d4:	42a3      	cmp	r3, r4
 80111d6:	d908      	bls.n	80111ea <_free_r+0x42>
 80111d8:	6820      	ldr	r0, [r4, #0]
 80111da:	1821      	adds	r1, r4, r0
 80111dc:	428b      	cmp	r3, r1
 80111de:	bf01      	itttt	eq
 80111e0:	6819      	ldreq	r1, [r3, #0]
 80111e2:	685b      	ldreq	r3, [r3, #4]
 80111e4:	1809      	addeq	r1, r1, r0
 80111e6:	6021      	streq	r1, [r4, #0]
 80111e8:	e7ed      	b.n	80111c6 <_free_r+0x1e>
 80111ea:	461a      	mov	r2, r3
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	b10b      	cbz	r3, 80111f4 <_free_r+0x4c>
 80111f0:	42a3      	cmp	r3, r4
 80111f2:	d9fa      	bls.n	80111ea <_free_r+0x42>
 80111f4:	6811      	ldr	r1, [r2, #0]
 80111f6:	1850      	adds	r0, r2, r1
 80111f8:	42a0      	cmp	r0, r4
 80111fa:	d10b      	bne.n	8011214 <_free_r+0x6c>
 80111fc:	6820      	ldr	r0, [r4, #0]
 80111fe:	4401      	add	r1, r0
 8011200:	1850      	adds	r0, r2, r1
 8011202:	4283      	cmp	r3, r0
 8011204:	6011      	str	r1, [r2, #0]
 8011206:	d1e0      	bne.n	80111ca <_free_r+0x22>
 8011208:	6818      	ldr	r0, [r3, #0]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	6053      	str	r3, [r2, #4]
 801120e:	4408      	add	r0, r1
 8011210:	6010      	str	r0, [r2, #0]
 8011212:	e7da      	b.n	80111ca <_free_r+0x22>
 8011214:	d902      	bls.n	801121c <_free_r+0x74>
 8011216:	230c      	movs	r3, #12
 8011218:	602b      	str	r3, [r5, #0]
 801121a:	e7d6      	b.n	80111ca <_free_r+0x22>
 801121c:	6820      	ldr	r0, [r4, #0]
 801121e:	1821      	adds	r1, r4, r0
 8011220:	428b      	cmp	r3, r1
 8011222:	bf04      	itt	eq
 8011224:	6819      	ldreq	r1, [r3, #0]
 8011226:	685b      	ldreq	r3, [r3, #4]
 8011228:	6063      	str	r3, [r4, #4]
 801122a:	bf04      	itt	eq
 801122c:	1809      	addeq	r1, r1, r0
 801122e:	6021      	streq	r1, [r4, #0]
 8011230:	6054      	str	r4, [r2, #4]
 8011232:	e7ca      	b.n	80111ca <_free_r+0x22>
 8011234:	bd38      	pop	{r3, r4, r5, pc}
 8011236:	bf00      	nop
 8011238:	20005f70 	.word	0x20005f70

0801123c <malloc>:
 801123c:	4b02      	ldr	r3, [pc, #8]	@ (8011248 <malloc+0xc>)
 801123e:	4601      	mov	r1, r0
 8011240:	6818      	ldr	r0, [r3, #0]
 8011242:	f000 b825 	b.w	8011290 <_malloc_r>
 8011246:	bf00      	nop
 8011248:	20000088 	.word	0x20000088

0801124c <sbrk_aligned>:
 801124c:	b570      	push	{r4, r5, r6, lr}
 801124e:	4e0f      	ldr	r6, [pc, #60]	@ (801128c <sbrk_aligned+0x40>)
 8011250:	460c      	mov	r4, r1
 8011252:	6831      	ldr	r1, [r6, #0]
 8011254:	4605      	mov	r5, r0
 8011256:	b911      	cbnz	r1, 801125e <sbrk_aligned+0x12>
 8011258:	f000 fe3e 	bl	8011ed8 <_sbrk_r>
 801125c:	6030      	str	r0, [r6, #0]
 801125e:	4621      	mov	r1, r4
 8011260:	4628      	mov	r0, r5
 8011262:	f000 fe39 	bl	8011ed8 <_sbrk_r>
 8011266:	1c43      	adds	r3, r0, #1
 8011268:	d103      	bne.n	8011272 <sbrk_aligned+0x26>
 801126a:	f04f 34ff 	mov.w	r4, #4294967295
 801126e:	4620      	mov	r0, r4
 8011270:	bd70      	pop	{r4, r5, r6, pc}
 8011272:	1cc4      	adds	r4, r0, #3
 8011274:	f024 0403 	bic.w	r4, r4, #3
 8011278:	42a0      	cmp	r0, r4
 801127a:	d0f8      	beq.n	801126e <sbrk_aligned+0x22>
 801127c:	1a21      	subs	r1, r4, r0
 801127e:	4628      	mov	r0, r5
 8011280:	f000 fe2a 	bl	8011ed8 <_sbrk_r>
 8011284:	3001      	adds	r0, #1
 8011286:	d1f2      	bne.n	801126e <sbrk_aligned+0x22>
 8011288:	e7ef      	b.n	801126a <sbrk_aligned+0x1e>
 801128a:	bf00      	nop
 801128c:	20005f6c 	.word	0x20005f6c

08011290 <_malloc_r>:
 8011290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011294:	1ccd      	adds	r5, r1, #3
 8011296:	f025 0503 	bic.w	r5, r5, #3
 801129a:	3508      	adds	r5, #8
 801129c:	2d0c      	cmp	r5, #12
 801129e:	bf38      	it	cc
 80112a0:	250c      	movcc	r5, #12
 80112a2:	2d00      	cmp	r5, #0
 80112a4:	4606      	mov	r6, r0
 80112a6:	db01      	blt.n	80112ac <_malloc_r+0x1c>
 80112a8:	42a9      	cmp	r1, r5
 80112aa:	d904      	bls.n	80112b6 <_malloc_r+0x26>
 80112ac:	230c      	movs	r3, #12
 80112ae:	6033      	str	r3, [r6, #0]
 80112b0:	2000      	movs	r0, #0
 80112b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801138c <_malloc_r+0xfc>
 80112ba:	f000 f869 	bl	8011390 <__malloc_lock>
 80112be:	f8d8 3000 	ldr.w	r3, [r8]
 80112c2:	461c      	mov	r4, r3
 80112c4:	bb44      	cbnz	r4, 8011318 <_malloc_r+0x88>
 80112c6:	4629      	mov	r1, r5
 80112c8:	4630      	mov	r0, r6
 80112ca:	f7ff ffbf 	bl	801124c <sbrk_aligned>
 80112ce:	1c43      	adds	r3, r0, #1
 80112d0:	4604      	mov	r4, r0
 80112d2:	d158      	bne.n	8011386 <_malloc_r+0xf6>
 80112d4:	f8d8 4000 	ldr.w	r4, [r8]
 80112d8:	4627      	mov	r7, r4
 80112da:	2f00      	cmp	r7, #0
 80112dc:	d143      	bne.n	8011366 <_malloc_r+0xd6>
 80112de:	2c00      	cmp	r4, #0
 80112e0:	d04b      	beq.n	801137a <_malloc_r+0xea>
 80112e2:	6823      	ldr	r3, [r4, #0]
 80112e4:	4639      	mov	r1, r7
 80112e6:	4630      	mov	r0, r6
 80112e8:	eb04 0903 	add.w	r9, r4, r3
 80112ec:	f000 fdf4 	bl	8011ed8 <_sbrk_r>
 80112f0:	4581      	cmp	r9, r0
 80112f2:	d142      	bne.n	801137a <_malloc_r+0xea>
 80112f4:	6821      	ldr	r1, [r4, #0]
 80112f6:	1a6d      	subs	r5, r5, r1
 80112f8:	4629      	mov	r1, r5
 80112fa:	4630      	mov	r0, r6
 80112fc:	f7ff ffa6 	bl	801124c <sbrk_aligned>
 8011300:	3001      	adds	r0, #1
 8011302:	d03a      	beq.n	801137a <_malloc_r+0xea>
 8011304:	6823      	ldr	r3, [r4, #0]
 8011306:	442b      	add	r3, r5
 8011308:	6023      	str	r3, [r4, #0]
 801130a:	f8d8 3000 	ldr.w	r3, [r8]
 801130e:	685a      	ldr	r2, [r3, #4]
 8011310:	bb62      	cbnz	r2, 801136c <_malloc_r+0xdc>
 8011312:	f8c8 7000 	str.w	r7, [r8]
 8011316:	e00f      	b.n	8011338 <_malloc_r+0xa8>
 8011318:	6822      	ldr	r2, [r4, #0]
 801131a:	1b52      	subs	r2, r2, r5
 801131c:	d420      	bmi.n	8011360 <_malloc_r+0xd0>
 801131e:	2a0b      	cmp	r2, #11
 8011320:	d917      	bls.n	8011352 <_malloc_r+0xc2>
 8011322:	1961      	adds	r1, r4, r5
 8011324:	42a3      	cmp	r3, r4
 8011326:	6025      	str	r5, [r4, #0]
 8011328:	bf18      	it	ne
 801132a:	6059      	strne	r1, [r3, #4]
 801132c:	6863      	ldr	r3, [r4, #4]
 801132e:	bf08      	it	eq
 8011330:	f8c8 1000 	streq.w	r1, [r8]
 8011334:	5162      	str	r2, [r4, r5]
 8011336:	604b      	str	r3, [r1, #4]
 8011338:	4630      	mov	r0, r6
 801133a:	f000 f82f 	bl	801139c <__malloc_unlock>
 801133e:	f104 000b 	add.w	r0, r4, #11
 8011342:	1d23      	adds	r3, r4, #4
 8011344:	f020 0007 	bic.w	r0, r0, #7
 8011348:	1ac2      	subs	r2, r0, r3
 801134a:	bf1c      	itt	ne
 801134c:	1a1b      	subne	r3, r3, r0
 801134e:	50a3      	strne	r3, [r4, r2]
 8011350:	e7af      	b.n	80112b2 <_malloc_r+0x22>
 8011352:	6862      	ldr	r2, [r4, #4]
 8011354:	42a3      	cmp	r3, r4
 8011356:	bf0c      	ite	eq
 8011358:	f8c8 2000 	streq.w	r2, [r8]
 801135c:	605a      	strne	r2, [r3, #4]
 801135e:	e7eb      	b.n	8011338 <_malloc_r+0xa8>
 8011360:	4623      	mov	r3, r4
 8011362:	6864      	ldr	r4, [r4, #4]
 8011364:	e7ae      	b.n	80112c4 <_malloc_r+0x34>
 8011366:	463c      	mov	r4, r7
 8011368:	687f      	ldr	r7, [r7, #4]
 801136a:	e7b6      	b.n	80112da <_malloc_r+0x4a>
 801136c:	461a      	mov	r2, r3
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	42a3      	cmp	r3, r4
 8011372:	d1fb      	bne.n	801136c <_malloc_r+0xdc>
 8011374:	2300      	movs	r3, #0
 8011376:	6053      	str	r3, [r2, #4]
 8011378:	e7de      	b.n	8011338 <_malloc_r+0xa8>
 801137a:	230c      	movs	r3, #12
 801137c:	6033      	str	r3, [r6, #0]
 801137e:	4630      	mov	r0, r6
 8011380:	f000 f80c 	bl	801139c <__malloc_unlock>
 8011384:	e794      	b.n	80112b0 <_malloc_r+0x20>
 8011386:	6005      	str	r5, [r0, #0]
 8011388:	e7d6      	b.n	8011338 <_malloc_r+0xa8>
 801138a:	bf00      	nop
 801138c:	20005f70 	.word	0x20005f70

08011390 <__malloc_lock>:
 8011390:	4801      	ldr	r0, [pc, #4]	@ (8011398 <__malloc_lock+0x8>)
 8011392:	f7ff b8a0 	b.w	80104d6 <__retarget_lock_acquire_recursive>
 8011396:	bf00      	nop
 8011398:	20005f68 	.word	0x20005f68

0801139c <__malloc_unlock>:
 801139c:	4801      	ldr	r0, [pc, #4]	@ (80113a4 <__malloc_unlock+0x8>)
 801139e:	f7ff b89b 	b.w	80104d8 <__retarget_lock_release_recursive>
 80113a2:	bf00      	nop
 80113a4:	20005f68 	.word	0x20005f68

080113a8 <_Balloc>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	69c6      	ldr	r6, [r0, #28]
 80113ac:	4604      	mov	r4, r0
 80113ae:	460d      	mov	r5, r1
 80113b0:	b976      	cbnz	r6, 80113d0 <_Balloc+0x28>
 80113b2:	2010      	movs	r0, #16
 80113b4:	f7ff ff42 	bl	801123c <malloc>
 80113b8:	4602      	mov	r2, r0
 80113ba:	61e0      	str	r0, [r4, #28]
 80113bc:	b920      	cbnz	r0, 80113c8 <_Balloc+0x20>
 80113be:	4b18      	ldr	r3, [pc, #96]	@ (8011420 <_Balloc+0x78>)
 80113c0:	4818      	ldr	r0, [pc, #96]	@ (8011424 <_Balloc+0x7c>)
 80113c2:	216b      	movs	r1, #107	@ 0x6b
 80113c4:	f000 fd98 	bl	8011ef8 <__assert_func>
 80113c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113cc:	6006      	str	r6, [r0, #0]
 80113ce:	60c6      	str	r6, [r0, #12]
 80113d0:	69e6      	ldr	r6, [r4, #28]
 80113d2:	68f3      	ldr	r3, [r6, #12]
 80113d4:	b183      	cbz	r3, 80113f8 <_Balloc+0x50>
 80113d6:	69e3      	ldr	r3, [r4, #28]
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80113de:	b9b8      	cbnz	r0, 8011410 <_Balloc+0x68>
 80113e0:	2101      	movs	r1, #1
 80113e2:	fa01 f605 	lsl.w	r6, r1, r5
 80113e6:	1d72      	adds	r2, r6, #5
 80113e8:	0092      	lsls	r2, r2, #2
 80113ea:	4620      	mov	r0, r4
 80113ec:	f000 fda2 	bl	8011f34 <_calloc_r>
 80113f0:	b160      	cbz	r0, 801140c <_Balloc+0x64>
 80113f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113f6:	e00e      	b.n	8011416 <_Balloc+0x6e>
 80113f8:	2221      	movs	r2, #33	@ 0x21
 80113fa:	2104      	movs	r1, #4
 80113fc:	4620      	mov	r0, r4
 80113fe:	f000 fd99 	bl	8011f34 <_calloc_r>
 8011402:	69e3      	ldr	r3, [r4, #28]
 8011404:	60f0      	str	r0, [r6, #12]
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d1e4      	bne.n	80113d6 <_Balloc+0x2e>
 801140c:	2000      	movs	r0, #0
 801140e:	bd70      	pop	{r4, r5, r6, pc}
 8011410:	6802      	ldr	r2, [r0, #0]
 8011412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011416:	2300      	movs	r3, #0
 8011418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801141c:	e7f7      	b.n	801140e <_Balloc+0x66>
 801141e:	bf00      	nop
 8011420:	0801351d 	.word	0x0801351d
 8011424:	0801359d 	.word	0x0801359d

08011428 <_Bfree>:
 8011428:	b570      	push	{r4, r5, r6, lr}
 801142a:	69c6      	ldr	r6, [r0, #28]
 801142c:	4605      	mov	r5, r0
 801142e:	460c      	mov	r4, r1
 8011430:	b976      	cbnz	r6, 8011450 <_Bfree+0x28>
 8011432:	2010      	movs	r0, #16
 8011434:	f7ff ff02 	bl	801123c <malloc>
 8011438:	4602      	mov	r2, r0
 801143a:	61e8      	str	r0, [r5, #28]
 801143c:	b920      	cbnz	r0, 8011448 <_Bfree+0x20>
 801143e:	4b09      	ldr	r3, [pc, #36]	@ (8011464 <_Bfree+0x3c>)
 8011440:	4809      	ldr	r0, [pc, #36]	@ (8011468 <_Bfree+0x40>)
 8011442:	218f      	movs	r1, #143	@ 0x8f
 8011444:	f000 fd58 	bl	8011ef8 <__assert_func>
 8011448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801144c:	6006      	str	r6, [r0, #0]
 801144e:	60c6      	str	r6, [r0, #12]
 8011450:	b13c      	cbz	r4, 8011462 <_Bfree+0x3a>
 8011452:	69eb      	ldr	r3, [r5, #28]
 8011454:	6862      	ldr	r2, [r4, #4]
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801145c:	6021      	str	r1, [r4, #0]
 801145e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011462:	bd70      	pop	{r4, r5, r6, pc}
 8011464:	0801351d 	.word	0x0801351d
 8011468:	0801359d 	.word	0x0801359d

0801146c <__multadd>:
 801146c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011470:	690d      	ldr	r5, [r1, #16]
 8011472:	4607      	mov	r7, r0
 8011474:	460c      	mov	r4, r1
 8011476:	461e      	mov	r6, r3
 8011478:	f101 0c14 	add.w	ip, r1, #20
 801147c:	2000      	movs	r0, #0
 801147e:	f8dc 3000 	ldr.w	r3, [ip]
 8011482:	b299      	uxth	r1, r3
 8011484:	fb02 6101 	mla	r1, r2, r1, r6
 8011488:	0c1e      	lsrs	r6, r3, #16
 801148a:	0c0b      	lsrs	r3, r1, #16
 801148c:	fb02 3306 	mla	r3, r2, r6, r3
 8011490:	b289      	uxth	r1, r1
 8011492:	3001      	adds	r0, #1
 8011494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011498:	4285      	cmp	r5, r0
 801149a:	f84c 1b04 	str.w	r1, [ip], #4
 801149e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80114a2:	dcec      	bgt.n	801147e <__multadd+0x12>
 80114a4:	b30e      	cbz	r6, 80114ea <__multadd+0x7e>
 80114a6:	68a3      	ldr	r3, [r4, #8]
 80114a8:	42ab      	cmp	r3, r5
 80114aa:	dc19      	bgt.n	80114e0 <__multadd+0x74>
 80114ac:	6861      	ldr	r1, [r4, #4]
 80114ae:	4638      	mov	r0, r7
 80114b0:	3101      	adds	r1, #1
 80114b2:	f7ff ff79 	bl	80113a8 <_Balloc>
 80114b6:	4680      	mov	r8, r0
 80114b8:	b928      	cbnz	r0, 80114c6 <__multadd+0x5a>
 80114ba:	4602      	mov	r2, r0
 80114bc:	4b0c      	ldr	r3, [pc, #48]	@ (80114f0 <__multadd+0x84>)
 80114be:	480d      	ldr	r0, [pc, #52]	@ (80114f4 <__multadd+0x88>)
 80114c0:	21ba      	movs	r1, #186	@ 0xba
 80114c2:	f000 fd19 	bl	8011ef8 <__assert_func>
 80114c6:	6922      	ldr	r2, [r4, #16]
 80114c8:	3202      	adds	r2, #2
 80114ca:	f104 010c 	add.w	r1, r4, #12
 80114ce:	0092      	lsls	r2, r2, #2
 80114d0:	300c      	adds	r0, #12
 80114d2:	f7ff f802 	bl	80104da <memcpy>
 80114d6:	4621      	mov	r1, r4
 80114d8:	4638      	mov	r0, r7
 80114da:	f7ff ffa5 	bl	8011428 <_Bfree>
 80114de:	4644      	mov	r4, r8
 80114e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80114e4:	3501      	adds	r5, #1
 80114e6:	615e      	str	r6, [r3, #20]
 80114e8:	6125      	str	r5, [r4, #16]
 80114ea:	4620      	mov	r0, r4
 80114ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114f0:	0801358c 	.word	0x0801358c
 80114f4:	0801359d 	.word	0x0801359d

080114f8 <__hi0bits>:
 80114f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80114fc:	4603      	mov	r3, r0
 80114fe:	bf36      	itet	cc
 8011500:	0403      	lslcc	r3, r0, #16
 8011502:	2000      	movcs	r0, #0
 8011504:	2010      	movcc	r0, #16
 8011506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801150a:	bf3c      	itt	cc
 801150c:	021b      	lslcc	r3, r3, #8
 801150e:	3008      	addcc	r0, #8
 8011510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011514:	bf3c      	itt	cc
 8011516:	011b      	lslcc	r3, r3, #4
 8011518:	3004      	addcc	r0, #4
 801151a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801151e:	bf3c      	itt	cc
 8011520:	009b      	lslcc	r3, r3, #2
 8011522:	3002      	addcc	r0, #2
 8011524:	2b00      	cmp	r3, #0
 8011526:	db05      	blt.n	8011534 <__hi0bits+0x3c>
 8011528:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801152c:	f100 0001 	add.w	r0, r0, #1
 8011530:	bf08      	it	eq
 8011532:	2020      	moveq	r0, #32
 8011534:	4770      	bx	lr

08011536 <__lo0bits>:
 8011536:	6803      	ldr	r3, [r0, #0]
 8011538:	4602      	mov	r2, r0
 801153a:	f013 0007 	ands.w	r0, r3, #7
 801153e:	d00b      	beq.n	8011558 <__lo0bits+0x22>
 8011540:	07d9      	lsls	r1, r3, #31
 8011542:	d421      	bmi.n	8011588 <__lo0bits+0x52>
 8011544:	0798      	lsls	r0, r3, #30
 8011546:	bf49      	itett	mi
 8011548:	085b      	lsrmi	r3, r3, #1
 801154a:	089b      	lsrpl	r3, r3, #2
 801154c:	2001      	movmi	r0, #1
 801154e:	6013      	strmi	r3, [r2, #0]
 8011550:	bf5c      	itt	pl
 8011552:	6013      	strpl	r3, [r2, #0]
 8011554:	2002      	movpl	r0, #2
 8011556:	4770      	bx	lr
 8011558:	b299      	uxth	r1, r3
 801155a:	b909      	cbnz	r1, 8011560 <__lo0bits+0x2a>
 801155c:	0c1b      	lsrs	r3, r3, #16
 801155e:	2010      	movs	r0, #16
 8011560:	b2d9      	uxtb	r1, r3
 8011562:	b909      	cbnz	r1, 8011568 <__lo0bits+0x32>
 8011564:	3008      	adds	r0, #8
 8011566:	0a1b      	lsrs	r3, r3, #8
 8011568:	0719      	lsls	r1, r3, #28
 801156a:	bf04      	itt	eq
 801156c:	091b      	lsreq	r3, r3, #4
 801156e:	3004      	addeq	r0, #4
 8011570:	0799      	lsls	r1, r3, #30
 8011572:	bf04      	itt	eq
 8011574:	089b      	lsreq	r3, r3, #2
 8011576:	3002      	addeq	r0, #2
 8011578:	07d9      	lsls	r1, r3, #31
 801157a:	d403      	bmi.n	8011584 <__lo0bits+0x4e>
 801157c:	085b      	lsrs	r3, r3, #1
 801157e:	f100 0001 	add.w	r0, r0, #1
 8011582:	d003      	beq.n	801158c <__lo0bits+0x56>
 8011584:	6013      	str	r3, [r2, #0]
 8011586:	4770      	bx	lr
 8011588:	2000      	movs	r0, #0
 801158a:	4770      	bx	lr
 801158c:	2020      	movs	r0, #32
 801158e:	4770      	bx	lr

08011590 <__i2b>:
 8011590:	b510      	push	{r4, lr}
 8011592:	460c      	mov	r4, r1
 8011594:	2101      	movs	r1, #1
 8011596:	f7ff ff07 	bl	80113a8 <_Balloc>
 801159a:	4602      	mov	r2, r0
 801159c:	b928      	cbnz	r0, 80115aa <__i2b+0x1a>
 801159e:	4b05      	ldr	r3, [pc, #20]	@ (80115b4 <__i2b+0x24>)
 80115a0:	4805      	ldr	r0, [pc, #20]	@ (80115b8 <__i2b+0x28>)
 80115a2:	f240 1145 	movw	r1, #325	@ 0x145
 80115a6:	f000 fca7 	bl	8011ef8 <__assert_func>
 80115aa:	2301      	movs	r3, #1
 80115ac:	6144      	str	r4, [r0, #20]
 80115ae:	6103      	str	r3, [r0, #16]
 80115b0:	bd10      	pop	{r4, pc}
 80115b2:	bf00      	nop
 80115b4:	0801358c 	.word	0x0801358c
 80115b8:	0801359d 	.word	0x0801359d

080115bc <__multiply>:
 80115bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	4617      	mov	r7, r2
 80115c2:	690a      	ldr	r2, [r1, #16]
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	bfa8      	it	ge
 80115ca:	463b      	movge	r3, r7
 80115cc:	4689      	mov	r9, r1
 80115ce:	bfa4      	itt	ge
 80115d0:	460f      	movge	r7, r1
 80115d2:	4699      	movge	r9, r3
 80115d4:	693d      	ldr	r5, [r7, #16]
 80115d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	6879      	ldr	r1, [r7, #4]
 80115de:	eb05 060a 	add.w	r6, r5, sl
 80115e2:	42b3      	cmp	r3, r6
 80115e4:	b085      	sub	sp, #20
 80115e6:	bfb8      	it	lt
 80115e8:	3101      	addlt	r1, #1
 80115ea:	f7ff fedd 	bl	80113a8 <_Balloc>
 80115ee:	b930      	cbnz	r0, 80115fe <__multiply+0x42>
 80115f0:	4602      	mov	r2, r0
 80115f2:	4b41      	ldr	r3, [pc, #260]	@ (80116f8 <__multiply+0x13c>)
 80115f4:	4841      	ldr	r0, [pc, #260]	@ (80116fc <__multiply+0x140>)
 80115f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80115fa:	f000 fc7d 	bl	8011ef8 <__assert_func>
 80115fe:	f100 0414 	add.w	r4, r0, #20
 8011602:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011606:	4623      	mov	r3, r4
 8011608:	2200      	movs	r2, #0
 801160a:	4573      	cmp	r3, lr
 801160c:	d320      	bcc.n	8011650 <__multiply+0x94>
 801160e:	f107 0814 	add.w	r8, r7, #20
 8011612:	f109 0114 	add.w	r1, r9, #20
 8011616:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801161a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801161e:	9302      	str	r3, [sp, #8]
 8011620:	1beb      	subs	r3, r5, r7
 8011622:	3b15      	subs	r3, #21
 8011624:	f023 0303 	bic.w	r3, r3, #3
 8011628:	3304      	adds	r3, #4
 801162a:	3715      	adds	r7, #21
 801162c:	42bd      	cmp	r5, r7
 801162e:	bf38      	it	cc
 8011630:	2304      	movcc	r3, #4
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	9b02      	ldr	r3, [sp, #8]
 8011636:	9103      	str	r1, [sp, #12]
 8011638:	428b      	cmp	r3, r1
 801163a:	d80c      	bhi.n	8011656 <__multiply+0x9a>
 801163c:	2e00      	cmp	r6, #0
 801163e:	dd03      	ble.n	8011648 <__multiply+0x8c>
 8011640:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011644:	2b00      	cmp	r3, #0
 8011646:	d055      	beq.n	80116f4 <__multiply+0x138>
 8011648:	6106      	str	r6, [r0, #16]
 801164a:	b005      	add	sp, #20
 801164c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011650:	f843 2b04 	str.w	r2, [r3], #4
 8011654:	e7d9      	b.n	801160a <__multiply+0x4e>
 8011656:	f8b1 a000 	ldrh.w	sl, [r1]
 801165a:	f1ba 0f00 	cmp.w	sl, #0
 801165e:	d01f      	beq.n	80116a0 <__multiply+0xe4>
 8011660:	46c4      	mov	ip, r8
 8011662:	46a1      	mov	r9, r4
 8011664:	2700      	movs	r7, #0
 8011666:	f85c 2b04 	ldr.w	r2, [ip], #4
 801166a:	f8d9 3000 	ldr.w	r3, [r9]
 801166e:	fa1f fb82 	uxth.w	fp, r2
 8011672:	b29b      	uxth	r3, r3
 8011674:	fb0a 330b 	mla	r3, sl, fp, r3
 8011678:	443b      	add	r3, r7
 801167a:	f8d9 7000 	ldr.w	r7, [r9]
 801167e:	0c12      	lsrs	r2, r2, #16
 8011680:	0c3f      	lsrs	r7, r7, #16
 8011682:	fb0a 7202 	mla	r2, sl, r2, r7
 8011686:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801168a:	b29b      	uxth	r3, r3
 801168c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011690:	4565      	cmp	r5, ip
 8011692:	f849 3b04 	str.w	r3, [r9], #4
 8011696:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801169a:	d8e4      	bhi.n	8011666 <__multiply+0xaa>
 801169c:	9b01      	ldr	r3, [sp, #4]
 801169e:	50e7      	str	r7, [r4, r3]
 80116a0:	9b03      	ldr	r3, [sp, #12]
 80116a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80116a6:	3104      	adds	r1, #4
 80116a8:	f1b9 0f00 	cmp.w	r9, #0
 80116ac:	d020      	beq.n	80116f0 <__multiply+0x134>
 80116ae:	6823      	ldr	r3, [r4, #0]
 80116b0:	4647      	mov	r7, r8
 80116b2:	46a4      	mov	ip, r4
 80116b4:	f04f 0a00 	mov.w	sl, #0
 80116b8:	f8b7 b000 	ldrh.w	fp, [r7]
 80116bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80116c0:	fb09 220b 	mla	r2, r9, fp, r2
 80116c4:	4452      	add	r2, sl
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116cc:	f84c 3b04 	str.w	r3, [ip], #4
 80116d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80116d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116d8:	f8bc 3000 	ldrh.w	r3, [ip]
 80116dc:	fb09 330a 	mla	r3, r9, sl, r3
 80116e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80116e4:	42bd      	cmp	r5, r7
 80116e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116ea:	d8e5      	bhi.n	80116b8 <__multiply+0xfc>
 80116ec:	9a01      	ldr	r2, [sp, #4]
 80116ee:	50a3      	str	r3, [r4, r2]
 80116f0:	3404      	adds	r4, #4
 80116f2:	e79f      	b.n	8011634 <__multiply+0x78>
 80116f4:	3e01      	subs	r6, #1
 80116f6:	e7a1      	b.n	801163c <__multiply+0x80>
 80116f8:	0801358c 	.word	0x0801358c
 80116fc:	0801359d 	.word	0x0801359d

08011700 <__pow5mult>:
 8011700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011704:	4615      	mov	r5, r2
 8011706:	f012 0203 	ands.w	r2, r2, #3
 801170a:	4607      	mov	r7, r0
 801170c:	460e      	mov	r6, r1
 801170e:	d007      	beq.n	8011720 <__pow5mult+0x20>
 8011710:	4c25      	ldr	r4, [pc, #148]	@ (80117a8 <__pow5mult+0xa8>)
 8011712:	3a01      	subs	r2, #1
 8011714:	2300      	movs	r3, #0
 8011716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801171a:	f7ff fea7 	bl	801146c <__multadd>
 801171e:	4606      	mov	r6, r0
 8011720:	10ad      	asrs	r5, r5, #2
 8011722:	d03d      	beq.n	80117a0 <__pow5mult+0xa0>
 8011724:	69fc      	ldr	r4, [r7, #28]
 8011726:	b97c      	cbnz	r4, 8011748 <__pow5mult+0x48>
 8011728:	2010      	movs	r0, #16
 801172a:	f7ff fd87 	bl	801123c <malloc>
 801172e:	4602      	mov	r2, r0
 8011730:	61f8      	str	r0, [r7, #28]
 8011732:	b928      	cbnz	r0, 8011740 <__pow5mult+0x40>
 8011734:	4b1d      	ldr	r3, [pc, #116]	@ (80117ac <__pow5mult+0xac>)
 8011736:	481e      	ldr	r0, [pc, #120]	@ (80117b0 <__pow5mult+0xb0>)
 8011738:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801173c:	f000 fbdc 	bl	8011ef8 <__assert_func>
 8011740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011744:	6004      	str	r4, [r0, #0]
 8011746:	60c4      	str	r4, [r0, #12]
 8011748:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801174c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011750:	b94c      	cbnz	r4, 8011766 <__pow5mult+0x66>
 8011752:	f240 2171 	movw	r1, #625	@ 0x271
 8011756:	4638      	mov	r0, r7
 8011758:	f7ff ff1a 	bl	8011590 <__i2b>
 801175c:	2300      	movs	r3, #0
 801175e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011762:	4604      	mov	r4, r0
 8011764:	6003      	str	r3, [r0, #0]
 8011766:	f04f 0900 	mov.w	r9, #0
 801176a:	07eb      	lsls	r3, r5, #31
 801176c:	d50a      	bpl.n	8011784 <__pow5mult+0x84>
 801176e:	4631      	mov	r1, r6
 8011770:	4622      	mov	r2, r4
 8011772:	4638      	mov	r0, r7
 8011774:	f7ff ff22 	bl	80115bc <__multiply>
 8011778:	4631      	mov	r1, r6
 801177a:	4680      	mov	r8, r0
 801177c:	4638      	mov	r0, r7
 801177e:	f7ff fe53 	bl	8011428 <_Bfree>
 8011782:	4646      	mov	r6, r8
 8011784:	106d      	asrs	r5, r5, #1
 8011786:	d00b      	beq.n	80117a0 <__pow5mult+0xa0>
 8011788:	6820      	ldr	r0, [r4, #0]
 801178a:	b938      	cbnz	r0, 801179c <__pow5mult+0x9c>
 801178c:	4622      	mov	r2, r4
 801178e:	4621      	mov	r1, r4
 8011790:	4638      	mov	r0, r7
 8011792:	f7ff ff13 	bl	80115bc <__multiply>
 8011796:	6020      	str	r0, [r4, #0]
 8011798:	f8c0 9000 	str.w	r9, [r0]
 801179c:	4604      	mov	r4, r0
 801179e:	e7e4      	b.n	801176a <__pow5mult+0x6a>
 80117a0:	4630      	mov	r0, r6
 80117a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117a6:	bf00      	nop
 80117a8:	08013650 	.word	0x08013650
 80117ac:	0801351d 	.word	0x0801351d
 80117b0:	0801359d 	.word	0x0801359d

080117b4 <__lshift>:
 80117b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117b8:	460c      	mov	r4, r1
 80117ba:	6849      	ldr	r1, [r1, #4]
 80117bc:	6923      	ldr	r3, [r4, #16]
 80117be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80117c2:	68a3      	ldr	r3, [r4, #8]
 80117c4:	4607      	mov	r7, r0
 80117c6:	4691      	mov	r9, r2
 80117c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80117cc:	f108 0601 	add.w	r6, r8, #1
 80117d0:	42b3      	cmp	r3, r6
 80117d2:	db0b      	blt.n	80117ec <__lshift+0x38>
 80117d4:	4638      	mov	r0, r7
 80117d6:	f7ff fde7 	bl	80113a8 <_Balloc>
 80117da:	4605      	mov	r5, r0
 80117dc:	b948      	cbnz	r0, 80117f2 <__lshift+0x3e>
 80117de:	4602      	mov	r2, r0
 80117e0:	4b28      	ldr	r3, [pc, #160]	@ (8011884 <__lshift+0xd0>)
 80117e2:	4829      	ldr	r0, [pc, #164]	@ (8011888 <__lshift+0xd4>)
 80117e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80117e8:	f000 fb86 	bl	8011ef8 <__assert_func>
 80117ec:	3101      	adds	r1, #1
 80117ee:	005b      	lsls	r3, r3, #1
 80117f0:	e7ee      	b.n	80117d0 <__lshift+0x1c>
 80117f2:	2300      	movs	r3, #0
 80117f4:	f100 0114 	add.w	r1, r0, #20
 80117f8:	f100 0210 	add.w	r2, r0, #16
 80117fc:	4618      	mov	r0, r3
 80117fe:	4553      	cmp	r3, sl
 8011800:	db33      	blt.n	801186a <__lshift+0xb6>
 8011802:	6920      	ldr	r0, [r4, #16]
 8011804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011808:	f104 0314 	add.w	r3, r4, #20
 801180c:	f019 091f 	ands.w	r9, r9, #31
 8011810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011818:	d02b      	beq.n	8011872 <__lshift+0xbe>
 801181a:	f1c9 0e20 	rsb	lr, r9, #32
 801181e:	468a      	mov	sl, r1
 8011820:	2200      	movs	r2, #0
 8011822:	6818      	ldr	r0, [r3, #0]
 8011824:	fa00 f009 	lsl.w	r0, r0, r9
 8011828:	4310      	orrs	r0, r2
 801182a:	f84a 0b04 	str.w	r0, [sl], #4
 801182e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011832:	459c      	cmp	ip, r3
 8011834:	fa22 f20e 	lsr.w	r2, r2, lr
 8011838:	d8f3      	bhi.n	8011822 <__lshift+0x6e>
 801183a:	ebac 0304 	sub.w	r3, ip, r4
 801183e:	3b15      	subs	r3, #21
 8011840:	f023 0303 	bic.w	r3, r3, #3
 8011844:	3304      	adds	r3, #4
 8011846:	f104 0015 	add.w	r0, r4, #21
 801184a:	4560      	cmp	r0, ip
 801184c:	bf88      	it	hi
 801184e:	2304      	movhi	r3, #4
 8011850:	50ca      	str	r2, [r1, r3]
 8011852:	b10a      	cbz	r2, 8011858 <__lshift+0xa4>
 8011854:	f108 0602 	add.w	r6, r8, #2
 8011858:	3e01      	subs	r6, #1
 801185a:	4638      	mov	r0, r7
 801185c:	612e      	str	r6, [r5, #16]
 801185e:	4621      	mov	r1, r4
 8011860:	f7ff fde2 	bl	8011428 <_Bfree>
 8011864:	4628      	mov	r0, r5
 8011866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801186a:	f842 0f04 	str.w	r0, [r2, #4]!
 801186e:	3301      	adds	r3, #1
 8011870:	e7c5      	b.n	80117fe <__lshift+0x4a>
 8011872:	3904      	subs	r1, #4
 8011874:	f853 2b04 	ldr.w	r2, [r3], #4
 8011878:	f841 2f04 	str.w	r2, [r1, #4]!
 801187c:	459c      	cmp	ip, r3
 801187e:	d8f9      	bhi.n	8011874 <__lshift+0xc0>
 8011880:	e7ea      	b.n	8011858 <__lshift+0xa4>
 8011882:	bf00      	nop
 8011884:	0801358c 	.word	0x0801358c
 8011888:	0801359d 	.word	0x0801359d

0801188c <__mcmp>:
 801188c:	690a      	ldr	r2, [r1, #16]
 801188e:	4603      	mov	r3, r0
 8011890:	6900      	ldr	r0, [r0, #16]
 8011892:	1a80      	subs	r0, r0, r2
 8011894:	b530      	push	{r4, r5, lr}
 8011896:	d10e      	bne.n	80118b6 <__mcmp+0x2a>
 8011898:	3314      	adds	r3, #20
 801189a:	3114      	adds	r1, #20
 801189c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80118a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80118a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80118a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80118ac:	4295      	cmp	r5, r2
 80118ae:	d003      	beq.n	80118b8 <__mcmp+0x2c>
 80118b0:	d205      	bcs.n	80118be <__mcmp+0x32>
 80118b2:	f04f 30ff 	mov.w	r0, #4294967295
 80118b6:	bd30      	pop	{r4, r5, pc}
 80118b8:	42a3      	cmp	r3, r4
 80118ba:	d3f3      	bcc.n	80118a4 <__mcmp+0x18>
 80118bc:	e7fb      	b.n	80118b6 <__mcmp+0x2a>
 80118be:	2001      	movs	r0, #1
 80118c0:	e7f9      	b.n	80118b6 <__mcmp+0x2a>
	...

080118c4 <__mdiff>:
 80118c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c8:	4689      	mov	r9, r1
 80118ca:	4606      	mov	r6, r0
 80118cc:	4611      	mov	r1, r2
 80118ce:	4648      	mov	r0, r9
 80118d0:	4614      	mov	r4, r2
 80118d2:	f7ff ffdb 	bl	801188c <__mcmp>
 80118d6:	1e05      	subs	r5, r0, #0
 80118d8:	d112      	bne.n	8011900 <__mdiff+0x3c>
 80118da:	4629      	mov	r1, r5
 80118dc:	4630      	mov	r0, r6
 80118de:	f7ff fd63 	bl	80113a8 <_Balloc>
 80118e2:	4602      	mov	r2, r0
 80118e4:	b928      	cbnz	r0, 80118f2 <__mdiff+0x2e>
 80118e6:	4b3f      	ldr	r3, [pc, #252]	@ (80119e4 <__mdiff+0x120>)
 80118e8:	f240 2137 	movw	r1, #567	@ 0x237
 80118ec:	483e      	ldr	r0, [pc, #248]	@ (80119e8 <__mdiff+0x124>)
 80118ee:	f000 fb03 	bl	8011ef8 <__assert_func>
 80118f2:	2301      	movs	r3, #1
 80118f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118f8:	4610      	mov	r0, r2
 80118fa:	b003      	add	sp, #12
 80118fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011900:	bfbc      	itt	lt
 8011902:	464b      	movlt	r3, r9
 8011904:	46a1      	movlt	r9, r4
 8011906:	4630      	mov	r0, r6
 8011908:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801190c:	bfba      	itte	lt
 801190e:	461c      	movlt	r4, r3
 8011910:	2501      	movlt	r5, #1
 8011912:	2500      	movge	r5, #0
 8011914:	f7ff fd48 	bl	80113a8 <_Balloc>
 8011918:	4602      	mov	r2, r0
 801191a:	b918      	cbnz	r0, 8011924 <__mdiff+0x60>
 801191c:	4b31      	ldr	r3, [pc, #196]	@ (80119e4 <__mdiff+0x120>)
 801191e:	f240 2145 	movw	r1, #581	@ 0x245
 8011922:	e7e3      	b.n	80118ec <__mdiff+0x28>
 8011924:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011928:	6926      	ldr	r6, [r4, #16]
 801192a:	60c5      	str	r5, [r0, #12]
 801192c:	f109 0310 	add.w	r3, r9, #16
 8011930:	f109 0514 	add.w	r5, r9, #20
 8011934:	f104 0e14 	add.w	lr, r4, #20
 8011938:	f100 0b14 	add.w	fp, r0, #20
 801193c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011940:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011944:	9301      	str	r3, [sp, #4]
 8011946:	46d9      	mov	r9, fp
 8011948:	f04f 0c00 	mov.w	ip, #0
 801194c:	9b01      	ldr	r3, [sp, #4]
 801194e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011952:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011956:	9301      	str	r3, [sp, #4]
 8011958:	fa1f f38a 	uxth.w	r3, sl
 801195c:	4619      	mov	r1, r3
 801195e:	b283      	uxth	r3, r0
 8011960:	1acb      	subs	r3, r1, r3
 8011962:	0c00      	lsrs	r0, r0, #16
 8011964:	4463      	add	r3, ip
 8011966:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801196a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801196e:	b29b      	uxth	r3, r3
 8011970:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011974:	4576      	cmp	r6, lr
 8011976:	f849 3b04 	str.w	r3, [r9], #4
 801197a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801197e:	d8e5      	bhi.n	801194c <__mdiff+0x88>
 8011980:	1b33      	subs	r3, r6, r4
 8011982:	3b15      	subs	r3, #21
 8011984:	f023 0303 	bic.w	r3, r3, #3
 8011988:	3415      	adds	r4, #21
 801198a:	3304      	adds	r3, #4
 801198c:	42a6      	cmp	r6, r4
 801198e:	bf38      	it	cc
 8011990:	2304      	movcc	r3, #4
 8011992:	441d      	add	r5, r3
 8011994:	445b      	add	r3, fp
 8011996:	461e      	mov	r6, r3
 8011998:	462c      	mov	r4, r5
 801199a:	4544      	cmp	r4, r8
 801199c:	d30e      	bcc.n	80119bc <__mdiff+0xf8>
 801199e:	f108 0103 	add.w	r1, r8, #3
 80119a2:	1b49      	subs	r1, r1, r5
 80119a4:	f021 0103 	bic.w	r1, r1, #3
 80119a8:	3d03      	subs	r5, #3
 80119aa:	45a8      	cmp	r8, r5
 80119ac:	bf38      	it	cc
 80119ae:	2100      	movcc	r1, #0
 80119b0:	440b      	add	r3, r1
 80119b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80119b6:	b191      	cbz	r1, 80119de <__mdiff+0x11a>
 80119b8:	6117      	str	r7, [r2, #16]
 80119ba:	e79d      	b.n	80118f8 <__mdiff+0x34>
 80119bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80119c0:	46e6      	mov	lr, ip
 80119c2:	0c08      	lsrs	r0, r1, #16
 80119c4:	fa1c fc81 	uxtah	ip, ip, r1
 80119c8:	4471      	add	r1, lr
 80119ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80119ce:	b289      	uxth	r1, r1
 80119d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80119d4:	f846 1b04 	str.w	r1, [r6], #4
 80119d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80119dc:	e7dd      	b.n	801199a <__mdiff+0xd6>
 80119de:	3f01      	subs	r7, #1
 80119e0:	e7e7      	b.n	80119b2 <__mdiff+0xee>
 80119e2:	bf00      	nop
 80119e4:	0801358c 	.word	0x0801358c
 80119e8:	0801359d 	.word	0x0801359d

080119ec <__d2b>:
 80119ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119f0:	460f      	mov	r7, r1
 80119f2:	2101      	movs	r1, #1
 80119f4:	ec59 8b10 	vmov	r8, r9, d0
 80119f8:	4616      	mov	r6, r2
 80119fa:	f7ff fcd5 	bl	80113a8 <_Balloc>
 80119fe:	4604      	mov	r4, r0
 8011a00:	b930      	cbnz	r0, 8011a10 <__d2b+0x24>
 8011a02:	4602      	mov	r2, r0
 8011a04:	4b23      	ldr	r3, [pc, #140]	@ (8011a94 <__d2b+0xa8>)
 8011a06:	4824      	ldr	r0, [pc, #144]	@ (8011a98 <__d2b+0xac>)
 8011a08:	f240 310f 	movw	r1, #783	@ 0x30f
 8011a0c:	f000 fa74 	bl	8011ef8 <__assert_func>
 8011a10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011a14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a18:	b10d      	cbz	r5, 8011a1e <__d2b+0x32>
 8011a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011a1e:	9301      	str	r3, [sp, #4]
 8011a20:	f1b8 0300 	subs.w	r3, r8, #0
 8011a24:	d023      	beq.n	8011a6e <__d2b+0x82>
 8011a26:	4668      	mov	r0, sp
 8011a28:	9300      	str	r3, [sp, #0]
 8011a2a:	f7ff fd84 	bl	8011536 <__lo0bits>
 8011a2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011a32:	b1d0      	cbz	r0, 8011a6a <__d2b+0x7e>
 8011a34:	f1c0 0320 	rsb	r3, r0, #32
 8011a38:	fa02 f303 	lsl.w	r3, r2, r3
 8011a3c:	430b      	orrs	r3, r1
 8011a3e:	40c2      	lsrs	r2, r0
 8011a40:	6163      	str	r3, [r4, #20]
 8011a42:	9201      	str	r2, [sp, #4]
 8011a44:	9b01      	ldr	r3, [sp, #4]
 8011a46:	61a3      	str	r3, [r4, #24]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	bf0c      	ite	eq
 8011a4c:	2201      	moveq	r2, #1
 8011a4e:	2202      	movne	r2, #2
 8011a50:	6122      	str	r2, [r4, #16]
 8011a52:	b1a5      	cbz	r5, 8011a7e <__d2b+0x92>
 8011a54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011a58:	4405      	add	r5, r0
 8011a5a:	603d      	str	r5, [r7, #0]
 8011a5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011a60:	6030      	str	r0, [r6, #0]
 8011a62:	4620      	mov	r0, r4
 8011a64:	b003      	add	sp, #12
 8011a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a6a:	6161      	str	r1, [r4, #20]
 8011a6c:	e7ea      	b.n	8011a44 <__d2b+0x58>
 8011a6e:	a801      	add	r0, sp, #4
 8011a70:	f7ff fd61 	bl	8011536 <__lo0bits>
 8011a74:	9b01      	ldr	r3, [sp, #4]
 8011a76:	6163      	str	r3, [r4, #20]
 8011a78:	3020      	adds	r0, #32
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	e7e8      	b.n	8011a50 <__d2b+0x64>
 8011a7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011a86:	6038      	str	r0, [r7, #0]
 8011a88:	6918      	ldr	r0, [r3, #16]
 8011a8a:	f7ff fd35 	bl	80114f8 <__hi0bits>
 8011a8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a92:	e7e5      	b.n	8011a60 <__d2b+0x74>
 8011a94:	0801358c 	.word	0x0801358c
 8011a98:	0801359d 	.word	0x0801359d

08011a9c <__ssputs_r>:
 8011a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa0:	688e      	ldr	r6, [r1, #8]
 8011aa2:	461f      	mov	r7, r3
 8011aa4:	42be      	cmp	r6, r7
 8011aa6:	680b      	ldr	r3, [r1, #0]
 8011aa8:	4682      	mov	sl, r0
 8011aaa:	460c      	mov	r4, r1
 8011aac:	4690      	mov	r8, r2
 8011aae:	d82d      	bhi.n	8011b0c <__ssputs_r+0x70>
 8011ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011ab8:	d026      	beq.n	8011b08 <__ssputs_r+0x6c>
 8011aba:	6965      	ldr	r5, [r4, #20]
 8011abc:	6909      	ldr	r1, [r1, #16]
 8011abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ac2:	eba3 0901 	sub.w	r9, r3, r1
 8011ac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011aca:	1c7b      	adds	r3, r7, #1
 8011acc:	444b      	add	r3, r9
 8011ace:	106d      	asrs	r5, r5, #1
 8011ad0:	429d      	cmp	r5, r3
 8011ad2:	bf38      	it	cc
 8011ad4:	461d      	movcc	r5, r3
 8011ad6:	0553      	lsls	r3, r2, #21
 8011ad8:	d527      	bpl.n	8011b2a <__ssputs_r+0x8e>
 8011ada:	4629      	mov	r1, r5
 8011adc:	f7ff fbd8 	bl	8011290 <_malloc_r>
 8011ae0:	4606      	mov	r6, r0
 8011ae2:	b360      	cbz	r0, 8011b3e <__ssputs_r+0xa2>
 8011ae4:	6921      	ldr	r1, [r4, #16]
 8011ae6:	464a      	mov	r2, r9
 8011ae8:	f7fe fcf7 	bl	80104da <memcpy>
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011af6:	81a3      	strh	r3, [r4, #12]
 8011af8:	6126      	str	r6, [r4, #16]
 8011afa:	6165      	str	r5, [r4, #20]
 8011afc:	444e      	add	r6, r9
 8011afe:	eba5 0509 	sub.w	r5, r5, r9
 8011b02:	6026      	str	r6, [r4, #0]
 8011b04:	60a5      	str	r5, [r4, #8]
 8011b06:	463e      	mov	r6, r7
 8011b08:	42be      	cmp	r6, r7
 8011b0a:	d900      	bls.n	8011b0e <__ssputs_r+0x72>
 8011b0c:	463e      	mov	r6, r7
 8011b0e:	6820      	ldr	r0, [r4, #0]
 8011b10:	4632      	mov	r2, r6
 8011b12:	4641      	mov	r1, r8
 8011b14:	f000 f9c6 	bl	8011ea4 <memmove>
 8011b18:	68a3      	ldr	r3, [r4, #8]
 8011b1a:	1b9b      	subs	r3, r3, r6
 8011b1c:	60a3      	str	r3, [r4, #8]
 8011b1e:	6823      	ldr	r3, [r4, #0]
 8011b20:	4433      	add	r3, r6
 8011b22:	6023      	str	r3, [r4, #0]
 8011b24:	2000      	movs	r0, #0
 8011b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b2a:	462a      	mov	r2, r5
 8011b2c:	f000 fa28 	bl	8011f80 <_realloc_r>
 8011b30:	4606      	mov	r6, r0
 8011b32:	2800      	cmp	r0, #0
 8011b34:	d1e0      	bne.n	8011af8 <__ssputs_r+0x5c>
 8011b36:	6921      	ldr	r1, [r4, #16]
 8011b38:	4650      	mov	r0, sl
 8011b3a:	f7ff fb35 	bl	80111a8 <_free_r>
 8011b3e:	230c      	movs	r3, #12
 8011b40:	f8ca 3000 	str.w	r3, [sl]
 8011b44:	89a3      	ldrh	r3, [r4, #12]
 8011b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b4a:	81a3      	strh	r3, [r4, #12]
 8011b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b50:	e7e9      	b.n	8011b26 <__ssputs_r+0x8a>
	...

08011b54 <_svfiprintf_r>:
 8011b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b58:	4698      	mov	r8, r3
 8011b5a:	898b      	ldrh	r3, [r1, #12]
 8011b5c:	061b      	lsls	r3, r3, #24
 8011b5e:	b09d      	sub	sp, #116	@ 0x74
 8011b60:	4607      	mov	r7, r0
 8011b62:	460d      	mov	r5, r1
 8011b64:	4614      	mov	r4, r2
 8011b66:	d510      	bpl.n	8011b8a <_svfiprintf_r+0x36>
 8011b68:	690b      	ldr	r3, [r1, #16]
 8011b6a:	b973      	cbnz	r3, 8011b8a <_svfiprintf_r+0x36>
 8011b6c:	2140      	movs	r1, #64	@ 0x40
 8011b6e:	f7ff fb8f 	bl	8011290 <_malloc_r>
 8011b72:	6028      	str	r0, [r5, #0]
 8011b74:	6128      	str	r0, [r5, #16]
 8011b76:	b930      	cbnz	r0, 8011b86 <_svfiprintf_r+0x32>
 8011b78:	230c      	movs	r3, #12
 8011b7a:	603b      	str	r3, [r7, #0]
 8011b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b80:	b01d      	add	sp, #116	@ 0x74
 8011b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b86:	2340      	movs	r3, #64	@ 0x40
 8011b88:	616b      	str	r3, [r5, #20]
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b8e:	2320      	movs	r3, #32
 8011b90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b98:	2330      	movs	r3, #48	@ 0x30
 8011b9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011d38 <_svfiprintf_r+0x1e4>
 8011b9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ba2:	f04f 0901 	mov.w	r9, #1
 8011ba6:	4623      	mov	r3, r4
 8011ba8:	469a      	mov	sl, r3
 8011baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bae:	b10a      	cbz	r2, 8011bb4 <_svfiprintf_r+0x60>
 8011bb0:	2a25      	cmp	r2, #37	@ 0x25
 8011bb2:	d1f9      	bne.n	8011ba8 <_svfiprintf_r+0x54>
 8011bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8011bb8:	d00b      	beq.n	8011bd2 <_svfiprintf_r+0x7e>
 8011bba:	465b      	mov	r3, fp
 8011bbc:	4622      	mov	r2, r4
 8011bbe:	4629      	mov	r1, r5
 8011bc0:	4638      	mov	r0, r7
 8011bc2:	f7ff ff6b 	bl	8011a9c <__ssputs_r>
 8011bc6:	3001      	adds	r0, #1
 8011bc8:	f000 80a7 	beq.w	8011d1a <_svfiprintf_r+0x1c6>
 8011bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bce:	445a      	add	r2, fp
 8011bd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f000 809f 	beq.w	8011d1a <_svfiprintf_r+0x1c6>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	f04f 32ff 	mov.w	r2, #4294967295
 8011be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011be6:	f10a 0a01 	add.w	sl, sl, #1
 8011bea:	9304      	str	r3, [sp, #16]
 8011bec:	9307      	str	r3, [sp, #28]
 8011bee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011bf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011bf4:	4654      	mov	r4, sl
 8011bf6:	2205      	movs	r2, #5
 8011bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bfc:	484e      	ldr	r0, [pc, #312]	@ (8011d38 <_svfiprintf_r+0x1e4>)
 8011bfe:	f7ee faef 	bl	80001e0 <memchr>
 8011c02:	9a04      	ldr	r2, [sp, #16]
 8011c04:	b9d8      	cbnz	r0, 8011c3e <_svfiprintf_r+0xea>
 8011c06:	06d0      	lsls	r0, r2, #27
 8011c08:	bf44      	itt	mi
 8011c0a:	2320      	movmi	r3, #32
 8011c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c10:	0711      	lsls	r1, r2, #28
 8011c12:	bf44      	itt	mi
 8011c14:	232b      	movmi	r3, #43	@ 0x2b
 8011c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c20:	d015      	beq.n	8011c4e <_svfiprintf_r+0xfa>
 8011c22:	9a07      	ldr	r2, [sp, #28]
 8011c24:	4654      	mov	r4, sl
 8011c26:	2000      	movs	r0, #0
 8011c28:	f04f 0c0a 	mov.w	ip, #10
 8011c2c:	4621      	mov	r1, r4
 8011c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c32:	3b30      	subs	r3, #48	@ 0x30
 8011c34:	2b09      	cmp	r3, #9
 8011c36:	d94b      	bls.n	8011cd0 <_svfiprintf_r+0x17c>
 8011c38:	b1b0      	cbz	r0, 8011c68 <_svfiprintf_r+0x114>
 8011c3a:	9207      	str	r2, [sp, #28]
 8011c3c:	e014      	b.n	8011c68 <_svfiprintf_r+0x114>
 8011c3e:	eba0 0308 	sub.w	r3, r0, r8
 8011c42:	fa09 f303 	lsl.w	r3, r9, r3
 8011c46:	4313      	orrs	r3, r2
 8011c48:	9304      	str	r3, [sp, #16]
 8011c4a:	46a2      	mov	sl, r4
 8011c4c:	e7d2      	b.n	8011bf4 <_svfiprintf_r+0xa0>
 8011c4e:	9b03      	ldr	r3, [sp, #12]
 8011c50:	1d19      	adds	r1, r3, #4
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	9103      	str	r1, [sp, #12]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	bfbb      	ittet	lt
 8011c5a:	425b      	neglt	r3, r3
 8011c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8011c60:	9307      	strge	r3, [sp, #28]
 8011c62:	9307      	strlt	r3, [sp, #28]
 8011c64:	bfb8      	it	lt
 8011c66:	9204      	strlt	r2, [sp, #16]
 8011c68:	7823      	ldrb	r3, [r4, #0]
 8011c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c6c:	d10a      	bne.n	8011c84 <_svfiprintf_r+0x130>
 8011c6e:	7863      	ldrb	r3, [r4, #1]
 8011c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c72:	d132      	bne.n	8011cda <_svfiprintf_r+0x186>
 8011c74:	9b03      	ldr	r3, [sp, #12]
 8011c76:	1d1a      	adds	r2, r3, #4
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	9203      	str	r2, [sp, #12]
 8011c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c80:	3402      	adds	r4, #2
 8011c82:	9305      	str	r3, [sp, #20]
 8011c84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d48 <_svfiprintf_r+0x1f4>
 8011c88:	7821      	ldrb	r1, [r4, #0]
 8011c8a:	2203      	movs	r2, #3
 8011c8c:	4650      	mov	r0, sl
 8011c8e:	f7ee faa7 	bl	80001e0 <memchr>
 8011c92:	b138      	cbz	r0, 8011ca4 <_svfiprintf_r+0x150>
 8011c94:	9b04      	ldr	r3, [sp, #16]
 8011c96:	eba0 000a 	sub.w	r0, r0, sl
 8011c9a:	2240      	movs	r2, #64	@ 0x40
 8011c9c:	4082      	lsls	r2, r0
 8011c9e:	4313      	orrs	r3, r2
 8011ca0:	3401      	adds	r4, #1
 8011ca2:	9304      	str	r3, [sp, #16]
 8011ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ca8:	4824      	ldr	r0, [pc, #144]	@ (8011d3c <_svfiprintf_r+0x1e8>)
 8011caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011cae:	2206      	movs	r2, #6
 8011cb0:	f7ee fa96 	bl	80001e0 <memchr>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d036      	beq.n	8011d26 <_svfiprintf_r+0x1d2>
 8011cb8:	4b21      	ldr	r3, [pc, #132]	@ (8011d40 <_svfiprintf_r+0x1ec>)
 8011cba:	bb1b      	cbnz	r3, 8011d04 <_svfiprintf_r+0x1b0>
 8011cbc:	9b03      	ldr	r3, [sp, #12]
 8011cbe:	3307      	adds	r3, #7
 8011cc0:	f023 0307 	bic.w	r3, r3, #7
 8011cc4:	3308      	adds	r3, #8
 8011cc6:	9303      	str	r3, [sp, #12]
 8011cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cca:	4433      	add	r3, r6
 8011ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cce:	e76a      	b.n	8011ba6 <_svfiprintf_r+0x52>
 8011cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cd4:	460c      	mov	r4, r1
 8011cd6:	2001      	movs	r0, #1
 8011cd8:	e7a8      	b.n	8011c2c <_svfiprintf_r+0xd8>
 8011cda:	2300      	movs	r3, #0
 8011cdc:	3401      	adds	r4, #1
 8011cde:	9305      	str	r3, [sp, #20]
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	f04f 0c0a 	mov.w	ip, #10
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cec:	3a30      	subs	r2, #48	@ 0x30
 8011cee:	2a09      	cmp	r2, #9
 8011cf0:	d903      	bls.n	8011cfa <_svfiprintf_r+0x1a6>
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d0c6      	beq.n	8011c84 <_svfiprintf_r+0x130>
 8011cf6:	9105      	str	r1, [sp, #20]
 8011cf8:	e7c4      	b.n	8011c84 <_svfiprintf_r+0x130>
 8011cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cfe:	4604      	mov	r4, r0
 8011d00:	2301      	movs	r3, #1
 8011d02:	e7f0      	b.n	8011ce6 <_svfiprintf_r+0x192>
 8011d04:	ab03      	add	r3, sp, #12
 8011d06:	9300      	str	r3, [sp, #0]
 8011d08:	462a      	mov	r2, r5
 8011d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8011d44 <_svfiprintf_r+0x1f0>)
 8011d0c:	a904      	add	r1, sp, #16
 8011d0e:	4638      	mov	r0, r7
 8011d10:	f7fd fe02 	bl	800f918 <_printf_float>
 8011d14:	1c42      	adds	r2, r0, #1
 8011d16:	4606      	mov	r6, r0
 8011d18:	d1d6      	bne.n	8011cc8 <_svfiprintf_r+0x174>
 8011d1a:	89ab      	ldrh	r3, [r5, #12]
 8011d1c:	065b      	lsls	r3, r3, #25
 8011d1e:	f53f af2d 	bmi.w	8011b7c <_svfiprintf_r+0x28>
 8011d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d24:	e72c      	b.n	8011b80 <_svfiprintf_r+0x2c>
 8011d26:	ab03      	add	r3, sp, #12
 8011d28:	9300      	str	r3, [sp, #0]
 8011d2a:	462a      	mov	r2, r5
 8011d2c:	4b05      	ldr	r3, [pc, #20]	@ (8011d44 <_svfiprintf_r+0x1f0>)
 8011d2e:	a904      	add	r1, sp, #16
 8011d30:	4638      	mov	r0, r7
 8011d32:	f7fe f889 	bl	800fe48 <_printf_i>
 8011d36:	e7ed      	b.n	8011d14 <_svfiprintf_r+0x1c0>
 8011d38:	080135f6 	.word	0x080135f6
 8011d3c:	08013600 	.word	0x08013600
 8011d40:	0800f919 	.word	0x0800f919
 8011d44:	08011a9d 	.word	0x08011a9d
 8011d48:	080135fc 	.word	0x080135fc

08011d4c <__sflush_r>:
 8011d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d54:	0716      	lsls	r6, r2, #28
 8011d56:	4605      	mov	r5, r0
 8011d58:	460c      	mov	r4, r1
 8011d5a:	d454      	bmi.n	8011e06 <__sflush_r+0xba>
 8011d5c:	684b      	ldr	r3, [r1, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	dc02      	bgt.n	8011d68 <__sflush_r+0x1c>
 8011d62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	dd48      	ble.n	8011dfa <__sflush_r+0xae>
 8011d68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d6a:	2e00      	cmp	r6, #0
 8011d6c:	d045      	beq.n	8011dfa <__sflush_r+0xae>
 8011d6e:	2300      	movs	r3, #0
 8011d70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011d74:	682f      	ldr	r7, [r5, #0]
 8011d76:	6a21      	ldr	r1, [r4, #32]
 8011d78:	602b      	str	r3, [r5, #0]
 8011d7a:	d030      	beq.n	8011dde <__sflush_r+0x92>
 8011d7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011d7e:	89a3      	ldrh	r3, [r4, #12]
 8011d80:	0759      	lsls	r1, r3, #29
 8011d82:	d505      	bpl.n	8011d90 <__sflush_r+0x44>
 8011d84:	6863      	ldr	r3, [r4, #4]
 8011d86:	1ad2      	subs	r2, r2, r3
 8011d88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011d8a:	b10b      	cbz	r3, 8011d90 <__sflush_r+0x44>
 8011d8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011d8e:	1ad2      	subs	r2, r2, r3
 8011d90:	2300      	movs	r3, #0
 8011d92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d94:	6a21      	ldr	r1, [r4, #32]
 8011d96:	4628      	mov	r0, r5
 8011d98:	47b0      	blx	r6
 8011d9a:	1c43      	adds	r3, r0, #1
 8011d9c:	89a3      	ldrh	r3, [r4, #12]
 8011d9e:	d106      	bne.n	8011dae <__sflush_r+0x62>
 8011da0:	6829      	ldr	r1, [r5, #0]
 8011da2:	291d      	cmp	r1, #29
 8011da4:	d82b      	bhi.n	8011dfe <__sflush_r+0xb2>
 8011da6:	4a2a      	ldr	r2, [pc, #168]	@ (8011e50 <__sflush_r+0x104>)
 8011da8:	40ca      	lsrs	r2, r1
 8011daa:	07d6      	lsls	r6, r2, #31
 8011dac:	d527      	bpl.n	8011dfe <__sflush_r+0xb2>
 8011dae:	2200      	movs	r2, #0
 8011db0:	6062      	str	r2, [r4, #4]
 8011db2:	04d9      	lsls	r1, r3, #19
 8011db4:	6922      	ldr	r2, [r4, #16]
 8011db6:	6022      	str	r2, [r4, #0]
 8011db8:	d504      	bpl.n	8011dc4 <__sflush_r+0x78>
 8011dba:	1c42      	adds	r2, r0, #1
 8011dbc:	d101      	bne.n	8011dc2 <__sflush_r+0x76>
 8011dbe:	682b      	ldr	r3, [r5, #0]
 8011dc0:	b903      	cbnz	r3, 8011dc4 <__sflush_r+0x78>
 8011dc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8011dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011dc6:	602f      	str	r7, [r5, #0]
 8011dc8:	b1b9      	cbz	r1, 8011dfa <__sflush_r+0xae>
 8011dca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011dce:	4299      	cmp	r1, r3
 8011dd0:	d002      	beq.n	8011dd8 <__sflush_r+0x8c>
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	f7ff f9e8 	bl	80111a8 <_free_r>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ddc:	e00d      	b.n	8011dfa <__sflush_r+0xae>
 8011dde:	2301      	movs	r3, #1
 8011de0:	4628      	mov	r0, r5
 8011de2:	47b0      	blx	r6
 8011de4:	4602      	mov	r2, r0
 8011de6:	1c50      	adds	r0, r2, #1
 8011de8:	d1c9      	bne.n	8011d7e <__sflush_r+0x32>
 8011dea:	682b      	ldr	r3, [r5, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d0c6      	beq.n	8011d7e <__sflush_r+0x32>
 8011df0:	2b1d      	cmp	r3, #29
 8011df2:	d001      	beq.n	8011df8 <__sflush_r+0xac>
 8011df4:	2b16      	cmp	r3, #22
 8011df6:	d11e      	bne.n	8011e36 <__sflush_r+0xea>
 8011df8:	602f      	str	r7, [r5, #0]
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	e022      	b.n	8011e44 <__sflush_r+0xf8>
 8011dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e02:	b21b      	sxth	r3, r3
 8011e04:	e01b      	b.n	8011e3e <__sflush_r+0xf2>
 8011e06:	690f      	ldr	r7, [r1, #16]
 8011e08:	2f00      	cmp	r7, #0
 8011e0a:	d0f6      	beq.n	8011dfa <__sflush_r+0xae>
 8011e0c:	0793      	lsls	r3, r2, #30
 8011e0e:	680e      	ldr	r6, [r1, #0]
 8011e10:	bf08      	it	eq
 8011e12:	694b      	ldreq	r3, [r1, #20]
 8011e14:	600f      	str	r7, [r1, #0]
 8011e16:	bf18      	it	ne
 8011e18:	2300      	movne	r3, #0
 8011e1a:	eba6 0807 	sub.w	r8, r6, r7
 8011e1e:	608b      	str	r3, [r1, #8]
 8011e20:	f1b8 0f00 	cmp.w	r8, #0
 8011e24:	dde9      	ble.n	8011dfa <__sflush_r+0xae>
 8011e26:	6a21      	ldr	r1, [r4, #32]
 8011e28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011e2a:	4643      	mov	r3, r8
 8011e2c:	463a      	mov	r2, r7
 8011e2e:	4628      	mov	r0, r5
 8011e30:	47b0      	blx	r6
 8011e32:	2800      	cmp	r0, #0
 8011e34:	dc08      	bgt.n	8011e48 <__sflush_r+0xfc>
 8011e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e3e:	81a3      	strh	r3, [r4, #12]
 8011e40:	f04f 30ff 	mov.w	r0, #4294967295
 8011e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e48:	4407      	add	r7, r0
 8011e4a:	eba8 0800 	sub.w	r8, r8, r0
 8011e4e:	e7e7      	b.n	8011e20 <__sflush_r+0xd4>
 8011e50:	20400001 	.word	0x20400001

08011e54 <_fflush_r>:
 8011e54:	b538      	push	{r3, r4, r5, lr}
 8011e56:	690b      	ldr	r3, [r1, #16]
 8011e58:	4605      	mov	r5, r0
 8011e5a:	460c      	mov	r4, r1
 8011e5c:	b913      	cbnz	r3, 8011e64 <_fflush_r+0x10>
 8011e5e:	2500      	movs	r5, #0
 8011e60:	4628      	mov	r0, r5
 8011e62:	bd38      	pop	{r3, r4, r5, pc}
 8011e64:	b118      	cbz	r0, 8011e6e <_fflush_r+0x1a>
 8011e66:	6a03      	ldr	r3, [r0, #32]
 8011e68:	b90b      	cbnz	r3, 8011e6e <_fflush_r+0x1a>
 8011e6a:	f7fe f997 	bl	801019c <__sinit>
 8011e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d0f3      	beq.n	8011e5e <_fflush_r+0xa>
 8011e76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011e78:	07d0      	lsls	r0, r2, #31
 8011e7a:	d404      	bmi.n	8011e86 <_fflush_r+0x32>
 8011e7c:	0599      	lsls	r1, r3, #22
 8011e7e:	d402      	bmi.n	8011e86 <_fflush_r+0x32>
 8011e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e82:	f7fe fb28 	bl	80104d6 <__retarget_lock_acquire_recursive>
 8011e86:	4628      	mov	r0, r5
 8011e88:	4621      	mov	r1, r4
 8011e8a:	f7ff ff5f 	bl	8011d4c <__sflush_r>
 8011e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e90:	07da      	lsls	r2, r3, #31
 8011e92:	4605      	mov	r5, r0
 8011e94:	d4e4      	bmi.n	8011e60 <_fflush_r+0xc>
 8011e96:	89a3      	ldrh	r3, [r4, #12]
 8011e98:	059b      	lsls	r3, r3, #22
 8011e9a:	d4e1      	bmi.n	8011e60 <_fflush_r+0xc>
 8011e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e9e:	f7fe fb1b 	bl	80104d8 <__retarget_lock_release_recursive>
 8011ea2:	e7dd      	b.n	8011e60 <_fflush_r+0xc>

08011ea4 <memmove>:
 8011ea4:	4288      	cmp	r0, r1
 8011ea6:	b510      	push	{r4, lr}
 8011ea8:	eb01 0402 	add.w	r4, r1, r2
 8011eac:	d902      	bls.n	8011eb4 <memmove+0x10>
 8011eae:	4284      	cmp	r4, r0
 8011eb0:	4623      	mov	r3, r4
 8011eb2:	d807      	bhi.n	8011ec4 <memmove+0x20>
 8011eb4:	1e43      	subs	r3, r0, #1
 8011eb6:	42a1      	cmp	r1, r4
 8011eb8:	d008      	beq.n	8011ecc <memmove+0x28>
 8011eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ec2:	e7f8      	b.n	8011eb6 <memmove+0x12>
 8011ec4:	4402      	add	r2, r0
 8011ec6:	4601      	mov	r1, r0
 8011ec8:	428a      	cmp	r2, r1
 8011eca:	d100      	bne.n	8011ece <memmove+0x2a>
 8011ecc:	bd10      	pop	{r4, pc}
 8011ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ed6:	e7f7      	b.n	8011ec8 <memmove+0x24>

08011ed8 <_sbrk_r>:
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	4d06      	ldr	r5, [pc, #24]	@ (8011ef4 <_sbrk_r+0x1c>)
 8011edc:	2300      	movs	r3, #0
 8011ede:	4604      	mov	r4, r0
 8011ee0:	4608      	mov	r0, r1
 8011ee2:	602b      	str	r3, [r5, #0]
 8011ee4:	f7f2 faa0 	bl	8004428 <_sbrk>
 8011ee8:	1c43      	adds	r3, r0, #1
 8011eea:	d102      	bne.n	8011ef2 <_sbrk_r+0x1a>
 8011eec:	682b      	ldr	r3, [r5, #0]
 8011eee:	b103      	cbz	r3, 8011ef2 <_sbrk_r+0x1a>
 8011ef0:	6023      	str	r3, [r4, #0]
 8011ef2:	bd38      	pop	{r3, r4, r5, pc}
 8011ef4:	20005f64 	.word	0x20005f64

08011ef8 <__assert_func>:
 8011ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011efa:	4614      	mov	r4, r2
 8011efc:	461a      	mov	r2, r3
 8011efe:	4b09      	ldr	r3, [pc, #36]	@ (8011f24 <__assert_func+0x2c>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	4605      	mov	r5, r0
 8011f04:	68d8      	ldr	r0, [r3, #12]
 8011f06:	b14c      	cbz	r4, 8011f1c <__assert_func+0x24>
 8011f08:	4b07      	ldr	r3, [pc, #28]	@ (8011f28 <__assert_func+0x30>)
 8011f0a:	9100      	str	r1, [sp, #0]
 8011f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f10:	4906      	ldr	r1, [pc, #24]	@ (8011f2c <__assert_func+0x34>)
 8011f12:	462b      	mov	r3, r5
 8011f14:	f000 f870 	bl	8011ff8 <fiprintf>
 8011f18:	f000 f880 	bl	801201c <abort>
 8011f1c:	4b04      	ldr	r3, [pc, #16]	@ (8011f30 <__assert_func+0x38>)
 8011f1e:	461c      	mov	r4, r3
 8011f20:	e7f3      	b.n	8011f0a <__assert_func+0x12>
 8011f22:	bf00      	nop
 8011f24:	20000088 	.word	0x20000088
 8011f28:	08013611 	.word	0x08013611
 8011f2c:	0801361e 	.word	0x0801361e
 8011f30:	0801364c 	.word	0x0801364c

08011f34 <_calloc_r>:
 8011f34:	b570      	push	{r4, r5, r6, lr}
 8011f36:	fba1 5402 	umull	r5, r4, r1, r2
 8011f3a:	b934      	cbnz	r4, 8011f4a <_calloc_r+0x16>
 8011f3c:	4629      	mov	r1, r5
 8011f3e:	f7ff f9a7 	bl	8011290 <_malloc_r>
 8011f42:	4606      	mov	r6, r0
 8011f44:	b928      	cbnz	r0, 8011f52 <_calloc_r+0x1e>
 8011f46:	4630      	mov	r0, r6
 8011f48:	bd70      	pop	{r4, r5, r6, pc}
 8011f4a:	220c      	movs	r2, #12
 8011f4c:	6002      	str	r2, [r0, #0]
 8011f4e:	2600      	movs	r6, #0
 8011f50:	e7f9      	b.n	8011f46 <_calloc_r+0x12>
 8011f52:	462a      	mov	r2, r5
 8011f54:	4621      	mov	r1, r4
 8011f56:	f7fe f9d0 	bl	80102fa <memset>
 8011f5a:	e7f4      	b.n	8011f46 <_calloc_r+0x12>

08011f5c <__ascii_mbtowc>:
 8011f5c:	b082      	sub	sp, #8
 8011f5e:	b901      	cbnz	r1, 8011f62 <__ascii_mbtowc+0x6>
 8011f60:	a901      	add	r1, sp, #4
 8011f62:	b142      	cbz	r2, 8011f76 <__ascii_mbtowc+0x1a>
 8011f64:	b14b      	cbz	r3, 8011f7a <__ascii_mbtowc+0x1e>
 8011f66:	7813      	ldrb	r3, [r2, #0]
 8011f68:	600b      	str	r3, [r1, #0]
 8011f6a:	7812      	ldrb	r2, [r2, #0]
 8011f6c:	1e10      	subs	r0, r2, #0
 8011f6e:	bf18      	it	ne
 8011f70:	2001      	movne	r0, #1
 8011f72:	b002      	add	sp, #8
 8011f74:	4770      	bx	lr
 8011f76:	4610      	mov	r0, r2
 8011f78:	e7fb      	b.n	8011f72 <__ascii_mbtowc+0x16>
 8011f7a:	f06f 0001 	mvn.w	r0, #1
 8011f7e:	e7f8      	b.n	8011f72 <__ascii_mbtowc+0x16>

08011f80 <_realloc_r>:
 8011f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f84:	4607      	mov	r7, r0
 8011f86:	4614      	mov	r4, r2
 8011f88:	460d      	mov	r5, r1
 8011f8a:	b921      	cbnz	r1, 8011f96 <_realloc_r+0x16>
 8011f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f90:	4611      	mov	r1, r2
 8011f92:	f7ff b97d 	b.w	8011290 <_malloc_r>
 8011f96:	b92a      	cbnz	r2, 8011fa4 <_realloc_r+0x24>
 8011f98:	f7ff f906 	bl	80111a8 <_free_r>
 8011f9c:	4625      	mov	r5, r4
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fa4:	f000 f841 	bl	801202a <_malloc_usable_size_r>
 8011fa8:	4284      	cmp	r4, r0
 8011faa:	4606      	mov	r6, r0
 8011fac:	d802      	bhi.n	8011fb4 <_realloc_r+0x34>
 8011fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011fb2:	d8f4      	bhi.n	8011f9e <_realloc_r+0x1e>
 8011fb4:	4621      	mov	r1, r4
 8011fb6:	4638      	mov	r0, r7
 8011fb8:	f7ff f96a 	bl	8011290 <_malloc_r>
 8011fbc:	4680      	mov	r8, r0
 8011fbe:	b908      	cbnz	r0, 8011fc4 <_realloc_r+0x44>
 8011fc0:	4645      	mov	r5, r8
 8011fc2:	e7ec      	b.n	8011f9e <_realloc_r+0x1e>
 8011fc4:	42b4      	cmp	r4, r6
 8011fc6:	4622      	mov	r2, r4
 8011fc8:	4629      	mov	r1, r5
 8011fca:	bf28      	it	cs
 8011fcc:	4632      	movcs	r2, r6
 8011fce:	f7fe fa84 	bl	80104da <memcpy>
 8011fd2:	4629      	mov	r1, r5
 8011fd4:	4638      	mov	r0, r7
 8011fd6:	f7ff f8e7 	bl	80111a8 <_free_r>
 8011fda:	e7f1      	b.n	8011fc0 <_realloc_r+0x40>

08011fdc <__ascii_wctomb>:
 8011fdc:	4603      	mov	r3, r0
 8011fde:	4608      	mov	r0, r1
 8011fe0:	b141      	cbz	r1, 8011ff4 <__ascii_wctomb+0x18>
 8011fe2:	2aff      	cmp	r2, #255	@ 0xff
 8011fe4:	d904      	bls.n	8011ff0 <__ascii_wctomb+0x14>
 8011fe6:	228a      	movs	r2, #138	@ 0x8a
 8011fe8:	601a      	str	r2, [r3, #0]
 8011fea:	f04f 30ff 	mov.w	r0, #4294967295
 8011fee:	4770      	bx	lr
 8011ff0:	700a      	strb	r2, [r1, #0]
 8011ff2:	2001      	movs	r0, #1
 8011ff4:	4770      	bx	lr
	...

08011ff8 <fiprintf>:
 8011ff8:	b40e      	push	{r1, r2, r3}
 8011ffa:	b503      	push	{r0, r1, lr}
 8011ffc:	4601      	mov	r1, r0
 8011ffe:	ab03      	add	r3, sp, #12
 8012000:	4805      	ldr	r0, [pc, #20]	@ (8012018 <fiprintf+0x20>)
 8012002:	f853 2b04 	ldr.w	r2, [r3], #4
 8012006:	6800      	ldr	r0, [r0, #0]
 8012008:	9301      	str	r3, [sp, #4]
 801200a:	f000 f83f 	bl	801208c <_vfiprintf_r>
 801200e:	b002      	add	sp, #8
 8012010:	f85d eb04 	ldr.w	lr, [sp], #4
 8012014:	b003      	add	sp, #12
 8012016:	4770      	bx	lr
 8012018:	20000088 	.word	0x20000088

0801201c <abort>:
 801201c:	b508      	push	{r3, lr}
 801201e:	2006      	movs	r0, #6
 8012020:	f000 fa08 	bl	8012434 <raise>
 8012024:	2001      	movs	r0, #1
 8012026:	f7f2 f987 	bl	8004338 <_exit>

0801202a <_malloc_usable_size_r>:
 801202a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801202e:	1f18      	subs	r0, r3, #4
 8012030:	2b00      	cmp	r3, #0
 8012032:	bfbc      	itt	lt
 8012034:	580b      	ldrlt	r3, [r1, r0]
 8012036:	18c0      	addlt	r0, r0, r3
 8012038:	4770      	bx	lr

0801203a <__sfputc_r>:
 801203a:	6893      	ldr	r3, [r2, #8]
 801203c:	3b01      	subs	r3, #1
 801203e:	2b00      	cmp	r3, #0
 8012040:	b410      	push	{r4}
 8012042:	6093      	str	r3, [r2, #8]
 8012044:	da08      	bge.n	8012058 <__sfputc_r+0x1e>
 8012046:	6994      	ldr	r4, [r2, #24]
 8012048:	42a3      	cmp	r3, r4
 801204a:	db01      	blt.n	8012050 <__sfputc_r+0x16>
 801204c:	290a      	cmp	r1, #10
 801204e:	d103      	bne.n	8012058 <__sfputc_r+0x1e>
 8012050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012054:	f000 b932 	b.w	80122bc <__swbuf_r>
 8012058:	6813      	ldr	r3, [r2, #0]
 801205a:	1c58      	adds	r0, r3, #1
 801205c:	6010      	str	r0, [r2, #0]
 801205e:	7019      	strb	r1, [r3, #0]
 8012060:	4608      	mov	r0, r1
 8012062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012066:	4770      	bx	lr

08012068 <__sfputs_r>:
 8012068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801206a:	4606      	mov	r6, r0
 801206c:	460f      	mov	r7, r1
 801206e:	4614      	mov	r4, r2
 8012070:	18d5      	adds	r5, r2, r3
 8012072:	42ac      	cmp	r4, r5
 8012074:	d101      	bne.n	801207a <__sfputs_r+0x12>
 8012076:	2000      	movs	r0, #0
 8012078:	e007      	b.n	801208a <__sfputs_r+0x22>
 801207a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801207e:	463a      	mov	r2, r7
 8012080:	4630      	mov	r0, r6
 8012082:	f7ff ffda 	bl	801203a <__sfputc_r>
 8012086:	1c43      	adds	r3, r0, #1
 8012088:	d1f3      	bne.n	8012072 <__sfputs_r+0xa>
 801208a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801208c <_vfiprintf_r>:
 801208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012090:	460d      	mov	r5, r1
 8012092:	b09d      	sub	sp, #116	@ 0x74
 8012094:	4614      	mov	r4, r2
 8012096:	4698      	mov	r8, r3
 8012098:	4606      	mov	r6, r0
 801209a:	b118      	cbz	r0, 80120a4 <_vfiprintf_r+0x18>
 801209c:	6a03      	ldr	r3, [r0, #32]
 801209e:	b90b      	cbnz	r3, 80120a4 <_vfiprintf_r+0x18>
 80120a0:	f7fe f87c 	bl	801019c <__sinit>
 80120a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120a6:	07d9      	lsls	r1, r3, #31
 80120a8:	d405      	bmi.n	80120b6 <_vfiprintf_r+0x2a>
 80120aa:	89ab      	ldrh	r3, [r5, #12]
 80120ac:	059a      	lsls	r2, r3, #22
 80120ae:	d402      	bmi.n	80120b6 <_vfiprintf_r+0x2a>
 80120b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120b2:	f7fe fa10 	bl	80104d6 <__retarget_lock_acquire_recursive>
 80120b6:	89ab      	ldrh	r3, [r5, #12]
 80120b8:	071b      	lsls	r3, r3, #28
 80120ba:	d501      	bpl.n	80120c0 <_vfiprintf_r+0x34>
 80120bc:	692b      	ldr	r3, [r5, #16]
 80120be:	b99b      	cbnz	r3, 80120e8 <_vfiprintf_r+0x5c>
 80120c0:	4629      	mov	r1, r5
 80120c2:	4630      	mov	r0, r6
 80120c4:	f000 f938 	bl	8012338 <__swsetup_r>
 80120c8:	b170      	cbz	r0, 80120e8 <_vfiprintf_r+0x5c>
 80120ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120cc:	07dc      	lsls	r4, r3, #31
 80120ce:	d504      	bpl.n	80120da <_vfiprintf_r+0x4e>
 80120d0:	f04f 30ff 	mov.w	r0, #4294967295
 80120d4:	b01d      	add	sp, #116	@ 0x74
 80120d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120da:	89ab      	ldrh	r3, [r5, #12]
 80120dc:	0598      	lsls	r0, r3, #22
 80120de:	d4f7      	bmi.n	80120d0 <_vfiprintf_r+0x44>
 80120e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120e2:	f7fe f9f9 	bl	80104d8 <__retarget_lock_release_recursive>
 80120e6:	e7f3      	b.n	80120d0 <_vfiprintf_r+0x44>
 80120e8:	2300      	movs	r3, #0
 80120ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ec:	2320      	movs	r3, #32
 80120ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80120f6:	2330      	movs	r3, #48	@ 0x30
 80120f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80122a8 <_vfiprintf_r+0x21c>
 80120fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012100:	f04f 0901 	mov.w	r9, #1
 8012104:	4623      	mov	r3, r4
 8012106:	469a      	mov	sl, r3
 8012108:	f813 2b01 	ldrb.w	r2, [r3], #1
 801210c:	b10a      	cbz	r2, 8012112 <_vfiprintf_r+0x86>
 801210e:	2a25      	cmp	r2, #37	@ 0x25
 8012110:	d1f9      	bne.n	8012106 <_vfiprintf_r+0x7a>
 8012112:	ebba 0b04 	subs.w	fp, sl, r4
 8012116:	d00b      	beq.n	8012130 <_vfiprintf_r+0xa4>
 8012118:	465b      	mov	r3, fp
 801211a:	4622      	mov	r2, r4
 801211c:	4629      	mov	r1, r5
 801211e:	4630      	mov	r0, r6
 8012120:	f7ff ffa2 	bl	8012068 <__sfputs_r>
 8012124:	3001      	adds	r0, #1
 8012126:	f000 80a7 	beq.w	8012278 <_vfiprintf_r+0x1ec>
 801212a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801212c:	445a      	add	r2, fp
 801212e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012130:	f89a 3000 	ldrb.w	r3, [sl]
 8012134:	2b00      	cmp	r3, #0
 8012136:	f000 809f 	beq.w	8012278 <_vfiprintf_r+0x1ec>
 801213a:	2300      	movs	r3, #0
 801213c:	f04f 32ff 	mov.w	r2, #4294967295
 8012140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012144:	f10a 0a01 	add.w	sl, sl, #1
 8012148:	9304      	str	r3, [sp, #16]
 801214a:	9307      	str	r3, [sp, #28]
 801214c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012150:	931a      	str	r3, [sp, #104]	@ 0x68
 8012152:	4654      	mov	r4, sl
 8012154:	2205      	movs	r2, #5
 8012156:	f814 1b01 	ldrb.w	r1, [r4], #1
 801215a:	4853      	ldr	r0, [pc, #332]	@ (80122a8 <_vfiprintf_r+0x21c>)
 801215c:	f7ee f840 	bl	80001e0 <memchr>
 8012160:	9a04      	ldr	r2, [sp, #16]
 8012162:	b9d8      	cbnz	r0, 801219c <_vfiprintf_r+0x110>
 8012164:	06d1      	lsls	r1, r2, #27
 8012166:	bf44      	itt	mi
 8012168:	2320      	movmi	r3, #32
 801216a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801216e:	0713      	lsls	r3, r2, #28
 8012170:	bf44      	itt	mi
 8012172:	232b      	movmi	r3, #43	@ 0x2b
 8012174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012178:	f89a 3000 	ldrb.w	r3, [sl]
 801217c:	2b2a      	cmp	r3, #42	@ 0x2a
 801217e:	d015      	beq.n	80121ac <_vfiprintf_r+0x120>
 8012180:	9a07      	ldr	r2, [sp, #28]
 8012182:	4654      	mov	r4, sl
 8012184:	2000      	movs	r0, #0
 8012186:	f04f 0c0a 	mov.w	ip, #10
 801218a:	4621      	mov	r1, r4
 801218c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012190:	3b30      	subs	r3, #48	@ 0x30
 8012192:	2b09      	cmp	r3, #9
 8012194:	d94b      	bls.n	801222e <_vfiprintf_r+0x1a2>
 8012196:	b1b0      	cbz	r0, 80121c6 <_vfiprintf_r+0x13a>
 8012198:	9207      	str	r2, [sp, #28]
 801219a:	e014      	b.n	80121c6 <_vfiprintf_r+0x13a>
 801219c:	eba0 0308 	sub.w	r3, r0, r8
 80121a0:	fa09 f303 	lsl.w	r3, r9, r3
 80121a4:	4313      	orrs	r3, r2
 80121a6:	9304      	str	r3, [sp, #16]
 80121a8:	46a2      	mov	sl, r4
 80121aa:	e7d2      	b.n	8012152 <_vfiprintf_r+0xc6>
 80121ac:	9b03      	ldr	r3, [sp, #12]
 80121ae:	1d19      	adds	r1, r3, #4
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	9103      	str	r1, [sp, #12]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	bfbb      	ittet	lt
 80121b8:	425b      	neglt	r3, r3
 80121ba:	f042 0202 	orrlt.w	r2, r2, #2
 80121be:	9307      	strge	r3, [sp, #28]
 80121c0:	9307      	strlt	r3, [sp, #28]
 80121c2:	bfb8      	it	lt
 80121c4:	9204      	strlt	r2, [sp, #16]
 80121c6:	7823      	ldrb	r3, [r4, #0]
 80121c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80121ca:	d10a      	bne.n	80121e2 <_vfiprintf_r+0x156>
 80121cc:	7863      	ldrb	r3, [r4, #1]
 80121ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80121d0:	d132      	bne.n	8012238 <_vfiprintf_r+0x1ac>
 80121d2:	9b03      	ldr	r3, [sp, #12]
 80121d4:	1d1a      	adds	r2, r3, #4
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	9203      	str	r2, [sp, #12]
 80121da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121de:	3402      	adds	r4, #2
 80121e0:	9305      	str	r3, [sp, #20]
 80121e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80122b8 <_vfiprintf_r+0x22c>
 80121e6:	7821      	ldrb	r1, [r4, #0]
 80121e8:	2203      	movs	r2, #3
 80121ea:	4650      	mov	r0, sl
 80121ec:	f7ed fff8 	bl	80001e0 <memchr>
 80121f0:	b138      	cbz	r0, 8012202 <_vfiprintf_r+0x176>
 80121f2:	9b04      	ldr	r3, [sp, #16]
 80121f4:	eba0 000a 	sub.w	r0, r0, sl
 80121f8:	2240      	movs	r2, #64	@ 0x40
 80121fa:	4082      	lsls	r2, r0
 80121fc:	4313      	orrs	r3, r2
 80121fe:	3401      	adds	r4, #1
 8012200:	9304      	str	r3, [sp, #16]
 8012202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012206:	4829      	ldr	r0, [pc, #164]	@ (80122ac <_vfiprintf_r+0x220>)
 8012208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801220c:	2206      	movs	r2, #6
 801220e:	f7ed ffe7 	bl	80001e0 <memchr>
 8012212:	2800      	cmp	r0, #0
 8012214:	d03f      	beq.n	8012296 <_vfiprintf_r+0x20a>
 8012216:	4b26      	ldr	r3, [pc, #152]	@ (80122b0 <_vfiprintf_r+0x224>)
 8012218:	bb1b      	cbnz	r3, 8012262 <_vfiprintf_r+0x1d6>
 801221a:	9b03      	ldr	r3, [sp, #12]
 801221c:	3307      	adds	r3, #7
 801221e:	f023 0307 	bic.w	r3, r3, #7
 8012222:	3308      	adds	r3, #8
 8012224:	9303      	str	r3, [sp, #12]
 8012226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012228:	443b      	add	r3, r7
 801222a:	9309      	str	r3, [sp, #36]	@ 0x24
 801222c:	e76a      	b.n	8012104 <_vfiprintf_r+0x78>
 801222e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012232:	460c      	mov	r4, r1
 8012234:	2001      	movs	r0, #1
 8012236:	e7a8      	b.n	801218a <_vfiprintf_r+0xfe>
 8012238:	2300      	movs	r3, #0
 801223a:	3401      	adds	r4, #1
 801223c:	9305      	str	r3, [sp, #20]
 801223e:	4619      	mov	r1, r3
 8012240:	f04f 0c0a 	mov.w	ip, #10
 8012244:	4620      	mov	r0, r4
 8012246:	f810 2b01 	ldrb.w	r2, [r0], #1
 801224a:	3a30      	subs	r2, #48	@ 0x30
 801224c:	2a09      	cmp	r2, #9
 801224e:	d903      	bls.n	8012258 <_vfiprintf_r+0x1cc>
 8012250:	2b00      	cmp	r3, #0
 8012252:	d0c6      	beq.n	80121e2 <_vfiprintf_r+0x156>
 8012254:	9105      	str	r1, [sp, #20]
 8012256:	e7c4      	b.n	80121e2 <_vfiprintf_r+0x156>
 8012258:	fb0c 2101 	mla	r1, ip, r1, r2
 801225c:	4604      	mov	r4, r0
 801225e:	2301      	movs	r3, #1
 8012260:	e7f0      	b.n	8012244 <_vfiprintf_r+0x1b8>
 8012262:	ab03      	add	r3, sp, #12
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	462a      	mov	r2, r5
 8012268:	4b12      	ldr	r3, [pc, #72]	@ (80122b4 <_vfiprintf_r+0x228>)
 801226a:	a904      	add	r1, sp, #16
 801226c:	4630      	mov	r0, r6
 801226e:	f7fd fb53 	bl	800f918 <_printf_float>
 8012272:	4607      	mov	r7, r0
 8012274:	1c78      	adds	r0, r7, #1
 8012276:	d1d6      	bne.n	8012226 <_vfiprintf_r+0x19a>
 8012278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801227a:	07d9      	lsls	r1, r3, #31
 801227c:	d405      	bmi.n	801228a <_vfiprintf_r+0x1fe>
 801227e:	89ab      	ldrh	r3, [r5, #12]
 8012280:	059a      	lsls	r2, r3, #22
 8012282:	d402      	bmi.n	801228a <_vfiprintf_r+0x1fe>
 8012284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012286:	f7fe f927 	bl	80104d8 <__retarget_lock_release_recursive>
 801228a:	89ab      	ldrh	r3, [r5, #12]
 801228c:	065b      	lsls	r3, r3, #25
 801228e:	f53f af1f 	bmi.w	80120d0 <_vfiprintf_r+0x44>
 8012292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012294:	e71e      	b.n	80120d4 <_vfiprintf_r+0x48>
 8012296:	ab03      	add	r3, sp, #12
 8012298:	9300      	str	r3, [sp, #0]
 801229a:	462a      	mov	r2, r5
 801229c:	4b05      	ldr	r3, [pc, #20]	@ (80122b4 <_vfiprintf_r+0x228>)
 801229e:	a904      	add	r1, sp, #16
 80122a0:	4630      	mov	r0, r6
 80122a2:	f7fd fdd1 	bl	800fe48 <_printf_i>
 80122a6:	e7e4      	b.n	8012272 <_vfiprintf_r+0x1e6>
 80122a8:	080135f6 	.word	0x080135f6
 80122ac:	08013600 	.word	0x08013600
 80122b0:	0800f919 	.word	0x0800f919
 80122b4:	08012069 	.word	0x08012069
 80122b8:	080135fc 	.word	0x080135fc

080122bc <__swbuf_r>:
 80122bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122be:	460e      	mov	r6, r1
 80122c0:	4614      	mov	r4, r2
 80122c2:	4605      	mov	r5, r0
 80122c4:	b118      	cbz	r0, 80122ce <__swbuf_r+0x12>
 80122c6:	6a03      	ldr	r3, [r0, #32]
 80122c8:	b90b      	cbnz	r3, 80122ce <__swbuf_r+0x12>
 80122ca:	f7fd ff67 	bl	801019c <__sinit>
 80122ce:	69a3      	ldr	r3, [r4, #24]
 80122d0:	60a3      	str	r3, [r4, #8]
 80122d2:	89a3      	ldrh	r3, [r4, #12]
 80122d4:	071a      	lsls	r2, r3, #28
 80122d6:	d501      	bpl.n	80122dc <__swbuf_r+0x20>
 80122d8:	6923      	ldr	r3, [r4, #16]
 80122da:	b943      	cbnz	r3, 80122ee <__swbuf_r+0x32>
 80122dc:	4621      	mov	r1, r4
 80122de:	4628      	mov	r0, r5
 80122e0:	f000 f82a 	bl	8012338 <__swsetup_r>
 80122e4:	b118      	cbz	r0, 80122ee <__swbuf_r+0x32>
 80122e6:	f04f 37ff 	mov.w	r7, #4294967295
 80122ea:	4638      	mov	r0, r7
 80122ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	6922      	ldr	r2, [r4, #16]
 80122f2:	1a98      	subs	r0, r3, r2
 80122f4:	6963      	ldr	r3, [r4, #20]
 80122f6:	b2f6      	uxtb	r6, r6
 80122f8:	4283      	cmp	r3, r0
 80122fa:	4637      	mov	r7, r6
 80122fc:	dc05      	bgt.n	801230a <__swbuf_r+0x4e>
 80122fe:	4621      	mov	r1, r4
 8012300:	4628      	mov	r0, r5
 8012302:	f7ff fda7 	bl	8011e54 <_fflush_r>
 8012306:	2800      	cmp	r0, #0
 8012308:	d1ed      	bne.n	80122e6 <__swbuf_r+0x2a>
 801230a:	68a3      	ldr	r3, [r4, #8]
 801230c:	3b01      	subs	r3, #1
 801230e:	60a3      	str	r3, [r4, #8]
 8012310:	6823      	ldr	r3, [r4, #0]
 8012312:	1c5a      	adds	r2, r3, #1
 8012314:	6022      	str	r2, [r4, #0]
 8012316:	701e      	strb	r6, [r3, #0]
 8012318:	6962      	ldr	r2, [r4, #20]
 801231a:	1c43      	adds	r3, r0, #1
 801231c:	429a      	cmp	r2, r3
 801231e:	d004      	beq.n	801232a <__swbuf_r+0x6e>
 8012320:	89a3      	ldrh	r3, [r4, #12]
 8012322:	07db      	lsls	r3, r3, #31
 8012324:	d5e1      	bpl.n	80122ea <__swbuf_r+0x2e>
 8012326:	2e0a      	cmp	r6, #10
 8012328:	d1df      	bne.n	80122ea <__swbuf_r+0x2e>
 801232a:	4621      	mov	r1, r4
 801232c:	4628      	mov	r0, r5
 801232e:	f7ff fd91 	bl	8011e54 <_fflush_r>
 8012332:	2800      	cmp	r0, #0
 8012334:	d0d9      	beq.n	80122ea <__swbuf_r+0x2e>
 8012336:	e7d6      	b.n	80122e6 <__swbuf_r+0x2a>

08012338 <__swsetup_r>:
 8012338:	b538      	push	{r3, r4, r5, lr}
 801233a:	4b29      	ldr	r3, [pc, #164]	@ (80123e0 <__swsetup_r+0xa8>)
 801233c:	4605      	mov	r5, r0
 801233e:	6818      	ldr	r0, [r3, #0]
 8012340:	460c      	mov	r4, r1
 8012342:	b118      	cbz	r0, 801234c <__swsetup_r+0x14>
 8012344:	6a03      	ldr	r3, [r0, #32]
 8012346:	b90b      	cbnz	r3, 801234c <__swsetup_r+0x14>
 8012348:	f7fd ff28 	bl	801019c <__sinit>
 801234c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012350:	0719      	lsls	r1, r3, #28
 8012352:	d422      	bmi.n	801239a <__swsetup_r+0x62>
 8012354:	06da      	lsls	r2, r3, #27
 8012356:	d407      	bmi.n	8012368 <__swsetup_r+0x30>
 8012358:	2209      	movs	r2, #9
 801235a:	602a      	str	r2, [r5, #0]
 801235c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012360:	81a3      	strh	r3, [r4, #12]
 8012362:	f04f 30ff 	mov.w	r0, #4294967295
 8012366:	e033      	b.n	80123d0 <__swsetup_r+0x98>
 8012368:	0758      	lsls	r0, r3, #29
 801236a:	d512      	bpl.n	8012392 <__swsetup_r+0x5a>
 801236c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801236e:	b141      	cbz	r1, 8012382 <__swsetup_r+0x4a>
 8012370:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012374:	4299      	cmp	r1, r3
 8012376:	d002      	beq.n	801237e <__swsetup_r+0x46>
 8012378:	4628      	mov	r0, r5
 801237a:	f7fe ff15 	bl	80111a8 <_free_r>
 801237e:	2300      	movs	r3, #0
 8012380:	6363      	str	r3, [r4, #52]	@ 0x34
 8012382:	89a3      	ldrh	r3, [r4, #12]
 8012384:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012388:	81a3      	strh	r3, [r4, #12]
 801238a:	2300      	movs	r3, #0
 801238c:	6063      	str	r3, [r4, #4]
 801238e:	6923      	ldr	r3, [r4, #16]
 8012390:	6023      	str	r3, [r4, #0]
 8012392:	89a3      	ldrh	r3, [r4, #12]
 8012394:	f043 0308 	orr.w	r3, r3, #8
 8012398:	81a3      	strh	r3, [r4, #12]
 801239a:	6923      	ldr	r3, [r4, #16]
 801239c:	b94b      	cbnz	r3, 80123b2 <__swsetup_r+0x7a>
 801239e:	89a3      	ldrh	r3, [r4, #12]
 80123a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80123a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123a8:	d003      	beq.n	80123b2 <__swsetup_r+0x7a>
 80123aa:	4621      	mov	r1, r4
 80123ac:	4628      	mov	r0, r5
 80123ae:	f000 f883 	bl	80124b8 <__smakebuf_r>
 80123b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123b6:	f013 0201 	ands.w	r2, r3, #1
 80123ba:	d00a      	beq.n	80123d2 <__swsetup_r+0x9a>
 80123bc:	2200      	movs	r2, #0
 80123be:	60a2      	str	r2, [r4, #8]
 80123c0:	6962      	ldr	r2, [r4, #20]
 80123c2:	4252      	negs	r2, r2
 80123c4:	61a2      	str	r2, [r4, #24]
 80123c6:	6922      	ldr	r2, [r4, #16]
 80123c8:	b942      	cbnz	r2, 80123dc <__swsetup_r+0xa4>
 80123ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80123ce:	d1c5      	bne.n	801235c <__swsetup_r+0x24>
 80123d0:	bd38      	pop	{r3, r4, r5, pc}
 80123d2:	0799      	lsls	r1, r3, #30
 80123d4:	bf58      	it	pl
 80123d6:	6962      	ldrpl	r2, [r4, #20]
 80123d8:	60a2      	str	r2, [r4, #8]
 80123da:	e7f4      	b.n	80123c6 <__swsetup_r+0x8e>
 80123dc:	2000      	movs	r0, #0
 80123de:	e7f7      	b.n	80123d0 <__swsetup_r+0x98>
 80123e0:	20000088 	.word	0x20000088

080123e4 <_raise_r>:
 80123e4:	291f      	cmp	r1, #31
 80123e6:	b538      	push	{r3, r4, r5, lr}
 80123e8:	4605      	mov	r5, r0
 80123ea:	460c      	mov	r4, r1
 80123ec:	d904      	bls.n	80123f8 <_raise_r+0x14>
 80123ee:	2316      	movs	r3, #22
 80123f0:	6003      	str	r3, [r0, #0]
 80123f2:	f04f 30ff 	mov.w	r0, #4294967295
 80123f6:	bd38      	pop	{r3, r4, r5, pc}
 80123f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80123fa:	b112      	cbz	r2, 8012402 <_raise_r+0x1e>
 80123fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012400:	b94b      	cbnz	r3, 8012416 <_raise_r+0x32>
 8012402:	4628      	mov	r0, r5
 8012404:	f000 f830 	bl	8012468 <_getpid_r>
 8012408:	4622      	mov	r2, r4
 801240a:	4601      	mov	r1, r0
 801240c:	4628      	mov	r0, r5
 801240e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012412:	f000 b817 	b.w	8012444 <_kill_r>
 8012416:	2b01      	cmp	r3, #1
 8012418:	d00a      	beq.n	8012430 <_raise_r+0x4c>
 801241a:	1c59      	adds	r1, r3, #1
 801241c:	d103      	bne.n	8012426 <_raise_r+0x42>
 801241e:	2316      	movs	r3, #22
 8012420:	6003      	str	r3, [r0, #0]
 8012422:	2001      	movs	r0, #1
 8012424:	e7e7      	b.n	80123f6 <_raise_r+0x12>
 8012426:	2100      	movs	r1, #0
 8012428:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801242c:	4620      	mov	r0, r4
 801242e:	4798      	blx	r3
 8012430:	2000      	movs	r0, #0
 8012432:	e7e0      	b.n	80123f6 <_raise_r+0x12>

08012434 <raise>:
 8012434:	4b02      	ldr	r3, [pc, #8]	@ (8012440 <raise+0xc>)
 8012436:	4601      	mov	r1, r0
 8012438:	6818      	ldr	r0, [r3, #0]
 801243a:	f7ff bfd3 	b.w	80123e4 <_raise_r>
 801243e:	bf00      	nop
 8012440:	20000088 	.word	0x20000088

08012444 <_kill_r>:
 8012444:	b538      	push	{r3, r4, r5, lr}
 8012446:	4d07      	ldr	r5, [pc, #28]	@ (8012464 <_kill_r+0x20>)
 8012448:	2300      	movs	r3, #0
 801244a:	4604      	mov	r4, r0
 801244c:	4608      	mov	r0, r1
 801244e:	4611      	mov	r1, r2
 8012450:	602b      	str	r3, [r5, #0]
 8012452:	f7f1 ff61 	bl	8004318 <_kill>
 8012456:	1c43      	adds	r3, r0, #1
 8012458:	d102      	bne.n	8012460 <_kill_r+0x1c>
 801245a:	682b      	ldr	r3, [r5, #0]
 801245c:	b103      	cbz	r3, 8012460 <_kill_r+0x1c>
 801245e:	6023      	str	r3, [r4, #0]
 8012460:	bd38      	pop	{r3, r4, r5, pc}
 8012462:	bf00      	nop
 8012464:	20005f64 	.word	0x20005f64

08012468 <_getpid_r>:
 8012468:	f7f1 bf4e 	b.w	8004308 <_getpid>

0801246c <__swhatbuf_r>:
 801246c:	b570      	push	{r4, r5, r6, lr}
 801246e:	460c      	mov	r4, r1
 8012470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012474:	2900      	cmp	r1, #0
 8012476:	b096      	sub	sp, #88	@ 0x58
 8012478:	4615      	mov	r5, r2
 801247a:	461e      	mov	r6, r3
 801247c:	da0d      	bge.n	801249a <__swhatbuf_r+0x2e>
 801247e:	89a3      	ldrh	r3, [r4, #12]
 8012480:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012484:	f04f 0100 	mov.w	r1, #0
 8012488:	bf14      	ite	ne
 801248a:	2340      	movne	r3, #64	@ 0x40
 801248c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012490:	2000      	movs	r0, #0
 8012492:	6031      	str	r1, [r6, #0]
 8012494:	602b      	str	r3, [r5, #0]
 8012496:	b016      	add	sp, #88	@ 0x58
 8012498:	bd70      	pop	{r4, r5, r6, pc}
 801249a:	466a      	mov	r2, sp
 801249c:	f000 f848 	bl	8012530 <_fstat_r>
 80124a0:	2800      	cmp	r0, #0
 80124a2:	dbec      	blt.n	801247e <__swhatbuf_r+0x12>
 80124a4:	9901      	ldr	r1, [sp, #4]
 80124a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80124aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80124ae:	4259      	negs	r1, r3
 80124b0:	4159      	adcs	r1, r3
 80124b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124b6:	e7eb      	b.n	8012490 <__swhatbuf_r+0x24>

080124b8 <__smakebuf_r>:
 80124b8:	898b      	ldrh	r3, [r1, #12]
 80124ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124bc:	079d      	lsls	r5, r3, #30
 80124be:	4606      	mov	r6, r0
 80124c0:	460c      	mov	r4, r1
 80124c2:	d507      	bpl.n	80124d4 <__smakebuf_r+0x1c>
 80124c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80124c8:	6023      	str	r3, [r4, #0]
 80124ca:	6123      	str	r3, [r4, #16]
 80124cc:	2301      	movs	r3, #1
 80124ce:	6163      	str	r3, [r4, #20]
 80124d0:	b003      	add	sp, #12
 80124d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124d4:	ab01      	add	r3, sp, #4
 80124d6:	466a      	mov	r2, sp
 80124d8:	f7ff ffc8 	bl	801246c <__swhatbuf_r>
 80124dc:	9f00      	ldr	r7, [sp, #0]
 80124de:	4605      	mov	r5, r0
 80124e0:	4639      	mov	r1, r7
 80124e2:	4630      	mov	r0, r6
 80124e4:	f7fe fed4 	bl	8011290 <_malloc_r>
 80124e8:	b948      	cbnz	r0, 80124fe <__smakebuf_r+0x46>
 80124ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124ee:	059a      	lsls	r2, r3, #22
 80124f0:	d4ee      	bmi.n	80124d0 <__smakebuf_r+0x18>
 80124f2:	f023 0303 	bic.w	r3, r3, #3
 80124f6:	f043 0302 	orr.w	r3, r3, #2
 80124fa:	81a3      	strh	r3, [r4, #12]
 80124fc:	e7e2      	b.n	80124c4 <__smakebuf_r+0xc>
 80124fe:	89a3      	ldrh	r3, [r4, #12]
 8012500:	6020      	str	r0, [r4, #0]
 8012502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012506:	81a3      	strh	r3, [r4, #12]
 8012508:	9b01      	ldr	r3, [sp, #4]
 801250a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801250e:	b15b      	cbz	r3, 8012528 <__smakebuf_r+0x70>
 8012510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012514:	4630      	mov	r0, r6
 8012516:	f000 f81d 	bl	8012554 <_isatty_r>
 801251a:	b128      	cbz	r0, 8012528 <__smakebuf_r+0x70>
 801251c:	89a3      	ldrh	r3, [r4, #12]
 801251e:	f023 0303 	bic.w	r3, r3, #3
 8012522:	f043 0301 	orr.w	r3, r3, #1
 8012526:	81a3      	strh	r3, [r4, #12]
 8012528:	89a3      	ldrh	r3, [r4, #12]
 801252a:	431d      	orrs	r5, r3
 801252c:	81a5      	strh	r5, [r4, #12]
 801252e:	e7cf      	b.n	80124d0 <__smakebuf_r+0x18>

08012530 <_fstat_r>:
 8012530:	b538      	push	{r3, r4, r5, lr}
 8012532:	4d07      	ldr	r5, [pc, #28]	@ (8012550 <_fstat_r+0x20>)
 8012534:	2300      	movs	r3, #0
 8012536:	4604      	mov	r4, r0
 8012538:	4608      	mov	r0, r1
 801253a:	4611      	mov	r1, r2
 801253c:	602b      	str	r3, [r5, #0]
 801253e:	f7f1 ff4b 	bl	80043d8 <_fstat>
 8012542:	1c43      	adds	r3, r0, #1
 8012544:	d102      	bne.n	801254c <_fstat_r+0x1c>
 8012546:	682b      	ldr	r3, [r5, #0]
 8012548:	b103      	cbz	r3, 801254c <_fstat_r+0x1c>
 801254a:	6023      	str	r3, [r4, #0]
 801254c:	bd38      	pop	{r3, r4, r5, pc}
 801254e:	bf00      	nop
 8012550:	20005f64 	.word	0x20005f64

08012554 <_isatty_r>:
 8012554:	b538      	push	{r3, r4, r5, lr}
 8012556:	4d06      	ldr	r5, [pc, #24]	@ (8012570 <_isatty_r+0x1c>)
 8012558:	2300      	movs	r3, #0
 801255a:	4604      	mov	r4, r0
 801255c:	4608      	mov	r0, r1
 801255e:	602b      	str	r3, [r5, #0]
 8012560:	f7f1 ff4a 	bl	80043f8 <_isatty>
 8012564:	1c43      	adds	r3, r0, #1
 8012566:	d102      	bne.n	801256e <_isatty_r+0x1a>
 8012568:	682b      	ldr	r3, [r5, #0]
 801256a:	b103      	cbz	r3, 801256e <_isatty_r+0x1a>
 801256c:	6023      	str	r3, [r4, #0]
 801256e:	bd38      	pop	{r3, r4, r5, pc}
 8012570:	20005f64 	.word	0x20005f64

08012574 <atan2f>:
 8012574:	f000 b856 	b.w	8012624 <__ieee754_atan2f>

08012578 <fmaxf>:
 8012578:	b508      	push	{r3, lr}
 801257a:	ed2d 8b02 	vpush	{d8}
 801257e:	eeb0 8a40 	vmov.f32	s16, s0
 8012582:	eef0 8a60 	vmov.f32	s17, s1
 8012586:	f000 f831 	bl	80125ec <__fpclassifyf>
 801258a:	b930      	cbnz	r0, 801259a <fmaxf+0x22>
 801258c:	eeb0 8a68 	vmov.f32	s16, s17
 8012590:	eeb0 0a48 	vmov.f32	s0, s16
 8012594:	ecbd 8b02 	vpop	{d8}
 8012598:	bd08      	pop	{r3, pc}
 801259a:	eeb0 0a68 	vmov.f32	s0, s17
 801259e:	f000 f825 	bl	80125ec <__fpclassifyf>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d0f4      	beq.n	8012590 <fmaxf+0x18>
 80125a6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80125aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ae:	dded      	ble.n	801258c <fmaxf+0x14>
 80125b0:	e7ee      	b.n	8012590 <fmaxf+0x18>

080125b2 <fminf>:
 80125b2:	b508      	push	{r3, lr}
 80125b4:	ed2d 8b02 	vpush	{d8}
 80125b8:	eeb0 8a40 	vmov.f32	s16, s0
 80125bc:	eef0 8a60 	vmov.f32	s17, s1
 80125c0:	f000 f814 	bl	80125ec <__fpclassifyf>
 80125c4:	b930      	cbnz	r0, 80125d4 <fminf+0x22>
 80125c6:	eeb0 8a68 	vmov.f32	s16, s17
 80125ca:	eeb0 0a48 	vmov.f32	s0, s16
 80125ce:	ecbd 8b02 	vpop	{d8}
 80125d2:	bd08      	pop	{r3, pc}
 80125d4:	eeb0 0a68 	vmov.f32	s0, s17
 80125d8:	f000 f808 	bl	80125ec <__fpclassifyf>
 80125dc:	2800      	cmp	r0, #0
 80125de:	d0f4      	beq.n	80125ca <fminf+0x18>
 80125e0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80125e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e8:	d5ed      	bpl.n	80125c6 <fminf+0x14>
 80125ea:	e7ee      	b.n	80125ca <fminf+0x18>

080125ec <__fpclassifyf>:
 80125ec:	ee10 3a10 	vmov	r3, s0
 80125f0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80125f4:	d00d      	beq.n	8012612 <__fpclassifyf+0x26>
 80125f6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80125fa:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80125fe:	d30a      	bcc.n	8012616 <__fpclassifyf+0x2a>
 8012600:	4b07      	ldr	r3, [pc, #28]	@ (8012620 <__fpclassifyf+0x34>)
 8012602:	1e42      	subs	r2, r0, #1
 8012604:	429a      	cmp	r2, r3
 8012606:	d908      	bls.n	801261a <__fpclassifyf+0x2e>
 8012608:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801260c:	4258      	negs	r0, r3
 801260e:	4158      	adcs	r0, r3
 8012610:	4770      	bx	lr
 8012612:	2002      	movs	r0, #2
 8012614:	4770      	bx	lr
 8012616:	2004      	movs	r0, #4
 8012618:	4770      	bx	lr
 801261a:	2003      	movs	r0, #3
 801261c:	4770      	bx	lr
 801261e:	bf00      	nop
 8012620:	007ffffe 	.word	0x007ffffe

08012624 <__ieee754_atan2f>:
 8012624:	ee10 2a90 	vmov	r2, s1
 8012628:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801262c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012630:	b510      	push	{r4, lr}
 8012632:	eef0 7a40 	vmov.f32	s15, s0
 8012636:	d806      	bhi.n	8012646 <__ieee754_atan2f+0x22>
 8012638:	ee10 0a10 	vmov	r0, s0
 801263c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8012640:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012644:	d904      	bls.n	8012650 <__ieee754_atan2f+0x2c>
 8012646:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801264a:	eeb0 0a67 	vmov.f32	s0, s15
 801264e:	bd10      	pop	{r4, pc}
 8012650:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012654:	d103      	bne.n	801265e <__ieee754_atan2f+0x3a>
 8012656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801265a:	f000 b883 	b.w	8012764 <atanf>
 801265e:	1794      	asrs	r4, r2, #30
 8012660:	f004 0402 	and.w	r4, r4, #2
 8012664:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012668:	b943      	cbnz	r3, 801267c <__ieee754_atan2f+0x58>
 801266a:	2c02      	cmp	r4, #2
 801266c:	d05e      	beq.n	801272c <__ieee754_atan2f+0x108>
 801266e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012740 <__ieee754_atan2f+0x11c>
 8012672:	2c03      	cmp	r4, #3
 8012674:	bf08      	it	eq
 8012676:	eef0 7a47 	vmoveq.f32	s15, s14
 801267a:	e7e6      	b.n	801264a <__ieee754_atan2f+0x26>
 801267c:	b941      	cbnz	r1, 8012690 <__ieee754_atan2f+0x6c>
 801267e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8012744 <__ieee754_atan2f+0x120>
 8012682:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012748 <__ieee754_atan2f+0x124>
 8012686:	2800      	cmp	r0, #0
 8012688:	bfa8      	it	ge
 801268a:	eef0 7a47 	vmovge.f32	s15, s14
 801268e:	e7dc      	b.n	801264a <__ieee754_atan2f+0x26>
 8012690:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012694:	d110      	bne.n	80126b8 <__ieee754_atan2f+0x94>
 8012696:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801269a:	f104 34ff 	add.w	r4, r4, #4294967295
 801269e:	d107      	bne.n	80126b0 <__ieee754_atan2f+0x8c>
 80126a0:	2c02      	cmp	r4, #2
 80126a2:	d846      	bhi.n	8012732 <__ieee754_atan2f+0x10e>
 80126a4:	4b29      	ldr	r3, [pc, #164]	@ (801274c <__ieee754_atan2f+0x128>)
 80126a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80126aa:	edd3 7a00 	vldr	s15, [r3]
 80126ae:	e7cc      	b.n	801264a <__ieee754_atan2f+0x26>
 80126b0:	2c02      	cmp	r4, #2
 80126b2:	d841      	bhi.n	8012738 <__ieee754_atan2f+0x114>
 80126b4:	4b26      	ldr	r3, [pc, #152]	@ (8012750 <__ieee754_atan2f+0x12c>)
 80126b6:	e7f6      	b.n	80126a6 <__ieee754_atan2f+0x82>
 80126b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80126bc:	d0df      	beq.n	801267e <__ieee754_atan2f+0x5a>
 80126be:	1a5b      	subs	r3, r3, r1
 80126c0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80126c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80126c8:	da1a      	bge.n	8012700 <__ieee754_atan2f+0xdc>
 80126ca:	2a00      	cmp	r2, #0
 80126cc:	da01      	bge.n	80126d2 <__ieee754_atan2f+0xae>
 80126ce:	313c      	adds	r1, #60	@ 0x3c
 80126d0:	db19      	blt.n	8012706 <__ieee754_atan2f+0xe2>
 80126d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80126d6:	f000 f919 	bl	801290c <fabsf>
 80126da:	f000 f843 	bl	8012764 <atanf>
 80126de:	eef0 7a40 	vmov.f32	s15, s0
 80126e2:	2c01      	cmp	r4, #1
 80126e4:	d012      	beq.n	801270c <__ieee754_atan2f+0xe8>
 80126e6:	2c02      	cmp	r4, #2
 80126e8:	d017      	beq.n	801271a <__ieee754_atan2f+0xf6>
 80126ea:	2c00      	cmp	r4, #0
 80126ec:	d0ad      	beq.n	801264a <__ieee754_atan2f+0x26>
 80126ee:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8012754 <__ieee754_atan2f+0x130>
 80126f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126f6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012758 <__ieee754_atan2f+0x134>
 80126fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126fe:	e7a4      	b.n	801264a <__ieee754_atan2f+0x26>
 8012700:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012748 <__ieee754_atan2f+0x124>
 8012704:	e7ed      	b.n	80126e2 <__ieee754_atan2f+0xbe>
 8012706:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801275c <__ieee754_atan2f+0x138>
 801270a:	e7ea      	b.n	80126e2 <__ieee754_atan2f+0xbe>
 801270c:	ee17 3a90 	vmov	r3, s15
 8012710:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012714:	ee07 3a90 	vmov	s15, r3
 8012718:	e797      	b.n	801264a <__ieee754_atan2f+0x26>
 801271a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012754 <__ieee754_atan2f+0x130>
 801271e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012722:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8012758 <__ieee754_atan2f+0x134>
 8012726:	ee77 7a67 	vsub.f32	s15, s14, s15
 801272a:	e78e      	b.n	801264a <__ieee754_atan2f+0x26>
 801272c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012758 <__ieee754_atan2f+0x134>
 8012730:	e78b      	b.n	801264a <__ieee754_atan2f+0x26>
 8012732:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8012760 <__ieee754_atan2f+0x13c>
 8012736:	e788      	b.n	801264a <__ieee754_atan2f+0x26>
 8012738:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801275c <__ieee754_atan2f+0x138>
 801273c:	e785      	b.n	801264a <__ieee754_atan2f+0x26>
 801273e:	bf00      	nop
 8012740:	c0490fdb 	.word	0xc0490fdb
 8012744:	bfc90fdb 	.word	0xbfc90fdb
 8012748:	3fc90fdb 	.word	0x3fc90fdb
 801274c:	08013860 	.word	0x08013860
 8012750:	08013854 	.word	0x08013854
 8012754:	33bbbd2e 	.word	0x33bbbd2e
 8012758:	40490fdb 	.word	0x40490fdb
 801275c:	00000000 	.word	0x00000000
 8012760:	3f490fdb 	.word	0x3f490fdb

08012764 <atanf>:
 8012764:	b538      	push	{r3, r4, r5, lr}
 8012766:	ee10 5a10 	vmov	r5, s0
 801276a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801276e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012772:	eef0 7a40 	vmov.f32	s15, s0
 8012776:	d310      	bcc.n	801279a <atanf+0x36>
 8012778:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801277c:	d904      	bls.n	8012788 <atanf+0x24>
 801277e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012782:	eeb0 0a67 	vmov.f32	s0, s15
 8012786:	bd38      	pop	{r3, r4, r5, pc}
 8012788:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80128c0 <atanf+0x15c>
 801278c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80128c4 <atanf+0x160>
 8012790:	2d00      	cmp	r5, #0
 8012792:	bfc8      	it	gt
 8012794:	eef0 7a47 	vmovgt.f32	s15, s14
 8012798:	e7f3      	b.n	8012782 <atanf+0x1e>
 801279a:	4b4b      	ldr	r3, [pc, #300]	@ (80128c8 <atanf+0x164>)
 801279c:	429c      	cmp	r4, r3
 801279e:	d810      	bhi.n	80127c2 <atanf+0x5e>
 80127a0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80127a4:	d20a      	bcs.n	80127bc <atanf+0x58>
 80127a6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80128cc <atanf+0x168>
 80127aa:	ee30 7a07 	vadd.f32	s14, s0, s14
 80127ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80127b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80127b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ba:	dce2      	bgt.n	8012782 <atanf+0x1e>
 80127bc:	f04f 33ff 	mov.w	r3, #4294967295
 80127c0:	e013      	b.n	80127ea <atanf+0x86>
 80127c2:	f000 f8a3 	bl	801290c <fabsf>
 80127c6:	4b42      	ldr	r3, [pc, #264]	@ (80128d0 <atanf+0x16c>)
 80127c8:	429c      	cmp	r4, r3
 80127ca:	d84f      	bhi.n	801286c <atanf+0x108>
 80127cc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80127d0:	429c      	cmp	r4, r3
 80127d2:	d841      	bhi.n	8012858 <atanf+0xf4>
 80127d4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80127d8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80127dc:	eea0 7a27 	vfma.f32	s14, s0, s15
 80127e0:	2300      	movs	r3, #0
 80127e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80127e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80127ea:	1c5a      	adds	r2, r3, #1
 80127ec:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80127f0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80128d4 <atanf+0x170>
 80127f4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80128d8 <atanf+0x174>
 80127f8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80128dc <atanf+0x178>
 80127fc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012800:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012804:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80128e0 <atanf+0x17c>
 8012808:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801280c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80128e4 <atanf+0x180>
 8012810:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012814:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80128e8 <atanf+0x184>
 8012818:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801281c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80128ec <atanf+0x188>
 8012820:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012824:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80128f0 <atanf+0x18c>
 8012828:	eea6 5a87 	vfma.f32	s10, s13, s14
 801282c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80128f4 <atanf+0x190>
 8012830:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012834:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80128f8 <atanf+0x194>
 8012838:	eea7 5a26 	vfma.f32	s10, s14, s13
 801283c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80128fc <atanf+0x198>
 8012840:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012844:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012848:	eea5 7a86 	vfma.f32	s14, s11, s12
 801284c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012850:	d121      	bne.n	8012896 <atanf+0x132>
 8012852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012856:	e794      	b.n	8012782 <atanf+0x1e>
 8012858:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801285c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012860:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012864:	2301      	movs	r3, #1
 8012866:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801286a:	e7be      	b.n	80127ea <atanf+0x86>
 801286c:	4b24      	ldr	r3, [pc, #144]	@ (8012900 <atanf+0x19c>)
 801286e:	429c      	cmp	r4, r3
 8012870:	d80b      	bhi.n	801288a <atanf+0x126>
 8012872:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801287a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801287e:	2302      	movs	r3, #2
 8012880:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012888:	e7af      	b.n	80127ea <atanf+0x86>
 801288a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801288e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012892:	2303      	movs	r3, #3
 8012894:	e7a9      	b.n	80127ea <atanf+0x86>
 8012896:	4a1b      	ldr	r2, [pc, #108]	@ (8012904 <atanf+0x1a0>)
 8012898:	491b      	ldr	r1, [pc, #108]	@ (8012908 <atanf+0x1a4>)
 801289a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801289e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80128a2:	edd3 6a00 	vldr	s13, [r3]
 80128a6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80128aa:	2d00      	cmp	r5, #0
 80128ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80128b0:	edd2 7a00 	vldr	s15, [r2]
 80128b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80128b8:	bfb8      	it	lt
 80128ba:	eef1 7a67 	vneglt.f32	s15, s15
 80128be:	e760      	b.n	8012782 <atanf+0x1e>
 80128c0:	bfc90fdb 	.word	0xbfc90fdb
 80128c4:	3fc90fdb 	.word	0x3fc90fdb
 80128c8:	3edfffff 	.word	0x3edfffff
 80128cc:	7149f2ca 	.word	0x7149f2ca
 80128d0:	3f97ffff 	.word	0x3f97ffff
 80128d4:	3c8569d7 	.word	0x3c8569d7
 80128d8:	3d4bda59 	.word	0x3d4bda59
 80128dc:	bd6ef16b 	.word	0xbd6ef16b
 80128e0:	3d886b35 	.word	0x3d886b35
 80128e4:	3dba2e6e 	.word	0x3dba2e6e
 80128e8:	3e124925 	.word	0x3e124925
 80128ec:	3eaaaaab 	.word	0x3eaaaaab
 80128f0:	bd15a221 	.word	0xbd15a221
 80128f4:	bd9d8795 	.word	0xbd9d8795
 80128f8:	bde38e38 	.word	0xbde38e38
 80128fc:	be4ccccd 	.word	0xbe4ccccd
 8012900:	401bffff 	.word	0x401bffff
 8012904:	0801387c 	.word	0x0801387c
 8012908:	0801386c 	.word	0x0801386c

0801290c <fabsf>:
 801290c:	ee10 3a10 	vmov	r3, s0
 8012910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012914:	ee00 3a10 	vmov	s0, r3
 8012918:	4770      	bx	lr
	...

0801291c <_init>:
 801291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801291e:	bf00      	nop
 8012920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012922:	bc08      	pop	{r3}
 8012924:	469e      	mov	lr, r3
 8012926:	4770      	bx	lr

08012928 <_fini>:
 8012928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801292a:	bf00      	nop
 801292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801292e:	bc08      	pop	{r3}
 8012930:	469e      	mov	lr, r3
 8012932:	4770      	bx	lr
